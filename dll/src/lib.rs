//! WARNING: autogenerated code for azul api version 1.0.0-alpha1

#![deny(improper_ctypes_definitions)]

#[macro_use]
extern crate alloc;
extern crate azul_core;

#[cfg(not(target_arch = "wasm32"))]
pub mod desktop;
#[cfg(target_arch = "wasm32")]
pub mod web;

pub mod extra;
pub mod str;

pub mod azul_impl {
    #[cfg(target_arch = "wasm32")]
    pub use self::web::*;
    #[cfg(not(target_arch = "wasm32"))]
    pub use super::desktop::*;
}

use core::ffi::c_void;
#[cfg(all(
    feature = "python-extension",
    feature = "link-dynamic",
    not(feature = "link-static")
))]
pub mod python;
pub mod widgets;

pub use AzAppTT as AzApp;

/// Main application class
pub use crate::azul_impl::app::AzAppPtr as AzAppTT;
/// Creates a new App instance from the given `AppConfig`
#[no_mangle]
pub extern "C" fn AzApp_new(data: AzRefAny, config: AzAppConfig) -> AzApp {
    crate::azul_impl::app::AzAppPtr::new(data, config)
}
/// Spawn a new window on the screen when the app is run.
#[no_mangle]
pub extern "C" fn AzApp_addWindow(app: &mut AzApp, window: AzWindowCreateOptions) {
    app.add_window(window)
}
/// Adds a new image identified by an ID to the image cache
#[no_mangle]
pub extern "C" fn AzApp_addImage(app: &mut AzApp, id: AzString, image: AzImageRef) {
    app.add_image(id, image)
}
/// Returns a list of monitors - useful for setting the monitor that a window should spawn on.
#[no_mangle]
pub extern "C" fn AzApp_getMonitors(app: &AzApp) -> AzMonitorVec {
    app.get_monitors()
}
/// Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this
/// function never returns.
#[no_mangle]
pub extern "C" fn AzApp_run(app: &AzApp, window: AzWindowCreateOptions) {
    app.run(window)
}
/// Destructor: Takes ownership of the `App` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzApp_delete(object: &mut AzApp) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzApp_deepCopy(object: &AzApp) -> AzApp {
    object.clone()
}

/// Configuration for optional features, such as whether to enable logging or panic hooks
pub use azul_core::resources::AppConfig as AzAppConfigTT;
pub use AzAppConfigTT as AzAppConfig;
/// Constructs a default `AppConfig`
#[no_mangle]
pub extern "C" fn AzAppConfig_new() -> AzAppConfig {
    AzAppConfig::new()
}

/// Represents the log level of the application (Off, Info, Warn, Error, Trace or Debug).
pub use azul_core::resources::AppLogLevel as AzAppLogLevelTT;
/// External system callbacks to get the system time or create / manage threads
pub use azul_core::task::ExternalSystemCallbacks as AzSystemCallbacksTT;
pub use AzAppLogLevelTT as AzAppLogLevel;
pub use AzSystemCallbacksTT as AzSystemCallbacks;
/// Use the default, library-internal callbacks instead of providing your own
#[no_mangle]
pub extern "C" fn AzSystemCallbacks_libraryInternal() -> AzSystemCallbacks {
    AzSystemCallbacks::rust_internal()
}

/// Options on how to initially create the window
pub use azul_layout::window::WindowCreateOptions as AzWindowCreateOptionsTT;
pub use AzWindowCreateOptionsTT as AzWindowCreateOptions;
/// Creates a new window configuration with a custom layout callback
#[no_mangle]
pub extern "C" fn AzWindowCreateOptions_new(
    layout_callback: AzLayoutCallbackType,
) -> AzWindowCreateOptions {
    AzWindowCreateOptions::new(layout_callback)
}
/// Destructor: Takes ownership of the `WindowCreateOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzWindowCreateOptions_delete(object: &mut AzWindowCreateOptions) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Offset in physical pixels (integer units)
pub use azul_core::geom::LayoutPoint as AzLayoutPointTT;
/// Represents a rectangle in physical pixels (integer units)
pub use azul_core::geom::LayoutRect as AzLayoutRectTT;
/// Size in physical pixels (integer units)
pub use azul_core::geom::LayoutSize as AzLayoutSizeTT;
/// Logical position (can differ based on HiDPI settings). Usually this is what you'd want for
/// hit-testing and positioning elements.
pub use azul_core::geom::LogicalPosition as AzLogicalPositionTT;
/// Logical rectangle area (can differ based on HiDPI settings). Usually this is what you'd
/// want for hit-testing and positioning elements.
pub use azul_core::geom::LogicalRect as AzLogicalRectTT;
/// Re-export of rust-allocated (stack based) `AndroidHandle` struct
pub use azul_core::window::AndroidHandle as AzAndroidHandleTT;
/// Does the renderer render using hardware acceleration? By default, azul tries to set it to
/// `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly
pub use azul_core::window::HwAcceleration as AzHwAccelerationTT;
/// Re-export of rust-allocated (stack based) `IOSHandle` struct
pub use azul_core::window::IOSHandle as AzIOSHandleTT;
/// Re-export of rust-allocated (stack based) `MacOSHandle` struct
pub use azul_core::window::MacOSHandle as AzMacOSHandleTT;
/// Same as `LayoutPoint`, but uses `i32` instead of `isize`
pub use azul_core::window::PhysicalPositionI32 as AzPhysicalPositionI32TT;
/// Same as `LayoutPoint`, but uses `u32` instead of `isize`
pub use azul_core::window::PhysicalSizeU32 as AzPhysicalSizeU32TT;
/// Raw platform handle, for integration in / with other toolkits and custom non-azul window
/// extensions
pub use azul_core::window::RawWindowHandle as AzRawWindowHandleTT;
/// Force a specific renderer: note that azul will **crash** on startup if the
/// `RendererOptions` are not satisfied.
pub use azul_core::window::RendererOptions as AzRendererOptionsTT;
/// Does the renderer render in SRGB color space? By default, azul tries to set it to `Enabled`
/// and falls back to `Disabled` if the OpenGL context can't be initialized properly
pub use azul_core::window::Srgb as AzSrgbTT;
/// Whether the renderer has VSync enabled
pub use azul_core::window::Vsync as AzVsyncTT;
/// Re-export of rust-allocated (stack based) `WaylandHandle` struct
pub use azul_core::window::WaylandHandle as AzWaylandHandleTT;
/// Re-export of rust-allocated (stack based) `WebHandle` struct
pub use azul_core::window::WebHandle as AzWebHandleTT;
/// Re-export of rust-allocated (stack based) `WindowsHandle` struct
pub use azul_core::window::WindowsHandle as AzWindowsHandleTT;
/// X11 window hint: Type of window
pub use azul_core::window::XWindowType as AzXWindowTypeTT;
/// Re-export of rust-allocated (stack based) `XcbHandle` struct
pub use azul_core::window::XcbHandle as AzXcbHandleTT;
/// Re-export of rust-allocated (stack based) `XlibHandle` struct
pub use azul_core::window::XlibHandle as AzXlibHandleTT;
pub use AzAndroidHandleTT as AzAndroidHandle;
pub use AzHwAccelerationTT as AzHwAcceleration;
pub use AzIOSHandleTT as AzIOSHandle;
pub use AzLayoutPointTT as AzLayoutPoint;
pub use AzLayoutRectTT as AzLayoutRect;
pub use AzLayoutSizeTT as AzLayoutSize;
pub use AzLogicalPositionTT as AzLogicalPosition;
pub use AzLogicalRectTT as AzLogicalRect;
pub use AzMacOSHandleTT as AzMacOSHandle;
pub use AzPhysicalPositionI32TT as AzPhysicalPositionI32;
pub use AzPhysicalSizeU32TT as AzPhysicalSizeU32;
pub use AzRawWindowHandleTT as AzRawWindowHandle;
pub use AzRendererOptionsTT as AzRendererOptions;
pub use AzSrgbTT as AzSrgb;
pub use AzVsyncTT as AzVsync;
pub use AzWaylandHandleTT as AzWaylandHandle;
pub use AzWebHandleTT as AzWebHandle;
pub use AzWindowsHandleTT as AzWindowsHandle;
pub use AzXWindowTypeTT as AzXWindowType;
pub use AzXcbHandleTT as AzXcbHandle;
pub use AzXlibHandleTT as AzXlibHandle;
/// Creates a new `LogicalPosition` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `LogicalPosition::new()` constructor.
#[no_mangle]
pub extern "C" fn AzLogicalPosition_new(x: f32, y: f32) -> AzLogicalPosition {
    AzLogicalPosition::new(x, y)
}
/// Creates a new `LogicalPosition` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `LogicalPosition::zero()` constructor.
#[no_mangle]
pub extern "C" fn AzLogicalPosition_zero() -> AzLogicalPosition {
    AzLogicalPosition::zero()
}

/// A size in "logical" (non-HiDPI-adjusted) pixels in floating-point units
pub use azul_core::geom::LogicalSize as AzLogicalSizeTT;
pub use AzLogicalSizeTT as AzLogicalSize;
/// Equivalent to the Rust `LogicalSize::to_physical()` function.
#[no_mangle]
pub extern "C" fn AzLogicalSize_toPhysical(
    logicalsize: &AzLogicalSize,
    hidpi_factor: f32,
) -> AzPhysicalSizeU32 {
    logicalsize.to_physical(hidpi_factor)
}

/// Unique hash of a window icon, so that azul does not have to compare the actual bytes to see
/// wether the window icon has changed.
pub use azul_core::window::IconKey as AzIconKeyTT;
/// Small (16x16x4) window icon, usually shown in the window titlebar
pub use azul_core::window::SmallWindowIconBytes as AzSmallWindowIconBytesTT;
pub use AzIconKeyTT as AzIconKey;
pub use AzSmallWindowIconBytesTT as AzSmallWindowIconBytes;
/// Destructor: Takes ownership of the `SmallWindowIconBytes` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSmallWindowIconBytes_delete(object: &mut AzSmallWindowIconBytes) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Large (32x32x4) window icon, usually used on high-resolution displays (instead of
/// `SmallWindowIcon`)
pub use azul_core::window::LargeWindowIconBytes as AzLargeWindowIconBytesTT;
pub use AzLargeWindowIconBytesTT as AzLargeWindowIconBytes;
/// Destructor: Takes ownership of the `LargeWindowIconBytes` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLargeWindowIconBytes_delete(object: &mut AzLargeWindowIconBytes) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Window "favicon", usually shown in the top left of the window on Windows
pub use azul_core::window::WindowIcon as AzWindowIconTT;
pub use AzWindowIconTT as AzWindowIcon;
/// Destructor: Takes ownership of the `WindowIcon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzWindowIcon_delete(object: &mut AzWindowIcon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Application taskbar icon, 256x256x4 bytes in size
pub use azul_core::window::TaskBarIcon as AzTaskBarIconTT;
pub use AzTaskBarIconTT as AzTaskBarIcon;
/// Destructor: Takes ownership of the `TaskBarIcon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTaskBarIcon_delete(object: &mut AzTaskBarIcon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Symbolic accelerator key (ctrl, alt, shift)
pub use azul_core::window::AcceleratorKey as AzAcceleratorKeyTT;
/// Symbolic name for a keyboard key, does **not** take the keyboard locale into account
pub use azul_core::window::VirtualKeyCode as AzVirtualKeyCodeTT;
/// Minimum / maximum / current size of the window in logical dimensions
pub use azul_core::window::WindowSize as AzWindowSizeTT;
pub use AzAcceleratorKeyTT as AzAcceleratorKey;
pub use AzVirtualKeyCodeTT as AzVirtualKeyCode;
pub use AzWindowSizeTT as AzWindowSize;
/// Returns the hidpi factor of the bounds
#[no_mangle]
pub extern "C" fn AzWindowSize_getHidpiFactor(windowsize: &AzWindowSize) -> f32 {
    windowsize.get_hidpi_factor()
}

/// Debugging information, will be rendered as an overlay on top of the UI
pub use azul_core::window::DebugState as AzDebugStateTT;
/// Current keyboard state, stores what keys / characters have been pressed
pub use azul_core::window::KeyboardState as AzKeyboardStateTT;
/// Boolean flags relating to the current window state
pub use azul_core::window::WindowFlags as AzWindowFlagsTT;
/// State of the window frame (minimized, maximized, fullscreen or normal window)
pub use azul_core::window::WindowFrame as AzWindowFrameTT;
pub use AzDebugStateTT as AzDebugState;
pub use AzKeyboardStateTT as AzKeyboardState;
pub use AzWindowFlagsTT as AzWindowFlags;
pub use AzWindowFrameTT as AzWindowFrame;
/// Returns if the `SHIFT` key is held down (left OR right shift)
#[no_mangle]
pub extern "C" fn AzKeyboardState_shiftDown(keyboardstate: &AzKeyboardState) -> bool {
    keyboardstate.shift_down()
}
/// Returns if the `CTRL` key is held down
#[no_mangle]
pub extern "C" fn AzKeyboardState_ctrlDown(keyboardstate: &AzKeyboardState) -> bool {
    keyboardstate.ctrl_down()
}
/// Returns if the `ALT` key is held down
#[no_mangle]
pub extern "C" fn AzKeyboardState_altDown(keyboardstate: &AzKeyboardState) -> bool {
    keyboardstate.alt_down()
}
/// Returns if the `SUPER` ("Windows") key is held down
#[no_mangle]
pub extern "C" fn AzKeyboardState_superDown(keyboardstate: &AzKeyboardState) -> bool {
    keyboardstate.super_down()
}
/// Returns if a key is held down
#[no_mangle]
pub extern "C" fn AzKeyboardState_isKeyDown(
    keyboardstate: &AzKeyboardState,
    key: AzVirtualKeyCode,
) -> bool {
    keyboardstate.is_key_down(key)
}
/// Destructor: Takes ownership of the `KeyboardState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzKeyboardState_delete(object: &mut AzKeyboardState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Current position of the mouse cursor, relative to the window. Set to `Uninitialized` on
/// startup (gets initialized on the first frame).
pub use azul_core::window::CursorPosition as AzCursorPositionTT;
/// Current icon of the mouse cursor
pub use azul_core::window::MouseCursorType as AzMouseCursorTypeTT;
pub use AzCursorPositionTT as AzCursorPosition;
pub use AzMouseCursorTypeTT as AzMouseCursorType;
/// Equivalent to the Rust `CursorPosition::get_position()` function.
#[no_mangle]
pub extern "C" fn AzCursorPosition_getPosition(
    cursorposition: &AzCursorPosition,
) -> AzOptionLogicalPosition {
    cursorposition.get_position().into()
}

/// Current mouse / cursor state
pub use azul_core::window::MouseState as AzMouseStateTT;
/// Platform-specific window configuration, i.e. WM options that are not cross-platform
pub use azul_core::window::PlatformSpecificOptions as AzPlatformSpecificOptionsTT;
pub use AzMouseStateTT as AzMouseState;
pub use AzPlatformSpecificOptionsTT as AzPlatformSpecificOptions;
/// Destructor: Takes ownership of the `PlatformSpecificOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzPlatformSpecificOptions_delete(object: &mut AzPlatformSpecificOptions) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Window configuration specific to Win32
pub use azul_core::window::WindowsWindowOptions as AzWindowsWindowOptionsTT;
pub use AzWindowsWindowOptionsTT as AzWindowsWindowOptions;
/// Destructor: Takes ownership of the `WindowsWindowOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzWindowsWindowOptions_delete(object: &mut AzWindowsWindowOptions) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// CSD theme of the window title / button controls
pub use azul_core::window::WaylandTheme as AzWaylandThemeTT;
pub use AzWaylandThemeTT as AzWaylandTheme;
/// Destructor: Takes ownership of the `WaylandTheme` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzWaylandTheme_delete(object: &mut AzWaylandTheme) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Key-value pair, used for setting WM hints values specific to GNOME
pub use azul_core::window::AzStringPair as AzStringPairTT;
/// Renderer type of the current windows OpenGL context
pub use azul_core::window::RendererType as AzRendererTypeTT;
pub use AzRendererTypeTT as AzRendererType;
pub use AzStringPairTT as AzStringPair;
/// Destructor: Takes ownership of the `StringPair` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStringPair_delete(object: &mut AzStringPair) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
pub use azul_core::window::LinuxWindowOptions as AzLinuxWindowOptionsTT;
pub use AzLinuxWindowOptionsTT as AzLinuxWindowOptions;
/// Destructor: Takes ownership of the `LinuxWindowOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLinuxWindowOptions_delete(object: &mut AzLinuxWindowOptions) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `FullScreenMode` struct
pub use azul_core::window::FullScreenMode as AzFullScreenModeTT;
/// Position of the virtual keyboard necessary to insert CJK characters
pub use azul_core::window::ImePosition as AzImePositionTT;
/// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
pub use azul_core::window::MacWindowOptions as AzMacWindowOptionsTT;
/// Information about a single (or many) monitors, useful for dock widgets
pub use azul_core::window::Monitor as AzMonitorTT;
/// Current state of touch devices / touch inputs
pub use azul_core::window::TouchState as AzTouchStateTT;
/// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
pub use azul_core::window::WasmWindowOptions as AzWasmWindowOptionsTT;
/// Position of the top left corner of the window relative to the top left of the monitor
pub use azul_core::window::WindowPosition as AzWindowPositionTT;
/// Window theme, set by the operating system or `WindowCreateOptions.theme` on startup
pub use azul_core::window::WindowTheme as AzWindowThemeTT;
pub use AzFullScreenModeTT as AzFullScreenMode;
pub use AzImePositionTT as AzImePosition;
pub use AzMacWindowOptionsTT as AzMacWindowOptions;
pub use AzMonitorTT as AzMonitor;
pub use AzTouchStateTT as AzTouchState;
pub use AzWasmWindowOptionsTT as AzWasmWindowOptions;
pub use AzWindowPositionTT as AzWindowPosition;
pub use AzWindowThemeTT as AzWindowTheme;
/// Destructor: Takes ownership of the `Monitor` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMonitor_delete(object: &mut AzMonitor) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Describes a rendering configuration for a monitor
pub use azul_core::window::VideoMode as AzVideoModeTT;
/// Re-export of rust-allocated (stack based) `WindowState` struct
pub use azul_core::window::WindowState as AzWindowStateTT;
pub use AzVideoModeTT as AzVideoMode;
pub use AzWindowStateTT as AzWindowState;
/// Creates a new WindowState with default settings and a custom layout callback
#[no_mangle]
pub extern "C" fn AzWindowState_new(layout_callback: AzLayoutCallbackType) -> AzWindowState {
    AzWindowState::new(layout_callback)
}
/// Creates a default WindowState with an empty layout callback - useful only if you use the Rust
/// `WindowState { .. WindowState::default() }` intialization syntax.
#[no_mangle]
pub extern "C" fn AzWindowState_default() -> AzWindowState {
    AzWindowState::default()
}
/// Destructor: Takes ownership of the `WindowState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzWindowState_delete(object: &mut AzWindowState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `LayoutCallback` struct
pub use azul_core::callbacks::LayoutCallback as AzLayoutCallbackTT;
pub use AzLayoutCallbackTT as AzLayoutCallback;
/// Destructor: Takes ownership of the `LayoutCallback` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLayoutCallback_delete(object: &mut AzLayoutCallback) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// C-ABI stable wrapper over a `MarshaledLayoutCallback`
pub use azul_core::callbacks::MarshaledLayoutCallback as AzMarshaledLayoutCallbackTT;
pub use AzMarshaledLayoutCallbackTT as AzMarshaledLayoutCallback;
/// Destructor: Takes ownership of the `MarshaledLayoutCallback` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMarshaledLayoutCallback_delete(object: &mut AzMarshaledLayoutCallback) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// C-ABI stable wrapper over a `MarshaledLayoutCallbackInner`
pub use azul_core::callbacks::MarshaledLayoutCallbackInner as AzMarshaledLayoutCallbackInnerTT;
pub use AzMarshaledLayoutCallbackInnerTT as AzMarshaledLayoutCallbackInner;

pub type AzMarshaledLayoutCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzLayoutCallbackInfo) -> AzStyledDom;
/// C-ABI stable wrapper over a `LayoutCallbackType`
pub use azul_core::callbacks::LayoutCallbackInner as AzLayoutCallbackInnerTT;
pub use AzLayoutCallbackInnerTT as AzLayoutCallbackInner;

pub type AzLayoutCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzLayoutCallbackInfo) -> AzStyledDom;
/// C-ABI stable wrapper over a `CallbackType`
pub use azul_core::callbacks::Callback as AzCallbackTT;
pub use AzCallbackTT as AzCallback;

pub type AzCallbackType = extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo) -> AzUpdate;
/// Re-export of rust-allocated (stack based) `CallbackInfo` struct
pub use azul_layout::callbacks::CallbackInfo as AzCallbackInfoTT;
pub use AzCallbackInfoTT as AzCallbackInfo;
/// Returns the `DomNodeId` of the element that the callback was attached to.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getHitNode(callbackinfo: &AzCallbackInfo) -> AzDomNodeId {
    callbackinfo.get_hit_node()
}
/// Returns the function pointer necessary to query the current time.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getSystemTimeFn(
    callbackinfo: &AzCallbackInfo,
) -> AzGetSystemTimeFn {
    callbackinfo.get_system_time_fn()
}
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`).
/// Set to `None` if the cursor is not in the current window.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getCursorRelativeToViewport(
    callbackinfo: &AzCallbackInfo,
) -> AzOptionLogicalPosition {
    callbackinfo.get_cursor_relative_to_viewport()
}
/// Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`).
/// Set to `None` if the cursor is not hovering over the current node.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getCursorRelativeToNode(
    callbackinfo: &AzCallbackInfo,
) -> AzOptionLogicalPosition {
    callbackinfo.get_cursor_relative_to_node()
}
/// Returns a copy of the current windows `WindowState`.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getCurrentWindowState(
    callbackinfo: &AzCallbackInfo,
) -> AzWindowState {
    callbackinfo.get_current_window_state()
}
/// Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getCurrentKeyboardState(
    callbackinfo: &AzCallbackInfo,
) -> AzKeyboardState {
    callbackinfo.get_current_keyboard_state()
}
/// Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getCurrentMouseState(
    callbackinfo: &AzCallbackInfo,
) -> AzMouseState {
    callbackinfo.get_current_mouse_state()
}
/// Returns a copy of the current windows `WindowState`.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getPreviousWindowState(
    callbackinfo: &AzCallbackInfo,
) -> AzOptionWindowState {
    callbackinfo.get_previous_window_state().into()
}
/// Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getPreviousKeyboardState(
    callbackinfo: &AzCallbackInfo,
) -> AzOptionKeyboardState {
    callbackinfo.get_previous_keyboard_state().into()
}
/// Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getPreviousMouseState(
    callbackinfo: &AzCallbackInfo,
) -> AzOptionMouseState {
    callbackinfo.get_previous_mouse_state().into()
}
/// Returns a copy of the current windows `RawWindowHandle`.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getCurrentWindowHandle(
    callbackinfo: &AzCallbackInfo,
) -> AzRawWindowHandle {
    callbackinfo.get_current_window_handle()
}
/// Returns a **reference-counted copy** of the current windows' `Gl` (context). You can use this to
/// render OpenGL textures.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getGlContext(callbackinfo: &AzCallbackInfo) -> AzOptionGl {
    callbackinfo.get_gl_context()
}
/// Returns the x / y offset that this node has been scrolled to by the user or `None` if the node
/// has not been scrolled.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getScrollPosition(
    callbackinfo: &AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionLogicalPosition {
    callbackinfo.get_scroll_position(node_id).into()
}
/// Returns the `dataset` property of the given Node or `None` if the node doesn't have a `dataset`
/// property.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getDataset(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionRefAny {
    callbackinfo.get_dataset(node_id).into()
}
/// Given a dataset, returns the node ID of the "root" `RefAny`, i.e. the `RefAny` with the lowest
/// `instance` count that is set as a `dataset` on any node.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getNodeIdOfRootDataset(
    callbackinfo: &mut AzCallbackInfo,
    dataset: AzRefAny,
) -> AzOptionDomNodeId {
    callbackinfo.get_node_id_of_root_dataset(dataset).into()
}
/// If the node is a `Text` node, returns a copy of the internal string contents.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getStringContents(
    callbackinfo: &AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionString {
    callbackinfo.get_string_contents(node_id).into()
}
/// If the node is a `Text` node, returns the layouted inline glyphs of the text currently rendered
/// on the screen
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getInlineText(
    callbackinfo: &AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionInlineText {
    callbackinfo.get_inline_text(node_id).into()
}
/// If the node is a `Text` node, returns the `FontRef` that was used to render this node. Useful
/// for getting font metrics for a text string
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getFontRef(
    callbackinfo: &AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionFontRef {
    callbackinfo.get_font_ref(node_id).into()
}
/// Equivalent to the Rust `CallbackInfo::get_text_layout_options()` function.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getTextLayoutOptions(
    callbackinfo: &AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionResolvedTextLayoutOptions {
    callbackinfo.get_text_layout_options(node_id).into()
}
/// Similar to `get_inline_text()`: If the node is a `Text` node, shape the `text` string with the
/// same parameters as the current text and return the calculated InlineTextLayout. Necessary to
/// calculate text cursor offsets and to detect when a line overflows content.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_shapeText(
    callbackinfo: &AzCallbackInfo,
    node_id: AzDomNodeId,
    text: AzString,
) -> AzOptionInlineText {
    azul_layout::callback_info_shape_text(callbackinfo, node_id, text).into()
}
/// Returns the index of the node relative to the parent node.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getIndexInParent(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> usize {
    let mut t = 0;
    let mut n = node_id;
    while let Some(prev) = callbackinfo.get_previous_sibling(n) {
        n = prev;
        t += 1;
    }
    t
}
/// Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getParent(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    callbackinfo.get_parent(node_id).into()
}
/// Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getPreviousSibling(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    callbackinfo.get_previous_sibling(node_id).into()
}
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getNextSibling(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    callbackinfo.get_next_sibling(node_id).into()
}
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getFirstChild(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    callbackinfo.get_first_child(node_id).into()
}
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getLastChild(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    callbackinfo.get_last_child(node_id).into()
}
/// Returns the position of a given DOM node in the UI
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getNodePosition(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionPositionInfo {
    callbackinfo.get_node_position(node_id).into()
}
/// Returns the size of a given DOM node in the UI
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getNodeSize(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionLogicalSize {
    callbackinfo.get_node_size(node_id).into()
}
/// Returns the current computed CSS property of a given DOM node in the UI
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getComputedCssProperty(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
    property_type: AzCssPropertyType,
) -> AzOptionCssProperty {
    callbackinfo
        .get_computed_css_property(node_id, property_type)
        .into()
}
/// Sets the new `WindowState` for the next frame. The window is updated after all callbacks are
/// run.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_setWindowState(
    callbackinfo: &mut AzCallbackInfo,
    new_state: AzWindowState,
) {
    callbackinfo.set_window_state(new_state);
}
/// Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and
/// `On::FocusReceived` event, if the focused node has changed.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_setFocus(
    callbackinfo: &mut AzCallbackInfo,
    target: AzFocusTarget,
) {
    callbackinfo.set_focus(target);
}
/// Sets a `CssProperty` on a given node to its new value. If this property change affects the
/// layout, this will automatically trigger a relayout and redraw of the screen.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_setCssProperty(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
    new_property: AzCssProperty,
) {
    callbackinfo.set_css_property(node_id, new_property);
}
/// Sets the scroll position of the node
#[no_mangle]
pub extern "C" fn AzCallbackInfo_setScrollPosition(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
    scroll_position: AzLogicalPosition,
) {
    callbackinfo.set_scroll_position(node_id, scroll_position)
}
/// If the node is a `Text` node, overwrites the `Text` content with the new string, without
/// requiring the entire UI to be rebuilt.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_setStringContents(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
    string: AzString,
) {
    callbackinfo.set_string_contents(node_id, string)
}
/// Adds a new image identified by an ID to the image cache
#[no_mangle]
pub extern "C" fn AzCallbackInfo_addImage(
    callbackinfo: &mut AzCallbackInfo,
    id: AzString,
    image: AzImageRef,
) {
    callbackinfo.add_image(id, image)
}
/// Returns whether an image with a given CSS ID already exists
#[no_mangle]
pub extern "C" fn AzCallbackInfo_hasImage(callbackinfo: &AzCallbackInfo, id: AzString) -> bool {
    callbackinfo.has_image(&id)
}
/// Returns the image with a given CSS ID
#[no_mangle]
pub extern "C" fn AzCallbackInfo_getImage(
    callbackinfo: &AzCallbackInfo,
    id: AzString,
) -> AzOptionImageRef {
    callbackinfo.get_image(&id).into()
}
/// If the node is an `Image`, exchanges the current image with a new source
#[no_mangle]
pub extern "C" fn AzCallbackInfo_updateImage(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
    new_image: AzImageRef,
    image_type: AzUpdateImageType,
) {
    callbackinfo.update_image(node_id, new_image, image_type)
}
/// Deletes an image identified by a CSS ID from the image cache
#[no_mangle]
pub extern "C" fn AzCallbackInfo_deleteImage(callbackinfo: &mut AzCallbackInfo, id: AzString) {
    callbackinfo.delete_image(&id)
}
/// If the node has an `ImageMask`, exchanges the current mask for the new mask
#[no_mangle]
pub extern "C" fn AzCallbackInfo_updateImageMask(
    callbackinfo: &mut AzCallbackInfo,
    node_id: AzDomNodeId,
    new_mask: AzImageMask,
) {
    callbackinfo.update_image_mask(node_id, new_mask)
}
/// Stops the propagation of the current callback event type to the parent. Events are bubbled from
/// the inside out (children first, then parents), this event stops the propagation of the event to
/// the parent.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_stopPropagation(callbackinfo: &mut AzCallbackInfo) {
    callbackinfo.stop_propagation();
}
/// Spawns a new window with the given `WindowCreateOptions`.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_createWindow(
    callbackinfo: &mut AzCallbackInfo,
    new_window: AzWindowCreateOptions,
) {
    callbackinfo.create_window(new_window);
}
/// Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_startTimer(
    callbackinfo: &mut AzCallbackInfo,
    timer: AzTimer,
) -> AzTimerId {
    callbackinfo.start_timer(timer)
}
/// Starts an animation timer on a give NodeId - same as a `Timer`, but uses a pre-configured
/// interpolation function to drive the animation timer
#[no_mangle]
pub extern "C" fn AzCallbackInfo_startAnimation(
    callbackinfo: &mut AzCallbackInfo,
    node: AzDomNodeId,
    animation: AzAnimation,
) -> AzOptionTimerId {
    callbackinfo.start_animation(node, animation).into()
}
/// Stops / cancels a `Timer`. See the documentation for `Timer` for more information.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_stopTimer(
    callbackinfo: &mut AzCallbackInfo,
    timer_id: AzTimerId,
) -> bool {
    callbackinfo.stop_timer(timer_id)
}
/// Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_startThread(
    callbackinfo: &mut AzCallbackInfo,
    thread_initialize_data: AzRefAny,
    writeback_data: AzRefAny,
    callback: AzThreadCallbackType,
) -> AzOptionThreadId {
    callbackinfo
        .start_thread(thread_initialize_data, writeback_data, callback)
        .into()
}
/// Sends a message to a background thread
#[no_mangle]
pub extern "C" fn AzCallbackInfo_sendThreadMsg(
    callbackinfo: &mut AzCallbackInfo,
    thread_id: AzThreadId,
    msg: AzThreadSendMsg,
) -> bool {
    callbackinfo.send_thread_msg(thread_id, msg)
}
/// Stops a thread at the nearest possible opportunity. Sends a `ThreadSendMsg::TerminateThread`
/// message to the thread and joins the thread.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_stopThread(
    callbackinfo: &mut AzCallbackInfo,
    thread_id: AzThreadId,
) -> bool {
    callbackinfo.stop_thread(thread_id)
}
/// Destructor: Takes ownership of the `CallbackInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCallbackInfo_delete(object: &mut AzCallbackInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Combination of node ID + DOM ID, both together can identify a node
pub use azul_core::callbacks::DomNodeId as AzDomNodeIdTT;
/// Specifies if the screen should be updated after the callback function has returned
pub use azul_core::callbacks::Update as AzUpdateTT;
/// Which type of image should be updated: background image (the CSS background) or content
/// image (the <img src=""> content)
pub use azul_core::callbacks::UpdateImageType as AzUpdateImageTypeTT;
/// ID of a DOM - one window can contain multiple, nested DOMs (such as iframes)
pub use azul_core::styled_dom::DomId as AzDomIdTT;
/// Index of a Node in the internal `NodeDataContainer`
pub use azul_core::styled_dom::NodeHierarchyItemId as AzNodeIdTT;
/// Re-export of rust-allocated (stack based) `PositionInfo` struct
pub use azul_core::ui_solver::PositionInfo as AzPositionInfoTT;
pub use AzDomIdTT as AzDomId;
pub use AzDomNodeIdTT as AzDomNodeId;
pub use AzNodeIdTT as AzNodeId;
pub use AzPositionInfoTT as AzPositionInfo;
pub use AzUpdateImageTypeTT as AzUpdateImageType;
pub use AzUpdateTT as AzUpdate;
/// Equivalent to the Rust `PositionInfo::is_positioned()` function.
#[no_mangle]
pub extern "C" fn AzPositionInfo_isPositioned(positioninfo: &AzPositionInfo) -> bool {
    positioninfo.is_positioned()
}
/// Equivalent to the Rust `PositionInfo::get_static_offset()` function.
#[no_mangle]
pub extern "C" fn AzPositionInfo_getStaticOffset(
    positioninfo: &AzPositionInfo,
) -> AzLogicalPosition {
    positioninfo.get_static_offset()
}
/// Equivalent to the Rust `PositionInfo::get_relative_offset()` function.
#[no_mangle]
pub extern "C" fn AzPositionInfo_getRelativeOffset(
    positioninfo: &AzPositionInfo,
) -> AzLogicalPosition {
    positioninfo.get_relative_offset()
}

/// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
pub use azul_core::callbacks::HidpiAdjustedBounds as AzHidpiAdjustedBoundsTT;
/// Re-export of rust-allocated (stack based) `PositionInfoInner` struct
pub use azul_core::ui_solver::PositionInfoInner as AzPositionInfoInnerTT;
pub use AzHidpiAdjustedBoundsTT as AzHidpiAdjustedBounds;
pub use AzPositionInfoInnerTT as AzPositionInfoInner;
/// Returns the size of the bounds in logical units
#[no_mangle]
pub extern "C" fn AzHidpiAdjustedBounds_getLogicalSize(
    hidpiadjustedbounds: &AzHidpiAdjustedBounds,
) -> AzLogicalSize {
    hidpiadjustedbounds.get_logical_size()
}
/// Returns the size of the bounds in physical units
#[no_mangle]
pub extern "C" fn AzHidpiAdjustedBounds_getPhysicalSize(
    hidpiadjustedbounds: &AzHidpiAdjustedBounds,
) -> AzPhysicalSizeU32 {
    hidpiadjustedbounds.get_physical_size()
}
/// Returns the hidpi factor of the bounds
#[no_mangle]
pub extern "C" fn AzHidpiAdjustedBounds_getHidpiFactor(
    hidpiadjustedbounds: &AzHidpiAdjustedBounds,
) -> f32 {
    hidpiadjustedbounds.get_hidpi_factor()
}

/// Re-export of rust-allocated (stack based) `InlineText` struct
pub use azul_core::callbacks::InlineText as AzInlineTextTT;
pub use AzInlineTextTT as AzInlineText;
/// Hit-tests the inline text, returns detailed information about which glyph / word / line, etc.
/// the position (usually the mouse cursor) is currently over. Result may be empty (no hits) or
/// contain more than one result (cursor is hovering over multiple overlapping glyphs at once).
#[no_mangle]
pub extern "C" fn AzInlineText_hitTest(
    inlinetext: &AzInlineText,
    position: AzLogicalPosition,
) -> AzInlineTextHitVec {
    inlinetext.hit_test(position).into()
}
/// Destructor: Takes ownership of the `InlineText` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineText_delete(object: &mut AzInlineText) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `InlineLine` struct
pub use azul_core::callbacks::InlineLine as AzInlineLineTT;
pub use AzInlineLineTT as AzInlineLine;
/// Destructor: Takes ownership of the `InlineLine` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineLine_delete(object: &mut AzInlineLine) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `InlineWord` struct
pub use azul_core::callbacks::InlineWord as AzInlineWordTT;
pub use AzInlineWordTT as AzInlineWord;
/// Destructor: Takes ownership of the `InlineWord` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineWord_delete(object: &mut AzInlineWord) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `InlineTextContents` struct
pub use azul_core::callbacks::InlineTextContents as AzInlineTextContentsTT;
pub use AzInlineTextContentsTT as AzInlineTextContents;
/// Destructor: Takes ownership of the `InlineTextContents` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineTextContents_delete(object: &mut AzInlineTextContents) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Defines the keyboard input focus target
pub use azul_core::callbacks::FocusTarget as AzFocusTargetTT;
/// Re-export of rust-allocated (stack based) `InlineGlyph` struct
pub use azul_core::callbacks::InlineGlyph as AzInlineGlyphTT;
/// Re-export of rust-allocated (stack based) `InlineTextHit` struct
pub use azul_core::callbacks::InlineTextHit as AzInlineTextHitTT;
pub use AzFocusTargetTT as AzFocusTarget;
pub use AzInlineGlyphTT as AzInlineGlyph;
pub use AzInlineTextHitTT as AzInlineTextHit;
/// Destructor: Takes ownership of the `FocusTarget` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFocusTarget_delete(object: &mut AzFocusTarget) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// CSS path to set the keyboard input focus
pub use azul_core::callbacks::FocusTargetPath as AzFocusTargetPathTT;
pub use AzFocusTargetPathTT as AzFocusTargetPath;
/// Destructor: Takes ownership of the `FocusTargetPath` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFocusTargetPath_delete(object: &mut AzFocusTargetPath) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ResolvedTextLayoutOptions` struct
pub use azul_core::ui_solver::ResolvedTextLayoutOptions as AzResolvedTextLayoutOptionsTT;
/// Re-export of rust-allocated (stack based) `ScriptType` struct
pub use azul_core::ui_solver::ScriptType as AzScriptTypeTT;
pub use AzResolvedTextLayoutOptionsTT as AzResolvedTextLayoutOptions;
pub use AzScriptTypeTT as AzScriptType;
/// Creates a new `ResolvedTextLayoutOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ResolvedTextLayoutOptions::default()` constructor.
#[no_mangle]
pub extern "C" fn AzResolvedTextLayoutOptions_default() -> AzResolvedTextLayoutOptions {
    AzResolvedTextLayoutOptions::default()
}
/// Destructor: Takes ownership of the `ResolvedTextLayoutOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzResolvedTextLayoutOptions_delete(object: &mut AzResolvedTextLayoutOptions) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Animation struct to start a new animation
pub use azul_core::callbacks::Animation as AzAnimationTT;
pub use AzAnimationTT as AzAnimation;
/// Destructor: Takes ownership of the `Animation` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzAnimation_delete(object: &mut AzAnimation) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// How should an animation repeat (loop, ping-pong, etc.)
pub use azul_core::callbacks::AnimationRepeat as AzAnimationRepeatTT;
/// How many times should an animation repeat
pub use azul_core::callbacks::AnimationRepeatCount as AzAnimationRepeatCountTT;
/// C-ABI wrapper over an `IFrameCallbackType`
pub use azul_core::callbacks::IFrameCallback as AzIFrameCallbackTT;
/// Easing function of the animation (ease-in, ease-out, ease-in-out, custom)
pub use azul_css::AnimationInterpolationFunction as AzAnimationEasingTT;
pub use AzAnimationEasingTT as AzAnimationEasing;
pub use AzAnimationRepeatCountTT as AzAnimationRepeatCount;
pub use AzAnimationRepeatTT as AzAnimationRepeat;
pub use AzIFrameCallbackTT as AzIFrameCallback;

pub type AzIFrameCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;
/// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
pub use azul_core::callbacks::IFrameCallbackInfo as AzIFrameCallbackInfoTT;
/// <img src="../images/scrollbounds.png"/>
pub use azul_core::callbacks::IFrameCallbackReturn as AzIFrameCallbackReturnTT;
pub use AzIFrameCallbackInfoTT as AzIFrameCallbackInfo;
pub use AzIFrameCallbackReturnTT as AzIFrameCallbackReturn;
/// Destructor: Takes ownership of the `IFrameCallbackReturn` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzIFrameCallbackReturn_delete(object: &mut AzIFrameCallbackReturn) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `RenderImageCallback` struct
pub use azul_core::callbacks::RenderImageCallback as AzRenderImageCallbackTT;
pub use AzRenderImageCallbackTT as AzRenderImageCallback;

pub type AzRenderImageCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzRenderImageCallbackInfo) -> AzImageRef;
/// Re-export of rust-allocated (stack based) `RenderImageCallbackInfo` struct
pub use azul_core::callbacks::RenderImageCallbackInfo as AzRenderImageCallbackInfoTT;
pub use AzRenderImageCallbackInfoTT as AzRenderImageCallbackInfo;
/// Returns a copy of the internal `Gl`
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getGlContext(
    renderimagecallbackinfo: &AzRenderImageCallbackInfo,
) -> AzOptionGl {
    renderimagecallbackinfo.get_gl_context().into()
}
/// Returns a copy of the internal `HidpiAdjustedBounds`
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getBounds(
    renderimagecallbackinfo: &AzRenderImageCallbackInfo,
) -> AzHidpiAdjustedBounds {
    renderimagecallbackinfo.get_bounds()
}
/// Returns the `DomNodeId` that this callback was called on
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getCallbackNodeId(
    renderimagecallbackinfo: &AzRenderImageCallbackInfo,
) -> AzDomNodeId {
    renderimagecallbackinfo.get_callback_node_id()
}
/// If the node is a `Text` node, returns the layouted inline glyphs
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getInlineText(
    renderimagecallbackinfo: &AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionInlineText {
    renderimagecallbackinfo.get_inline_text(node_id).into()
}
/// Returns the index of the node relative to the parent node.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getIndexInParent(
    renderimagecallbackinfo: &mut AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> usize {
    let mut t = 0;
    let mut n = node_id;
    while let Some(prev) = renderimagecallbackinfo.get_previous_sibling(n) {
        n = prev;
        t += 1;
    }
    t
}
/// Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getParent(
    renderimagecallbackinfo: &mut AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    renderimagecallbackinfo.get_parent(node_id).into()
}
/// Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getPreviousSibling(
    renderimagecallbackinfo: &mut AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    renderimagecallbackinfo.get_previous_sibling(node_id).into()
}
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getNextSibling(
    renderimagecallbackinfo: &mut AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    renderimagecallbackinfo.get_next_sibling(node_id).into()
}
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getFirstChild(
    renderimagecallbackinfo: &mut AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    renderimagecallbackinfo.get_first_child(node_id).into()
}
/// Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid
/// NodeId.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_getLastChild(
    renderimagecallbackinfo: &mut AzRenderImageCallbackInfo,
    node_id: AzDomNodeId,
) -> AzOptionDomNodeId {
    renderimagecallbackinfo.get_last_child(node_id).into()
}
/// Destructor: Takes ownership of the `RenderImageCallbackInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzRenderImageCallbackInfo_delete(object: &mut AzRenderImageCallbackInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TimerCallback` struct
pub use azul_core::callbacks::TimerCallback as AzTimerCallbackTT;
pub use AzTimerCallbackTT as AzTimerCallback;

pub type AzTimerCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzTimerCallbackInfo) -> AzTimerCallbackReturn;
/// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
pub use azul_core::callbacks::TimerCallbackInfo as AzTimerCallbackInfoTT;
pub use AzTimerCallbackInfoTT as AzTimerCallbackInfo;
/// Destructor: Takes ownership of the `TimerCallbackInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTimerCallbackInfo_delete(object: &mut AzTimerCallbackInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
pub use azul_core::callbacks::TimerCallbackReturn as AzTimerCallbackReturnTT;
pub use AzTimerCallbackReturnTT as AzTimerCallbackReturn;

pub type AzWriteBackCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzRefAny, &mut AzCallbackInfo) -> AzUpdate;
/// Re-export of rust-allocated (stack based) `ThreadCallback` struct
pub use azul_core::callbacks::ThreadCallback as AzThreadCallbackTT;
/// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
pub use azul_core::callbacks::WriteBackCallback as AzWriteBackCallbackTT;
pub use AzThreadCallbackTT as AzThreadCallback;
pub use AzWriteBackCallbackTT as AzWriteBackCallback;

pub type AzThreadCallbackType = extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);
pub type AzRefAnyDestructorType = extern "C" fn(&mut c_void);
/// Re-export of rust-allocated (stack based) `RefCount` struct
pub use azul_core::callbacks::RefCount as AzRefCountTT;
pub use AzRefCountTT as AzRefCount;
/// Equivalent to the Rust `RefCount::can_be_shared()` function.
#[no_mangle]
pub extern "C" fn AzRefCount_canBeShared(refcount: &AzRefCount) -> bool {
    refcount.can_be_shared()
}
/// Equivalent to the Rust `RefCount::can_be_shared_mut()` function.
#[no_mangle]
pub extern "C" fn AzRefCount_canBeSharedMut(refcount: &AzRefCount) -> bool {
    refcount.can_be_shared_mut()
}
/// Equivalent to the Rust `RefCount::increase_ref()` function.
#[no_mangle]
pub extern "C" fn AzRefCount_increaseRef(refcount: &mut AzRefCount) {
    refcount.increase_ref()
}
/// Equivalent to the Rust `RefCount::decrease_ref()` function.
#[no_mangle]
pub extern "C" fn AzRefCount_decreaseRef(refcount: &mut AzRefCount) {
    refcount.decrease_ref()
}
/// Equivalent to the Rust `RefCount::increase_refmut()` function.
#[no_mangle]
pub extern "C" fn AzRefCount_increaseRefmut(refcount: &mut AzRefCount) {
    refcount.increase_refmut()
}
/// Equivalent to the Rust `RefCount::decrease_refmut()` function.
#[no_mangle]
pub extern "C" fn AzRefCount_decreaseRefmut(refcount: &mut AzRefCount) {
    refcount.decrease_refmut()
}
/// Destructor: Takes ownership of the `RefCount` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzRefCount_delete(object: &mut AzRefCount) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzRefCount_deepCopy(object: &AzRefCount) -> AzRefCount {
    object.clone()
}

/// RefAny is a reference-counted, opaque pointer, which stores a reference to a struct.
/// `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed
/// in the Rust API)
pub use azul_core::callbacks::RefAny as AzRefAnyTT;
pub use AzRefAnyTT as AzRefAny;
/// Creates a new `RefAny` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `RefAny::new_c()` constructor.
#[no_mangle]
pub extern "C" fn AzRefAny_newC(
    ptr: *const c_void,
    len: usize,
    type_id: u64,
    type_name: AzString,
    destructor: AzRefAnyDestructorType,
) -> AzRefAny {
    AzRefAny::new_c(ptr, len, type_id, type_name, destructor)
}
/// Equivalent to the Rust `RefAny::get_type_id()` function.
#[no_mangle]
pub extern "C" fn AzRefAny_getTypeId(refany: &AzRefAny) -> u64 {
    refany.get_type_id()
}
/// Equivalent to the Rust `RefAny::get_type_name()` function.
#[no_mangle]
pub extern "C" fn AzRefAny_getTypeName(refany: &AzRefAny) -> AzString {
    refany.get_type_name()
}
/// Destructor: Takes ownership of the `RefAny` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzRefAny_delete(object: &mut AzRefAny) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzRefAny_deepCopy(object: &AzRefAny) -> AzRefAny {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `LayoutCallbackInfo` struct
pub use azul_core::callbacks::LayoutCallbackInfo as AzLayoutCallbackInfoTT;
pub use AzLayoutCallbackInfoTT as AzLayoutCallbackInfo;
/// Returns a copy of the OpenGL context
#[no_mangle]
pub extern "C" fn AzLayoutCallbackInfo_getGlContext(
    layoutcallbackinfo: &AzLayoutCallbackInfo,
) -> AzOptionGl {
    layoutcallbackinfo.get_gl_context()
}
/// Returns all system-native fonts with their respective file paths as values
#[no_mangle]
pub extern "C" fn AzLayoutCallbackInfo_getSystemFonts(
    layoutcallbackinfo: &AzLayoutCallbackInfo,
) -> AzStringPairVec {
    layoutcallbackinfo.get_system_fonts().into()
}
/// Returns an `ImageRef` referenced by a CSS ID
#[no_mangle]
pub extern "C" fn AzLayoutCallbackInfo_getImage(
    layoutcallbackinfo: &AzLayoutCallbackInfo,
    id: AzString,
) -> AzOptionImageRef {
    layoutcallbackinfo.get_image(&id).into()
}
/// Destructor: Takes ownership of the `LayoutCallbackInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLayoutCallbackInfo_delete(object: &mut AzLayoutCallbackInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `Dom` struct
pub use azul_core::dom::Dom as AzDomTT;
pub use AzDomTT as AzDom;
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::new()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_new(node_type: AzNodeType) -> AzDom {
    AzDom::new(node_type)
}
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::body()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_body() -> AzDom {
    AzDom::body()
}
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::div()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_div() -> AzDom {
    AzDom::div()
}
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::br()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_br() -> AzDom {
    AzDom::br()
}
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::text()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_text(string: AzString) -> AzDom {
    AzDom::text(string)
}
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::image()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_image(image: AzImageRef) -> AzDom {
    AzDom::image(image)
}
/// Creates a new `Dom` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Dom::iframe()` constructor.
#[no_mangle]
pub extern "C" fn AzDom_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzDom {
    AzDom::iframe(data, callback)
}
/// Equivalent to the Rust `Dom::set_node_type()` function.
#[no_mangle]
pub extern "C" fn AzDom_setNodeType(dom: &mut AzDom, node_type: AzNodeType) {
    dom.root.set_node_type(node_type)
}
/// Equivalent to the Rust `Dom::with_node_type()` function.
#[no_mangle]
pub extern "C" fn AzDom_withNodeType(dom: &mut AzDom, node_type: AzNodeType) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_node_type(node_type);
    dom
}
/// Equivalent to the Rust `Dom::set_dataset()` function.
#[no_mangle]
pub extern "C" fn AzDom_setDataset(dom: &mut AzDom, dataset: AzRefAny) {
    dom.root.set_dataset(Some(dataset).into())
}
/// Equivalent to the Rust `Dom::with_dataset()` function.
#[no_mangle]
pub extern "C" fn AzDom_withDataset(dom: &mut AzDom, dataset: AzRefAny) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_dataset(Some(dataset).into());
    dom
}
/// Equivalent to the Rust `Dom::set_ids_and_classes()` function.
#[no_mangle]
pub extern "C" fn AzDom_setIdsAndClasses(dom: &mut AzDom, ids_and_classes: AzIdOrClassVec) {
    dom.root.set_ids_and_classes(ids_and_classes)
}
/// Equivalent to the Rust `Dom::with_ids_and_classes()` function.
#[no_mangle]
pub extern "C" fn AzDom_withIdsAndClasses(
    dom: &mut AzDom,
    ids_and_classes: AzIdOrClassVec,
) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_ids_and_classes(ids_and_classes);
    dom
}
/// Equivalent to the Rust `Dom::set_callbacks()` function.
#[no_mangle]
pub extern "C" fn AzDom_setCallbacks(dom: &mut AzDom, callbacks: AzCallbackDataVec) {
    dom.root.set_callbacks(callbacks)
}
/// Equivalent to the Rust `Dom::with_callbacks()` function.
#[no_mangle]
pub extern "C" fn AzDom_withCallbacks(dom: &mut AzDom, callbacks: AzCallbackDataVec) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_callbacks(callbacks);
    dom
}
/// Equivalent to the Rust `Dom::set_inline_css_props()` function.
#[no_mangle]
pub extern "C" fn AzDom_setInlineCssProps(
    dom: &mut AzDom,
    css_properties: AzNodeDataInlineCssPropertyVec,
) {
    dom.root.set_inline_css_props(css_properties)
}
/// Equivalent to the Rust `Dom::with_inline_css_props()` function.
#[no_mangle]
pub extern "C" fn AzDom_withInlineCssProps(
    dom: &mut AzDom,
    css_properties: AzNodeDataInlineCssPropertyVec,
) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_inline_css_props(css_properties);
    dom
}
/// Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a
/// default `Dom` in order to prevent accidental copies.
#[no_mangle]
pub extern "C" fn AzDom_addCallback(
    dom: &mut AzDom,
    event: AzEventFilter,
    data: AzRefAny,
    callback: AzCallbackType,
) {
    dom.root.add_callback(event, data, callback)
}
/// Same as add_child, but as a builder method.
#[no_mangle]
pub extern "C" fn AzDom_withCallback(
    dom: &mut AzDom,
    event: AzEventFilter,
    data: AzRefAny,
    callback: AzCallbackType,
) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_callback(event, data, callback);
    dom
}
/// Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a
/// default `Dom` in order to prevent accidental copies.
#[no_mangle]
pub extern "C" fn AzDom_addChild(dom: &mut AzDom, child: AzDom) {
    dom.add_child(child)
}
/// Same as add_child, but as a builder method.
#[no_mangle]
pub extern "C" fn AzDom_withChild(dom: &mut AzDom, child: AzDom) -> AzDom {
    dom.with_child(child)
}
/// Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a
/// default `Dom` in order to prevent accidental copies.
#[no_mangle]
pub extern "C" fn AzDom_setChildren(dom: &mut AzDom, children: AzDomVec) {
    dom.set_children(children)
}
/// Same as set_children, but as a builder method.
#[no_mangle]
pub extern "C" fn AzDom_withChildren(dom: &mut AzDom, children: AzDomVec) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.set_children(children);
    dom
}
/// Adds an CSS ID to the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_addId(dom: &mut AzDom, id: AzString) {
    dom.root.add_id(id)
}
/// Same as add_id, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withId(dom: &mut AzDom, id: AzString) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_id(id);
    dom
}
/// Adds a CSS class to the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_addClass(dom: &mut AzDom, class: AzString) {
    dom.root.add_class(class)
}
/// Same as add_class, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withClass(dom: &mut AzDom, class: AzString) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_class(class);
    dom
}
/// Adds an inline (normal) CSS property to the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_addCssProperty(dom: &mut AzDom, prop: AzCssProperty) {
    dom.root.add_normal_css_property(prop)
}
/// Same as add_class, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withCssProperty(dom: &mut AzDom, prop: AzCssProperty) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_normal_css_property(prop);
    dom
}
/// Adds an inline (hover) CSS property to the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_addHoverCssProperty(dom: &mut AzDom, prop: AzCssProperty) {
    dom.root.add_hover_css_property(prop)
}
/// Same as add_class, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withHoverCssProperty(dom: &mut AzDom, prop: AzCssProperty) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_hover_css_property(prop);
    dom
}
/// Adds an inline (hover) CSS property to the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_addActiveCssProperty(dom: &mut AzDom, prop: AzCssProperty) {
    dom.root.add_active_css_property(prop)
}
/// Same as add_class, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withActiveCssProperty(dom: &mut AzDom, prop: AzCssProperty) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_active_css_property(prop);
    dom
}
/// Adds an inline (hover) CSS property to the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_addFocusCssProperty(dom: &mut AzDom, prop: AzCssProperty) {
    dom.root.add_focus_css_property(prop)
}
/// Same as add_class, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withFocusCssProperty(dom: &mut AzDom, prop: AzCssProperty) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.add_focus_css_property(prop);
    dom
}
/// Equivalent to the Rust `Dom::set_inline_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_setInlineStyle(dom: &mut AzDom, style: AzString) {
    AzNodeData_setInlineStyle(&mut dom.root, style);
}
/// Equivalent to the Rust `Dom::with_inline_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_withInlineStyle(dom: &mut AzDom, style: AzString) -> AzDom {
    let mut dom = dom.swap_with_default();
    AzNodeData_setInlineStyle(&mut dom.root, style);
    dom
}
/// Equivalent to the Rust `Dom::set_inline_hover_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_setInlineHoverStyle(dom: &mut AzDom, style: AzString) {
    AzNodeData_setInlineHoverStyle(&mut dom.root, style);
}
/// Equivalent to the Rust `Dom::with_inline_hover_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_withInlineHoverStyle(dom: &mut AzDom, style: AzString) -> AzDom {
    let mut dom = dom.swap_with_default();
    AzNodeData_setInlineHoverStyle(&mut dom.root, style);
    dom
}
/// Equivalent to the Rust `Dom::set_inline_active_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_setInlineActiveStyle(dom: &mut AzDom, style: AzString) {
    AzNodeData_setInlineActiveStyle(&mut dom.root, style);
}
/// Equivalent to the Rust `Dom::with_inline_active_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_withInlineActiveStyle(dom: &mut AzDom, style: AzString) -> AzDom {
    let mut dom = dom.swap_with_default();
    AzNodeData_setInlineActiveStyle(&mut dom.root, style);
    dom
}
/// Equivalent to the Rust `Dom::set_inline_focus_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_setInlineFocusStyle(dom: &mut AzDom, style: AzString) {
    AzNodeData_setInlineFocusStyle(&mut dom.root, style);
}
/// Equivalent to the Rust `Dom::with_inline_focus_style()` function.
#[no_mangle]
pub extern "C" fn AzDom_withInlineFocusStyle(dom: &mut AzDom, style: AzString) -> AzDom {
    let mut dom = dom.swap_with_default();
    AzNodeData_setInlineFocusStyle(&mut dom.root, style);
    dom
}
/// Sets the clip mask for the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_setClipMask(dom: &mut AzDom, clip_mask: AzImageMask) {
    dom.root.set_clip_mask(clip_mask)
}
/// Same as set_clip_mask, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withClipMask(dom: &mut AzDom, clip_mask: AzImageMask) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_clip_mask(clip_mask);
    dom
}
/// Sets the tab index for the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_setTabIndex(dom: &mut AzDom, tab_index: AzTabIndex) {
    dom.root.set_tab_index(tab_index)
}
/// Same as set_tab_index, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withTabIndex(dom: &mut AzDom, tab_index: AzTabIndex) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_tab_index(tab_index);
    dom
}
/// Sets accessibility attributes for the DOM root node.
#[no_mangle]
pub extern "C" fn AzDom_setAccessibilityInfo(
    dom: &mut AzDom,
    accessibility_info: AzAccessibilityInfo,
) {
    dom.root.set_accessibility_info(accessibility_info)
}
/// Same as set_accessibility_info, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withAccessibilityInfo(
    dom: &mut AzDom,
    accessibility_info: AzAccessibilityInfo,
) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_accessibility_info(accessibility_info);
    dom
}
/// Sets the menu bar for the DOM root node. See `NodeData::set_menu_bar` for more information.
#[no_mangle]
pub extern "C" fn AzDom_setMenuBar(dom: &mut AzDom, menu_bar: AzMenu) {
    dom.root.set_menu_bar(menu_bar)
}
/// Same as set_accessibility_info, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withMenuBar(dom: &mut AzDom, menu_bar: AzMenu) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_menu_bar(menu_bar);
    dom
}
/// Sets the context menu for the DOM root node. See `NodeData::set_context_menu` for more
/// information.
#[no_mangle]
pub extern "C" fn AzDom_setContextMenu(dom: &mut AzDom, context_menu: AzMenu) {
    dom.root.set_context_menu(context_menu)
}
/// Same as set_context_menu, but as a builder method
#[no_mangle]
pub extern "C" fn AzDom_withContextMenu(dom: &mut AzDom, context_menu: AzMenu) -> AzDom {
    let mut dom = dom.swap_with_default();
    dom.root.set_context_menu(context_menu);
    dom
}
/// Calculates the hash of this node (note: in order to be truly unique, you also have to hash the
/// DOM and Node ID).
#[no_mangle]
pub extern "C" fn AzDom_hash(dom: &AzDom) -> u64 {
    dom.root.calculate_node_data_hash().0
}
/// Returns the number of nodes in the DOM, including all child DOM trees. Result is equal to
/// `self.total_children + 1` (count of all child trees + the root node)
#[no_mangle]
pub extern "C" fn AzDom_nodeCount(dom: &AzDom) -> usize {
    dom.node_count()
}
/// Returns a HTML string that you can write to a file in order to debug the UI structure and debug
/// potential cascading issues
#[no_mangle]
pub extern "C" fn AzDom_getHtmlString(dom: &mut AzDom) -> AzString {
    dom.style(AzCss::empty().into())
        .get_html_string("", "", false)
        .into()
}
/// Returns a HTML for unit testing
#[no_mangle]
pub extern "C" fn AzDom_getHtmlStringTest(dom: &mut AzDom) -> AzString {
    dom.style(AzCss::empty().into())
        .get_html_string("", "", true)
        .into()
}
/// Same as `StyledDom::new(dom, css)`: NOTE - replaces self with an empty DOM, in order to prevent
/// cloning the DOM entirely
#[no_mangle]
pub extern "C" fn AzDom_style(dom: &mut AzDom, css: AzCss) -> AzStyledDom {
    dom.style(css.into())
}
/// Destructor: Takes ownership of the `Dom` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDom_delete(object: &mut AzDom) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `IFrameNode` struct
pub use azul_core::dom::IFrameNode as AzIFrameNodeTT;
pub use AzIFrameNodeTT as AzIFrameNode;
/// Destructor: Takes ownership of the `IFrameNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzIFrameNode_delete(object: &mut AzIFrameNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CallbackData` struct
pub use azul_core::dom::CallbackData as AzCallbackDataTT;
pub use AzCallbackDataTT as AzCallbackData;
/// Destructor: Takes ownership of the `CallbackData` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCallbackData_delete(object: &mut AzCallbackData) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
pub use azul_core::dom::NodeData as AzNodeDataTT;
pub use AzNodeDataTT as AzNodeData;
/// Creates an new, empty `NodeData` struct
#[no_mangle]
pub extern "C" fn AzNodeData_new(node_type: AzNodeType) -> AzNodeData {
    AzNodeData::new(node_type)
}
/// Creates a new `NodeData` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NodeData::body()` constructor.
#[no_mangle]
pub extern "C" fn AzNodeData_body() -> AzNodeData {
    AzNodeData::body()
}
/// Creates a new `NodeData` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NodeData::div()` constructor.
#[no_mangle]
pub extern "C" fn AzNodeData_div() -> AzNodeData {
    AzNodeData::div()
}
/// Creates a new `NodeData` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NodeData::br()` constructor.
#[no_mangle]
pub extern "C" fn AzNodeData_br() -> AzNodeData {
    AzNodeData::br()
}
/// Creates a new `NodeData` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NodeData::text()` constructor.
#[no_mangle]
pub extern "C" fn AzNodeData_text(string: AzString) -> AzNodeData {
    AzNodeData::text(string)
}
/// Creates a new `NodeData` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NodeData::image()` constructor.
#[no_mangle]
pub extern "C" fn AzNodeData_image(image: AzImageRef) -> AzNodeData {
    AzNodeData::image(image)
}
/// Creates a new `NodeData` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NodeData::iframe()` constructor.
#[no_mangle]
pub extern "C" fn AzNodeData_iframe(data: AzRefAny, callback: AzIFrameCallbackType) -> AzNodeData {
    AzNodeData::iframe(data, callback)
}
/// Equivalent to the Rust `NodeData::set_node_type()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setNodeType(nodedata: &mut AzNodeData, node_type: AzNodeType) {
    nodedata.set_node_type(node_type)
}
/// Equivalent to the Rust `NodeData::with_node_type()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withNodeType(
    nodedata: &mut AzNodeData,
    node_type: AzNodeType,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    nodedata.set_node_type(node_type);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_dataset()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setDataset(nodedata: &mut AzNodeData, dataset: AzRefAny) {
    nodedata.set_dataset(Some(dataset).into())
}
/// Equivalent to the Rust `NodeData::with_dataset()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withDataset(
    nodedata: &mut AzNodeData,
    dataset: AzRefAny,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    nodedata.set_dataset(Some(dataset).into());
    nodedata
}
/// Equivalent to the Rust `NodeData::set_ids_and_classes()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setIdsAndClasses(
    nodedata: &mut AzNodeData,
    ids_and_classes: AzIdOrClassVec,
) {
    nodedata.set_ids_and_classes(ids_and_classes)
}
/// Equivalent to the Rust `NodeData::with_ids_and_classes()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withIdsAndClasses(
    nodedata: &mut AzNodeData,
    ids_and_classes: AzIdOrClassVec,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    nodedata.set_ids_and_classes(ids_and_classes);
    nodedata
}
/// Adds a callback this DOM (potentially heap-allocates in Rust code)
#[no_mangle]
pub extern "C" fn AzNodeData_addCallback(
    nodedata: &mut AzNodeData,
    event: AzEventFilter,
    data: AzRefAny,
    callback: AzCallbackType,
) {
    nodedata.add_callback(event, data, callback)
}
/// Same as add_child, but as a builder method.
#[no_mangle]
pub extern "C" fn AzNodeData_withCallback(
    nodedata: &mut AzNodeData,
    event: AzEventFilter,
    data: AzRefAny,
    callback: AzCallbackType,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    nodedata.add_callback(event, data, callback);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_callbacks()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setCallbacks(nodedata: &mut AzNodeData, callbacks: AzCallbackDataVec) {
    nodedata.set_callbacks(callbacks)
}
/// Equivalent to the Rust `NodeData::with_callbacks()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withCallbacks(
    nodedata: &mut AzNodeData,
    callbacks: AzCallbackDataVec,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    nodedata.set_callbacks(callbacks);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_inline_css_props()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setInlineCssProps(
    nodedata: &mut AzNodeData,
    css_properties: AzNodeDataInlineCssPropertyVec,
) {
    nodedata.set_inline_css_props(css_properties)
}
/// Equivalent to the Rust `NodeData::with_inline_css_props()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withInlineCssProps(
    nodedata: &mut AzNodeData,
    css_properties: AzNodeDataInlineCssPropertyVec,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    nodedata.set_inline_css_props(css_properties);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_inline_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setInlineStyle(nodedata: &mut AzNodeData, style: AzString) {
    nodedata.set_inline_css_props(
        nodedata
            .get_inline_css_props()
            .with_append(AzNodeDataInlineCssPropertyVec::parse_normal(style.as_str())),
    )
}
/// Equivalent to the Rust `NodeData::with_inline_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withInlineStyle(
    nodedata: &mut AzNodeData,
    style: AzString,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    AzNodeData_setInlineStyle(&mut nodedata, style);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_inline_hover_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setInlineHoverStyle(nodedata: &mut AzNodeData, style: AzString) {
    nodedata.set_inline_css_props(
        nodedata
            .get_inline_css_props()
            .with_append(AzNodeDataInlineCssPropertyVec::parse_hover(style.as_str())),
    )
}
/// Equivalent to the Rust `NodeData::with_inline_hover_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withInlineHoverStyle(
    nodedata: &mut AzNodeData,
    style: AzString,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    AzNodeData_setInlineHoverStyle(&mut nodedata, style);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_inline_active_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setInlineActiveStyle(nodedata: &mut AzNodeData, style: AzString) {
    nodedata.set_inline_css_props(
        nodedata
            .get_inline_css_props()
            .with_append(AzNodeDataInlineCssPropertyVec::parse_active(style.as_str())),
    )
}
/// Equivalent to the Rust `NodeData::with_inline_active_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withInlineActiveStyle(
    nodedata: &mut AzNodeData,
    style: AzString,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    AzNodeData_setInlineActiveStyle(&mut nodedata, style);
    nodedata
}
/// Equivalent to the Rust `NodeData::set_inline_focus_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_setInlineFocusStyle(nodedata: &mut AzNodeData, style: AzString) {
    nodedata.set_inline_css_props(
        nodedata
            .get_inline_css_props()
            .with_append(AzNodeDataInlineCssPropertyVec::parse_focus(style.as_str())),
    )
}
/// Equivalent to the Rust `NodeData::with_inline_focus_style()` function.
#[no_mangle]
pub extern "C" fn AzNodeData_withInlineFocusStyle(
    nodedata: &mut AzNodeData,
    style: AzString,
) -> AzNodeData {
    let mut nodedata = nodedata.swap_with_default();
    AzNodeData_setInlineFocusStyle(&mut nodedata, style);
    nodedata
}
/// Sets the `extra.clip_mask` field for this node
#[no_mangle]
pub extern "C" fn AzNodeData_setClipMask(nodedata: &mut AzNodeData, image_mask: AzImageMask) {
    nodedata.set_clip_mask(image_mask)
}
/// Sets the tab index for this node
#[no_mangle]
pub extern "C" fn AzNodeData_setTabIndex(nodedata: &mut AzNodeData, tab_index: AzTabIndex) {
    nodedata.set_tab_index(tab_index)
}
/// Sets accessibility attributes for this node
#[no_mangle]
pub extern "C" fn AzNodeData_setAccessibilityInfo(
    nodedata: &mut AzNodeData,
    accessibility_info: AzAccessibilityInfo,
) {
    nodedata.set_accessibility_info(accessibility_info)
}
/// Adds a (native) menu bar: If this node is the root node the menu bar will be added to the
/// window, else it will be displayed using the width and position of the bounding rectangle
#[no_mangle]
pub extern "C" fn AzNodeData_setMenuBar(nodedata: &mut AzNodeData, menu_bar: AzMenu) {
    nodedata.set_menu_bar(menu_bar)
}
/// Signalizes that this node has a (native) context-aware menu. If set, the user can left-click the
/// node to open the menu
#[no_mangle]
pub extern "C" fn AzNodeData_setContextMenu(nodedata: &mut AzNodeData, context_menu: AzMenu) {
    nodedata.set_context_menu(context_menu)
}
/// Calculates the hash of this node (note: in order to be truly unique, you also have to hash the
/// DOM and Node ID).
#[no_mangle]
pub extern "C" fn AzNodeData_hash(nodedata: &AzNodeData) -> u64 {
    nodedata.calculate_node_data_hash().0
}
/// Destructor: Takes ownership of the `NodeData` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeData_delete(object: &mut AzNodeData) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// List of core DOM node types built-into by `azul`
pub use azul_core::dom::NodeType as AzNodeTypeTT;
pub use AzNodeTypeTT as AzNodeType;
/// Destructor: Takes ownership of the `NodeType` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeType_delete(object: &mut AzNodeType) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
pub use azul_core::dom::On as AzOnTT;
pub use AzOnTT as AzOn;
/// Converts the `On` shorthand into a `EventFilter`
#[no_mangle]
pub extern "C" fn AzOn_intoEventFilter(on: AzOn) -> AzEventFilter {
    on.into()
}

/// Accessibility information (MSAA wrapper). See `NodeData.set_accessibility_info()`
pub use azul_core::dom::AccessibilityInfo as AzAccessibilityInfoTT;
/// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
pub use azul_core::dom::ApplicationEventFilter as AzApplicationEventFilterTT;
/// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
pub use azul_core::dom::ComponentEventFilter as AzComponentEventFilterTT;
/// Re-export of rust-allocated (stack based) `EventFilter` struct
pub use azul_core::dom::EventFilter as AzEventFilterTT;
/// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
pub use azul_core::dom::FocusEventFilter as AzFocusEventFilterTT;
/// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
pub use azul_core::dom::HoverEventFilter as AzHoverEventFilterTT;
/// Re-export of rust-allocated (stack based) `NotEventFilter` struct
pub use azul_core::dom::NotEventFilter as AzNotEventFilterTT;
/// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
pub use azul_core::dom::WindowEventFilter as AzWindowEventFilterTT;
pub use AzAccessibilityInfoTT as AzAccessibilityInfo;
pub use AzApplicationEventFilterTT as AzApplicationEventFilter;
pub use AzComponentEventFilterTT as AzComponentEventFilter;
pub use AzEventFilterTT as AzEventFilter;
pub use AzFocusEventFilterTT as AzFocusEventFilter;
pub use AzHoverEventFilterTT as AzHoverEventFilter;
pub use AzNotEventFilterTT as AzNotEventFilter;
pub use AzWindowEventFilterTT as AzWindowEventFilter;
/// Destructor: Takes ownership of the `AccessibilityInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzAccessibilityInfo_delete(object: &mut AzAccessibilityInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// MSAA Accessibility role constants. For information on what each role does, see the <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/object-roles">MSDN Role Constants page</a>
pub use azul_core::dom::AccessibilityRole as AzAccessibilityRoleTT;
/// MSAA accessibility state. For information on what each state does, see the <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/object-state-constants">MSDN State Constants page</a>.
pub use azul_core::dom::AccessibilityState as AzAccessibilityStateTT;
/// Re-export of rust-allocated (stack based) `IdOrClass` struct
pub use azul_core::dom::IdOrClass as AzIdOrClassTT;
/// Re-export of rust-allocated (stack based) `TabIndex` struct
pub use azul_core::dom::TabIndex as AzTabIndexTT;
pub use AzAccessibilityRoleTT as AzAccessibilityRole;
pub use AzAccessibilityStateTT as AzAccessibilityState;
pub use AzIdOrClassTT as AzIdOrClass;
pub use AzTabIndexTT as AzTabIndex;
/// Destructor: Takes ownership of the `IdOrClass` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzIdOrClass_delete(object: &mut AzIdOrClass) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `NodeDataInlineCssProperty` struct
pub use azul_core::dom::NodeDataInlineCssProperty as AzNodeDataInlineCssPropertyTT;
pub use AzNodeDataInlineCssPropertyTT as AzNodeDataInlineCssProperty;
/// Destructor: Takes ownership of the `NodeDataInlineCssProperty` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeDataInlineCssProperty_delete(object: &mut AzNodeDataInlineCssProperty) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Menu struct (application / window menu, dropdown menu, context menu). Modeled after the
/// Windows API
pub use azul_core::window::Menu as AzMenuTT;
pub use AzMenuTT as AzMenu;
/// Creates an new, empty Menu
#[no_mangle]
pub extern "C" fn AzMenu_new(items: AzMenuItemVec) -> AzMenu {
    AzMenu::new(items)
}
/// Sets the popup position of the menu, ignored on menu bars
#[no_mangle]
pub extern "C" fn AzMenu_setPopupPosition(menu: &mut AzMenu, position: AzMenuPopupPosition) {
    menu.position = position;
}
/// Sets the popup position of the menu, ignored on menu bars (builder method)
#[no_mangle]
pub extern "C" fn AzMenu_withPopupPosition(
    menu: &mut AzMenu,
    position: AzMenuPopupPosition,
) -> AzMenu {
    let mut menu = menu.swap_with_default();
    menu.position = position;
    menu
}
/// Destructor: Takes ownership of the `Menu` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMenu_delete(object: &mut AzMenu) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Determines whether this context menu should pop up on a left, right or middle click
pub use azul_core::window::ContextMenuMouseButton as AzContextMenuMouseButtonTT;
/// Item entry in a menu or menu bar
pub use azul_core::window::MenuItem as AzMenuItemTT;
/// Position of where the context menu should pop up
pub use azul_core::window::MenuPopupPosition as AzMenuPopupPositionTT;
pub use AzContextMenuMouseButtonTT as AzContextMenuMouseButton;
pub use AzMenuItemTT as AzMenuItem;
pub use AzMenuPopupPositionTT as AzMenuPopupPosition;
/// Destructor: Takes ownership of the `MenuItem` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMenuItem_delete(object: &mut AzMenuItem) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Regular labeled menu item
pub use azul_core::window::StringMenuItem as AzStringMenuItemTT;
pub use AzStringMenuItemTT as AzStringMenuItem;
/// Creates a new menu item
#[no_mangle]
pub extern "C" fn AzStringMenuItem_new(label: AzString) -> AzStringMenuItem {
    AzStringMenuItem::new(label)
}
/// Adds a callback to the menu item
#[no_mangle]
pub extern "C" fn AzStringMenuItem_setCallback(
    stringmenuitem: &mut AzStringMenuItem,
    data: AzRefAny,
    callback: AzCallbackType,
) {
    stringmenuitem.callback = AzOptionMenuCallback::Some(AzMenuCallback {
        data,
        callback: AzCallback { cb: callback },
    });
}
/// Adds a callback to the menu item
#[no_mangle]
pub extern "C" fn AzStringMenuItem_withCallback(
    stringmenuitem: &mut AzStringMenuItem,
    data: AzRefAny,
    callback: AzCallbackType,
) -> AzStringMenuItem {
    let mut stringmenuitem = stringmenuitem.swap_with_default();
    stringmenuitem.callback = AzOptionMenuCallback::Some(AzMenuCallback {
        data,
        callback: AzCallback { cb: callback },
    });
    stringmenuitem
}
/// Adds a single child submenu to the current menu
#[no_mangle]
pub extern "C" fn AzStringMenuItem_addChild(
    stringmenuitem: &mut AzStringMenuItem,
    child: AzMenuItem,
) {
    let mut m = stringmenuitem.children.clone().into_library_owned_vec();
    m.push(child);
    stringmenuitem.children = m.into();
}
/// Adds a single child submenu to the current menu
#[no_mangle]
pub extern "C" fn AzStringMenuItem_withChild(
    stringmenuitem: &mut AzStringMenuItem,
    child: AzMenuItem,
) -> AzStringMenuItem {
    let mut stringmenuitem = stringmenuitem.swap_with_default();
    let mut m = stringmenuitem.children.clone().into_library_owned_vec();
    m.push(child);
    stringmenuitem.children = m.into();
    stringmenuitem
}
/// Sets the children of this menu
#[no_mangle]
pub extern "C" fn AzStringMenuItem_setChildren(
    stringmenuitem: &mut AzStringMenuItem,
    children: AzMenuItemVec,
) {
    stringmenuitem.children = children;
}
/// Adds a child submenu to the current menu
#[no_mangle]
pub extern "C" fn AzStringMenuItem_withChildren(
    stringmenuitem: &mut AzStringMenuItem,
    children: AzMenuItemVec,
) -> AzStringMenuItem {
    let mut stringmenuitem = stringmenuitem.swap_with_default();
    stringmenuitem.children = children;
    stringmenuitem
}
/// Destructor: Takes ownership of the `StringMenuItem` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStringMenuItem_delete(object: &mut AzStringMenuItem) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Combination of virtual key codes that have to be pressed together
pub use azul_core::window::VirtualKeyCodeCombo as AzVirtualKeyCodeComboTT;
pub use AzVirtualKeyCodeComboTT as AzVirtualKeyCodeCombo;
/// Destructor: Takes ownership of the `VirtualKeyCodeCombo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVirtualKeyCodeCombo_delete(object: &mut AzVirtualKeyCodeCombo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Similar to `dom.CallbackData`, stores some data + a callback to call when the menu is
/// activated
pub use azul_core::window::MenuCallback as AzMenuCallbackTT;
pub use AzMenuCallbackTT as AzMenuCallback;
/// Creates a new `MenuCallback` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `MenuCallback::new()` constructor.
#[no_mangle]
pub extern "C" fn AzMenuCallback_new(data: AzRefAny, callback: AzCallbackType) -> AzMenuCallback {
    AzMenuCallback {
        callback: AzCallback { cb: callback },
        data,
    }
}
/// Destructor: Takes ownership of the `MenuCallback` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMenuCallback_delete(object: &mut AzMenuCallback) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Icon of a menu entry
pub use azul_core::window::MenuItemIcon as AzMenuItemIconTT;
pub use AzMenuItemIconTT as AzMenuItemIcon;
/// Destructor: Takes ownership of the `MenuItemIcon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMenuItemIcon_delete(object: &mut AzMenuItemIcon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Describes the state of a menu item
pub use azul_core::window::MenuItemState as AzMenuItemStateTT;
/// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
pub use azul_css::CssRuleBlock as AzCssRuleBlockTT;
pub use AzCssRuleBlockTT as AzCssRuleBlock;
pub use AzMenuItemStateTT as AzMenuItemState;
/// Destructor: Takes ownership of the `CssRuleBlock` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssRuleBlock_delete(object: &mut AzCssRuleBlock) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CssPath` struct
pub use azul_css::CssPath as AzCssPathTT;
pub use AzCssPathTT as AzCssPath;
/// Destructor: Takes ownership of the `CssPath` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssPath_delete(object: &mut AzCssPath) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CssPathSelector` struct
pub use azul_css::CssPathSelector as AzCssPathSelectorTT;
pub use AzCssPathSelectorTT as AzCssPathSelector;
/// Destructor: Takes ownership of the `CssPathSelector` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssPathSelector_delete(object: &mut AzCssPathSelector) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
pub use azul_css::CssNthChildPattern as AzCssNthChildPatternTT;
/// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
pub use azul_css::CssNthChildSelector as AzCssNthChildSelectorTT;
/// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
pub use azul_css::CssPathPseudoSelector as AzCssPathPseudoSelectorTT;
/// Re-export of rust-allocated (stack based) `NodeTypeKey` struct
pub use azul_css::NodeTypeTag as AzNodeTypeKeyTT;
/// Re-export of rust-allocated (stack based) `Stylesheet` struct
pub use azul_css::Stylesheet as AzStylesheetTT;
pub use AzCssNthChildPatternTT as AzCssNthChildPattern;
pub use AzCssNthChildSelectorTT as AzCssNthChildSelector;
pub use AzCssPathPseudoSelectorTT as AzCssPathPseudoSelector;
pub use AzNodeTypeKeyTT as AzNodeTypeKey;
pub use AzStylesheetTT as AzStylesheet;
/// Destructor: Takes ownership of the `Stylesheet` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStylesheet_delete(object: &mut AzStylesheet) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `Css` struct
pub use azul_css::Css as AzCssTT;
pub use AzCssTT as AzCss;
/// Returns an empty CSS style
#[no_mangle]
pub extern "C" fn AzCss_empty() -> AzCss {
    AzCss::empty()
}
/// Returns a CSS style parsed from a `String`
#[no_mangle]
pub extern "C" fn AzCss_fromString(s: AzString) -> AzCss {
    AzCss::from_string(s)
}
/// Destructor: Takes ownership of the `Css` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCss_delete(object: &mut AzCss) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CssDeclaration` struct
pub use azul_css::CssDeclaration as AzCssDeclarationTT;
pub use AzCssDeclarationTT as AzCssDeclaration;
/// Destructor: Takes ownership of the `CssDeclaration` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssDeclaration_delete(object: &mut AzCssDeclaration) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
pub use azul_css::DynamicCssProperty as AzDynamicCssPropertyTT;
pub use AzDynamicCssPropertyTT as AzDynamicCssProperty;
/// Destructor: Takes ownership of the `DynamicCssProperty` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDynamicCssProperty_delete(object: &mut AzDynamicCssProperty) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ColorU` struct
pub use azul_css::props::basic::color::ColorU as AzColorUTT;
/// Re-export of rust-allocated (stack based) `AnimationInterpolationFunction` struct
pub use azul_css::AnimationInterpolationFunction as AzAnimationInterpolationFunctionTT;
/// Re-export of rust-allocated (stack based) `CssPropertyType` struct
pub use azul_css::CssPropertyType as AzCssPropertyTypeTT;
/// Re-export of rust-allocated (stack based) `InterpolateContext` struct
pub use azul_css::InterpolateResolver as AzInterpolateContextTT;
pub use AzAnimationInterpolationFunctionTT as AzAnimationInterpolationFunction;
pub use AzColorUTT as AzColorU;
pub use AzCssPropertyTypeTT as AzCssPropertyType;
pub use AzInterpolateContextTT as AzInterpolateContext;
/// Creates a new `ColorU` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorU::from_str()` constructor.
#[no_mangle]
pub extern "C" fn AzColorU_fromStr(string: AzString) -> AzColorU {
    azul_css::parser2::parse_css_color(string.as_str())
        .ok()
        .unwrap_or(AzColorU::BLACK)
}
/// Creates a new `ColorU` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorU::transparent()` constructor.
#[no_mangle]
pub extern "C" fn AzColorU_transparent() -> AzColorU {
    AzColorU::TRANSPARENT
}
/// Creates a new `ColorU` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorU::white()` constructor.
#[no_mangle]
pub extern "C" fn AzColorU_white() -> AzColorU {
    AzColorU::WHITE
}
/// Creates a new `ColorU` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorU::black()` constructor.
#[no_mangle]
pub extern "C" fn AzColorU_black() -> AzColorU {
    AzColorU::BLACK
}
/// Equivalent to the Rust `ColorU::to_hash()` function.
#[no_mangle]
pub extern "C" fn AzColorU_toHash(coloru: &AzColorU) -> AzString {
    coloru.to_hash().into()
}

/// Re-export of rust-allocated (stack based) `AngleMetric` struct
pub use azul_css::AngleMetric as AzAngleMetricTT;
/// Re-export of rust-allocated (stack based) `AngleValue` struct
pub use azul_css::AngleValue as AzAngleValueTT;
/// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
pub use azul_css::BoxShadowClipMode as AzBoxShadowClipModeTT;
/// Re-export of rust-allocated (stack based) `FloatValue` struct
pub use azul_css::FloatValue as AzFloatValueTT;
/// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
pub use azul_css::LayoutAlignContent as AzLayoutAlignContentTT;
/// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
pub use azul_css::LayoutAlignItems as AzLayoutAlignItemsTT;
/// Re-export of rust-allocated (stack based) `LayoutBottom` struct
pub use azul_css::LayoutBottom as AzLayoutBottomTT;
/// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
pub use azul_css::LayoutBoxSizing as AzLayoutBoxSizingTT;
/// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
pub use azul_css::LayoutDisplay as AzLayoutDisplayTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexDirection` struct
pub use azul_css::LayoutFlexDirection as AzLayoutFlexDirectionTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
pub use azul_css::LayoutFlexGrow as AzLayoutFlexGrowTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
pub use azul_css::LayoutFlexShrink as AzLayoutFlexShrinkTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexWrap` struct
pub use azul_css::LayoutFlexWrap as AzLayoutFlexWrapTT;
/// Re-export of rust-allocated (stack based) `LayoutFloat` struct
pub use azul_css::LayoutFloat as AzLayoutFloatTT;
/// Re-export of rust-allocated (stack based) `LayoutHeight` struct
pub use azul_css::LayoutHeight as AzLayoutHeightTT;
/// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
pub use azul_css::LayoutJustifyContent as AzLayoutJustifyContentTT;
/// Re-export of rust-allocated (stack based) `LayoutLeft` struct
pub use azul_css::LayoutLeft as AzLayoutLeftTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
pub use azul_css::LayoutMarginBottom as AzLayoutMarginBottomTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
pub use azul_css::LayoutMarginLeft as AzLayoutMarginLeftTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
pub use azul_css::LayoutMarginRight as AzLayoutMarginRightTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
pub use azul_css::LayoutMarginTop as AzLayoutMarginTopTT;
/// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
pub use azul_css::LayoutMaxHeight as AzLayoutMaxHeightTT;
/// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
pub use azul_css::LayoutMaxWidth as AzLayoutMaxWidthTT;
/// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
pub use azul_css::LayoutMinHeight as AzLayoutMinHeightTT;
/// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
pub use azul_css::LayoutMinWidth as AzLayoutMinWidthTT;
/// Re-export of rust-allocated (stack based) `LayoutOverflow` struct
pub use azul_css::LayoutOverflow as AzLayoutOverflowTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
pub use azul_css::LayoutPaddingBottom as AzLayoutPaddingBottomTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
pub use azul_css::LayoutPaddingLeft as AzLayoutPaddingLeftTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
pub use azul_css::LayoutPaddingRight as AzLayoutPaddingRightTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
pub use azul_css::LayoutPaddingTop as AzLayoutPaddingTopTT;
/// Re-export of rust-allocated (stack based) `LayoutPosition` struct
pub use azul_css::LayoutPosition as AzLayoutPositionTT;
/// Re-export of rust-allocated (stack based) `LayoutRight` struct
pub use azul_css::LayoutRight as AzLayoutRightTT;
/// Re-export of rust-allocated (stack based) `LayoutTop` struct
pub use azul_css::LayoutTop as AzLayoutTopTT;
/// Re-export of rust-allocated (stack based) `LayoutWidth` struct
pub use azul_css::LayoutWidth as AzLayoutWidthTT;
/// Re-export of rust-allocated (stack based) `PercentageValue` struct
pub use azul_css::PercentageValue as AzPercentageValueTT;
/// Re-export of rust-allocated (stack based) `PixelValue` struct
pub use azul_css::PixelValue as AzPixelValueTT;
/// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
pub use azul_css::PixelValueNoPercent as AzPixelValueNoPercentTT;
/// Re-export of rust-allocated (stack based) `SizeMetric` struct
pub use azul_css::SizeMetric as AzSizeMetricTT;
/// Re-export of rust-allocated (stack based) `StyleBlur` struct
pub use azul_css::StyleBlur as AzStyleBlurTT;
/// Re-export of rust-allocated (stack based) `StyleBoxShadow` struct
pub use azul_css::StyleBoxShadow as AzStyleBoxShadowTT;
/// Re-export of rust-allocated (stack based) `StyleColorMatrix` struct
pub use azul_css::StyleColorMatrix as AzStyleColorMatrixTT;
/// Re-export of rust-allocated (stack based) `StyleCompositeFilter` struct
pub use azul_css::StyleCompositeFilter as AzStyleCompositeFilterTT;
/// Re-export of rust-allocated (stack based) `StyleFilter` struct
pub use azul_css::StyleFilter as AzStyleFilterTT;
/// Re-export of rust-allocated (stack based) `StyleFilterOffset` struct
pub use azul_css::StyleFilterOffset as AzStyleFilterOffsetTT;
/// Re-export of rust-allocated (stack based) `StyleMixBlendMode` struct
pub use azul_css::StyleMixBlendMode as AzStyleMixBlendModeTT;
pub use AzAngleMetricTT as AzAngleMetric;
pub use AzAngleValueTT as AzAngleValue;
pub use AzBoxShadowClipModeTT as AzBoxShadowClipMode;
pub use AzFloatValueTT as AzFloatValue;
pub use AzLayoutAlignContentTT as AzLayoutAlignContent;
pub use AzLayoutAlignItemsTT as AzLayoutAlignItems;
pub use AzLayoutBottomTT as AzLayoutBottom;
pub use AzLayoutBoxSizingTT as AzLayoutBoxSizing;
pub use AzLayoutDisplayTT as AzLayoutDisplay;
pub use AzLayoutFlexDirectionTT as AzLayoutFlexDirection;
pub use AzLayoutFlexGrowTT as AzLayoutFlexGrow;
pub use AzLayoutFlexShrinkTT as AzLayoutFlexShrink;
pub use AzLayoutFlexWrapTT as AzLayoutFlexWrap;
pub use AzLayoutFloatTT as AzLayoutFloat;
pub use AzLayoutHeightTT as AzLayoutHeight;
pub use AzLayoutJustifyContentTT as AzLayoutJustifyContent;
pub use AzLayoutLeftTT as AzLayoutLeft;
pub use AzLayoutMarginBottomTT as AzLayoutMarginBottom;
pub use AzLayoutMarginLeftTT as AzLayoutMarginLeft;
pub use AzLayoutMarginRightTT as AzLayoutMarginRight;
pub use AzLayoutMarginTopTT as AzLayoutMarginTop;
pub use AzLayoutMaxHeightTT as AzLayoutMaxHeight;
pub use AzLayoutMaxWidthTT as AzLayoutMaxWidth;
pub use AzLayoutMinHeightTT as AzLayoutMinHeight;
pub use AzLayoutMinWidthTT as AzLayoutMinWidth;
pub use AzLayoutOverflowTT as AzLayoutOverflow;
pub use AzLayoutPaddingBottomTT as AzLayoutPaddingBottom;
pub use AzLayoutPaddingLeftTT as AzLayoutPaddingLeft;
pub use AzLayoutPaddingRightTT as AzLayoutPaddingRight;
pub use AzLayoutPaddingTopTT as AzLayoutPaddingTop;
pub use AzLayoutPositionTT as AzLayoutPosition;
pub use AzLayoutRightTT as AzLayoutRight;
pub use AzLayoutTopTT as AzLayoutTop;
pub use AzLayoutWidthTT as AzLayoutWidth;
pub use AzPercentageValueTT as AzPercentageValue;
pub use AzPixelValueNoPercentTT as AzPixelValueNoPercent;
pub use AzPixelValueTT as AzPixelValue;
pub use AzSizeMetricTT as AzSizeMetric;
pub use AzStyleBlurTT as AzStyleBlur;
pub use AzStyleBoxShadowTT as AzStyleBoxShadow;
pub use AzStyleColorMatrixTT as AzStyleColorMatrix;
pub use AzStyleCompositeFilterTT as AzStyleCompositeFilter;
pub use AzStyleFilterOffsetTT as AzStyleFilterOffset;
pub use AzStyleFilterTT as AzStyleFilter;
pub use AzStyleMixBlendModeTT as AzStyleMixBlendMode;
/// Equivalent to the Rust `AngleValue::get_degrees()` function.
#[no_mangle]
pub extern "C" fn AzAngleValue_getDegrees(anglevalue: &AzAngleValue) -> f32 {
    anglevalue.to_degrees()
}

/// Re-export of rust-allocated (stack based) `Direction` struct
pub use azul_css::Direction as AzDirectionTT;
/// Re-export of rust-allocated (stack based) `DirectionCorner` struct
pub use azul_css::DirectionCorner as AzDirectionCornerTT;
/// Re-export of rust-allocated (stack based) `DirectionCorners` struct
pub use azul_css::DirectionCorners as AzDirectionCornersTT;
/// Re-export of rust-allocated (stack based) `ExtendMode` struct
pub use azul_css::ExtendMode as AzExtendModeTT;
/// Re-export of rust-allocated (stack based) `LinearGradient` struct
pub use azul_css::LinearGradient as AzLinearGradientTT;
/// Re-export of rust-allocated (stack based) `NormalizedLinearColorStop` struct
pub use azul_css::NormalizedLinearColorStop as AzNormalizedLinearColorStopTT;
/// Re-export of rust-allocated (stack based) `NormalizedRadialColorStop` struct
pub use azul_css::NormalizedRadialColorStop as AzNormalizedRadialColorStopTT;
pub use AzDirectionCornerTT as AzDirectionCorner;
pub use AzDirectionCornersTT as AzDirectionCorners;
pub use AzDirectionTT as AzDirection;
pub use AzExtendModeTT as AzExtendMode;
pub use AzLinearGradientTT as AzLinearGradient;
pub use AzNormalizedLinearColorStopTT as AzNormalizedLinearColorStop;
pub use AzNormalizedRadialColorStopTT as AzNormalizedRadialColorStop;
/// Destructor: Takes ownership of the `LinearGradient` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLinearGradient_delete(object: &mut AzLinearGradient) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `RadialGradient` struct
pub use azul_css::RadialGradient as AzRadialGradientTT;
/// Re-export of rust-allocated (stack based) `RadialGradientSize` struct
pub use azul_css::RadialGradientSize as AzRadialGradientSizeTT;
/// Re-export of rust-allocated (stack based) `Shape` struct
pub use azul_css::Shape as AzShapeTT;
pub use AzRadialGradientSizeTT as AzRadialGradientSize;
pub use AzRadialGradientTT as AzRadialGradient;
pub use AzShapeTT as AzShape;
/// Destructor: Takes ownership of the `RadialGradient` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzRadialGradient_delete(object: &mut AzRadialGradient) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ConicGradient` struct
pub use azul_css::ConicGradient as AzConicGradientTT;
pub use AzConicGradientTT as AzConicGradient;
/// Destructor: Takes ownership of the `ConicGradient` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzConicGradient_delete(object: &mut AzConicGradient) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
pub use azul_css::StyleBackgroundContent as AzStyleBackgroundContentTT;
pub use AzStyleBackgroundContentTT as AzStyleBackgroundContent;
/// Destructor: Takes ownership of the `StyleBackgroundContent` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundContent_delete(object: &mut AzStyleBackgroundContent) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
pub use azul_css::BackgroundPositionHorizontal as AzBackgroundPositionHorizontalTT;
/// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
pub use azul_css::BackgroundPositionVertical as AzBackgroundPositionVerticalTT;
/// Re-export of rust-allocated (stack based) `BorderStyle` struct
pub use azul_css::BorderStyle as AzBorderStyleTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidth` struct
pub use azul_css::LayoutBorderBottomWidth as AzLayoutBorderBottomWidthTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidth` struct
pub use azul_css::LayoutBorderLeftWidth as AzLayoutBorderLeftWidthTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderRightWidth` struct
pub use azul_css::LayoutBorderRightWidth as AzLayoutBorderRightWidthTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderTopWidth` struct
pub use azul_css::LayoutBorderTopWidth as AzLayoutBorderTopWidthTT;
/// Re-export of rust-allocated (stack based) `ScrollbarInfo` struct
pub use azul_css::ScrollbarInfo as AzScrollbarInfoTT;
/// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
pub use azul_css::StyleBackgroundPosition as AzStyleBackgroundPositionTT;
/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
pub use azul_css::StyleBackgroundRepeat as AzStyleBackgroundRepeatTT;
/// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
pub use azul_css::StyleBackgroundSize as AzStyleBackgroundSizeTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
pub use azul_css::StyleBorderBottomColor as AzStyleBorderBottomColorTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
pub use azul_css::StyleBorderBottomLeftRadius as AzStyleBorderBottomLeftRadiusTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
pub use azul_css::StyleBorderBottomRightRadius as AzStyleBorderBottomRightRadiusTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
pub use azul_css::StyleBorderBottomStyle as AzStyleBorderBottomStyleTT;
/// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
pub use azul_css::StyleBorderLeftColor as AzStyleBorderLeftColorTT;
/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
pub use azul_css::StyleBorderLeftStyle as AzStyleBorderLeftStyleTT;
/// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
pub use azul_css::StyleBorderRightColor as AzStyleBorderRightColorTT;
/// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
pub use azul_css::StyleBorderRightStyle as AzStyleBorderRightStyleTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
pub use azul_css::StyleBorderTopColor as AzStyleBorderTopColorTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
pub use azul_css::StyleBorderTopLeftRadius as AzStyleBorderTopLeftRadiusTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
pub use azul_css::StyleBorderTopRightRadius as AzStyleBorderTopRightRadiusTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
pub use azul_css::StyleBorderTopStyle as AzStyleBorderTopStyleTT;
pub use AzBackgroundPositionHorizontalTT as AzBackgroundPositionHorizontal;
pub use AzBackgroundPositionVerticalTT as AzBackgroundPositionVertical;
pub use AzBorderStyleTT as AzBorderStyle;
pub use AzLayoutBorderBottomWidthTT as AzLayoutBorderBottomWidth;
pub use AzLayoutBorderLeftWidthTT as AzLayoutBorderLeftWidth;
pub use AzLayoutBorderRightWidthTT as AzLayoutBorderRightWidth;
pub use AzLayoutBorderTopWidthTT as AzLayoutBorderTopWidth;
pub use AzScrollbarInfoTT as AzScrollbarInfo;
pub use AzStyleBackgroundPositionTT as AzStyleBackgroundPosition;
pub use AzStyleBackgroundRepeatTT as AzStyleBackgroundRepeat;
pub use AzStyleBackgroundSizeTT as AzStyleBackgroundSize;
pub use AzStyleBorderBottomColorTT as AzStyleBorderBottomColor;
pub use AzStyleBorderBottomLeftRadiusTT as AzStyleBorderBottomLeftRadius;
pub use AzStyleBorderBottomRightRadiusTT as AzStyleBorderBottomRightRadius;
pub use AzStyleBorderBottomStyleTT as AzStyleBorderBottomStyle;
pub use AzStyleBorderLeftColorTT as AzStyleBorderLeftColor;
pub use AzStyleBorderLeftStyleTT as AzStyleBorderLeftStyle;
pub use AzStyleBorderRightColorTT as AzStyleBorderRightColor;
pub use AzStyleBorderRightStyleTT as AzStyleBorderRightStyle;
pub use AzStyleBorderTopColorTT as AzStyleBorderTopColor;
pub use AzStyleBorderTopLeftRadiusTT as AzStyleBorderTopLeftRadius;
pub use AzStyleBorderTopRightRadiusTT as AzStyleBorderTopRightRadius;
pub use AzStyleBorderTopStyleTT as AzStyleBorderTopStyle;
/// Destructor: Takes ownership of the `ScrollbarInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzScrollbarInfo_delete(object: &mut AzScrollbarInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ScrollbarStyle` struct
pub use azul_css::ScrollbarStyle as AzScrollbarStyleTT;
pub use AzScrollbarStyleTT as AzScrollbarStyle;
/// Destructor: Takes ownership of the `ScrollbarStyle` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzScrollbarStyle_delete(object: &mut AzScrollbarStyle) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleCursor` struct
pub use azul_css::StyleCursor as AzStyleCursorTT;
/// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
pub use azul_css::StyleFontFamily as AzStyleFontFamilyTT;
pub use AzStyleCursorTT as AzStyleCursor;
pub use AzStyleFontFamilyTT as AzStyleFontFamily;
/// Destructor: Takes ownership of the `StyleFontFamily` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleFontFamily_delete(object: &mut AzStyleFontFamily) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
pub use azul_css::LayoutAlignContentValue as AzLayoutAlignContentValueTT;
/// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
pub use azul_css::LayoutAlignItemsValue as AzLayoutAlignItemsValueTT;
/// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
pub use azul_css::LayoutBottomValue as AzLayoutBottomValueTT;
/// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
pub use azul_css::LayoutBoxSizingValue as AzLayoutBoxSizingValueTT;
/// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
pub use azul_css::LayoutDisplayValue as AzLayoutDisplayValueTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexDirectionValue` struct
pub use azul_css::LayoutFlexDirectionValue as AzLayoutFlexDirectionValueTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
pub use azul_css::LayoutFlexGrowValue as AzLayoutFlexGrowValueTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
pub use azul_css::LayoutFlexShrinkValue as AzLayoutFlexShrinkValueTT;
/// Re-export of rust-allocated (stack based) `LayoutFlexWrapValue` struct
pub use azul_css::LayoutFlexWrapValue as AzLayoutFlexWrapValueTT;
/// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
pub use azul_css::LayoutFloatValue as AzLayoutFloatValueTT;
/// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
pub use azul_css::LayoutHeightValue as AzLayoutHeightValueTT;
/// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
pub use azul_css::LayoutJustifyContentValue as AzLayoutJustifyContentValueTT;
/// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
pub use azul_css::LayoutLeftValue as AzLayoutLeftValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
pub use azul_css::LayoutMarginBottomValue as AzLayoutMarginBottomValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
pub use azul_css::LayoutMarginLeftValue as AzLayoutMarginLeftValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
pub use azul_css::LayoutMarginRightValue as AzLayoutMarginRightValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
pub use azul_css::LayoutMarginTopValue as AzLayoutMarginTopValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
pub use azul_css::LayoutMaxHeightValue as AzLayoutMaxHeightValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
pub use azul_css::LayoutMaxWidthValue as AzLayoutMaxWidthValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
pub use azul_css::LayoutMinHeightValue as AzLayoutMinHeightValueTT;
/// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
pub use azul_css::LayoutMinWidthValue as AzLayoutMinWidthValueTT;
/// Re-export of rust-allocated (stack based) `LayoutOverflowValue` struct
pub use azul_css::LayoutOverflowValue as AzLayoutOverflowValueTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
pub use azul_css::LayoutPaddingBottomValue as AzLayoutPaddingBottomValueTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
pub use azul_css::LayoutPaddingLeftValue as AzLayoutPaddingLeftValueTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
pub use azul_css::LayoutPaddingRightValue as AzLayoutPaddingRightValueTT;
/// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
pub use azul_css::LayoutPaddingTopValue as AzLayoutPaddingTopValueTT;
/// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
pub use azul_css::LayoutPositionValue as AzLayoutPositionValueTT;
/// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
pub use azul_css::LayoutRightValue as AzLayoutRightValueTT;
/// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
pub use azul_css::LayoutTopValue as AzLayoutTopValueTT;
/// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
pub use azul_css::LayoutWidthValue as AzLayoutWidthValueTT;
/// Re-export of rust-allocated (stack based) `ScrollbarStyleValue` struct
pub use azul_css::ScrollbarStyleValue as AzScrollbarStyleValueTT;
/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
pub use azul_css::StyleBackfaceVisibility as AzStyleBackfaceVisibilityTT;
/// Re-export of rust-allocated (stack based) `StyleBoxShadowValue` struct
pub use azul_css::StyleBoxShadowValue as AzStyleBoxShadowValueTT;
/// Re-export of rust-allocated (stack based) `StyleFontSize` struct
pub use azul_css::StyleFontSize as AzStyleFontSizeTT;
/// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
pub use azul_css::StyleLetterSpacing as AzStyleLetterSpacingTT;
/// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
pub use azul_css::StyleLineHeight as AzStyleLineHeightTT;
/// Re-export of rust-allocated (stack based) `StyleOpacity` struct
pub use azul_css::StyleOpacity as AzStyleOpacityTT;
/// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
pub use azul_css::StyleTabWidth as AzStyleTabWidthTT;
/// Re-export of rust-allocated (stack based) `StyleTextAlign` struct
pub use azul_css::StyleTextAlign as AzStyleTextAlignTT;
/// Re-export of rust-allocated (stack based) `StyleTextColor` struct
pub use azul_css::StyleTextColor as AzStyleTextColorTT;
/// Re-export of rust-allocated (stack based) `StyleTransform` struct
pub use azul_css::StyleTransform as AzStyleTransformTT;
/// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
pub use azul_css::StyleTransformMatrix2D as AzStyleTransformMatrix2DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
pub use azul_css::StyleTransformMatrix3D as AzStyleTransformMatrix3DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
pub use azul_css::StyleTransformOrigin as AzStyleTransformOriginTT;
/// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
pub use azul_css::StyleTransformOrigin as AzStylePerspectiveOriginTT;
/// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
pub use azul_css::StyleTransformRotate3D as AzStyleTransformRotate3DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
pub use azul_css::StyleTransformScale2D as AzStyleTransformScale2DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
pub use azul_css::StyleTransformScale3D as AzStyleTransformScale3DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
pub use azul_css::StyleTransformSkew2D as AzStyleTransformSkew2DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
pub use azul_css::StyleTransformTranslate2D as AzStyleTransformTranslate2DTT;
/// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
pub use azul_css::StyleTransformTranslate3D as AzStyleTransformTranslate3DTT;
/// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
pub use azul_css::StyleWordSpacing as AzStyleWordSpacingTT;
pub use AzLayoutAlignContentValueTT as AzLayoutAlignContentValue;
pub use AzLayoutAlignItemsValueTT as AzLayoutAlignItemsValue;
pub use AzLayoutBottomValueTT as AzLayoutBottomValue;
pub use AzLayoutBoxSizingValueTT as AzLayoutBoxSizingValue;
pub use AzLayoutDisplayValueTT as AzLayoutDisplayValue;
pub use AzLayoutFlexDirectionValueTT as AzLayoutFlexDirectionValue;
pub use AzLayoutFlexGrowValueTT as AzLayoutFlexGrowValue;
pub use AzLayoutFlexShrinkValueTT as AzLayoutFlexShrinkValue;
pub use AzLayoutFlexWrapValueTT as AzLayoutFlexWrapValue;
pub use AzLayoutFloatValueTT as AzLayoutFloatValue;
pub use AzLayoutHeightValueTT as AzLayoutHeightValue;
pub use AzLayoutJustifyContentValueTT as AzLayoutJustifyContentValue;
pub use AzLayoutLeftValueTT as AzLayoutLeftValue;
pub use AzLayoutMarginBottomValueTT as AzLayoutMarginBottomValue;
pub use AzLayoutMarginLeftValueTT as AzLayoutMarginLeftValue;
pub use AzLayoutMarginRightValueTT as AzLayoutMarginRightValue;
pub use AzLayoutMarginTopValueTT as AzLayoutMarginTopValue;
pub use AzLayoutMaxHeightValueTT as AzLayoutMaxHeightValue;
pub use AzLayoutMaxWidthValueTT as AzLayoutMaxWidthValue;
pub use AzLayoutMinHeightValueTT as AzLayoutMinHeightValue;
pub use AzLayoutMinWidthValueTT as AzLayoutMinWidthValue;
pub use AzLayoutOverflowValueTT as AzLayoutOverflowValue;
pub use AzLayoutPaddingBottomValueTT as AzLayoutPaddingBottomValue;
pub use AzLayoutPaddingLeftValueTT as AzLayoutPaddingLeftValue;
pub use AzLayoutPaddingRightValueTT as AzLayoutPaddingRightValue;
pub use AzLayoutPaddingTopValueTT as AzLayoutPaddingTopValue;
pub use AzLayoutPositionValueTT as AzLayoutPositionValue;
pub use AzLayoutRightValueTT as AzLayoutRightValue;
pub use AzLayoutTopValueTT as AzLayoutTopValue;
pub use AzLayoutWidthValueTT as AzLayoutWidthValue;
pub use AzScrollbarStyleValueTT as AzScrollbarStyleValue;
pub use AzStyleBackfaceVisibilityTT as AzStyleBackfaceVisibility;
pub use AzStyleBoxShadowValueTT as AzStyleBoxShadowValue;
pub use AzStyleFontSizeTT as AzStyleFontSize;
pub use AzStyleLetterSpacingTT as AzStyleLetterSpacing;
pub use AzStyleLineHeightTT as AzStyleLineHeight;
pub use AzStyleOpacityTT as AzStyleOpacity;
pub use AzStylePerspectiveOriginTT as AzStylePerspectiveOrigin;
pub use AzStyleTabWidthTT as AzStyleTabWidth;
pub use AzStyleTextAlignTT as AzStyleTextAlign;
pub use AzStyleTextColorTT as AzStyleTextColor;
pub use AzStyleTransformMatrix2DTT as AzStyleTransformMatrix2D;
pub use AzStyleTransformMatrix3DTT as AzStyleTransformMatrix3D;
pub use AzStyleTransformOriginTT as AzStyleTransformOrigin;
pub use AzStyleTransformRotate3DTT as AzStyleTransformRotate3D;
pub use AzStyleTransformScale2DTT as AzStyleTransformScale2D;
pub use AzStyleTransformScale3DTT as AzStyleTransformScale3D;
pub use AzStyleTransformSkew2DTT as AzStyleTransformSkew2D;
pub use AzStyleTransformTT as AzStyleTransform;
pub use AzStyleTransformTranslate2DTT as AzStyleTransformTranslate2D;
pub use AzStyleTransformTranslate3DTT as AzStyleTransformTranslate3D;
pub use AzStyleWordSpacingTT as AzStyleWordSpacing;
/// Destructor: Takes ownership of the `ScrollbarStyleValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzScrollbarStyleValue_delete(object: &mut AzScrollbarStyleValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecValue` struct
pub use azul_css::StyleBackgroundContentVecValue as AzStyleBackgroundContentVecValueTT;
pub use AzStyleBackgroundContentVecValueTT as AzStyleBackgroundContentVecValue;
/// Destructor: Takes ownership of the `StyleBackgroundContentVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundContentVecValue_delete(
    object: &mut AzStyleBackgroundContentVecValue,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecValue` struct
pub use azul_css::StyleBackgroundPositionVecValue as AzStyleBackgroundPositionVecValueTT;
pub use AzStyleBackgroundPositionVecValueTT as AzStyleBackgroundPositionVecValue;
/// Destructor: Takes ownership of the `StyleBackgroundPositionVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundPositionVecValue_delete(
    object: &mut AzStyleBackgroundPositionVecValue,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecValue` struct
pub use azul_css::StyleBackgroundRepeatVecValue as AzStyleBackgroundRepeatVecValueTT;
pub use AzStyleBackgroundRepeatVecValueTT as AzStyleBackgroundRepeatVecValue;
/// Destructor: Takes ownership of the `StyleBackgroundRepeatVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundRepeatVecValue_delete(
    object: &mut AzStyleBackgroundRepeatVecValue,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecValue` struct
pub use azul_css::StyleBackgroundSizeVecValue as AzStyleBackgroundSizeVecValueTT;
pub use AzStyleBackgroundSizeVecValueTT as AzStyleBackgroundSizeVecValue;
/// Destructor: Takes ownership of the `StyleBackgroundSizeVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundSizeVecValue_delete(object: &mut AzStyleBackgroundSizeVecValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidthValue` struct
pub use azul_css::LayoutBorderBottomWidthValue as AzLayoutBorderBottomWidthValueTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidthValue` struct
pub use azul_css::LayoutBorderLeftWidthValue as AzLayoutBorderLeftWidthValueTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderRightWidthValue` struct
pub use azul_css::LayoutBorderRightWidthValue as AzLayoutBorderRightWidthValueTT;
/// Re-export of rust-allocated (stack based) `LayoutBorderTopWidthValue` struct
pub use azul_css::LayoutBorderTopWidthValue as AzLayoutBorderTopWidthValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
pub use azul_css::StyleBorderBottomColorValue as AzStyleBorderBottomColorValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
pub use azul_css::StyleBorderBottomLeftRadiusValue as AzStyleBorderBottomLeftRadiusValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
pub use azul_css::StyleBorderBottomRightRadiusValue as AzStyleBorderBottomRightRadiusValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
pub use azul_css::StyleBorderBottomStyleValue as AzStyleBorderBottomStyleValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
pub use azul_css::StyleBorderLeftColorValue as AzStyleBorderLeftColorValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
pub use azul_css::StyleBorderLeftStyleValue as AzStyleBorderLeftStyleValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
pub use azul_css::StyleBorderRightColorValue as AzStyleBorderRightColorValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
pub use azul_css::StyleBorderRightStyleValue as AzStyleBorderRightStyleValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
pub use azul_css::StyleBorderTopColorValue as AzStyleBorderTopColorValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
pub use azul_css::StyleBorderTopLeftRadiusValue as AzStyleBorderTopLeftRadiusValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
pub use azul_css::StyleBorderTopRightRadiusValue as AzStyleBorderTopRightRadiusValueTT;
/// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
pub use azul_css::StyleBorderTopStyleValue as AzStyleBorderTopStyleValueTT;
/// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
pub use azul_css::StyleCursorValue as AzStyleCursorValueTT;
/// Re-export of rust-allocated (stack based) `StyleFontFamilyVecValue` struct
pub use azul_css::StyleFontFamilyVecValue as AzStyleFontFamilyVecValueTT;
pub use AzLayoutBorderBottomWidthValueTT as AzLayoutBorderBottomWidthValue;
pub use AzLayoutBorderLeftWidthValueTT as AzLayoutBorderLeftWidthValue;
pub use AzLayoutBorderRightWidthValueTT as AzLayoutBorderRightWidthValue;
pub use AzLayoutBorderTopWidthValueTT as AzLayoutBorderTopWidthValue;
pub use AzStyleBorderBottomColorValueTT as AzStyleBorderBottomColorValue;
pub use AzStyleBorderBottomLeftRadiusValueTT as AzStyleBorderBottomLeftRadiusValue;
pub use AzStyleBorderBottomRightRadiusValueTT as AzStyleBorderBottomRightRadiusValue;
pub use AzStyleBorderBottomStyleValueTT as AzStyleBorderBottomStyleValue;
pub use AzStyleBorderLeftColorValueTT as AzStyleBorderLeftColorValue;
pub use AzStyleBorderLeftStyleValueTT as AzStyleBorderLeftStyleValue;
pub use AzStyleBorderRightColorValueTT as AzStyleBorderRightColorValue;
pub use AzStyleBorderRightStyleValueTT as AzStyleBorderRightStyleValue;
pub use AzStyleBorderTopColorValueTT as AzStyleBorderTopColorValue;
pub use AzStyleBorderTopLeftRadiusValueTT as AzStyleBorderTopLeftRadiusValue;
pub use AzStyleBorderTopRightRadiusValueTT as AzStyleBorderTopRightRadiusValue;
pub use AzStyleBorderTopStyleValueTT as AzStyleBorderTopStyleValue;
pub use AzStyleCursorValueTT as AzStyleCursorValue;
pub use AzStyleFontFamilyVecValueTT as AzStyleFontFamilyVecValue;
/// Destructor: Takes ownership of the `StyleFontFamilyVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleFontFamilyVecValue_delete(object: &mut AzStyleFontFamilyVecValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
pub use azul_css::StyleFontSizeValue as AzStyleFontSizeValueTT;
/// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
pub use azul_css::StyleLetterSpacingValue as AzStyleLetterSpacingValueTT;
/// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
pub use azul_css::StyleLineHeightValue as AzStyleLineHeightValueTT;
/// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
pub use azul_css::StyleOpacityValue as AzStyleOpacityValueTT;
/// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
pub use azul_css::StyleTabWidthValue as AzStyleTabWidthValueTT;
/// Re-export of rust-allocated (stack based) `StyleTextAlignValue` struct
pub use azul_css::StyleTextAlignValue as AzStyleTextAlignValueTT;
/// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
pub use azul_css::StyleTextColorValue as AzStyleTextColorValueTT;
/// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
pub use azul_css::StyleTransformVecValue as AzStyleTransformVecValueTT;
/// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
pub use azul_css::StyleWordSpacingValue as AzStyleWordSpacingValueTT;
pub use AzStyleFontSizeValueTT as AzStyleFontSizeValue;
pub use AzStyleLetterSpacingValueTT as AzStyleLetterSpacingValue;
pub use AzStyleLineHeightValueTT as AzStyleLineHeightValue;
pub use AzStyleOpacityValueTT as AzStyleOpacityValue;
pub use AzStyleTabWidthValueTT as AzStyleTabWidthValue;
pub use AzStyleTextAlignValueTT as AzStyleTextAlignValue;
pub use AzStyleTextColorValueTT as AzStyleTextColorValue;
pub use AzStyleTransformVecValueTT as AzStyleTransformVecValue;
pub use AzStyleWordSpacingValueTT as AzStyleWordSpacingValue;
/// Destructor: Takes ownership of the `StyleTransformVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleTransformVecValue_delete(object: &mut AzStyleTransformVecValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
pub use azul_css::StyleBackfaceVisibilityValue as AzStyleBackfaceVisibilityValueTT;
/// Re-export of rust-allocated (stack based) `StyleFilterVecValue` struct
pub use azul_css::StyleFilterVecValue as AzStyleFilterVecValueTT;
/// Re-export of rust-allocated (stack based) `StyleMixBlendModeValue` struct
pub use azul_css::StyleMixBlendModeValue as AzStyleMixBlendModeValueTT;
/// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
pub use azul_css::StylePerspectiveOriginValue as AzStylePerspectiveOriginValueTT;
/// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
pub use azul_css::StyleTransformOriginValue as AzStyleTransformOriginValueTT;
pub use AzStyleBackfaceVisibilityValueTT as AzStyleBackfaceVisibilityValue;
pub use AzStyleFilterVecValueTT as AzStyleFilterVecValue;
pub use AzStyleMixBlendModeValueTT as AzStyleMixBlendModeValue;
pub use AzStylePerspectiveOriginValueTT as AzStylePerspectiveOriginValue;
pub use AzStyleTransformOriginValueTT as AzStyleTransformOriginValue;
/// Destructor: Takes ownership of the `StyleFilterVecValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleFilterVecValue_delete(object: &mut AzStyleFilterVecValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Parsed CSS key-value pair
pub use azul_css::CssProperty as AzCssPropertyTT;
pub use AzCssPropertyTT as AzCssProperty;
/// Returns the key of the CSS property as a string, i.e. `background`
#[no_mangle]
pub extern "C" fn AzCssProperty_getKeyString(cssproperty: &AzCssProperty) -> AzString {
    cssproperty.key().into()
}
/// Returns the value of the CSS property as a string, i.e. `linear-gradient(red, blue)`
#[no_mangle]
pub extern "C" fn AzCssProperty_getValueString(cssproperty: &AzCssProperty) -> AzString {
    cssproperty.value().into()
}
/// Returns the CSS key-value pair as a string, i.e. `background: linear-gradient(red, blue)`
#[no_mangle]
pub extern "C" fn AzCssProperty_getKeyValueString(cssproperty: &AzCssProperty) -> AzString {
    cssproperty.format_css().into()
}
/// Interpolates two CSS properties given a value `t` ranging from 0.0 to 1.0. The interpolation
/// function can be set on the `context` (`Ease`, `Linear`, etc.).
#[no_mangle]
pub extern "C" fn AzCssProperty_interpolate(
    cssproperty: &AzCssProperty,
    other: AzCssProperty,
    t: f32,
    context: AzInterpolateContext,
) -> AzCssProperty {
    cssproperty.interpolate(&other, t, &context)
}
/// Destructor: Takes ownership of the `CssProperty` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssProperty_delete(object: &mut AzCssProperty) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzRibbonTT as AzRibbon;

/// Re-export of rust-allocated (stack based) `Ribbon` struct
pub use crate::widgets::ribbon::Ribbon as AzRibbonTT;
/// Equivalent to the Rust `Ribbon::dom()` function.
#[no_mangle]
pub extern "C" fn AzRibbon_dom(
    ribbon: &mut AzRibbon,
    callback: AzRibbonOnTabClickedCallback,
    data: AzRefAny,
) -> AzDom {
    ribbon.dom(callback, data)
}

pub use AzRibbonOnTabClickedCallbackTT as AzRibbonOnTabClickedCallback;

/// Re-export of rust-allocated (stack based) `RibbonOnTabClickedCallback` struct
pub use crate::widgets::ribbon::RibbonOnTabClickedCallback as AzRibbonOnTabClickedCallbackTT;

pub type AzRibbonOnTabClickedCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, i32) -> AzUpdate;
pub use AzButtonTT as AzButton;

/// Re-export of rust-allocated (stack based) `Button` struct
pub use crate::widgets::button::Button as AzButtonTT;
/// Creates a new labeled button
#[no_mangle]
pub extern "C" fn AzButton_new(label: AzString) -> AzButton {
    AzButton::new(label)
}
/// Equivalent to the Rust `Button::set_on_click()` function.
#[no_mangle]
pub extern "C" fn AzButton_setOnClick(
    button: &mut AzButton,
    data: AzRefAny,
    callback: AzCallbackType,
) {
    button.set_on_click(data, callback);
}
/// Equivalent to the Rust `Button::with_on_click()` function.
#[no_mangle]
pub extern "C" fn AzButton_withOnClick(
    button: &mut AzButton,
    data: AzRefAny,
    callback: AzCallbackType,
) -> AzButton {
    let mut button = button.swap_with_default();
    button.set_on_click(data, callback);
    button
}
/// Equivalent to the Rust `Button::dom()` function.
#[no_mangle]
pub extern "C" fn AzButton_dom(button: &mut AzButton) -> AzDom {
    button.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `Button` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzButton_delete(object: &mut AzButton) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzButtonOnClickTT as AzButtonOnClick;

/// Re-export of rust-allocated (stack based) `ButtonOnClick` struct
pub use crate::widgets::button::ButtonOnClick as AzButtonOnClickTT;
/// Destructor: Takes ownership of the `ButtonOnClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzButtonOnClick_delete(object: &mut AzButtonOnClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFileInputTT as AzFileInput;

/// Re-export of rust-allocated (stack based) `FileInput` struct
pub use crate::widgets::file_input::FileInput as AzFileInputTT;
/// Creates a new file input button
#[no_mangle]
pub extern "C" fn AzFileInput_new(path: AzOptionString) -> AzFileInput {
    AzFileInput::new(path)
}
/// Equivalent to the Rust `FileInput::set_default_text()` function.
#[no_mangle]
pub extern "C" fn AzFileInput_setDefaultText(fileinput: &mut AzFileInput, default_text: AzString) {
    fileinput.set_default_text(default_text);
}
/// Equivalent to the Rust `FileInput::with_default_text()` function.
#[no_mangle]
pub extern "C" fn AzFileInput_withDefaultText(
    fileinput: &mut AzFileInput,
    default_text: AzString,
) -> AzFileInput {
    let mut fileinput = fileinput.swap_with_default();
    fileinput.set_default_text(default_text);
    fileinput
}
/// Equivalent to the Rust `FileInput::set_on_path_change()` function.
#[no_mangle]
pub extern "C" fn AzFileInput_setOnPathChange(
    fileinput: &mut AzFileInput,
    data: AzRefAny,
    callback: AzFileInputOnPathChangeCallbackType,
) {
    fileinput.set_on_path_change(data, callback);
}
/// Equivalent to the Rust `FileInput::with_on_path_change()` function.
#[no_mangle]
pub extern "C" fn AzFileInput_withOnPathChange(
    fileinput: &mut AzFileInput,
    data: AzRefAny,
    callback: AzFileInputOnPathChangeCallbackType,
) -> AzFileInput {
    let mut fileinput = fileinput.swap_with_default();
    fileinput.set_on_path_change(data, callback);
    fileinput
}
/// Equivalent to the Rust `FileInput::dom()` function.
#[no_mangle]
pub extern "C" fn AzFileInput_dom(fileinput: &mut AzFileInput) -> AzDom {
    fileinput.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `FileInput` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFileInput_delete(object: &mut AzFileInput) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFileInputStateWrapperTT as AzFileInputStateWrapper;

/// Re-export of rust-allocated (stack based) `FileInputStateWrapper` struct
pub use crate::widgets::file_input::FileInputStateWrapper as AzFileInputStateWrapperTT;
/// Destructor: Takes ownership of the `FileInputStateWrapper` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFileInputStateWrapper_delete(object: &mut AzFileInputStateWrapper) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFileInputStateTT as AzFileInputState;

/// Re-export of rust-allocated (stack based) `FileInputState` struct
pub use crate::widgets::file_input::FileInputState as AzFileInputStateTT;
/// Destructor: Takes ownership of the `FileInputState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFileInputState_delete(object: &mut AzFileInputState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFileInputOnPathChangeTT as AzFileInputOnPathChange;

/// Re-export of rust-allocated (stack based) `FileInputOnPathChange` struct
pub use crate::widgets::file_input::FileInputOnPathChange as AzFileInputOnPathChangeTT;
/// Destructor: Takes ownership of the `FileInputOnPathChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFileInputOnPathChange_delete(object: &mut AzFileInputOnPathChange) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFileInputOnPathChangeCallbackTT as AzFileInputOnPathChangeCallback;

/// Re-export of rust-allocated (stack based) `FileInputOnPathChangeCallback` struct
pub use crate::widgets::file_input::FileInputOnPathChangeCallback as AzFileInputOnPathChangeCallbackTT;

pub type AzFileInputOnPathChangeCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzFileInputState) -> AzUpdate;
pub use AzCheckBoxTT as AzCheckBox;

/// Re-export of rust-allocated (stack based) `CheckBox` struct
pub use crate::widgets::check_box::CheckBox as AzCheckBoxTT;
/// Creates a new checkbox, disabled or enabled
#[no_mangle]
pub extern "C" fn AzCheckBox_new(checked: bool) -> AzCheckBox {
    AzCheckBox::new(checked)
}
/// Equivalent to the Rust `CheckBox::set_on_toggle()` function.
#[no_mangle]
pub extern "C" fn AzCheckBox_setOnToggle(
    checkbox: &mut AzCheckBox,
    data: AzRefAny,
    callback: AzCheckBoxOnToggleCallbackType,
) {
    checkbox.set_on_toggle(data, callback);
}
/// Equivalent to the Rust `CheckBox::with_on_toggle()` function.
#[no_mangle]
pub extern "C" fn AzCheckBox_withOnToggle(
    checkbox: &mut AzCheckBox,
    data: AzRefAny,
    callback: AzCheckBoxOnToggleCallbackType,
) -> AzCheckBox {
    let mut checkbox = checkbox.swap_with_default();
    checkbox.set_on_toggle(data, callback);
    checkbox
}
/// Equivalent to the Rust `CheckBox::dom()` function.
#[no_mangle]
pub extern "C" fn AzCheckBox_dom(checkbox: &mut AzCheckBox) -> AzDom {
    checkbox.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `CheckBox` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCheckBox_delete(object: &mut AzCheckBox) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzCheckBoxStateWrapperTT as AzCheckBoxStateWrapper;

/// Re-export of rust-allocated (stack based) `CheckBoxStateWrapper` struct
pub use crate::widgets::check_box::CheckBoxStateWrapper as AzCheckBoxStateWrapperTT;
/// Destructor: Takes ownership of the `CheckBoxStateWrapper` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCheckBoxStateWrapper_delete(object: &mut AzCheckBoxStateWrapper) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzCheckBoxOnToggleTT as AzCheckBoxOnToggle;

/// Re-export of rust-allocated (stack based) `CheckBoxOnToggle` struct
pub use crate::widgets::check_box::CheckBoxOnToggle as AzCheckBoxOnToggleTT;
/// Destructor: Takes ownership of the `CheckBoxOnToggle` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCheckBoxOnToggle_delete(object: &mut AzCheckBoxOnToggle) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzCheckBoxOnToggleCallbackTT as AzCheckBoxOnToggleCallback;

/// Re-export of rust-allocated (stack based) `CheckBoxOnToggleCallback` struct
pub use crate::widgets::check_box::CheckBoxOnToggleCallback as AzCheckBoxOnToggleCallbackTT;

pub type AzCheckBoxOnToggleCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzCheckBoxState) -> AzUpdate;
pub use AzCheckBoxStateTT as AzCheckBoxState;
pub use AzLabelTT as AzLabel;

/// Re-export of rust-allocated (stack based) `CheckBoxState` struct
pub use crate::widgets::check_box::CheckBoxState as AzCheckBoxStateTT;
/// Re-export of rust-allocated (stack based) `Label` struct
pub use crate::widgets::label::Label as AzLabelTT;
/// Creates a new `Label` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Label::new()` constructor.
#[no_mangle]
pub extern "C" fn AzLabel_new(text: AzString) -> AzLabel {
    AzLabel::new(text)
}
/// Equivalent to the Rust `Label::dom()` function.
#[no_mangle]
pub extern "C" fn AzLabel_dom(label: &mut AzLabel) -> AzDom {
    label.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `Label` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLabel_delete(object: &mut AzLabel) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzColorInputTT as AzColorInput;

/// Re-export of rust-allocated (stack based) `ColorInput` struct
pub use crate::widgets::color_input::ColorInput as AzColorInputTT;
/// Creates a new `ColorInput` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ColorInput::new()` constructor.
#[no_mangle]
pub extern "C" fn AzColorInput_new(color: AzColorU) -> AzColorInput {
    AzColorInput::new(color)
}
/// Equivalent to the Rust `ColorInput::set_on_value_change()` function.
#[no_mangle]
pub extern "C" fn AzColorInput_setOnValueChange(
    colorinput: &mut AzColorInput,
    data: AzRefAny,
    callback: AzColorInputOnValueChangeCallbackType,
) {
    colorinput.set_on_value_change(data, callback)
}
/// Equivalent to the Rust `ColorInput::with_on_value_change()` function.
#[no_mangle]
pub extern "C" fn AzColorInput_withOnValueChange(
    colorinput: &mut AzColorInput,
    data: AzRefAny,
    callback: AzColorInputOnValueChangeCallbackType,
) -> AzColorInput {
    let mut colorinput = colorinput.swap_with_default();
    colorinput.set_on_value_change(data, callback);
    colorinput
}
/// Equivalent to the Rust `ColorInput::dom()` function.
#[no_mangle]
pub extern "C" fn AzColorInput_dom(colorinput: &mut AzColorInput) -> AzDom {
    colorinput.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `ColorInput` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzColorInput_delete(object: &mut AzColorInput) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzColorInputStateWrapperTT as AzColorInputStateWrapper;

/// Re-export of rust-allocated (stack based) `ColorInputStateWrapper` struct
pub use crate::widgets::color_input::ColorInputStateWrapper as AzColorInputStateWrapperTT;
/// Destructor: Takes ownership of the `ColorInputStateWrapper` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzColorInputStateWrapper_delete(object: &mut AzColorInputStateWrapper) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzColorInputOnValueChangeTT as AzColorInputOnValueChange;
pub use AzColorInputStateTT as AzColorInputState;

/// Re-export of rust-allocated (stack based) `ColorInputOnValueChange` struct
pub use crate::widgets::color_input::ColorInputOnValueChange as AzColorInputOnValueChangeTT;
/// Re-export of rust-allocated (stack based) `ColorInputState` struct
pub use crate::widgets::color_input::ColorInputState as AzColorInputStateTT;
/// Destructor: Takes ownership of the `ColorInputOnValueChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzColorInputOnValueChange_delete(object: &mut AzColorInputOnValueChange) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzColorInputOnValueChangeCallbackTT as AzColorInputOnValueChangeCallback;

/// Re-export of rust-allocated (stack based) `ColorInputOnValueChangeCallback` struct
pub use crate::widgets::color_input::ColorInputOnValueChangeCallback as AzColorInputOnValueChangeCallbackTT;

pub type AzColorInputOnValueChangeCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzColorInputState) -> AzUpdate;
pub use AzTextInputTT as AzTextInput;

/// Re-export of rust-allocated (stack based) `TextInput` struct
pub use crate::widgets::text_input::TextInput as AzTextInputTT;
/// Creates a new `TextInput` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TextInput::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTextInput_new() -> AzTextInput {
    AzTextInput::new()
}
/// Equivalent to the Rust `TextInput::set_text()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setText(textinput: &mut AzTextInput, text: AzString) {
    textinput.set_text(text)
}
/// Equivalent to the Rust `TextInput::with_text()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withText(textinput: &mut AzTextInput, text: AzString) -> AzTextInput {
    textinput.with_text(text)
}
/// Equivalent to the Rust `TextInput::set_placeholder()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setPlaceholder(textinput: &mut AzTextInput, text: AzString) {
    textinput.set_placeholder(text)
}
/// Equivalent to the Rust `TextInput::with_placeholder()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withPlaceholder(
    textinput: &mut AzTextInput,
    text: AzString,
) -> AzTextInput {
    textinput.with_placeholder(text)
}
/// Equivalent to the Rust `TextInput::set_on_text_input()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setOnTextInput(
    textinput: &mut AzTextInput,
    data: AzRefAny,
    callback: AzTextInputOnTextInputCallbackType,
) {
    textinput.set_on_text_input(data, callback)
}
/// Equivalent to the Rust `TextInput::with_on_text_input()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withOnTextInput(
    textinput: &mut AzTextInput,
    data: AzRefAny,
    callback: AzTextInputOnTextInputCallbackType,
) -> AzTextInput {
    let mut textinput = textinput.swap_with_default();
    textinput.set_on_text_input(data, callback);
    textinput
}
/// Equivalent to the Rust `TextInput::set_on_virtual_key_down()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setOnVirtualKeyDown(
    textinput: &mut AzTextInput,
    data: AzRefAny,
    callback: AzTextInputOnVirtualKeyDownCallbackType,
) {
    textinput.set_on_virtual_key_down(data, callback)
}
/// Equivalent to the Rust `TextInput::with_on_virtual_key_down()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withOnVirtualKeyDown(
    textinput: &mut AzTextInput,
    data: AzRefAny,
    callback: AzTextInputOnVirtualKeyDownCallbackType,
) -> AzTextInput {
    let mut textinput = textinput.swap_with_default();
    textinput.set_on_virtual_key_down(data, callback);
    textinput
}
/// Equivalent to the Rust `TextInput::set_on_focus_lost()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setOnFocusLost(
    textinput: &mut AzTextInput,
    data: AzRefAny,
    callback: AzTextInputOnFocusLostCallbackType,
) {
    textinput.set_on_focus_lost(data, callback)
}
/// Equivalent to the Rust `TextInput::with_on_focus_lost()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withOnFocusLost(
    textinput: &mut AzTextInput,
    data: AzRefAny,
    callback: AzTextInputOnFocusLostCallbackType,
) -> AzTextInput {
    let mut textinput = textinput.swap_with_default();
    textinput.set_on_focus_lost(data, callback);
    textinput
}
/// Equivalent to the Rust `TextInput::set_placeholder_style()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setPlaceholderStyle(
    textinput: &mut AzTextInput,
    placeholder_style: AzNodeDataInlineCssPropertyVec,
) {
    textinput.set_placeholder_style(placeholder_style)
}
/// Equivalent to the Rust `TextInput::with_placeholder_style()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withPlaceholderStyle(
    textinput: &mut AzTextInput,
    placeholder_style: AzNodeDataInlineCssPropertyVec,
) -> AzTextInput {
    let mut textinput = textinput.swap_with_default();
    textinput.set_placeholder_style(placeholder_style);
    textinput
}
/// Equivalent to the Rust `TextInput::set_container_style()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setContainerStyle(
    textinput: &mut AzTextInput,
    container_style: AzNodeDataInlineCssPropertyVec,
) {
    textinput.set_container_style(container_style)
}
/// Equivalent to the Rust `TextInput::with_container_style()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withContainerStyle(
    textinput: &mut AzTextInput,
    container_style: AzNodeDataInlineCssPropertyVec,
) -> AzTextInput {
    let mut textinput = textinput.swap_with_default();
    textinput.set_container_style(container_style);
    textinput
}
/// Equivalent to the Rust `TextInput::set_label_style()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_setLabelStyle(
    textinput: &mut AzTextInput,
    label_style: AzNodeDataInlineCssPropertyVec,
) {
    textinput.set_container_style(label_style)
}
/// Equivalent to the Rust `TextInput::with_label_style()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_withLabelStyle(
    textinput: &mut AzTextInput,
    label_style: AzNodeDataInlineCssPropertyVec,
) -> AzTextInput {
    let mut textinput = textinput.swap_with_default();
    textinput.set_label_style(label_style);
    textinput
}
/// Equivalent to the Rust `TextInput::dom()` function.
#[no_mangle]
pub extern "C" fn AzTextInput_dom(textinput: &mut AzTextInput) -> AzDom {
    textinput.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `TextInput` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTextInput_delete(object: &mut AzTextInput) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTextInputStateWrapperTT as AzTextInputStateWrapper;

/// Re-export of rust-allocated (stack based) `TextInputStateWrapper` struct
pub use crate::widgets::text_input::TextInputStateWrapper as AzTextInputStateWrapperTT;
/// Destructor: Takes ownership of the `TextInputStateWrapper` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTextInputStateWrapper_delete(object: &mut AzTextInputStateWrapper) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTextInputStateTT as AzTextInputState;

/// Re-export of rust-allocated (stack based) `TextInputState` struct
pub use crate::widgets::text_input::TextInputState as AzTextInputStateTT;
/// Equivalent to the Rust `TextInputState::get_text()` function.
#[no_mangle]
pub extern "C" fn AzTextInputState_getText(textinputstate: &AzTextInputState) -> AzString {
    textinputstate.get_text().into()
}
/// Destructor: Takes ownership of the `TextInputState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTextInputState_delete(object: &mut AzTextInputState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTextInputOnTextInputTT as AzTextInputOnTextInput;
pub use AzTextInputSelectionRangeTT as AzTextInputSelectionRange;
pub use AzTextInputSelectionTT as AzTextInputSelection;

/// Re-export of rust-allocated (stack based) `TextInputOnTextInput` struct
pub use crate::widgets::text_input::TextInputOnTextInput as AzTextInputOnTextInputTT;
/// Re-export of rust-allocated (stack based) `TextInputSelection` struct
pub use crate::widgets::text_input::TextInputSelection as AzTextInputSelectionTT;
/// Re-export of rust-allocated (stack based) `TextInputSelectionRange` struct
pub use crate::widgets::text_input::TextInputSelectionRange as AzTextInputSelectionRangeTT;
/// Destructor: Takes ownership of the `TextInputOnTextInput` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTextInputOnTextInput_delete(object: &mut AzTextInputOnTextInput) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTextInputOnTextInputCallbackTT as AzTextInputOnTextInputCallback;

/// Re-export of rust-allocated (stack based) `TextInputOnTextInputCallback` struct
pub use crate::widgets::text_input::TextInputOnTextInputCallback as AzTextInputOnTextInputCallbackTT;

pub type AzTextInputOnTextInputCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTextInputState) -> AzOnTextInputReturn;
pub use AzTextInputOnVirtualKeyDownTT as AzTextInputOnVirtualKeyDown;

/// Re-export of rust-allocated (stack based) `TextInputOnVirtualKeyDown` struct
pub use crate::widgets::text_input::TextInputOnVirtualKeyDown as AzTextInputOnVirtualKeyDownTT;
/// Destructor: Takes ownership of the `TextInputOnVirtualKeyDown` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTextInputOnVirtualKeyDown_delete(object: &mut AzTextInputOnVirtualKeyDown) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTextInputOnVirtualKeyDownCallbackTT as AzTextInputOnVirtualKeyDownCallback;

/// Re-export of rust-allocated (stack based) `TextInputOnVirtualKeyDownCallback` struct
pub use crate::widgets::text_input::TextInputOnVirtualKeyDownCallback as AzTextInputOnVirtualKeyDownCallbackTT;

pub type AzTextInputOnVirtualKeyDownCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTextInputState) -> AzOnTextInputReturn;
pub use AzTextInputOnFocusLostTT as AzTextInputOnFocusLost;

/// Re-export of rust-allocated (stack based) `TextInputOnFocusLost` struct
pub use crate::widgets::text_input::TextInputOnFocusLost as AzTextInputOnFocusLostTT;
/// Destructor: Takes ownership of the `TextInputOnFocusLost` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTextInputOnFocusLost_delete(object: &mut AzTextInputOnFocusLost) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTextInputOnFocusLostCallbackTT as AzTextInputOnFocusLostCallback;

/// Re-export of rust-allocated (stack based) `TextInputOnFocusLostCallback` struct
pub use crate::widgets::text_input::TextInputOnFocusLostCallback as AzTextInputOnFocusLostCallbackTT;

pub type AzTextInputOnFocusLostCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTextInputState) -> AzUpdate;
pub use AzNumberInputTT as AzNumberInput;
pub use AzOnTextInputReturnTT as AzOnTextInputReturn;
pub use AzTextInputValidTT as AzTextInputValid;

/// Re-export of rust-allocated (stack based) `NumberInput` struct
pub use crate::widgets::number_input::NumberInput as AzNumberInputTT;
/// Re-export of rust-allocated (stack based) `OnTextInputReturn` struct
pub use crate::widgets::text_input::OnTextInputReturn as AzOnTextInputReturnTT;
/// Re-export of rust-allocated (stack based) `TextInputValid` struct
pub use crate::widgets::text_input::TextInputValid as AzTextInputValidTT;
/// Creates a new `NumberInput` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `NumberInput::new()` constructor.
#[no_mangle]
pub extern "C" fn AzNumberInput_new(number: f32) -> AzNumberInput {
    AzNumberInput::new(number)
}
/// Equivalent to the Rust `NumberInput::set_on_text_input()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setOnTextInput(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzTextInputOnTextInputCallbackType,
) {
    numberinput.set_on_text_input(data, callback)
}
/// Equivalent to the Rust `NumberInput::with_on_text_input()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withOnTextInput(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzTextInputOnTextInputCallbackType,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_on_text_input(data, callback);
    numberinput
}
/// Equivalent to the Rust `NumberInput::set_on_virtual_key_down()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setOnVirtualKeyDown(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzTextInputOnVirtualKeyDownCallbackType,
) {
    numberinput.set_on_virtual_key_down(data, callback)
}
/// Equivalent to the Rust `NumberInput::with_on_virtual_key_down()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withOnVirtualKeyDown(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzTextInputOnVirtualKeyDownCallbackType,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_on_virtual_key_down(data, callback);
    numberinput
}
/// Equivalent to the Rust `NumberInput::set_on_focus_lost()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setOnFocusLost(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzNumberInputOnFocusLostCallbackType,
) {
    numberinput.set_on_focus_lost(data, callback)
}
/// Equivalent to the Rust `NumberInput::with_on_focus_lost()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withOnFocusLost(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzNumberInputOnFocusLostCallbackType,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_on_focus_lost(data, callback);
    numberinput
}
/// Equivalent to the Rust `NumberInput::set_placeholder_style()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setPlaceholderStyle(
    numberinput: &mut AzNumberInput,
    style: AzNodeDataInlineCssPropertyVec,
) {
    numberinput.set_placeholder_style(style)
}
/// Equivalent to the Rust `NumberInput::with_placeholder_style()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withPlaceholderStyle(
    numberinput: &mut AzNumberInput,
    style: AzNodeDataInlineCssPropertyVec,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_placeholder_style(style);
    numberinput
}
/// Equivalent to the Rust `NumberInput::set_container_style()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setContainerStyle(
    numberinput: &mut AzNumberInput,
    style: AzNodeDataInlineCssPropertyVec,
) {
    numberinput.set_container_style(style)
}
/// Equivalent to the Rust `NumberInput::with_container_style()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withContainerStyle(
    numberinput: &mut AzNumberInput,
    style: AzNodeDataInlineCssPropertyVec,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_container_style(style);
    numberinput
}
/// Equivalent to the Rust `NumberInput::set_label_style()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setLabelStyle(
    numberinput: &mut AzNumberInput,
    style: AzNodeDataInlineCssPropertyVec,
) {
    numberinput.set_label_style(style)
}
/// Equivalent to the Rust `NumberInput::with_label_style()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withLabelStyle(
    numberinput: &mut AzNumberInput,
    style: AzNodeDataInlineCssPropertyVec,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_label_style(style);
    numberinput
}
/// Equivalent to the Rust `NumberInput::set_on_value_change()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_setOnValueChange(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzNumberInputOnValueChangeCallbackType,
) {
    numberinput.set_on_value_change(data, callback)
}
/// Equivalent to the Rust `NumberInput::with_on_value_change()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_withOnValueChange(
    numberinput: &mut AzNumberInput,
    data: AzRefAny,
    callback: AzNumberInputOnValueChangeCallbackType,
) -> AzNumberInput {
    let mut numberinput = numberinput.swap_with_default();
    numberinput.set_on_value_change(data, callback);
    numberinput
}
/// Equivalent to the Rust `NumberInput::dom()` function.
#[no_mangle]
pub extern "C" fn AzNumberInput_dom(numberinput: &mut AzNumberInput) -> AzDom {
    numberinput.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `NumberInput` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNumberInput_delete(object: &mut AzNumberInput) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNumberInputStateWrapperTT as AzNumberInputStateWrapper;

/// Re-export of rust-allocated (stack based) `NumberInputStateWrapper` struct
pub use crate::widgets::number_input::NumberInputStateWrapper as AzNumberInputStateWrapperTT;
/// Destructor: Takes ownership of the `NumberInputStateWrapper` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNumberInputStateWrapper_delete(object: &mut AzNumberInputStateWrapper) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNumberInputOnValueChangeTT as AzNumberInputOnValueChange;
pub use AzNumberInputStateTT as AzNumberInputState;

/// Re-export of rust-allocated (stack based) `NumberInputOnValueChange` struct
pub use crate::widgets::number_input::NumberInputOnValueChange as AzNumberInputOnValueChangeTT;
/// Re-export of rust-allocated (stack based) `NumberInputState` struct
pub use crate::widgets::number_input::NumberInputState as AzNumberInputStateTT;
/// Destructor: Takes ownership of the `NumberInputOnValueChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNumberInputOnValueChange_delete(object: &mut AzNumberInputOnValueChange) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNumberInputOnValueChangeCallbackTT as AzNumberInputOnValueChangeCallback;

/// Re-export of rust-allocated (stack based) `NumberInputOnValueChangeCallback` struct
pub use crate::widgets::number_input::NumberInputOnValueChangeCallback as AzNumberInputOnValueChangeCallbackTT;

pub type AzNumberInputOnValueChangeCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzNumberInputState) -> AzUpdate;
pub use AzNumberInputOnFocusLostTT as AzNumberInputOnFocusLost;

/// Re-export of rust-allocated (stack based) `NumberInputOnFocusLost` struct
pub use crate::widgets::number_input::NumberInputOnFocusLost as AzNumberInputOnFocusLostTT;
/// Destructor: Takes ownership of the `NumberInputOnFocusLost` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNumberInputOnFocusLost_delete(object: &mut AzNumberInputOnFocusLost) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNumberInputOnFocusLostCallbackTT as AzNumberInputOnFocusLostCallback;

/// Re-export of rust-allocated (stack based) `NumberInputOnFocusLostCallback` struct
pub use crate::widgets::number_input::NumberInputOnFocusLostCallback as AzNumberInputOnFocusLostCallbackTT;

pub type AzNumberInputOnFocusLostCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzNumberInputState) -> AzUpdate;
pub use AzProgressBarTT as AzProgressBar;

/// Re-export of rust-allocated (stack based) `ProgressBar` struct
pub use crate::widgets::progressbar::ProgressBar as AzProgressBarTT;
/// Creates a new `ProgressBar` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ProgressBar::new()` constructor.
#[no_mangle]
pub extern "C" fn AzProgressBar_new(percent_done: f32) -> AzProgressBar {
    AzProgressBar::new(percent_done)
}
/// Equivalent to the Rust `ProgressBar::set_height()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_setHeight(progressbar: &mut AzProgressBar, height: AzPixelValue) {
    progressbar.set_height(height);
}
/// Equivalent to the Rust `ProgressBar::with_height()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_withHeight(
    progressbar: &mut AzProgressBar,
    height: AzPixelValue,
) -> AzProgressBar {
    let mut progressbar = progressbar.swap_with_default();
    progressbar.set_height(height);
    progressbar
}
/// Equivalent to the Rust `ProgressBar::set_container_background()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_setContainerBackground(
    progressbar: &mut AzProgressBar,
    background: AzStyleBackgroundContentVec,
) {
    progressbar.set_container_background(background);
}
/// Equivalent to the Rust `ProgressBar::with_container_style()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_withContainerStyle(
    progressbar: &mut AzProgressBar,
    background: AzStyleBackgroundContentVec,
) -> AzProgressBar {
    let mut progressbar = progressbar.swap_with_default();
    progressbar.set_container_background(background);
    progressbar
}
/// Equivalent to the Rust `ProgressBar::set_bar_background()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_setBarBackground(
    progressbar: &mut AzProgressBar,
    background: AzStyleBackgroundContentVec,
) {
    progressbar.set_bar_background(background);
}
/// Equivalent to the Rust `ProgressBar::with_bar_background()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_withBarBackground(
    progressbar: &mut AzProgressBar,
    background: AzStyleBackgroundContentVec,
) -> AzProgressBar {
    let mut progressbar = progressbar.swap_with_default();
    progressbar.set_bar_background(background);
    progressbar
}
/// Equivalent to the Rust `ProgressBar::dom()` function.
#[no_mangle]
pub extern "C" fn AzProgressBar_dom(progressbar: &mut AzProgressBar) -> AzDom {
    progressbar.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `ProgressBar` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzProgressBar_delete(object: &mut AzProgressBar) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzProgressBarStateTT as AzProgressBarState;
pub use AzTabHeaderTT as AzTabHeader;

/// Re-export of rust-allocated (stack based) `ProgressBarState` struct
pub use crate::widgets::progressbar::ProgressBarState as AzProgressBarStateTT;
/// Re-export of rust-allocated (stack based) `TabHeader` struct
pub use crate::widgets::tabs::TabHeader as AzTabHeaderTT;
/// Creates a new `TabHeader` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TabHeader::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTabHeader_new(tabs: AzStringVec) -> AzTabHeader {
    AzTabHeader::new(tabs)
}
/// Equivalent to the Rust `TabHeader::set_active_tab()` function.
#[no_mangle]
pub extern "C" fn AzTabHeader_setActiveTab(tabheader: &mut AzTabHeader, active_tab: usize) {
    tabheader.set_active_tab(active_tab)
}
/// Equivalent to the Rust `TabHeader::with_active_tab()` function.
#[no_mangle]
pub extern "C" fn AzTabHeader_withActiveTab(
    tabheader: &mut AzTabHeader,
    active_tab: usize,
) -> AzTabHeader {
    tabheader.with_active_tab(active_tab)
}
/// Equivalent to the Rust `TabHeader::set_on_click()` function.
#[no_mangle]
pub extern "C" fn AzTabHeader_setOnClick(
    tabheader: &mut AzTabHeader,
    data: AzRefAny,
    callback: AzTabOnClickCallbackType,
) {
    tabheader.set_on_click(data, callback)
}
/// Equivalent to the Rust `TabHeader::with_on_click()` function.
#[no_mangle]
pub extern "C" fn AzTabHeader_withOnClick(
    tabheader: &mut AzTabHeader,
    data: AzRefAny,
    callback: AzTabOnClickCallbackType,
) -> AzTabHeader {
    tabheader.with_on_click(data, callback)
}
/// Equivalent to the Rust `TabHeader::dom()` function.
#[no_mangle]
pub extern "C" fn AzTabHeader_dom(tabheader: &mut AzTabHeader) -> AzDom {
    tabheader.dom()
}
/// Destructor: Takes ownership of the `TabHeader` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTabHeader_delete(object: &mut AzTabHeader) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTabContentTT as AzTabContent;
pub use AzTabHeaderStateTT as AzTabHeaderState;

/// Re-export of rust-allocated (stack based) `TabContent` struct
pub use crate::widgets::tabs::TabContent as AzTabContentTT;
/// Re-export of rust-allocated (stack based) `TabHeaderState` struct
pub use crate::widgets::tabs::TabHeaderState as AzTabHeaderStateTT;
/// Creates a new `TabContent` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TabContent::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTabContent_new(content: AzDom) -> AzTabContent {
    AzTabContent::new(content)
}
/// Equivalent to the Rust `TabContent::set_padding()` function.
#[no_mangle]
pub extern "C" fn AzTabContent_setPadding(tabcontent: &mut AzTabContent, has_padding: bool) {
    tabcontent.set_padding(has_padding)
}
/// Equivalent to the Rust `TabContent::with_padding()` function.
#[no_mangle]
pub extern "C" fn AzTabContent_withPadding(
    tabcontent: &mut AzTabContent,
    has_padding: bool,
) -> AzTabContent {
    tabcontent.with_padding(has_padding)
}
/// Equivalent to the Rust `TabContent::dom()` function.
#[no_mangle]
pub extern "C" fn AzTabContent_dom(tabcontent: &mut AzTabContent) -> AzDom {
    tabcontent.dom()
}
/// Destructor: Takes ownership of the `TabContent` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTabContent_delete(object: &mut AzTabContent) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTabOnClickTT as AzTabOnClick;

/// Re-export of rust-allocated (stack based) `TabOnClick` struct
pub use crate::widgets::tabs::TabOnClick as AzTabOnClickTT;
/// Destructor: Takes ownership of the `TabOnClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTabOnClick_delete(object: &mut AzTabOnClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTabOnClickCallbackTT as AzTabOnClickCallback;

/// Re-export of rust-allocated (stack based) `TabOnClickCallback` struct
pub use crate::widgets::tabs::TabOnClickCallback as AzTabOnClickCallbackTT;

pub type AzTabOnClickCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTabHeaderState) -> AzUpdate;
pub use AzFrameTT as AzFrame;

/// Re-export of rust-allocated (stack based) `Frame` struct
pub use crate::widgets::frame::Frame as AzFrameTT;
/// Creates a new `Frame` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Frame::new()` constructor.
#[no_mangle]
pub extern "C" fn AzFrame_new(title: AzString, dom: AzDom) -> AzFrame {
    AzFrame::new(title, dom)
}
/// Equivalent to the Rust `Frame::set_flex_grow()` function.
#[no_mangle]
pub extern "C" fn AzFrame_setFlexGrow(frame: &mut AzFrame, flex_grow: f32) {
    frame.set_flex_grow(flex_grow)
}
/// Equivalent to the Rust `Frame::with_flex_grow()` function.
#[no_mangle]
pub extern "C" fn AzFrame_withFlexGrow(frame: &mut AzFrame, flex_grow: f32) -> AzFrame {
    let mut frame = frame.swap_with_default();
    frame.set_flex_grow(flex_grow);
    frame
}
/// Equivalent to the Rust `Frame::dom()` function.
#[no_mangle]
pub extern "C" fn AzFrame_dom(frame: &mut AzFrame) -> AzDom {
    frame.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `Frame` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFrame_delete(object: &mut AzFrame) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeGraphTT as AzNodeGraph;

/// Re-export of rust-allocated (stack based) `NodeGraph` struct
pub use crate::widgets::node_graph::NodeGraph as AzNodeGraphTT;
/// Equivalent to the Rust `NodeGraph::dom()` function.
#[no_mangle]
pub extern "C" fn AzNodeGraph_dom(nodegraph: &mut AzNodeGraph) -> AzDom {
    nodegraph.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `NodeGraph` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraph_delete(object: &mut AzNodeGraph) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeTypeIdInfoMapTT as AzNodeTypeIdInfoMap;

/// Re-export of rust-allocated (stack based) `NodeTypeIdInfoMap` struct
pub use crate::widgets::node_graph::NodeTypeIdInfoMap as AzNodeTypeIdInfoMapTT;
/// Destructor: Takes ownership of the `NodeTypeIdInfoMap` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeTypeIdInfoMap_delete(object: &mut AzNodeTypeIdInfoMap) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputOutputTypeIdInfoMapTT as AzInputOutputTypeIdInfoMap;

/// Re-export of rust-allocated (stack based) `InputOutputTypeIdInfoMap` struct
pub use crate::widgets::node_graph::InputOutputTypeIdInfoMap as AzInputOutputTypeIdInfoMapTT;
/// Destructor: Takes ownership of the `InputOutputTypeIdInfoMap` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputOutputTypeIdInfoMap_delete(object: &mut AzInputOutputTypeIdInfoMap) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeIdNodeMapTT as AzNodeIdNodeMap;

/// Re-export of rust-allocated (stack based) `NodeIdNodeMap` struct
pub use crate::widgets::node_graph::NodeIdNodeMap as AzNodeIdNodeMapTT;
/// Destructor: Takes ownership of the `NodeIdNodeMap` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeIdNodeMap_delete(object: &mut AzNodeIdNodeMap) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeGraphCallbacksTT as AzNodeGraphCallbacks;
pub use AzNodeGraphStyleTT as AzNodeGraphStyle;

/// Re-export of rust-allocated (stack based) `NodeGraphCallbacks` struct
pub use crate::widgets::node_graph::NodeGraphCallbacks as AzNodeGraphCallbacksTT;
/// Re-export of rust-allocated (stack based) `NodeGraphStyle` struct
pub use crate::widgets::node_graph::NodeGraphStyle as AzNodeGraphStyleTT;
/// Destructor: Takes ownership of the `NodeGraphCallbacks` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphCallbacks_delete(object: &mut AzNodeGraphCallbacks) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeAddedCallbackType = extern "C" fn(
    &mut AzRefAny,
    &mut AzCallbackInfo,
    AzNodeTypeId,
    AzNodeGraphNodeId,
    AzNodePosition,
) -> AzUpdate;
pub use AzNodeGraphOnNodeAddedCallbackTT as AzNodeGraphOnNodeAddedCallback;
pub use AzNodeGraphOnNodeAddedTT as AzNodeGraphOnNodeAdded;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeAdded` struct
pub use crate::widgets::node_graph::OnNodeAdded as AzNodeGraphOnNodeAddedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeAddedCallback` struct
pub use crate::widgets::node_graph::OnNodeAddedCallback as AzNodeGraphOnNodeAddedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeAdded` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeAdded_delete(object: &mut AzNodeGraphOnNodeAdded) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeRemovedCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzNodeGraphNodeId) -> AzUpdate;
pub use AzNodeGraphOnNodeRemovedCallbackTT as AzNodeGraphOnNodeRemovedCallback;
pub use AzNodeGraphOnNodeRemovedTT as AzNodeGraphOnNodeRemoved;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeRemoved` struct
pub use crate::widgets::node_graph::OnNodeRemoved as AzNodeGraphOnNodeRemovedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeRemovedCallback` struct
pub use crate::widgets::node_graph::OnNodeRemovedCallback as AzNodeGraphOnNodeRemovedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeRemoved` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeRemoved_delete(object: &mut AzNodeGraphOnNodeRemoved) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeGraphDraggedCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzGraphDragAmount) -> AzUpdate;
pub use AzNodeGraphOnNodeGraphDraggedCallbackTT as AzNodeGraphOnNodeGraphDraggedCallback;
pub use AzNodeGraphOnNodeGraphDraggedTT as AzNodeGraphOnNodeGraphDragged;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeGraphDragged` struct
pub use crate::widgets::node_graph::OnNodeGraphDragged as AzNodeGraphOnNodeGraphDraggedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeGraphDraggedCallback` struct
pub use crate::widgets::node_graph::OnNodeGraphDraggedCallback as AzNodeGraphOnNodeGraphDraggedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeGraphDragged` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeGraphDragged_delete(object: &mut AzNodeGraphOnNodeGraphDragged) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeDraggedCallbackType = extern "C" fn(
    &mut AzRefAny,
    &mut AzCallbackInfo,
    AzNodeGraphNodeId,
    AzNodeDragAmount,
) -> AzUpdate;
pub use AzNodeGraphOnNodeDraggedCallbackTT as AzNodeGraphOnNodeDraggedCallback;
pub use AzNodeGraphOnNodeDraggedTT as AzNodeGraphOnNodeDragged;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeDragged` struct
pub use crate::widgets::node_graph::OnNodeDragged as AzNodeGraphOnNodeDraggedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeDraggedCallback` struct
pub use crate::widgets::node_graph::OnNodeDraggedCallback as AzNodeGraphOnNodeDraggedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeDragged` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeDragged_delete(object: &mut AzNodeGraphOnNodeDragged) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeConnectedCallbackType = extern "C" fn(
    &mut AzRefAny,
    &mut AzCallbackInfo,
    AzNodeGraphNodeId,
    usize,
    AzNodeGraphNodeId,
    usize,
) -> AzUpdate;
pub use AzNodeGraphOnNodeConnectedCallbackTT as AzNodeGraphOnNodeConnectedCallback;
pub use AzNodeGraphOnNodeConnectedTT as AzNodeGraphOnNodeConnected;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeConnected` struct
pub use crate::widgets::node_graph::OnNodeConnected as AzNodeGraphOnNodeConnectedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeConnectedCallback` struct
pub use crate::widgets::node_graph::OnNodeConnectedCallback as AzNodeGraphOnNodeConnectedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeConnected` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeConnected_delete(object: &mut AzNodeGraphOnNodeConnected) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeInputDisconnectedCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzNodeGraphNodeId, usize) -> AzUpdate;
pub use AzNodeGraphOnNodeInputDisconnectedCallbackTT as AzNodeGraphOnNodeInputDisconnectedCallback;
pub use AzNodeGraphOnNodeInputDisconnectedTT as AzNodeGraphOnNodeInputDisconnected;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeInputDisconnected` struct
pub use crate::widgets::node_graph::OnNodeInputDisconnected as AzNodeGraphOnNodeInputDisconnectedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeInputDisconnectedCallback` struct
pub use crate::widgets::node_graph::OnNodeInputDisconnectedCallback as AzNodeGraphOnNodeInputDisconnectedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeInputDisconnected` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeInputDisconnected_delete(
    object: &mut AzNodeGraphOnNodeInputDisconnected,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeOutputDisconnectedCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzNodeGraphNodeId, usize) -> AzUpdate;
pub use AzNodeGraphOnNodeOutputDisconnectedCallbackTT as AzNodeGraphOnNodeOutputDisconnectedCallback;
pub use AzNodeGraphOnNodeOutputDisconnectedTT as AzNodeGraphOnNodeOutputDisconnected;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeOutputDisconnected` struct
pub use crate::widgets::node_graph::OnNodeOutputDisconnected as AzNodeGraphOnNodeOutputDisconnectedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeOutputDisconnectedCallback`
/// struct
pub use crate::widgets::node_graph::OnNodeOutputDisconnectedCallback as AzNodeGraphOnNodeOutputDisconnectedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeOutputDisconnected` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeOutputDisconnected_delete(
    object: &mut AzNodeGraphOnNodeOutputDisconnected,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzNodeGraphOnNodeFieldEditedCallbackType = extern "C" fn(
    &mut AzRefAny,
    &mut AzCallbackInfo,
    AzNodeGraphNodeId,
    usize,
    AzNodeTypeId,
    AzNodeTypeFieldValue,
) -> AzUpdate;
pub use AzNodeGraphOnNodeFieldEditedCallbackTT as AzNodeGraphOnNodeFieldEditedCallback;
pub use AzNodeGraphOnNodeFieldEditedTT as AzNodeGraphOnNodeFieldEdited;

/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeFieldEdited` struct
pub use crate::widgets::node_graph::OnNodeFieldEdited as AzNodeGraphOnNodeFieldEditedTT;
/// Re-export of rust-allocated (stack based) `NodeGraphOnNodeFieldEditedCallback` struct
pub use crate::widgets::node_graph::OnNodeFieldEditedCallback as AzNodeGraphOnNodeFieldEditedCallbackTT;
/// Destructor: Takes ownership of the `NodeGraphOnNodeFieldEdited` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeGraphOnNodeFieldEdited_delete(object: &mut AzNodeGraphOnNodeFieldEdited) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputOutputTypeIdTT as AzInputOutputTypeId;
pub use AzNodeGraphNodeIdTT as AzNodeGraphNodeId;
pub use AzNodeTT as AzNode;
pub use AzNodeTypeIdTT as AzNodeTypeId;

/// Re-export of rust-allocated (stack based) `InputOutputTypeId` struct
pub use crate::widgets::node_graph::InputOutputTypeId as AzInputOutputTypeIdTT;
/// Re-export of rust-allocated (stack based) `Node` struct
pub use crate::widgets::node_graph::Node as AzNodeTT;
/// Re-export of rust-allocated (stack based) `NodeGraphNodeId` struct
pub use crate::widgets::node_graph::NodeGraphNodeId as AzNodeGraphNodeIdTT;
/// Re-export of rust-allocated (stack based) `NodeTypeId` struct
pub use crate::widgets::node_graph::NodeTypeId as AzNodeTypeIdTT;
/// Destructor: Takes ownership of the `Node` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNode_delete(object: &mut AzNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeTypeFieldTT as AzNodeTypeField;

/// Re-export of rust-allocated (stack based) `NodeTypeField` struct
pub use crate::widgets::node_graph::NodeTypeField as AzNodeTypeFieldTT;
/// Destructor: Takes ownership of the `NodeTypeField` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeTypeField_delete(object: &mut AzNodeTypeField) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeTypeFieldValueTT as AzNodeTypeFieldValue;

/// Re-export of rust-allocated (stack based) `NodeTypeFieldValue` struct
pub use crate::widgets::node_graph::NodeTypeFieldValue as AzNodeTypeFieldValueTT;
/// Destructor: Takes ownership of the `NodeTypeFieldValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeTypeFieldValue_delete(object: &mut AzNodeTypeFieldValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputConnectionTT as AzInputConnection;

/// Re-export of rust-allocated (stack based) `InputConnection` struct
pub use crate::widgets::node_graph::InputConnection as AzInputConnectionTT;
/// Destructor: Takes ownership of the `InputConnection` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputConnection_delete(object: &mut AzInputConnection) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOutputConnectionTT as AzOutputConnection;
pub use AzOutputNodeAndIndexTT as AzOutputNodeAndIndex;

/// Re-export of rust-allocated (stack based) `OutputConnection` struct
pub use crate::widgets::node_graph::OutputConnection as AzOutputConnectionTT;
/// Re-export of rust-allocated (stack based) `OutputNodeAndIndex` struct
pub use crate::widgets::node_graph::OutputNodeAndIndex as AzOutputNodeAndIndexTT;
/// Destructor: Takes ownership of the `OutputConnection` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOutputConnection_delete(object: &mut AzOutputConnection) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputNodeAndIndexTT as AzInputNodeAndIndex;
pub use AzNodeTypeInfoTT as AzNodeTypeInfo;

/// Re-export of rust-allocated (stack based) `InputNodeAndIndex` struct
pub use crate::widgets::node_graph::InputNodeAndIndex as AzInputNodeAndIndexTT;
/// Re-export of rust-allocated (stack based) `NodeTypeInfo` struct
pub use crate::widgets::node_graph::NodeTypeInfo as AzNodeTypeInfoTT;
/// Destructor: Takes ownership of the `NodeTypeInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeTypeInfo_delete(object: &mut AzNodeTypeInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputOutputInfoTT as AzInputOutputInfo;

/// Re-export of rust-allocated (stack based) `InputOutputInfo` struct
pub use crate::widgets::node_graph::InputOutputInfo as AzInputOutputInfoTT;
/// Destructor: Takes ownership of the `InputOutputInfo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputOutputInfo_delete(object: &mut AzInputOutputInfo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzGraphDragAmountTT as AzGraphDragAmount;
pub use AzListViewTT as AzListView;
pub use AzNodeDragAmountTT as AzNodeDragAmount;
pub use AzNodePositionTT as AzNodePosition;

/// Re-export of rust-allocated (stack based) `ListView` struct
pub use crate::widgets::list_view::ListView as AzListViewTT;
/// Re-export of rust-allocated (stack based) `GraphDragAmount` struct
pub use crate::widgets::node_graph::GraphDragAmount as AzGraphDragAmountTT;
/// Re-export of rust-allocated (stack based) `NodeDragAmount` struct
pub use crate::widgets::node_graph::NodeDragAmount as AzNodeDragAmountTT;
/// Re-export of rust-allocated (stack based) `NodePosition` struct
pub use crate::widgets::node_graph::NodePosition as AzNodePositionTT;
/// Creates a new `ListView` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `ListView::new()` constructor.
#[no_mangle]
pub extern "C" fn AzListView_new(columns: AzStringVec) -> AzListView {
    AzListView::new(columns)
}
/// Equivalent to the Rust `ListView::with_rows()` function.
#[no_mangle]
pub extern "C" fn AzListView_withRows(
    listview: &mut AzListView,
    rows: AzListViewRowVec,
) -> AzListView {
    listview.with_rows(rows)
}
/// Equivalent to the Rust `ListView::dom()` function.
#[no_mangle]
pub extern "C" fn AzListView_dom(listview: &mut AzListView) -> AzDom {
    listview.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `ListView` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListView_delete(object: &mut AzListView) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzListViewRowTT as AzListViewRow;

/// Re-export of rust-allocated (stack based) `ListViewRow` struct
pub use crate::widgets::list_view::ListViewRow as AzListViewRowTT;
/// Destructor: Takes ownership of the `ListViewRow` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListViewRow_delete(object: &mut AzListViewRow) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzListViewStateTT as AzListViewState;

/// Re-export of rust-allocated (stack based) `ListViewState` struct
pub use crate::widgets::list_view::ListViewState as AzListViewStateTT;
/// Destructor: Takes ownership of the `ListViewState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListViewState_delete(object: &mut AzListViewState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzListViewOnLazyLoadScrollCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzListViewState) -> AzUpdate;
pub use AzListViewOnLazyLoadScrollCallbackTT as AzListViewOnLazyLoadScrollCallback;
pub use AzListViewOnLazyLoadScrollTT as AzListViewOnLazyLoadScroll;

/// Re-export of rust-allocated (stack based) `ListViewOnLazyLoadScroll` struct
pub use crate::widgets::list_view::ListViewOnLazyLoadScroll as AzListViewOnLazyLoadScrollTT;
/// Re-export of rust-allocated (stack based) `ListViewOnLazyLoadScrollCallback` struct
pub use crate::widgets::list_view::ListViewOnLazyLoadScrollCallback as AzListViewOnLazyLoadScrollCallbackTT;
/// Destructor: Takes ownership of the `ListViewOnLazyLoadScroll` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListViewOnLazyLoadScroll_delete(object: &mut AzListViewOnLazyLoadScroll) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzListViewOnColumnClickCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzListViewState, usize) -> AzUpdate;
pub use AzListViewOnColumnClickCallbackTT as AzListViewOnColumnClickCallback;
pub use AzListViewOnColumnClickTT as AzListViewOnColumnClick;

/// Re-export of rust-allocated (stack based) `ListViewOnColumnClick` struct
pub use crate::widgets::list_view::ListViewOnColumnClick as AzListViewOnColumnClickTT;
/// Re-export of rust-allocated (stack based) `ListViewOnColumnClickCallback` struct
pub use crate::widgets::list_view::ListViewOnColumnClickCallback as AzListViewOnColumnClickCallbackTT;
/// Destructor: Takes ownership of the `ListViewOnColumnClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListViewOnColumnClick_delete(object: &mut AzListViewOnColumnClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzListViewOnRowClickCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzListViewState, usize) -> AzUpdate;
pub use AzListViewOnRowClickCallbackTT as AzListViewOnRowClickCallback;
pub use AzListViewOnRowClickTT as AzListViewOnRowClick;

/// Re-export of rust-allocated (stack based) `ListViewOnRowClick` struct
pub use crate::widgets::list_view::ListViewOnRowClick as AzListViewOnRowClickTT;
/// Re-export of rust-allocated (stack based) `ListViewOnRowClickCallback` struct
pub use crate::widgets::list_view::ListViewOnRowClickCallback as AzListViewOnRowClickCallbackTT;
/// Destructor: Takes ownership of the `ListViewOnRowClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListViewOnRowClick_delete(object: &mut AzListViewOnRowClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzTreeViewTT as AzTreeView;

/// Re-export of rust-allocated (stack based) `TreeView` struct
pub use crate::widgets::tree_view::TreeView as AzTreeViewTT;
/// Creates a new `TreeView` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TreeView::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTreeView_new(root: AzString) -> AzTreeView {
    AzTreeView::new(root)
}
/// Equivalent to the Rust `TreeView::dom()` function.
#[no_mangle]
pub extern "C" fn AzTreeView_dom(treeview: &mut AzTreeView) -> AzDom {
    treeview.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `TreeView` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTreeView_delete(object: &mut AzTreeView) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzDropDownTT as AzDropDown;

/// Re-export of rust-allocated (stack based) `DropDown` struct
pub use crate::widgets::drop_down::DropDown as AzDropDownTT;
/// Creates a new `DropDown` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `DropDown::new()` constructor.
#[no_mangle]
pub extern "C" fn AzDropDown_new(choices: AzStringVec) -> AzDropDown {
    AzDropDown::new(choices)
}
/// Equivalent to the Rust `DropDown::dom()` function.
#[no_mangle]
pub extern "C" fn AzDropDown_dom(dropdown: &mut AzDropDown) -> AzDom {
    dropdown.swap_with_default().dom()
}
/// Destructor: Takes ownership of the `DropDown` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDropDown_delete(object: &mut AzDropDown) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzDropDownOnChoiceChangeCallbackType =
    extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, usize) -> AzUpdate;
pub use AzDropDownOnChoiceChangeCallbackTT as AzDropDownOnChoiceChangeCallback;
pub use AzDropDownOnChoiceChangeTT as AzDropDownOnChoiceChange;

/// Re-export of rust-allocated (stack based) `DropDownOnChoiceChange` struct
pub use crate::widgets::drop_down::DropDownOnChoiceChange as AzDropDownOnChoiceChangeTT;
/// Re-export of rust-allocated (stack based) `DropDownOnChoiceChangeCallback` struct
pub use crate::widgets::drop_down::DropDownOnChoiceChangeCallback as AzDropDownOnChoiceChangeCallbackTT;
/// Destructor: Takes ownership of the `DropDownOnChoiceChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDropDownOnChoiceChange_delete(object: &mut AzDropDownOnChoiceChange) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CascadeInfo` struct
pub use azul_core::style::CascadeInfo as AzCascadeInfoTT;
/// Re-export of rust-allocated (stack based) `CssPropertySource` struct
pub use azul_core::styled_dom::CssPropertySource as AzCssPropertySourceTT;
/// Re-export of rust-allocated (stack based) `NodeHierarchyItem` struct
pub use azul_core::styled_dom::NodeHierarchyItem as AzNodeHierarchyItemTT;
pub use AzCascadeInfoTT as AzCascadeInfo;
pub use AzCssPropertySourceTT as AzCssPropertySource;
pub use AzNodeHierarchyItemTT as AzNodeHierarchyItem;
/// Destructor: Takes ownership of the `CssPropertySource` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssPropertySource_delete(object: &mut AzCssPropertySource) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TagId` struct
pub use azul_core::styled_dom::AzTagId as AzTagIdTT;
/// Re-export of rust-allocated (stack based) `StyledNode` struct
pub use azul_core::styled_dom::StyledNode as AzStyledNodeTT;
/// Re-export of rust-allocated (stack based) `StyledNodeState` struct
pub use azul_core::styled_dom::StyledNodeState as AzStyledNodeStateTT;
/// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
pub use azul_core::styled_dom::TagIdToNodeIdMapping as AzTagIdToNodeIdMappingTT;
pub use AzStyledNodeStateTT as AzStyledNodeState;
pub use AzStyledNodeTT as AzStyledNode;
pub use AzTagIdTT as AzTagId;
pub use AzTagIdToNodeIdMappingTT as AzTagIdToNodeIdMapping;
/// Destructor: Takes ownership of the `TagIdToNodeIdMapping` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTagIdToNodeIdMapping_delete(object: &mut AzTagIdToNodeIdMapping) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `CssPropertyCache` struct
pub use azul_core::styled_dom::CssPropertyCachePtr as AzCssPropertyCacheTT;
/// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
pub use azul_core::styled_dom::ParentWithNodeDepth as AzParentWithNodeDepthTT;
pub use AzCssPropertyCacheTT as AzCssPropertyCache;
pub use AzParentWithNodeDepthTT as AzParentWithNodeDepth;
/// Destructor: Takes ownership of the `CssPropertyCache` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssPropertyCache_delete(object: &mut AzCssPropertyCache) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzCssPropertyCache_deepCopy(object: &AzCssPropertyCache) -> AzCssPropertyCache {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `StyledDom` struct
pub use azul_core::styled_dom::StyledDom as AzStyledDomTT;
pub use AzStyledDomTT as AzStyledDom;
/// Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes)
/// * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use
/// inline CSS if the performance isn't good enough
#[no_mangle]
pub extern "C" fn AzStyledDom_new(dom: AzDom, css: AzCss) -> AzStyledDom {
    let mut dom = dom;
    AzStyledDom::new(&mut dom, css.into())
}
/// Returns a default, empty `Dom`, usually returned if you don't want to crash in an error case.
#[no_mangle]
pub extern "C" fn AzStyledDom_default() -> AzStyledDom {
    AzStyledDom::default()
}
/// Returns a DOM loaded from an XML file
#[no_mangle]
pub extern "C" fn AzStyledDom_fromXml(xml_string: AzString) -> AzStyledDom {
    crate::extra::styled_dom_from_str(xml_string.as_str())
}
/// Same as `from_xml`, but loads the file relative to the current directory
#[no_mangle]
pub extern "C" fn AzStyledDom_fromFile(xml_file_path: AzString) -> AzStyledDom {
    crate::extra::styled_dom_from_file(xml_file_path.as_str())
}
/// Appends an already styled list of DOM nodes to the current `dom.root` - complexity
/// `O(count(dom.dom_nodes))`
#[no_mangle]
pub extern "C" fn AzStyledDom_appendChild(styleddom: &mut AzStyledDom, dom: AzStyledDom) {
    styleddom.append_child(dom);
}
/// Same as `append_child()`, but as a builder method
#[no_mangle]
pub extern "C" fn AzStyledDom_withChild(
    styleddom: &mut AzStyledDom,
    dom: AzStyledDom,
) -> AzStyledDom {
    styleddom.with_child(dom)
}
/// Restyles an already styled DOM with a new CSS - overwrites old styles, but does not replace
/// them, useful for implementing user styles that are applied on top of the existing application
/// style
#[no_mangle]
pub extern "C" fn AzStyledDom_restyle(styleddom: &mut AzStyledDom, css: AzCss) {
    styleddom.restyle(css.into());
}
/// Returns the number of nodes in the styled DOM
#[no_mangle]
pub extern "C" fn AzStyledDom_nodeCount(styleddom: &AzStyledDom) -> usize {
    styleddom.node_count()
}
/// Returns a HTML string that you can write to a file in order to debug the UI structure and debug
/// potential cascading issues
#[no_mangle]
pub extern "C" fn AzStyledDom_getHtmlString(styleddom: &AzStyledDom) -> AzString {
    styleddom.get_html_string("", "", false).into()
}
/// Returns a HTML for unit testing
#[no_mangle]
pub extern "C" fn AzStyledDom_getHtmlStringTest(styleddom: &AzStyledDom) -> AzString {
    styleddom.get_html_string("", "", true).into()
}
/// Adds a menu to the root node
#[no_mangle]
pub extern "C" fn AzStyledDom_setMenuBar(styleddom: &mut AzStyledDom, menu: AzMenu) {
    styleddom.set_menu_bar(menu)
}
/// Adds a menu to the root node (builder method)
#[no_mangle]
pub extern "C" fn AzStyledDom_withMenuBar(
    styleddom: &mut AzStyledDom,
    menu: AzMenu,
) -> AzStyledDom {
    let mut styleddom = styleddom.swap_with_default();
    styleddom.set_menu_bar(menu);
    styleddom
}
/// Adds a context menu to the root node
#[no_mangle]
pub extern "C" fn AzStyledDom_setContextMenu(styleddom: &mut AzStyledDom, menu: AzMenu) {
    styleddom.set_context_menu(menu)
}
/// Adds a context menu to the root node (builder method)
#[no_mangle]
pub extern "C" fn AzStyledDom_withContextMenu(
    styleddom: &mut AzStyledDom,
    menu: AzMenu,
) -> AzStyledDom {
    let mut styleddom = styleddom.swap_with_default();
    styleddom.set_context_menu(menu);
    styleddom
}
/// Destructor: Takes ownership of the `StyledDom` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyledDom_delete(object: &mut AzStyledDom) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `Texture` struct
pub use azul_core::gl::Texture as AzTextureTT;
pub use AzTextureTT as AzTexture;
/// Creates a new `Texture` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Texture::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTexture_new(
    texture_id: u32,
    flags: AzTextureFlags,
    size: AzPhysicalSizeU32,
    background_color: AzColorU,
    gl_context: AzGl,
    format: AzRawImageFormat,
) -> AzTexture {
    AzTexture::new(
        texture_id,
        flags,
        size,
        background_color,
        gl_context,
        format,
    )
}
/// Allocates an OpenGL texture of a given size with a single red channel (used for image masks)
#[no_mangle]
pub extern "C" fn AzTexture_allocateRgba8(
    gl: AzGl,
    size: AzPhysicalSizeU32,
    background: AzColorU,
) -> AzTexture {
    AzTexture::allocate_rgba8(gl, size, background)
}
/// Allocates an OpenGL texture of a given size with a single red channel (used for image masks)
#[no_mangle]
pub extern "C" fn AzTexture_allocateClipMask(
    gl: AzGl,
    size: AzPhysicalSizeU32,
    background: AzColorU,
) -> AzTexture {
    azul_layout::xml::svg::allocate_clipmask_texture(gl, size, background)
}
/// Clears the texture with the currently set background color
#[no_mangle]
pub extern "C" fn AzTexture_clear(texture: &mut AzTexture) {
    texture.clear()
}
/// Draws a vertex / index buffer (aka. `&TessellatedSvgNode`) to the texture
#[no_mangle]
pub extern "C" fn AzTexture_drawClipMask(
    texture: &mut AzTexture,
    node: AzTessellatedSvgNode,
) -> bool {
    azul_layout::xml::svg::render_tessellated_node_gpu(texture, &node).is_some()
}
/// Draws a `&TessellatedGPUSvgNode` with the given color to the texture
#[no_mangle]
pub extern "C" fn AzTexture_drawTesselatedSvgGpuNode(
    texture: &mut AzTexture,
    node: *const AzTessellatedGPUSvgNode,
    size: AzPhysicalSizeU32,
    color: AzColorU,
    transforms: AzStyleTransformVec,
) -> bool {
    let node = unsafe { &*node };
    node.draw(texture, size, color, transforms)
}
/// Draws a `&TessellatedColoredGPUSvgNode` with the given color to the texture
#[no_mangle]
pub extern "C" fn AzTexture_drawTesselatedColoredSvgGpuNode(
    texture: &mut AzTexture,
    node: *const AzTessellatedColoredGPUSvgNode,
    size: AzPhysicalSizeU32,
    transforms: AzStyleTransformVec,
) -> bool {
    let node = unsafe { &*node };
    node.draw(texture, size, transforms)
}
/// Applies an FXAA filter to the texture
#[no_mangle]
pub extern "C" fn AzTexture_applyFxaa(texture: &mut AzTexture) -> bool {
    azul_layout::xml::svg::apply_fxaa(texture).is_some()
}
/// Destructor: Takes ownership of the `Texture` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTexture_delete(object: &mut AzTexture) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzTexture_deepCopy(object: &AzTexture) -> AzTexture {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `GlVoidPtrConst` struct
pub use azul_core::gl::GlVoidPtrConst as AzGlVoidPtrConstTT;
pub use AzGlVoidPtrConstTT as AzGlVoidPtrConst;
/// Destructor: Takes ownership of the `GlVoidPtrConst` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGlVoidPtrConst_delete(object: &mut AzGlVoidPtrConst) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzGlVoidPtrConst_deepCopy(object: &AzGlVoidPtrConst) -> AzGlVoidPtrConst {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `Gl` struct
pub use azul_core::gl::GlContextPtr as AzGlTT;
/// Re-export of rust-allocated (stack based) `GlVoidPtrMut` struct
pub use azul_core::gl::GlVoidPtrMut as AzGlVoidPtrMutTT;
pub use AzGlTT as AzGl;
pub use AzGlVoidPtrMutTT as AzGlVoidPtrMut;
/// Equivalent to the Rust `Gl::get_type()` function.
#[no_mangle]
pub extern "C" fn AzGl_getType(gl: &AzGl) -> AzGlType {
    gl.get_type()
}
/// Equivalent to the Rust `Gl::buffer_data_untyped()` function.
#[no_mangle]
pub extern "C" fn AzGl_bufferDataUntyped(
    gl: &AzGl,
    target: u32,
    size: isize,
    data: AzGlVoidPtrConst,
    usage: u32,
) {
    gl.buffer_data_untyped(target, size, data, usage)
}
/// Equivalent to the Rust `Gl::buffer_sub_data_untyped()` function.
#[no_mangle]
pub extern "C" fn AzGl_bufferSubDataUntyped(
    gl: &AzGl,
    target: u32,
    offset: isize,
    size: isize,
    data: AzGlVoidPtrConst,
) {
    gl.buffer_sub_data_untyped(target, offset, size, data)
}
/// Equivalent to the Rust `Gl::map_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_mapBuffer(gl: &AzGl, target: u32, access: u32) -> AzGlVoidPtrMut {
    gl.map_buffer(target, access)
}
/// Equivalent to the Rust `Gl::map_buffer_range()` function.
#[no_mangle]
pub extern "C" fn AzGl_mapBufferRange(
    gl: &AzGl,
    target: u32,
    offset: isize,
    length: isize,
    access: u32,
) -> AzGlVoidPtrMut {
    gl.map_buffer_range(target, offset, length, access)
}
/// Equivalent to the Rust `Gl::unmap_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_unmapBuffer(gl: &AzGl, target: u32) -> u8 {
    gl.unmap_buffer(target)
}
/// Equivalent to the Rust `Gl::tex_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_texBuffer(gl: &AzGl, target: u32, internal_format: u32, buffer: u32) {
    gl.tex_buffer(target, internal_format, buffer)
}
/// Equivalent to the Rust `Gl::shader_source()` function.
#[no_mangle]
pub extern "C" fn AzGl_shaderSource(gl: &AzGl, shader: u32, strings: AzStringVec) {
    gl.shader_source(shader, strings)
}
/// Equivalent to the Rust `Gl::read_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_readBuffer(gl: &AzGl, mode: u32) {
    gl.read_buffer(mode)
}
/// Equivalent to the Rust `Gl::read_pixels_into_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_readPixelsIntoBuffer(
    gl: &AzGl,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    format: u32,
    pixel_type: u32,
    dst_buffer: AzU8VecRefMut,
) {
    gl.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer)
}
/// Equivalent to the Rust `Gl::read_pixels()` function.
#[no_mangle]
pub extern "C" fn AzGl_readPixels(
    gl: &AzGl,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    format: u32,
    pixel_type: u32,
) -> AzU8Vec {
    gl.read_pixels(x, y, width, height, format, pixel_type)
}
/// Equivalent to the Rust `Gl::read_pixels_into_pbo()` function.
#[no_mangle]
pub extern "C" fn AzGl_readPixelsIntoPbo(
    gl: &AzGl,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    format: u32,
    pixel_type: u32,
) {
    gl.read_pixels_into_pbo(x, y, width, height, format, pixel_type)
}
/// Equivalent to the Rust `Gl::sample_coverage()` function.
#[no_mangle]
pub extern "C" fn AzGl_sampleCoverage(gl: &AzGl, value: f32, invert: bool) {
    gl.sample_coverage(value, invert)
}
/// Equivalent to the Rust `Gl::polygon_offset()` function.
#[no_mangle]
pub extern "C" fn AzGl_polygonOffset(gl: &AzGl, factor: f32, units: f32) {
    gl.polygon_offset(factor, units)
}
/// Equivalent to the Rust `Gl::pixel_store_i()` function.
#[no_mangle]
pub extern "C" fn AzGl_pixelStoreI(gl: &AzGl, name: u32, param: i32) {
    gl.pixel_store_i(name, param)
}
/// Equivalent to the Rust `Gl::gen_buffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_genBuffers(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_buffers(n)
}
/// Equivalent to the Rust `Gl::gen_renderbuffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_genRenderbuffers(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_renderbuffers(n)
}
/// Equivalent to the Rust `Gl::gen_framebuffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_genFramebuffers(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_framebuffers(n)
}
/// Equivalent to the Rust `Gl::gen_textures()` function.
#[no_mangle]
pub extern "C" fn AzGl_genTextures(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_textures(n)
}
/// Equivalent to the Rust `Gl::gen_vertex_arrays()` function.
#[no_mangle]
pub extern "C" fn AzGl_genVertexArrays(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_vertex_arrays(n)
}
/// Equivalent to the Rust `Gl::gen_queries()` function.
#[no_mangle]
pub extern "C" fn AzGl_genQueries(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_queries(n)
}
/// Equivalent to the Rust `Gl::begin_query()` function.
#[no_mangle]
pub extern "C" fn AzGl_beginQuery(gl: &AzGl, target: u32, id: u32) {
    gl.begin_query(target, id)
}
/// Equivalent to the Rust `Gl::end_query()` function.
#[no_mangle]
pub extern "C" fn AzGl_endQuery(gl: &AzGl, target: u32) {
    gl.end_query(target)
}
/// Equivalent to the Rust `Gl::query_counter()` function.
#[no_mangle]
pub extern "C" fn AzGl_queryCounter(gl: &AzGl, id: u32, target: u32) {
    gl.query_counter(id, target)
}
/// Equivalent to the Rust `Gl::get_query_object_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getQueryObjectIv(gl: &AzGl, id: u32, pname: u32) -> i32 {
    gl.get_query_object_iv(id, pname)
}
/// Equivalent to the Rust `Gl::get_query_object_uiv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getQueryObjectUiv(gl: &AzGl, id: u32, pname: u32) -> u32 {
    gl.get_query_object_uiv(id, pname)
}
/// Equivalent to the Rust `Gl::get_query_object_i64v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getQueryObjectI64V(gl: &AzGl, id: u32, pname: u32) -> i64 {
    gl.get_query_object_i64v(id, pname)
}
/// Equivalent to the Rust `Gl::get_query_object_ui64v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getQueryObjectUi64V(gl: &AzGl, id: u32, pname: u32) -> u64 {
    gl.get_query_object_ui64v(id, pname)
}
/// Equivalent to the Rust `Gl::delete_queries()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteQueries(gl: &AzGl, queries: AzGLuintVecRef) {
    gl.delete_queries(queries)
}
/// Equivalent to the Rust `Gl::delete_vertex_arrays()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteVertexArrays(gl: &AzGl, vertex_arrays: AzGLuintVecRef) {
    gl.delete_vertex_arrays(vertex_arrays)
}
/// Equivalent to the Rust `Gl::delete_buffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteBuffers(gl: &AzGl, buffers: AzGLuintVecRef) {
    gl.delete_buffers(buffers)
}
/// Equivalent to the Rust `Gl::delete_renderbuffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteRenderbuffers(gl: &AzGl, renderbuffers: AzGLuintVecRef) {
    gl.delete_renderbuffers(renderbuffers)
}
/// Equivalent to the Rust `Gl::delete_framebuffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteFramebuffers(gl: &AzGl, framebuffers: AzGLuintVecRef) {
    gl.delete_framebuffers(framebuffers)
}
/// Equivalent to the Rust `Gl::delete_textures()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteTextures(gl: &AzGl, textures: AzGLuintVecRef) {
    gl.delete_textures(textures)
}
/// Equivalent to the Rust `Gl::framebuffer_renderbuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_framebufferRenderbuffer(
    gl: &AzGl,
    target: u32,
    attachment: u32,
    renderbuffertarget: u32,
    renderbuffer: u32,
) {
    gl.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer)
}
/// Equivalent to the Rust `Gl::renderbuffer_storage()` function.
#[no_mangle]
pub extern "C" fn AzGl_renderbufferStorage(
    gl: &AzGl,
    target: u32,
    internalformat: u32,
    width: i32,
    height: i32,
) {
    gl.renderbuffer_storage(target, internalformat, width, height)
}
/// Equivalent to the Rust `Gl::depth_func()` function.
#[no_mangle]
pub extern "C" fn AzGl_depthFunc(gl: &AzGl, func: u32) {
    gl.depth_func(func)
}
/// Equivalent to the Rust `Gl::active_texture()` function.
#[no_mangle]
pub extern "C" fn AzGl_activeTexture(gl: &AzGl, texture: u32) {
    gl.active_texture(texture)
}
/// Equivalent to the Rust `Gl::attach_shader()` function.
#[no_mangle]
pub extern "C" fn AzGl_attachShader(gl: &AzGl, program: u32, shader: u32) {
    gl.attach_shader(program, shader)
}
/// Equivalent to the Rust `Gl::bind_attrib_location()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindAttribLocation(gl: &AzGl, program: u32, index: u32, name: AzRefstr) {
    gl.bind_attrib_location(program, index, name)
}
/// Equivalent to the Rust `Gl::get_uniform_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getUniformIv(
    gl: &AzGl,
    program: u32,
    location: i32,
    result: AzGLintVecRefMut,
) {
    gl.get_uniform_iv(program, location, result)
}
/// Equivalent to the Rust `Gl::get_uniform_fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getUniformFv(
    gl: &AzGl,
    program: u32,
    location: i32,
    result: AzGLfloatVecRefMut,
) {
    gl.get_uniform_fv(program, location, result)
}
/// Equivalent to the Rust `Gl::get_uniform_block_index()` function.
#[no_mangle]
pub extern "C" fn AzGl_getUniformBlockIndex(gl: &AzGl, program: u32, name: AzRefstr) -> u32 {
    gl.get_uniform_block_index(program, name)
}
/// Equivalent to the Rust `Gl::get_uniform_indices()` function.
#[no_mangle]
pub extern "C" fn AzGl_getUniformIndices(
    gl: &AzGl,
    program: u32,
    names: AzRefstrVecRef,
) -> AzGLuintVec {
    gl.get_uniform_indices(program, names)
}
/// Equivalent to the Rust `Gl::bind_buffer_base()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindBufferBase(gl: &AzGl, target: u32, index: u32, buffer: u32) {
    gl.bind_buffer_base(target, index, buffer)
}
/// Equivalent to the Rust `Gl::bind_buffer_range()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindBufferRange(
    gl: &AzGl,
    target: u32,
    index: u32,
    buffer: u32,
    offset: isize,
    size: isize,
) {
    gl.bind_buffer_range(target, index, buffer, offset, size)
}
/// Equivalent to the Rust `Gl::uniform_block_binding()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniformBlockBinding(
    gl: &AzGl,
    program: u32,
    uniform_block_index: u32,
    uniform_block_binding: u32,
) {
    gl.uniform_block_binding(program, uniform_block_index, uniform_block_binding)
}
/// Equivalent to the Rust `Gl::bind_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindBuffer(gl: &AzGl, target: u32, buffer: u32) {
    gl.bind_buffer(target, buffer)
}
/// Equivalent to the Rust `Gl::bind_vertex_array()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindVertexArray(gl: &AzGl, vao: u32) {
    gl.bind_vertex_array(vao)
}
/// Equivalent to the Rust `Gl::bind_renderbuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindRenderbuffer(gl: &AzGl, target: u32, renderbuffer: u32) {
    gl.bind_renderbuffer(target, renderbuffer)
}
/// Equivalent to the Rust `Gl::bind_framebuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindFramebuffer(gl: &AzGl, target: u32, framebuffer: u32) {
    gl.bind_framebuffer(target, framebuffer)
}
/// Equivalent to the Rust `Gl::bind_texture()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindTexture(gl: &AzGl, target: u32, texture: u32) {
    gl.bind_texture(target, texture)
}
/// Equivalent to the Rust `Gl::draw_buffers()` function.
#[no_mangle]
pub extern "C" fn AzGl_drawBuffers(gl: &AzGl, bufs: AzGLenumVecRef) {
    gl.draw_buffers(bufs)
}
/// Equivalent to the Rust `Gl::tex_image_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_texImage2D(
    gl: &AzGl,
    target: u32,
    level: i32,
    internal_format: i32,
    width: i32,
    height: i32,
    border: i32,
    format: u32,
    ty: u32,
    opt_data: AzOptionU8VecRef,
) {
    gl.tex_image_2d(
        target,
        level,
        internal_format,
        width,
        height,
        border,
        format,
        ty,
        opt_data,
    )
}
/// Equivalent to the Rust `Gl::compressed_tex_image_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_compressedTexImage2D(
    gl: &AzGl,
    target: u32,
    level: i32,
    internal_format: u32,
    width: i32,
    height: i32,
    border: i32,
    data: AzU8VecRef,
) {
    gl.compressed_tex_image_2d(target, level, internal_format, width, height, border, data)
}
/// Equivalent to the Rust `Gl::compressed_tex_sub_image_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_compressedTexSubImage2D(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    width: i32,
    height: i32,
    format: u32,
    data: AzU8VecRef,
) {
    gl.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data)
}
/// Equivalent to the Rust `Gl::tex_image_3d()` function.
#[no_mangle]
pub extern "C" fn AzGl_texImage3D(
    gl: &AzGl,
    target: u32,
    level: i32,
    internal_format: i32,
    width: i32,
    height: i32,
    depth: i32,
    border: i32,
    format: u32,
    ty: u32,
    opt_data: AzOptionU8VecRef,
) {
    gl.tex_image_3d(
        target,
        level,
        internal_format,
        width,
        height,
        depth,
        border,
        format,
        ty,
        opt_data,
    )
}
/// Equivalent to the Rust `Gl::copy_tex_image_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_copyTexImage2D(
    gl: &AzGl,
    target: u32,
    level: i32,
    internal_format: u32,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    border: i32,
) {
    gl.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border)
}
/// Equivalent to the Rust `Gl::copy_tex_sub_image_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_copyTexSubImage2D(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) {
    gl.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height)
}
/// Equivalent to the Rust `Gl::copy_tex_sub_image_3d()` function.
#[no_mangle]
pub extern "C" fn AzGl_copyTexSubImage3D(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    zoffset: i32,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
) {
    gl.copy_tex_sub_image_3d(
        target, level, xoffset, yoffset, zoffset, x, y, width, height,
    )
}
/// Equivalent to the Rust `Gl::tex_sub_image_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_texSubImage2D(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    width: i32,
    height: i32,
    format: u32,
    ty: u32,
    data: AzU8VecRef,
) {
    gl.tex_sub_image_2d(
        target, level, xoffset, yoffset, width, height, format, ty, data,
    )
}
/// Equivalent to the Rust `Gl::tex_sub_image_2d_pbo()` function.
#[no_mangle]
pub extern "C" fn AzGl_texSubImage2DPbo(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    width: i32,
    height: i32,
    format: u32,
    ty: u32,
    offset: usize,
) {
    gl.tex_sub_image_2d_pbo(
        target, level, xoffset, yoffset, width, height, format, ty, offset,
    )
}
/// Equivalent to the Rust `Gl::tex_sub_image_3d()` function.
#[no_mangle]
pub extern "C" fn AzGl_texSubImage3D(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    zoffset: i32,
    width: i32,
    height: i32,
    depth: i32,
    format: u32,
    ty: u32,
    data: AzU8VecRef,
) {
    gl.tex_sub_image_3d(
        target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data,
    )
}
/// Equivalent to the Rust `Gl::tex_sub_image_3d_pbo()` function.
#[no_mangle]
pub extern "C" fn AzGl_texSubImage3DPbo(
    gl: &AzGl,
    target: u32,
    level: i32,
    xoffset: i32,
    yoffset: i32,
    zoffset: i32,
    width: i32,
    height: i32,
    depth: i32,
    format: u32,
    ty: u32,
    offset: usize,
) {
    gl.tex_sub_image_3d_pbo(
        target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset,
    )
}
/// Equivalent to the Rust `Gl::tex_storage_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_texStorage2D(
    gl: &AzGl,
    target: u32,
    levels: i32,
    internal_format: u32,
    width: i32,
    height: i32,
) {
    gl.tex_storage_2d(target, levels, internal_format, width, height)
}
/// Equivalent to the Rust `Gl::tex_storage_3d()` function.
#[no_mangle]
pub extern "C" fn AzGl_texStorage3D(
    gl: &AzGl,
    target: u32,
    levels: i32,
    internal_format: u32,
    width: i32,
    height: i32,
    depth: i32,
) {
    gl.tex_storage_3d(target, levels, internal_format, width, height, depth)
}
/// Equivalent to the Rust `Gl::get_tex_image_into_buffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_getTexImageIntoBuffer(
    gl: &AzGl,
    target: u32,
    level: i32,
    format: u32,
    ty: u32,
    output: AzU8VecRefMut,
) {
    gl.get_tex_image_into_buffer(target, level, format, ty, output)
}
/// Equivalent to the Rust `Gl::copy_image_sub_data()` function.
#[no_mangle]
pub extern "C" fn AzGl_copyImageSubData(
    gl: &AzGl,
    src_name: u32,
    src_target: u32,
    src_level: i32,
    src_x: i32,
    src_y: i32,
    src_z: i32,
    dst_name: u32,
    dst_target: u32,
    dst_level: i32,
    dst_x: i32,
    dst_y: i32,
    dst_z: i32,
    src_width: i32,
    src_height: i32,
    src_depth: i32,
) {
    gl.copy_image_sub_data(
        src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level,
        dst_x, dst_y, dst_z, src_width, src_height, src_depth,
    )
}
/// Equivalent to the Rust `Gl::invalidate_framebuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_invalidateFramebuffer(gl: &AzGl, target: u32, attachments: AzGLenumVecRef) {
    gl.invalidate_framebuffer(target, attachments)
}
/// Equivalent to the Rust `Gl::invalidate_sub_framebuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_invalidateSubFramebuffer(
    gl: &AzGl,
    target: u32,
    attachments: AzGLenumVecRef,
    xoffset: i32,
    yoffset: i32,
    width: i32,
    height: i32,
) {
    gl.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height)
}
/// Equivalent to the Rust `Gl::get_integer_v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getIntegerV(gl: &AzGl, name: u32, result: AzGLintVecRefMut) {
    gl.get_integer_v(name, result)
}
/// Equivalent to the Rust `Gl::get_integer_64v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getInteger64V(gl: &AzGl, name: u32, result: AzGLint64VecRefMut) {
    gl.get_integer_64v(name, result)
}
/// Equivalent to the Rust `Gl::get_integer_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getIntegerIv(gl: &AzGl, name: u32, index: u32, result: AzGLintVecRefMut) {
    gl.get_integer_iv(name, index, result)
}
/// Equivalent to the Rust `Gl::get_integer_64iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getInteger64Iv(
    gl: &AzGl,
    name: u32,
    index: u32,
    result: AzGLint64VecRefMut,
) {
    gl.get_integer_64iv(name, index, result)
}
/// Equivalent to the Rust `Gl::get_boolean_v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getBooleanV(gl: &AzGl, name: u32, result: AzGLbooleanVecRefMut) {
    gl.get_boolean_v(name, result)
}
/// Equivalent to the Rust `Gl::get_float_v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getFloatV(gl: &AzGl, name: u32, result: AzGLfloatVecRefMut) {
    gl.get_float_v(name, result)
}
/// Equivalent to the Rust `Gl::get_framebuffer_attachment_parameter_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getFramebufferAttachmentParameterIv(
    gl: &AzGl,
    target: u32,
    attachment: u32,
    pname: u32,
) -> i32 {
    gl.get_framebuffer_attachment_parameter_iv(target, attachment, pname)
}
/// Equivalent to the Rust `Gl::get_renderbuffer_parameter_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getRenderbufferParameterIv(gl: &AzGl, target: u32, pname: u32) -> i32 {
    gl.get_renderbuffer_parameter_iv(target, pname)
}
/// Equivalent to the Rust `Gl::get_tex_parameter_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getTexParameterIv(gl: &AzGl, target: u32, name: u32) -> i32 {
    gl.get_tex_parameter_iv(target, name)
}
/// Equivalent to the Rust `Gl::get_tex_parameter_fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getTexParameterFv(gl: &AzGl, target: u32, name: u32) -> f32 {
    gl.get_tex_parameter_fv(target, name)
}
/// Equivalent to the Rust `Gl::tex_parameter_i()` function.
#[no_mangle]
pub extern "C" fn AzGl_texParameterI(gl: &AzGl, target: u32, pname: u32, param: i32) {
    gl.tex_parameter_i(target, pname, param)
}
/// Equivalent to the Rust `Gl::tex_parameter_f()` function.
#[no_mangle]
pub extern "C" fn AzGl_texParameterF(gl: &AzGl, target: u32, pname: u32, param: f32) {
    gl.tex_parameter_f(target, pname, param)
}
/// Equivalent to the Rust `Gl::framebuffer_texture_2d()` function.
#[no_mangle]
pub extern "C" fn AzGl_framebufferTexture2D(
    gl: &AzGl,
    target: u32,
    attachment: u32,
    textarget: u32,
    texture: u32,
    level: i32,
) {
    gl.framebuffer_texture_2d(target, attachment, textarget, texture, level)
}
/// Equivalent to the Rust `Gl::framebuffer_texture_layer()` function.
#[no_mangle]
pub extern "C" fn AzGl_framebufferTextureLayer(
    gl: &AzGl,
    target: u32,
    attachment: u32,
    texture: u32,
    level: i32,
    layer: i32,
) {
    gl.framebuffer_texture_layer(target, attachment, texture, level, layer)
}
/// Equivalent to the Rust `Gl::blit_framebuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_blitFramebuffer(
    gl: &AzGl,
    src_x0: i32,
    src_y0: i32,
    src_x1: i32,
    src_y1: i32,
    dst_x0: i32,
    dst_y0: i32,
    dst_x1: i32,
    dst_y1: i32,
    mask: u32,
    filter: u32,
) {
    gl.blit_framebuffer(
        src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter,
    )
}
/// Equivalent to the Rust `Gl::vertex_attrib_4f()` function.
#[no_mangle]
pub extern "C" fn AzGl_vertexAttrib4F(gl: &AzGl, index: u32, x: f32, y: f32, z: f32, w: f32) {
    gl.vertex_attrib_4f(index, x, y, z, w)
}
/// Equivalent to the Rust `Gl::vertex_attrib_pointer_f32()` function.
#[no_mangle]
pub extern "C" fn AzGl_vertexAttribPointerF32(
    gl: &AzGl,
    index: u32,
    size: i32,
    normalized: bool,
    stride: i32,
    offset: u32,
) {
    gl.vertex_attrib_pointer_f32(index, size, normalized, stride, offset)
}
/// Equivalent to the Rust `Gl::vertex_attrib_pointer()` function.
#[no_mangle]
pub extern "C" fn AzGl_vertexAttribPointer(
    gl: &AzGl,
    index: u32,
    size: i32,
    type_: u32,
    normalized: bool,
    stride: i32,
    offset: u32,
) {
    gl.vertex_attrib_pointer(index, size, type_, normalized, stride, offset)
}
/// Equivalent to the Rust `Gl::vertex_attrib_i_pointer()` function.
#[no_mangle]
pub extern "C" fn AzGl_vertexAttribIPointer(
    gl: &AzGl,
    index: u32,
    size: i32,
    type_: u32,
    stride: i32,
    offset: u32,
) {
    gl.vertex_attrib_i_pointer(index, size, type_, stride, offset)
}
/// Equivalent to the Rust `Gl::vertex_attrib_divisor()` function.
#[no_mangle]
pub extern "C" fn AzGl_vertexAttribDivisor(gl: &AzGl, index: u32, divisor: u32) {
    gl.vertex_attrib_divisor(index, divisor)
}
/// Equivalent to the Rust `Gl::viewport()` function.
#[no_mangle]
pub extern "C" fn AzGl_viewport(gl: &AzGl, x: i32, y: i32, width: i32, height: i32) {
    gl.viewport(x, y, width, height)
}
/// Equivalent to the Rust `Gl::scissor()` function.
#[no_mangle]
pub extern "C" fn AzGl_scissor(gl: &AzGl, x: i32, y: i32, width: i32, height: i32) {
    gl.scissor(x, y, width, height)
}
/// Equivalent to the Rust `Gl::line_width()` function.
#[no_mangle]
pub extern "C" fn AzGl_lineWidth(gl: &AzGl, width: f32) {
    gl.line_width(width)
}
/// Equivalent to the Rust `Gl::use_program()` function.
#[no_mangle]
pub extern "C" fn AzGl_useProgram(gl: &AzGl, program: u32) {
    gl.use_program(program)
}
/// Equivalent to the Rust `Gl::validate_program()` function.
#[no_mangle]
pub extern "C" fn AzGl_validateProgram(gl: &AzGl, program: u32) {
    gl.validate_program(program)
}
/// Equivalent to the Rust `Gl::draw_arrays()` function.
#[no_mangle]
pub extern "C" fn AzGl_drawArrays(gl: &AzGl, mode: u32, first: i32, count: i32) {
    gl.draw_arrays(mode, first, count)
}
/// Equivalent to the Rust `Gl::draw_arrays_instanced()` function.
#[no_mangle]
pub extern "C" fn AzGl_drawArraysInstanced(
    gl: &AzGl,
    mode: u32,
    first: i32,
    count: i32,
    primcount: i32,
) {
    gl.draw_arrays_instanced(mode, first, count, primcount)
}
/// Equivalent to the Rust `Gl::draw_elements()` function.
#[no_mangle]
pub extern "C" fn AzGl_drawElements(
    gl: &AzGl,
    mode: u32,
    count: i32,
    element_type: u32,
    indices_offset: u32,
) {
    gl.draw_elements(mode, count, element_type, indices_offset)
}
/// Equivalent to the Rust `Gl::draw_elements_instanced()` function.
#[no_mangle]
pub extern "C" fn AzGl_drawElementsInstanced(
    gl: &AzGl,
    mode: u32,
    count: i32,
    element_type: u32,
    indices_offset: u32,
    primcount: i32,
) {
    gl.draw_elements_instanced(mode, count, element_type, indices_offset, primcount)
}
/// Equivalent to the Rust `Gl::blend_color()` function.
#[no_mangle]
pub extern "C" fn AzGl_blendColor(gl: &AzGl, r: f32, g: f32, b: f32, a: f32) {
    gl.blend_color(r, g, b, a)
}
/// Equivalent to the Rust `Gl::blend_func()` function.
#[no_mangle]
pub extern "C" fn AzGl_blendFunc(gl: &AzGl, sfactor: u32, dfactor: u32) {
    gl.blend_func(sfactor, dfactor)
}
/// Equivalent to the Rust `Gl::blend_func_separate()` function.
#[no_mangle]
pub extern "C" fn AzGl_blendFuncSeparate(
    gl: &AzGl,
    src_rgb: u32,
    dest_rgb: u32,
    src_alpha: u32,
    dest_alpha: u32,
) {
    gl.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha)
}
/// Equivalent to the Rust `Gl::blend_equation()` function.
#[no_mangle]
pub extern "C" fn AzGl_blendEquation(gl: &AzGl, mode: u32) {
    gl.blend_equation(mode)
}
/// Equivalent to the Rust `Gl::blend_equation_separate()` function.
#[no_mangle]
pub extern "C" fn AzGl_blendEquationSeparate(gl: &AzGl, mode_rgb: u32, mode_alpha: u32) {
    gl.blend_equation_separate(mode_rgb, mode_alpha)
}
/// Equivalent to the Rust `Gl::color_mask()` function.
#[no_mangle]
pub extern "C" fn AzGl_colorMask(gl: &AzGl, r: bool, g: bool, b: bool, a: bool) {
    gl.color_mask(r, g, b, a)
}
/// Equivalent to the Rust `Gl::cull_face()` function.
#[no_mangle]
pub extern "C" fn AzGl_cullFace(gl: &AzGl, mode: u32) {
    gl.cull_face(mode)
}
/// Equivalent to the Rust `Gl::front_face()` function.
#[no_mangle]
pub extern "C" fn AzGl_frontFace(gl: &AzGl, mode: u32) {
    gl.front_face(mode)
}
/// Equivalent to the Rust `Gl::enable()` function.
#[no_mangle]
pub extern "C" fn AzGl_enable(gl: &AzGl, cap: u32) {
    gl.enable(cap)
}
/// Equivalent to the Rust `Gl::disable()` function.
#[no_mangle]
pub extern "C" fn AzGl_disable(gl: &AzGl, cap: u32) {
    gl.disable(cap)
}
/// Equivalent to the Rust `Gl::hint()` function.
#[no_mangle]
pub extern "C" fn AzGl_hint(gl: &AzGl, param_name: u32, param_val: u32) {
    gl.hint(param_name, param_val)
}
/// Equivalent to the Rust `Gl::is_enabled()` function.
#[no_mangle]
pub extern "C" fn AzGl_isEnabled(gl: &AzGl, cap: u32) -> u8 {
    gl.is_enabled(cap)
}
/// Equivalent to the Rust `Gl::is_shader()` function.
#[no_mangle]
pub extern "C" fn AzGl_isShader(gl: &AzGl, shader: u32) -> u8 {
    gl.is_shader(shader)
}
/// Equivalent to the Rust `Gl::is_texture()` function.
#[no_mangle]
pub extern "C" fn AzGl_isTexture(gl: &AzGl, texture: u32) -> u8 {
    gl.is_texture(texture)
}
/// Equivalent to the Rust `Gl::is_framebuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_isFramebuffer(gl: &AzGl, framebuffer: u32) -> u8 {
    gl.is_framebuffer(framebuffer)
}
/// Equivalent to the Rust `Gl::is_renderbuffer()` function.
#[no_mangle]
pub extern "C" fn AzGl_isRenderbuffer(gl: &AzGl, renderbuffer: u32) -> u8 {
    gl.is_renderbuffer(renderbuffer)
}
/// Equivalent to the Rust `Gl::check_frame_buffer_status()` function.
#[no_mangle]
pub extern "C" fn AzGl_checkFrameBufferStatus(gl: &AzGl, target: u32) -> u32 {
    gl.check_frame_buffer_status(target)
}
/// Equivalent to the Rust `Gl::enable_vertex_attrib_array()` function.
#[no_mangle]
pub extern "C" fn AzGl_enableVertexAttribArray(gl: &AzGl, index: u32) {
    gl.enable_vertex_attrib_array(index)
}
/// Equivalent to the Rust `Gl::disable_vertex_attrib_array()` function.
#[no_mangle]
pub extern "C" fn AzGl_disableVertexAttribArray(gl: &AzGl, index: u32) {
    gl.disable_vertex_attrib_array(index)
}
/// Equivalent to the Rust `Gl::uniform_1f()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform1F(gl: &AzGl, location: i32, v0: f32) {
    gl.uniform_1f(location, v0)
}
/// Equivalent to the Rust `Gl::uniform_1fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform1Fv(gl: &AzGl, location: i32, values: AzF32VecRef) {
    gl.uniform_1fv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_1i()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform1I(gl: &AzGl, location: i32, v0: i32) {
    gl.uniform_1i(location, v0)
}
/// Equivalent to the Rust `Gl::uniform_1iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform1Iv(gl: &AzGl, location: i32, values: AzI32VecRef) {
    gl.uniform_1iv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_1ui()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform1Ui(gl: &AzGl, location: i32, v0: u32) {
    gl.uniform_1ui(location, v0)
}
/// Equivalent to the Rust `Gl::uniform_2f()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform2F(gl: &AzGl, location: i32, v0: f32, v1: f32) {
    gl.uniform_2f(location, v0, v1)
}
/// Equivalent to the Rust `Gl::uniform_2fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform2Fv(gl: &AzGl, location: i32, values: AzF32VecRef) {
    gl.uniform_2fv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_2i()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform2I(gl: &AzGl, location: i32, v0: i32, v1: i32) {
    gl.uniform_2i(location, v0, v1)
}
/// Equivalent to the Rust `Gl::uniform_2iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform2Iv(gl: &AzGl, location: i32, values: AzI32VecRef) {
    gl.uniform_2iv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_2ui()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform2Ui(gl: &AzGl, location: i32, v0: u32, v1: u32) {
    gl.uniform_2ui(location, v0, v1)
}
/// Equivalent to the Rust `Gl::uniform_3f()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform3F(gl: &AzGl, location: i32, v0: f32, v1: f32, v2: f32) {
    gl.uniform_3f(location, v0, v1, v2)
}
/// Equivalent to the Rust `Gl::uniform_3fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform3Fv(gl: &AzGl, location: i32, values: AzF32VecRef) {
    gl.uniform_3fv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_3i()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform3I(gl: &AzGl, location: i32, v0: i32, v1: i32, v2: i32) {
    gl.uniform_3i(location, v0, v1, v2)
}
/// Equivalent to the Rust `Gl::uniform_3iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform3Iv(gl: &AzGl, location: i32, values: AzI32VecRef) {
    gl.uniform_3iv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_3ui()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform3Ui(gl: &AzGl, location: i32, v0: u32, v1: u32, v2: u32) {
    gl.uniform_3ui(location, v0, v1, v2)
}
/// Equivalent to the Rust `Gl::uniform_4f()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform4F(gl: &AzGl, location: i32, x: f32, y: f32, z: f32, w: f32) {
    gl.uniform_4f(location, x, y, z, w)
}
/// Equivalent to the Rust `Gl::uniform_4i()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform4I(gl: &AzGl, location: i32, x: i32, y: i32, z: i32, w: i32) {
    gl.uniform_4i(location, x, y, z, w)
}
/// Equivalent to the Rust `Gl::uniform_4iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform4Iv(gl: &AzGl, location: i32, values: AzI32VecRef) {
    gl.uniform_4iv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_4ui()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform4Ui(gl: &AzGl, location: i32, x: u32, y: u32, z: u32, w: u32) {
    gl.uniform_4ui(location, x, y, z, w)
}
/// Equivalent to the Rust `Gl::uniform_4fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniform4Fv(gl: &AzGl, location: i32, values: AzF32VecRef) {
    gl.uniform_4fv(location, values)
}
/// Equivalent to the Rust `Gl::uniform_matrix_2fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniformMatrix2Fv(
    gl: &AzGl,
    location: i32,
    transpose: bool,
    value: AzF32VecRef,
) {
    gl.uniform_matrix_2fv(location, transpose, value)
}
/// Equivalent to the Rust `Gl::uniform_matrix_3fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniformMatrix3Fv(
    gl: &AzGl,
    location: i32,
    transpose: bool,
    value: AzF32VecRef,
) {
    gl.uniform_matrix_3fv(location, transpose, value)
}
/// Equivalent to the Rust `Gl::uniform_matrix_4fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_uniformMatrix4Fv(
    gl: &AzGl,
    location: i32,
    transpose: bool,
    value: AzF32VecRef,
) {
    gl.uniform_matrix_4fv(location, transpose, value)
}
/// Equivalent to the Rust `Gl::depth_mask()` function.
#[no_mangle]
pub extern "C" fn AzGl_depthMask(gl: &AzGl, flag: bool) {
    gl.depth_mask(flag)
}
/// Equivalent to the Rust `Gl::depth_range()` function.
#[no_mangle]
pub extern "C" fn AzGl_depthRange(gl: &AzGl, near: f64, far: f64) {
    gl.depth_range(near, far)
}
/// Equivalent to the Rust `Gl::get_active_attrib()` function.
#[no_mangle]
pub extern "C" fn AzGl_getActiveAttrib(
    gl: &AzGl,
    program: u32,
    index: u32,
) -> AzGetActiveAttribReturn {
    gl.get_active_attrib(program, index)
}
/// Equivalent to the Rust `Gl::get_active_uniform()` function.
#[no_mangle]
pub extern "C" fn AzGl_getActiveUniform(
    gl: &AzGl,
    program: u32,
    index: u32,
) -> AzGetActiveUniformReturn {
    gl.get_active_uniform(program, index)
}
/// Equivalent to the Rust `Gl::get_active_uniforms_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getActiveUniformsIv(
    gl: &AzGl,
    program: u32,
    indices: AzGLuintVec,
    pname: u32,
) -> AzGLintVec {
    gl.get_active_uniforms_iv(program, indices, pname)
}
/// Equivalent to the Rust `Gl::get_active_uniform_block_i()` function.
#[no_mangle]
pub extern "C" fn AzGl_getActiveUniformBlockI(
    gl: &AzGl,
    program: u32,
    index: u32,
    pname: u32,
) -> i32 {
    gl.get_active_uniform_block_i(program, index, pname)
}
/// Equivalent to the Rust `Gl::get_active_uniform_block_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getActiveUniformBlockIv(
    gl: &AzGl,
    program: u32,
    index: u32,
    pname: u32,
) -> AzGLintVec {
    gl.get_active_uniform_block_iv(program, index, pname)
}
/// Equivalent to the Rust `Gl::get_active_uniform_block_name()` function.
#[no_mangle]
pub extern "C" fn AzGl_getActiveUniformBlockName(gl: &AzGl, program: u32, index: u32) -> AzString {
    gl.get_active_uniform_block_name(program, index)
}
/// Equivalent to the Rust `Gl::get_attrib_location()` function.
#[no_mangle]
pub extern "C" fn AzGl_getAttribLocation(gl: &AzGl, program: u32, name: AzRefstr) -> i32 {
    gl.get_attrib_location(program, name)
}
/// Equivalent to the Rust `Gl::get_frag_data_location()` function.
#[no_mangle]
pub extern "C" fn AzGl_getFragDataLocation(gl: &AzGl, program: u32, name: AzRefstr) -> i32 {
    gl.get_frag_data_location(program, name)
}
/// Equivalent to the Rust `Gl::get_uniform_location()` function.
#[no_mangle]
pub extern "C" fn AzGl_getUniformLocation(gl: &AzGl, program: u32, name: AzRefstr) -> i32 {
    gl.get_uniform_location(program, name)
}
/// Equivalent to the Rust `Gl::get_program_info_log()` function.
#[no_mangle]
pub extern "C" fn AzGl_getProgramInfoLog(gl: &AzGl, program: u32) -> AzString {
    gl.get_program_info_log(program)
}
/// Equivalent to the Rust `Gl::get_program_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getProgramIv(gl: &AzGl, program: u32, pname: u32, result: AzGLintVecRefMut) {
    gl.get_program_iv(program, pname, result)
}
/// Equivalent to the Rust `Gl::get_program_binary()` function.
#[no_mangle]
pub extern "C" fn AzGl_getProgramBinary(gl: &AzGl, program: u32) -> AzGetProgramBinaryReturn {
    gl.get_program_binary(program)
}
/// Equivalent to the Rust `Gl::program_binary()` function.
#[no_mangle]
pub extern "C" fn AzGl_programBinary(gl: &AzGl, program: u32, format: u32, binary: AzU8VecRef) {
    gl.program_binary(program, format, binary)
}
/// Equivalent to the Rust `Gl::program_parameter_i()` function.
#[no_mangle]
pub extern "C" fn AzGl_programParameterI(gl: &AzGl, program: u32, pname: u32, value: i32) {
    gl.program_parameter_i(program, pname, value)
}
/// Equivalent to the Rust `Gl::get_vertex_attrib_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getVertexAttribIv(
    gl: &AzGl,
    index: u32,
    pname: u32,
    result: AzGLintVecRefMut,
) {
    gl.get_vertex_attrib_iv(index, pname, result)
}
/// Equivalent to the Rust `Gl::get_vertex_attrib_fv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getVertexAttribFv(
    gl: &AzGl,
    index: u32,
    pname: u32,
    result: AzGLfloatVecRefMut,
) {
    gl.get_vertex_attrib_fv(index, pname, result)
}
/// Equivalent to the Rust `Gl::get_vertex_attrib_pointer_v()` function.
#[no_mangle]
pub extern "C" fn AzGl_getVertexAttribPointerV(gl: &AzGl, index: u32, pname: u32) -> isize {
    gl.get_vertex_attrib_pointer_v(index, pname)
}
/// Equivalent to the Rust `Gl::get_buffer_parameter_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getBufferParameterIv(gl: &AzGl, target: u32, pname: u32) -> i32 {
    gl.get_buffer_parameter_iv(target, pname)
}
/// Equivalent to the Rust `Gl::get_shader_info_log()` function.
#[no_mangle]
pub extern "C" fn AzGl_getShaderInfoLog(gl: &AzGl, shader: u32) -> AzString {
    gl.get_shader_info_log(shader)
}
/// Equivalent to the Rust `Gl::get_string()` function.
#[no_mangle]
pub extern "C" fn AzGl_getString(gl: &AzGl, which: u32) -> AzString {
    gl.get_string(which)
}
/// Equivalent to the Rust `Gl::get_string_i()` function.
#[no_mangle]
pub extern "C" fn AzGl_getStringI(gl: &AzGl, which: u32, index: u32) -> AzString {
    gl.get_string_i(which, index)
}
/// Equivalent to the Rust `Gl::get_shader_iv()` function.
#[no_mangle]
pub extern "C" fn AzGl_getShaderIv(gl: &AzGl, shader: u32, pname: u32, result: AzGLintVecRefMut) {
    gl.get_shader_iv(shader, pname, result)
}
/// Equivalent to the Rust `Gl::get_shader_precision_format()` function.
#[no_mangle]
pub extern "C" fn AzGl_getShaderPrecisionFormat(
    gl: &AzGl,
    shader_type: u32,
    precision_type: u32,
) -> AzGlShaderPrecisionFormatReturn {
    gl.get_shader_precision_format(shader_type, precision_type)
}
/// Equivalent to the Rust `Gl::compile_shader()` function.
#[no_mangle]
pub extern "C" fn AzGl_compileShader(gl: &AzGl, shader: u32) {
    gl.compile_shader(shader)
}
/// Equivalent to the Rust `Gl::create_program()` function.
#[no_mangle]
pub extern "C" fn AzGl_createProgram(gl: &AzGl) -> u32 {
    gl.create_program()
}
/// Equivalent to the Rust `Gl::delete_program()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteProgram(gl: &AzGl, program: u32) {
    gl.delete_program(program)
}
/// Equivalent to the Rust `Gl::create_shader()` function.
#[no_mangle]
pub extern "C" fn AzGl_createShader(gl: &AzGl, shader_type: u32) -> u32 {
    gl.create_shader(shader_type)
}
/// Equivalent to the Rust `Gl::delete_shader()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteShader(gl: &AzGl, shader: u32) {
    gl.delete_shader(shader)
}
/// Equivalent to the Rust `Gl::detach_shader()` function.
#[no_mangle]
pub extern "C" fn AzGl_detachShader(gl: &AzGl, program: u32, shader: u32) {
    gl.detach_shader(program, shader)
}
/// Equivalent to the Rust `Gl::link_program()` function.
#[no_mangle]
pub extern "C" fn AzGl_linkProgram(gl: &AzGl, program: u32) {
    gl.link_program(program)
}
/// Equivalent to the Rust `Gl::clear_color()` function.
#[no_mangle]
pub extern "C" fn AzGl_clearColor(gl: &AzGl, r: f32, g: f32, b: f32, a: f32) {
    gl.clear_color(r, g, b, a)
}
/// Equivalent to the Rust `Gl::clear()` function.
#[no_mangle]
pub extern "C" fn AzGl_clear(gl: &AzGl, buffer_mask: u32) {
    gl.clear(buffer_mask)
}
/// Equivalent to the Rust `Gl::clear_depth()` function.
#[no_mangle]
pub extern "C" fn AzGl_clearDepth(gl: &AzGl, depth: f64) {
    gl.clear_depth(depth)
}
/// Equivalent to the Rust `Gl::clear_stencil()` function.
#[no_mangle]
pub extern "C" fn AzGl_clearStencil(gl: &AzGl, s: i32) {
    gl.clear_stencil(s)
}
/// Equivalent to the Rust `Gl::flush()` function.
#[no_mangle]
pub extern "C" fn AzGl_flush(gl: &AzGl) {
    gl.flush()
}
/// Equivalent to the Rust `Gl::finish()` function.
#[no_mangle]
pub extern "C" fn AzGl_finish(gl: &AzGl) {
    gl.finish()
}
/// Equivalent to the Rust `Gl::get_error()` function.
#[no_mangle]
pub extern "C" fn AzGl_getError(gl: &AzGl) -> u32 {
    gl.get_error()
}
/// Equivalent to the Rust `Gl::stencil_mask()` function.
#[no_mangle]
pub extern "C" fn AzGl_stencilMask(gl: &AzGl, mask: u32) {
    gl.stencil_mask(mask)
}
/// Equivalent to the Rust `Gl::stencil_mask_separate()` function.
#[no_mangle]
pub extern "C" fn AzGl_stencilMaskSeparate(gl: &AzGl, face: u32, mask: u32) {
    gl.stencil_mask_separate(face, mask)
}
/// Equivalent to the Rust `Gl::stencil_func()` function.
#[no_mangle]
pub extern "C" fn AzGl_stencilFunc(gl: &AzGl, func: u32, ref_: i32, mask: u32) {
    gl.stencil_func(func, ref_, mask)
}
/// Equivalent to the Rust `Gl::stencil_func_separate()` function.
#[no_mangle]
pub extern "C" fn AzGl_stencilFuncSeparate(gl: &AzGl, face: u32, func: u32, ref_: i32, mask: u32) {
    gl.stencil_func_separate(face, func, ref_, mask)
}
/// Equivalent to the Rust `Gl::stencil_op()` function.
#[no_mangle]
pub extern "C" fn AzGl_stencilOp(gl: &AzGl, sfail: u32, dpfail: u32, dppass: u32) {
    gl.stencil_op(sfail, dpfail, dppass)
}
/// Equivalent to the Rust `Gl::stencil_op_separate()` function.
#[no_mangle]
pub extern "C" fn AzGl_stencilOpSeparate(
    gl: &AzGl,
    face: u32,
    sfail: u32,
    dpfail: u32,
    dppass: u32,
) {
    gl.stencil_op_separate(face, sfail, dpfail, dppass)
}
/// Equivalent to the Rust `Gl::egl_image_target_texture2d_oes()` function.
#[no_mangle]
pub extern "C" fn AzGl_eglImageTargetTexture2DOes(gl: &AzGl, target: u32, image: AzGlVoidPtrConst) {
    gl.egl_image_target_texture2d_oes(target, image)
}
/// Equivalent to the Rust `Gl::generate_mipmap()` function.
#[no_mangle]
pub extern "C" fn AzGl_generateMipmap(gl: &AzGl, target: u32) {
    gl.generate_mipmap(target)
}
/// Equivalent to the Rust `Gl::insert_event_marker_ext()` function.
#[no_mangle]
pub extern "C" fn AzGl_insertEventMarkerExt(gl: &AzGl, message: AzRefstr) {
    gl.insert_event_marker_ext(message)
}
/// Equivalent to the Rust `Gl::push_group_marker_ext()` function.
#[no_mangle]
pub extern "C" fn AzGl_pushGroupMarkerExt(gl: &AzGl, message: AzRefstr) {
    gl.push_group_marker_ext(message)
}
/// Equivalent to the Rust `Gl::pop_group_marker_ext()` function.
#[no_mangle]
pub extern "C" fn AzGl_popGroupMarkerExt(gl: &AzGl) {
    gl.pop_group_marker_ext()
}
/// Equivalent to the Rust `Gl::debug_message_insert_khr()` function.
#[no_mangle]
pub extern "C" fn AzGl_debugMessageInsertKhr(
    gl: &AzGl,
    source: u32,
    type_: u32,
    id: u32,
    severity: u32,
    message: AzRefstr,
) {
    gl.debug_message_insert_khr(source, type_, id, severity, message)
}
/// Equivalent to the Rust `Gl::push_debug_group_khr()` function.
#[no_mangle]
pub extern "C" fn AzGl_pushDebugGroupKhr(gl: &AzGl, source: u32, id: u32, message: AzRefstr) {
    gl.push_debug_group_khr(source, id, message)
}
/// Equivalent to the Rust `Gl::pop_debug_group_khr()` function.
#[no_mangle]
pub extern "C" fn AzGl_popDebugGroupKhr(gl: &AzGl) {
    gl.pop_debug_group_khr()
}
/// Equivalent to the Rust `Gl::fence_sync()` function.
#[no_mangle]
pub extern "C" fn AzGl_fenceSync(gl: &AzGl, condition: u32, flags: u32) -> AzGLsyncPtr {
    gl.fence_sync(condition, flags)
}
/// Equivalent to the Rust `Gl::client_wait_sync()` function.
#[no_mangle]
pub extern "C" fn AzGl_clientWaitSync(
    gl: &AzGl,
    sync: AzGLsyncPtr,
    flags: u32,
    timeout: u64,
) -> u32 {
    gl.client_wait_sync(sync, flags, timeout)
}
/// Equivalent to the Rust `Gl::wait_sync()` function.
#[no_mangle]
pub extern "C" fn AzGl_waitSync(gl: &AzGl, sync: AzGLsyncPtr, flags: u32, timeout: u64) {
    gl.wait_sync(sync, flags, timeout)
}
/// Equivalent to the Rust `Gl::delete_sync()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteSync(gl: &AzGl, sync: AzGLsyncPtr) {
    gl.delete_sync(sync)
}
/// Equivalent to the Rust `Gl::texture_range_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_textureRangeApple(gl: &AzGl, target: u32, data: AzU8VecRef) {
    gl.texture_range_apple(target, data)
}
/// Equivalent to the Rust `Gl::gen_fences_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_genFencesApple(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_fences_apple(n)
}
/// Equivalent to the Rust `Gl::delete_fences_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteFencesApple(gl: &AzGl, fences: AzGLuintVecRef) {
    gl.delete_fences_apple(fences)
}
/// Equivalent to the Rust `Gl::set_fence_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_setFenceApple(gl: &AzGl, fence: u32) {
    gl.set_fence_apple(fence)
}
/// Equivalent to the Rust `Gl::finish_fence_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_finishFenceApple(gl: &AzGl, fence: u32) {
    gl.finish_fence_apple(fence)
}
/// Equivalent to the Rust `Gl::test_fence_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_testFenceApple(gl: &AzGl, fence: u32) {
    gl.test_fence_apple(fence)
}
/// Equivalent to the Rust `Gl::test_object_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_testObjectApple(gl: &AzGl, object: u32, name: u32) -> u8 {
    gl.test_object_apple(object, name)
}
/// Equivalent to the Rust `Gl::finish_object_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_finishObjectApple(gl: &AzGl, object: u32, name: u32) {
    gl.finish_object_apple(object, name)
}
/// Equivalent to the Rust `Gl::get_frag_data_index()` function.
#[no_mangle]
pub extern "C" fn AzGl_getFragDataIndex(gl: &AzGl, program: u32, name: AzRefstr) -> i32 {
    gl.get_frag_data_index(program, name)
}
/// Equivalent to the Rust `Gl::blend_barrier_khr()` function.
#[no_mangle]
pub extern "C" fn AzGl_blendBarrierKhr(gl: &AzGl) {
    gl.blend_barrier_khr()
}
/// Equivalent to the Rust `Gl::bind_frag_data_location_indexed()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindFragDataLocationIndexed(
    gl: &AzGl,
    program: u32,
    color_number: u32,
    index: u32,
    name: AzRefstr,
) {
    gl.bind_frag_data_location_indexed(program, color_number, index, name)
}
/// Equivalent to the Rust `Gl::get_debug_messages()` function.
#[no_mangle]
pub extern "C" fn AzGl_getDebugMessages(gl: &AzGl) -> AzDebugMessageVec {
    gl.get_debug_messages()
}
/// Equivalent to the Rust `Gl::provoking_vertex_angle()` function.
#[no_mangle]
pub extern "C" fn AzGl_provokingVertexAngle(gl: &AzGl, mode: u32) {
    gl.provoking_vertex_angle(mode)
}
/// Equivalent to the Rust `Gl::gen_vertex_arrays_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_genVertexArraysApple(gl: &AzGl, n: i32) -> AzGLuintVec {
    gl.gen_vertex_arrays_apple(n)
}
/// Equivalent to the Rust `Gl::bind_vertex_array_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_bindVertexArrayApple(gl: &AzGl, vao: u32) {
    gl.bind_vertex_array_apple(vao)
}
/// Equivalent to the Rust `Gl::delete_vertex_arrays_apple()` function.
#[no_mangle]
pub extern "C" fn AzGl_deleteVertexArraysApple(gl: &AzGl, vertex_arrays: AzGLuintVecRef) {
    gl.delete_vertex_arrays_apple(vertex_arrays)
}
/// Equivalent to the Rust `Gl::copy_texture_chromium()` function.
#[no_mangle]
pub extern "C" fn AzGl_copyTextureChromium(
    gl: &AzGl,
    source_id: u32,
    source_level: i32,
    dest_target: u32,
    dest_id: u32,
    dest_level: i32,
    internal_format: i32,
    dest_type: u32,
    unpack_flip_y: u8,
    unpack_premultiply_alpha: u8,
    unpack_unmultiply_alpha: u8,
) {
    gl.copy_texture_chromium(
        source_id,
        source_level,
        dest_target,
        dest_id,
        dest_level,
        internal_format,
        dest_type,
        unpack_flip_y,
        unpack_premultiply_alpha,
        unpack_unmultiply_alpha,
    )
}
/// Equivalent to the Rust `Gl::copy_sub_texture_chromium()` function.
#[no_mangle]
pub extern "C" fn AzGl_copySubTextureChromium(
    gl: &AzGl,
    source_id: u32,
    source_level: i32,
    dest_target: u32,
    dest_id: u32,
    dest_level: i32,
    x_offset: i32,
    y_offset: i32,
    x: i32,
    y: i32,
    width: i32,
    height: i32,
    unpack_flip_y: u8,
    unpack_premultiply_alpha: u8,
    unpack_unmultiply_alpha: u8,
) {
    gl.copy_sub_texture_chromium(
        source_id,
        source_level,
        dest_target,
        dest_id,
        dest_level,
        x_offset,
        y_offset,
        x,
        y,
        width,
        height,
        unpack_flip_y,
        unpack_premultiply_alpha,
        unpack_unmultiply_alpha,
    )
}
/// Equivalent to the Rust `Gl::egl_image_target_renderbuffer_storage_oes()` function.
#[no_mangle]
pub extern "C" fn AzGl_eglImageTargetRenderbufferStorageOes(
    gl: &AzGl,
    target: u32,
    image: AzGlVoidPtrConst,
) {
    gl.egl_image_target_renderbuffer_storage_oes(target, image)
}
/// Equivalent to the Rust `Gl::copy_texture_3d_angle()` function.
#[no_mangle]
pub extern "C" fn AzGl_copyTexture3DAngle(
    gl: &AzGl,
    source_id: u32,
    source_level: i32,
    dest_target: u32,
    dest_id: u32,
    dest_level: i32,
    internal_format: i32,
    dest_type: u32,
    unpack_flip_y: u8,
    unpack_premultiply_alpha: u8,
    unpack_unmultiply_alpha: u8,
) {
    gl.copy_texture_3d_angle(
        source_id,
        source_level,
        dest_target,
        dest_id,
        dest_level,
        internal_format,
        dest_type,
        unpack_flip_y,
        unpack_premultiply_alpha,
        unpack_unmultiply_alpha,
    )
}
/// Equivalent to the Rust `Gl::copy_sub_texture_3d_angle()` function.
#[no_mangle]
pub extern "C" fn AzGl_copySubTexture3DAngle(
    gl: &AzGl,
    source_id: u32,
    source_level: i32,
    dest_target: u32,
    dest_id: u32,
    dest_level: i32,
    x_offset: i32,
    y_offset: i32,
    z_offset: i32,
    x: i32,
    y: i32,
    z: i32,
    width: i32,
    height: i32,
    depth: i32,
    unpack_flip_y: u8,
    unpack_premultiply_alpha: u8,
    unpack_unmultiply_alpha: u8,
) {
    gl.copy_sub_texture_3d_angle(
        source_id,
        source_level,
        dest_target,
        dest_id,
        dest_level,
        x_offset,
        y_offset,
        z_offset,
        x,
        y,
        z,
        width,
        height,
        depth,
        unpack_flip_y,
        unpack_premultiply_alpha,
        unpack_unmultiply_alpha,
    )
}
/// Equivalent to the Rust `Gl::buffer_storage()` function.
#[no_mangle]
pub extern "C" fn AzGl_bufferStorage(
    gl: &AzGl,
    target: u32,
    size: isize,
    data: AzGlVoidPtrConst,
    flags: u32,
) {
    gl.buffer_storage(target, size, data, flags)
}
/// Equivalent to the Rust `Gl::flush_mapped_buffer_range()` function.
#[no_mangle]
pub extern "C" fn AzGl_flushMappedBufferRange(
    gl: &AzGl,
    target: u32,
    offset: isize,
    length: isize,
) {
    gl.flush_mapped_buffer_range(target, offset, length)
}
/// Destructor: Takes ownership of the `Gl` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGl_delete(object: &mut AzGl) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzGl_deepCopy(object: &AzGl) -> AzGl {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
pub use azul_core::gl::GlShaderPrecisionFormatReturn as AzGlShaderPrecisionFormatReturnTT;
/// Re-export of rust-allocated (stack based) `VertexAttribute` struct
pub use azul_core::gl::VertexAttribute as AzVertexAttributeTT;
/// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
pub use azul_core::gl::VertexAttributeType as AzVertexAttributeTypeTT;
pub use AzGlShaderPrecisionFormatReturnTT as AzGlShaderPrecisionFormatReturn;
pub use AzVertexAttributeTT as AzVertexAttribute;
pub use AzVertexAttributeTypeTT as AzVertexAttributeType;
/// Destructor: Takes ownership of the `VertexAttribute` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVertexAttribute_delete(object: &mut AzVertexAttribute) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `VertexLayout` struct
pub use azul_core::gl::VertexLayout as AzVertexLayoutTT;
pub use AzVertexLayoutTT as AzVertexLayout;
/// Destructor: Takes ownership of the `VertexLayout` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVertexLayout_delete(object: &mut AzVertexLayout) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
pub use azul_core::gl::VertexArrayObject as AzVertexArrayObjectTT;
pub use AzVertexArrayObjectTT as AzVertexArrayObject;
/// Creates a new `VertexArrayObject` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `VertexArrayObject::new()` constructor.
#[no_mangle]
pub extern "C" fn AzVertexArrayObject_new(
    vertex_layout: AzVertexLayout,
    vao_id: u32,
    gl_context: AzGl,
) -> AzVertexArrayObject {
    AzVertexArrayObject::new(vertex_layout, vao_id, gl_context)
}
/// Destructor: Takes ownership of the `VertexArrayObject` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVertexArrayObject_delete(object: &mut AzVertexArrayObject) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzVertexArrayObject_deepCopy(
    object: &AzVertexArrayObject,
) -> AzVertexArrayObject {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
pub use azul_core::gl::IndexBufferFormat as AzIndexBufferFormatTT;
/// Re-export of rust-allocated (stack based) `VertexBuffer` struct
pub use azul_core::gl::VertexBuffer as AzVertexBufferTT;
pub use AzIndexBufferFormatTT as AzIndexBufferFormat;
pub use AzVertexBufferTT as AzVertexBuffer;
/// Creates a new `VertexBuffer` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `VertexBuffer::new()` constructor.
#[no_mangle]
pub extern "C" fn AzVertexBuffer_new(
    vertex_buffer_id: u32,
    vertex_buffer_len: usize,
    vao: AzVertexArrayObject,
    index_buffer_id: u32,
    index_buffer_len: usize,
    index_buffer_format: AzIndexBufferFormat,
) -> AzVertexBuffer {
    AzVertexBuffer::new_raw(
        vertex_buffer_id,
        vertex_buffer_len,
        vao,
        index_buffer_id,
        index_buffer_len,
        index_buffer_format,
    )
}
/// Destructor: Takes ownership of the `VertexBuffer` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVertexBuffer_delete(object: &mut AzVertexBuffer) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzVertexBuffer_deepCopy(object: &AzVertexBuffer) -> AzVertexBuffer {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `DebugMessage` struct
pub use azul_core::gl::AzDebugMessage as AzDebugMessageTT;
/// Re-export of rust-allocated (stack based) `GlType` struct
pub use azul_core::gl::AzGlType as AzGlTypeTT;
pub use AzDebugMessageTT as AzDebugMessage;
pub use AzGlTypeTT as AzGlType;
/// Destructor: Takes ownership of the `DebugMessage` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDebugMessage_delete(object: &mut AzDebugMessage) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// C-ABI stable reexport of `&[f32]`
pub use azul_core::gl::F32VecRef as AzF32VecRefTT;
/// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
pub use azul_core::gl::GLbooleanVecRefMut as AzGLbooleanVecRefMutTT;
/// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
pub use azul_core::gl::GLenumVecRef as AzGLenumVecRefTT;
/// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
pub use azul_core::gl::GLfloatVecRefMut as AzGLfloatVecRefMutTT;
/// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
pub use azul_core::gl::GLint64VecRefMut as AzGLint64VecRefMutTT;
/// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
pub use azul_core::gl::GLintVecRefMut as AzGLintVecRefMutTT;
/// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
pub use azul_core::gl::GLuintVecRef as AzGLuintVecRefTT;
/// C-ABI stable reexport of `(U8Vec, u32)`
pub use azul_core::gl::GetProgramBinaryReturn as AzGetProgramBinaryReturnTT;
/// C-ABI stable reexport of `&[i32]`
pub use azul_core::gl::I32VecRef as AzI32VecRefTT;
/// C-ABI stable reexport of `&str`
pub use azul_core::gl::Refstr as AzRefstrTT;
/// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
pub use azul_core::gl::RefstrVecRef as AzRefstrVecRefTT;
/// C-ABI stable reexport of `&[u8]`
pub use azul_core::gl::U8VecRef as AzU8VecRefTT;
/// C-ABI stable reexport of `&mut [u8]`
pub use azul_core::gl::U8VecRefMut as AzU8VecRefMutTT;
pub use AzF32VecRefTT as AzF32VecRef;
pub use AzGLbooleanVecRefMutTT as AzGLbooleanVecRefMut;
pub use AzGLenumVecRefTT as AzGLenumVecRef;
pub use AzGLfloatVecRefMutTT as AzGLfloatVecRefMut;
pub use AzGLint64VecRefMutTT as AzGLint64VecRefMut;
pub use AzGLintVecRefMutTT as AzGLintVecRefMut;
pub use AzGLuintVecRefTT as AzGLuintVecRef;
pub use AzGetProgramBinaryReturnTT as AzGetProgramBinaryReturn;
pub use AzI32VecRefTT as AzI32VecRef;
pub use AzRefstrTT as AzRefstr;
pub use AzRefstrVecRefTT as AzRefstrVecRef;
pub use AzU8VecRefMutTT as AzU8VecRefMut;
pub use AzU8VecRefTT as AzU8VecRef;
/// Destructor: Takes ownership of the `GetProgramBinaryReturn` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGetProgramBinaryReturn_delete(object: &mut AzGetProgramBinaryReturn) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub use azul_core::gl::GetActiveAttribReturn as AzGetActiveAttribReturnTT;
pub use AzGetActiveAttribReturnTT as AzGetActiveAttribReturn;
/// Destructor: Takes ownership of the `GetActiveAttribReturn` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGetActiveAttribReturn_delete(object: &mut AzGetActiveAttribReturn) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// C-ABI stable reexport of `*const gleam::gl::GLsync`
pub use azul_core::gl::GLsyncPtr as AzGLsyncPtrTT;
pub use AzGLsyncPtrTT as AzGLsyncPtr;
/// Destructor: Takes ownership of the `GLsyncPtr` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGLsyncPtr_delete(object: &mut AzGLsyncPtr) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzGLsyncPtr_deepCopy(object: &AzGLsyncPtr) -> AzGLsyncPtr {
    object.clone()
}

/// C-ABI stable reexport of `(i32, u32, AzString)`
pub use azul_core::gl::GetActiveUniformReturn as AzGetActiveUniformReturnTT;
pub use AzGetActiveUniformReturnTT as AzGetActiveUniformReturn;
/// Destructor: Takes ownership of the `GetActiveUniformReturn` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGetActiveUniformReturn_delete(object: &mut AzGetActiveUniformReturn) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TextureFlags` struct
pub use azul_core::gl::TextureFlags as AzTextureFlagsTT;
pub use AzTextureFlagsTT as AzTextureFlags;
/// Default texture flags (not opaque, not a video texture)
#[no_mangle]
pub extern "C" fn AzTextureFlags_default() -> AzTextureFlags {
    AzTextureFlags::default()
}

/// Re-export of rust-allocated (stack based) `ImageRef` struct
pub use azul_core::resources::ImageRef as AzImageRefTT;
pub use AzImageRefTT as AzImageRef;
/// Creates an "invalid" image with a width and height that reserves an image key, but does not
/// render anything
#[no_mangle]
pub extern "C" fn AzImageRef_nullImage(
    width: usize,
    height: usize,
    format: AzRawImageFormat,
    tag: AzU8Vec,
) -> AzImageRef {
    AzImageRef::null_image(width, height, format, tag.as_ref().to_vec())
}
/// Creates an image reference from a CPU-backed buffer
#[no_mangle]
pub extern "C" fn AzImageRef_rawImage(data: AzRawImage) -> AzOptionImageRef {
    AzImageRef::new_rawimage(data).into()
}
/// Creates an image reference from an OpenGL texture
#[no_mangle]
pub extern "C" fn AzImageRef_glTexture(texture: AzTexture) -> AzImageRef {
    AzImageRef::new_gltexture(texture)
}
/// Creates an image reference from a callback that is going to be rendered with the given nodes
/// computed size
#[no_mangle]
pub extern "C" fn AzImageRef_callback(
    data: AzRefAny,
    callback: AzRenderImageCallbackType,
) -> AzImageRef {
    AzImageRef::callback(callback, data)
}
/// Creates a new copy of the image bytes instead of shallow-copying the reference
#[no_mangle]
pub extern "C" fn AzImageRef_cloneBytes(imageref: &AzImageRef) -> AzImageRef {
    imageref.deep_copy()
}
/// Returns whether the image is a null (invalid) image
#[no_mangle]
pub extern "C" fn AzImageRef_isInvalid(imageref: &AzImageRef) -> bool {
    imageref.is_null_image()
}
/// Returns whether the image is a GL texture
#[no_mangle]
pub extern "C" fn AzImageRef_isGlTexture(imageref: &AzImageRef) -> bool {
    imageref.is_gl_texture()
}
/// Returns whether the image is a raw (CPU-decoded) image
#[no_mangle]
pub extern "C" fn AzImageRef_isRawImage(imageref: &AzImageRef) -> bool {
    imageref.is_raw_image()
}
/// Returns whether the image is a `RenderImageCallback`
#[no_mangle]
pub extern "C" fn AzImageRef_isCallback(imageref: &AzImageRef) -> bool {
    imageref.is_callback()
}
/// If the image is a RawImage, returns a COPY of the internal image bytes (useful for encoding the
/// RawImage / exporting the ImageRef to a file)
#[no_mangle]
pub extern "C" fn AzImageRef_getRawImage(imageref: &AzImageRef) -> AzOptionRawImage {
    imageref.get_rawimage().into()
}
/// Returns the hash of the ImageRef (fast)
#[no_mangle]
pub extern "C" fn AzImageRef_getHash(imageref: &AzImageRef) -> u64 {
    imageref.get_hash().0 as u64
}
/// Destructor: Takes ownership of the `ImageRef` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzImageRef_delete(object: &mut AzImageRef) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzImageRef_deepCopy(object: &AzImageRef) -> AzImageRef {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `RawImage` struct
pub use azul_core::resources::RawImage as AzRawImageTT;
pub use AzRawImageTT as AzRawImage;
/// Returns a zero-sized image
#[no_mangle]
pub extern "C" fn AzRawImage_empty() -> AzRawImage {
    AzRawImage::null_image()
}
/// Allocates a width * height, single-channel image with zeroed bytes
#[no_mangle]
pub extern "C" fn AzRawImage_allocateClipMask(size: AzLayoutSize) -> AzRawImage {
    AzRawImage::allocate_mask(size)
}
/// Decodes a RawImage from any supported image format - automatically guesses the format based on
/// magic header
#[no_mangle]
pub extern "C" fn AzRawImage_decodeImageBytesAny(
    bytes: AzU8VecRef,
) -> AzResultRawImageDecodeImageError {
    azul_layout::image::decode::decode_raw_image_from_any_bytes(bytes.as_slice())
}
/// Equivalent to the Rust `RawImage::draw_clip_mask()` function.
#[no_mangle]
pub extern "C" fn AzRawImage_drawClipMask(
    rawimage: &mut AzRawImage,
    node: AzSvgNode,
    style: AzSvgStyle,
) -> bool {
    azul_layout::xml::svg::render_node_clipmask_cpu(rawimage, &node, style).is_some()
}
/// Encodes the RawImage in the BMP image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodeBmp(rawimage: &AzRawImage) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_bmp(rawimage)
}
/// Encodes the RawImage in the PNG image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodePng(rawimage: &AzRawImage) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_png(rawimage)
}
/// Encodes the RawImage in the JPG image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodeJpeg(
    rawimage: &AzRawImage,
    quality: u8,
) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_jpeg(rawimage, quality)
}
/// Encodes the RawImage in the TGA image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodeTga(rawimage: &AzRawImage) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_tga(rawimage)
}
/// Encodes the RawImage in the PNM image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodePnm(rawimage: &AzRawImage) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_pnm(rawimage)
}
/// Encodes the RawImage in the GIF image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodeGif(rawimage: &AzRawImage) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_gif(rawimage)
}
/// Encodes the RawImage in the TIFF image format
#[no_mangle]
pub extern "C" fn AzRawImage_encodeTiff(rawimage: &AzRawImage) -> AzResultU8VecEncodeImageError {
    azul_layout::image::encode::encode_tiff(rawimage)
}
/// Destructor: Takes ownership of the `RawImage` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzRawImage_delete(object: &mut AzRawImage) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ImageMask` struct
pub use azul_core::resources::ImageMask as AzImageMaskTT;
pub use AzImageMaskTT as AzImageMask;
/// Destructor: Takes ownership of the `ImageMask` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzImageMask_delete(object: &mut AzImageMask) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `RawImageData` struct
pub use azul_core::resources::RawImageData as AzRawImageDataTT;
/// Re-export of rust-allocated (stack based) `RawImageFormat` struct
pub use azul_core::resources::RawImageFormat as AzRawImageFormatTT;
/// Re-export of rust-allocated (stack based) `DecodeImageError` struct
pub use azul_layout::image::decode::DecodeImageError as AzDecodeImageErrorTT;
/// Re-export of rust-allocated (stack based) `EncodeImageError` struct
pub use azul_layout::image::encode::EncodeImageError as AzEncodeImageErrorTT;
pub use AzDecodeImageErrorTT as AzDecodeImageError;
pub use AzEncodeImageErrorTT as AzEncodeImageError;
pub use AzRawImageDataTT as AzRawImageData;
pub use AzRawImageFormatTT as AzRawImageFormat;
/// Destructor: Takes ownership of the `RawImageData` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzRawImageData_delete(object: &mut AzRawImageData) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzParsedFontDestructorFnType = extern "C" fn(&mut c_void);
/// Re-export of rust-allocated (stack based) `FontMetrics` struct
pub use azul_css::FontMetrics as AzFontMetricsTT;
pub use AzFontMetricsTT as AzFontMetrics;
/// Returns a FontMetrics struct with all fields set to 0
#[no_mangle]
pub extern "C" fn AzFontMetrics_zero() -> AzFontMetrics {
    AzFontMetrics::zero()
}
/// If set, use `OS/2.sTypoAscender - OS/2.sTypoDescender + OS/2.sTypoLineGap` to calculate the
/// height.
#[no_mangle]
pub extern "C" fn AzFontMetrics_useTypoMetrics(fontmetrics: &AzFontMetrics) -> bool {
    fontmetrics.use_typo_metrics()
}
/// Equivalent to the Rust `FontMetrics::get_ascender()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getAscender(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_ascender(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_descender()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getDescender(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_descender(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_line_gap()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getLineGap(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_line_gap(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_x_min()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getXMin(fontmetrics: &AzFontMetrics, target_font_size: f32) -> f32 {
    fontmetrics.get_x_min(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_min()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYMin(fontmetrics: &AzFontMetrics, target_font_size: f32) -> f32 {
    fontmetrics.get_y_min(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_x_max()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getXMax(fontmetrics: &AzFontMetrics, target_font_size: f32) -> f32 {
    fontmetrics.get_x_max(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_max()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYMax(fontmetrics: &AzFontMetrics, target_font_size: f32) -> f32 {
    fontmetrics.get_y_max(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_advance_width_max()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getAdvanceWidthMax(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_advance_width_max(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_min_left_side_bearing()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getMinLeftSideBearing(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_min_left_side_bearing(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_min_right_side_bearing()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getMinRightSideBearing(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_min_right_side_bearing(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_x_max_extent()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getXMaxExtent(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_x_max_extent(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_x_avg_char_width()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getXAvgCharWidth(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_x_avg_char_width(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_subscript_x_size()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSubscriptXSize(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_subscript_x_size(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_subscript_y_size()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSubscriptYSize(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_subscript_y_size(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_subscript_x_offset()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSubscriptXOffset(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_subscript_x_offset(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_subscript_y_offset()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSubscriptYOffset(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_subscript_y_offset(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_superscript_x_size()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSuperscriptXSize(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_superscript_x_size(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_superscript_y_size()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSuperscriptYSize(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_superscript_y_size(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_superscript_x_offset()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSuperscriptXOffset(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_superscript_x_offset(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_superscript_y_offset()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYSuperscriptYOffset(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_superscript_y_offset(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_strikeout_size()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYStrikeoutSize(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_strikeout_size(target_font_size)
}
/// Equivalent to the Rust `FontMetrics::get_y_strikeout_position()` function.
#[no_mangle]
pub extern "C" fn AzFontMetrics_getYStrikeoutPosition(
    fontmetrics: &AzFontMetrics,
    target_font_size: f32,
) -> f32 {
    fontmetrics.get_y_strikeout_position(target_font_size)
}

/// Source data of a font file (bytes)
pub use azul_core::resources::LoadedFontSource as AzFontSourceTT;
pub use AzFontSourceTT as AzFontSource;
/// Destructor: Takes ownership of the `FontSource` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFontSource_delete(object: &mut AzFontSource) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Atomically reference-counted parsed font data
pub use azul_css::FontRef as AzFontRefTT;
pub use AzFontRefTT as AzFontRef;
/// Parses a new font from bytes. Returns `None` if the font could not be parsed correctly.
#[no_mangle]
pub extern "C" fn AzFontRef_parse(source: AzFontSource) -> AzOptionFontRef {
    azul_layout::parse_font_fn(source).into()
}
/// Returns the font bytes of the underlying font source
#[no_mangle]
pub extern "C" fn AzFontRef_getBytes(fontref: &AzFontRef) -> AzU8Vec {
    fontref.get_bytes()
}
/// Returns the font metrics of the parsed font
#[no_mangle]
pub extern "C" fn AzFontRef_getFontMetrics(fontref: &AzFontRef) -> AzFontMetrics {
    azul_layout::text2::get_font_metrics_fontref(fontref)
}
/// Returns the text layout of the shaped text
#[no_mangle]
pub extern "C" fn AzFontRef_shapeText(
    fontref: &AzFontRef,
    text: AzRefstr,
    options: AzResolvedTextLayoutOptions,
) -> AzInlineText {
    azul_layout::text2::layout::shape_text(fontref, text.as_str(), &options)
}
/// Returns the hash of the FontRef (fast)
#[no_mangle]
pub extern "C" fn AzFontRef_getHash(fontref: &AzFontRef) -> u64 {
    azul_core::resources::font_ref_get_hash(fontref)
}
/// Destructor: Takes ownership of the `FontRef` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFontRef_delete(object: &mut AzFontRef) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzFontRef_deepCopy(object: &AzFontRef) -> AzFontRef {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `Svg` struct
pub use azul_layout::xml::svg::Svg as AzSvgTT;
pub use AzSvgTT as AzSvg;
/// Creates a new `Svg` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Svg::from_string()` constructor.
#[no_mangle]
pub extern "C" fn AzSvg_fromString(
    svg_string: AzString,
    parse_options: AzSvgParseOptions,
) -> AzResultSvgSvgParseError {
    match azul_layout::xml::svg::svg_parse(svg_string.as_ref().as_bytes(), parse_options) {
        Ok(o) => azul_core::svg::ResultSvgSvgParseError::Ok(unsafe { core::mem::transmute(o) }),
        Err(e) => azul_core::svg::ResultSvgSvgParseError::Err(e),
    }
}
/// Creates a new `Svg` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Svg::from_bytes()` constructor.
#[no_mangle]
pub extern "C" fn AzSvg_fromBytes(
    svg_bytes: AzU8VecRef,
    parse_options: AzSvgParseOptions,
) -> AzResultSvgSvgParseError {
    match azul_layout::xml::svg::svg_parse(svg_bytes.as_slice(), parse_options) {
        Ok(o) => azul_core::svg::ResultSvgSvgParseError::Ok(unsafe { core::mem::transmute(o) }),
        Err(e) => azul_core::svg::ResultSvgSvgParseError::Err(e),
    }
}
/// Equivalent to the Rust `Svg::get_root()` function.
#[no_mangle]
pub extern "C" fn AzSvg_getRoot(svg: &AzSvg) -> AzSvgXmlNode {
    azul_layout::xml::svg::svg_root(svg)
}
/// Equivalent to the Rust `Svg::render()` function.
#[no_mangle]
pub extern "C" fn AzSvg_render(svg: &AzSvg, options: AzSvgRenderOptions) -> AzOptionRawImage {
    azul_layout::xml::svg::svg_render(svg, options).into()
}
/// Equivalent to the Rust `Svg::to_string()` function.
#[no_mangle]
pub extern "C" fn AzSvg_toString(svg: &AzSvg, options: AzSvgStringFormatOptions) -> AzString {
    azul_layout::xml::svg::svg_to_string(svg, options).into()
}
/// Destructor: Takes ownership of the `Svg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvg_delete(object: &mut AzSvg) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzSvg_deepCopy(object: &AzSvg) -> AzSvg {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
pub use azul_layout::xml::svg::SvgXmlNode as AzSvgXmlNodeTT;
pub use AzSvgXmlNodeTT as AzSvgXmlNode;
/// Creates a new `SvgXmlNode` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgXmlNode::parse_from()` constructor.
#[no_mangle]
pub extern "C" fn AzSvgXmlNode_parseFrom(
    svg_bytes: AzU8VecRef,
    parse_options: AzSvgParseOptions,
) -> AzResultSvgXmlNodeSvgParseError {
    match azul_layout::xml::svg::svgxmlnode_parse(svg_bytes.as_slice(), parse_options) {
        Ok(o) => {
            azul_core::svg::ResultSvgXmlNodeSvgParseError::Ok(unsafe { core::mem::transmute(o) })
        }
        Err(e) => azul_core::svg::ResultSvgXmlNodeSvgParseError::Err(e),
    }
}
/// Destructor: Takes ownership of the `SvgXmlNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgXmlNode_delete(object: &mut AzSvgXmlNode) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzSvgXmlNode_deepCopy(object: &AzSvgXmlNode) -> AzSvgXmlNode {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
pub use azul_layout::xml::svg::SvgMultiPolygon as AzSvgMultiPolygonTT;
pub use AzSvgMultiPolygonTT as AzSvgMultiPolygon;
/// Returns the bounds of the polygon
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_getBounds(svgmultipolygon: &AzSvgMultiPolygon) -> AzSvgRect {
    svgmultipolygon.get_bounds()
}
/// Returns whether the polygon contains a point
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_containsPoint(
    svgmultipolygon: &AzSvgMultiPolygon,
    point: AzSvgPoint,
    fill_rule: AzSvgFillRule,
    tolerance: f32,
) -> bool {
    azul_layout::xml::svg::polygon_contains_point(svgmultipolygon, point, fill_rule, tolerance)
}
/// Unions two MultiPolygons, returns the unioned MultiPolygon
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_union(
    svgmultipolygon: &AzSvgMultiPolygon,
    other: AzSvgMultiPolygon,
) -> AzSvgMultiPolygon {
    azul_layout::xml::svg::svg_multi_polygon_union(svgmultipolygon, &other)
}
/// Intersects two MultiPolygons, returns the intersected MultiPolygon
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_intersection(
    svgmultipolygon: &AzSvgMultiPolygon,
    other: AzSvgMultiPolygon,
) -> AzSvgMultiPolygon {
    azul_layout::xml::svg::svg_multi_polygon_intersection(svgmultipolygon, &other)
}
/// Calculates the difference two MultiPolygons, returns a MultiPolygon
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_difference(
    svgmultipolygon: &AzSvgMultiPolygon,
    other: AzSvgMultiPolygon,
) -> AzSvgMultiPolygon {
    azul_layout::xml::svg::svg_multi_polygon_difference(svgmultipolygon, &other)
}
/// Xors two MultiPolygons, returns a MultiPolygon
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_xor(
    svgmultipolygon: &AzSvgMultiPolygon,
    other: AzSvgMultiPolygon,
) -> AzSvgMultiPolygon {
    azul_layout::xml::svg::svg_multi_polygon_xor(svgmultipolygon, &other)
}
/// Equivalent to the Rust `SvgMultiPolygon::tessellate_fill()` function.
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_tessellateFill(
    svgmultipolygon: &AzSvgMultiPolygon,
    fill_style: AzSvgFillStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_multi_polygon_fill(svgmultipolygon, fill_style)
}
/// Equivalent to the Rust `SvgMultiPolygon::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_tessellateStroke(
    svgmultipolygon: &AzSvgMultiPolygon,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_multi_polygon_stroke(svgmultipolygon, stroke_style)
}
/// Destructor: Takes ownership of the `SvgMultiPolygon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygon_delete(object: &mut AzSvgMultiPolygon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgNode` struct
pub use azul_layout::xml::svg::SvgNode as AzSvgNodeTT;
pub use AzSvgNodeTT as AzSvgNode;
/// Equivalent to the Rust `SvgNode::tessellate_fill()` function.
#[no_mangle]
pub extern "C" fn AzSvgNode_tessellateFill(
    svgnode: &AzSvgNode,
    fill_style: AzSvgFillStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_node_fill(svgnode, fill_style)
}
/// Equivalent to the Rust `SvgNode::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgNode_tessellateStroke(
    svgnode: &AzSvgNode,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_node_stroke(svgnode, stroke_style)
}
/// Returns whether the shape is closed
#[no_mangle]
pub extern "C" fn AzSvgNode_isClosed(svgnode: &AzSvgNode) -> bool {
    svgnode.is_closed()
}
/// Returns the bounds of the polygon
#[no_mangle]
pub extern "C" fn AzSvgNode_containsPoint(
    svgnode: &AzSvgNode,
    point: AzSvgPoint,
    fill_rule: AzSvgFillRule,
    tolerance: f32,
) -> bool {
    azul_layout::xml::svg::svg_node_contains_point(svgnode, point, fill_rule, tolerance)
}
/// Equivalent to the Rust `SvgNode::get_bounds()` function.
#[no_mangle]
pub extern "C" fn AzSvgNode_getBounds(svgnode: &AzSvgNode) -> AzSvgRect {
    svgnode.get_bounds()
}
/// Destructor: Takes ownership of the `SvgNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgNode_delete(object: &mut AzSvgNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgSimpleNode` struct
pub use azul_layout::xml::svg::SvgSimpleNode as AzSvgSimpleNodeTT;
pub use AzSvgSimpleNodeTT as AzSvgSimpleNode;
/// Equivalent to the Rust `SvgSimpleNode::get_bounds()` function.
#[no_mangle]
pub extern "C" fn AzSvgSimpleNode_getBounds(svgsimplenode: &AzSvgSimpleNode) -> AzSvgRect {
    svgsimplenode.get_bounds()
}
/// Destructor: Takes ownership of the `SvgSimpleNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgSimpleNode_delete(object: &mut AzSvgSimpleNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
pub use azul_layout::xml::svg::SvgStyledNode as AzSvgStyledNodeTT;
pub use AzSvgStyledNodeTT as AzSvgStyledNode;
/// Equivalent to the Rust `SvgStyledNode::tessellate()` function.
#[no_mangle]
pub extern "C" fn AzSvgStyledNode_tessellate(
    svgstylednode: &AzSvgStyledNode,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_styled_node(svgstylednode)
}
/// Destructor: Takes ownership of the `SvgStyledNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgStyledNode_delete(object: &mut AzSvgStyledNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgCircle` struct
pub use azul_layout::xml::svg::SvgCircle as AzSvgCircleTT;
pub use AzSvgCircleTT as AzSvgCircle;
/// Equivalent to the Rust `SvgCircle::tessellate_fill()` function.
#[no_mangle]
pub extern "C" fn AzSvgCircle_tessellateFill(
    svgcircle: &AzSvgCircle,
    fill_style: AzSvgFillStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_circle_fill(svgcircle, fill_style)
}
/// Equivalent to the Rust `SvgCircle::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgCircle_tessellateStroke(
    svgcircle: &AzSvgCircle,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_circle_stroke(svgcircle, stroke_style)
}

/// Re-export of rust-allocated (stack based) `SvgPath` struct
pub use azul_layout::xml::svg::SvgPath as AzSvgPathTT;
pub use AzSvgPathTT as AzSvgPath;
/// Returns whether the path is closed
#[no_mangle]
pub extern "C" fn AzSvgPath_isClosed(svgpath: &AzSvgPath) -> bool {
    svgpath.is_closed()
}
/// Reverses the order of points in the path so that the path runs in the opposite direction
/// afterwards
#[no_mangle]
pub extern "C" fn AzSvgPath_reverse(svgpath: &mut AzSvgPath) {
    svgpath.reverse()
}
/// Returns the first point of the path (or None if path has no items)
#[no_mangle]
pub extern "C" fn AzSvgPath_getStart(svgpath: &AzSvgPath) -> AzOptionSvgPoint {
    svgpath.get_start().into()
}
/// Returns the first point of the path (or None if path has no items)
#[no_mangle]
pub extern "C" fn AzSvgPath_getEnd(svgpath: &AzSvgPath) -> AzOptionSvgPoint {
    svgpath.get_end().into()
}
/// Returns the axis-aligned bounding rect of this path
#[no_mangle]
pub extern "C" fn AzSvgPath_getBounds(svgpath: &mut AzSvgPath) -> AzSvgRect {
    svgpath.get_bounds()
}
/// Adds a path to the end of the current path
#[no_mangle]
pub extern "C" fn AzSvgPath_joinWith(svgpath: &mut AzSvgPath, path: AzSvgPath) {
    svgpath.join_with(path);
}
/// Offset the path by a certain distance. Will create bezier curves around the edges when the path
/// is closed
#[no_mangle]
pub extern "C" fn AzSvgPath_offset(
    svgpath: &mut AzSvgPath,
    distance: f32,
    join: AzSvgLineJoin,
    cap: AzSvgLineCap,
) -> AzSvgPath {
    azul_layout::xml::svg::svg_path_offset(svgpath, distance, join, cap)
}
/// Round the edges with a cubic curve
#[no_mangle]
pub extern "C" fn AzSvgPath_bevel(svgpath: &mut AzSvgPath, distance: f32) -> AzSvgPath {
    azul_layout::xml::svg::svg_path_bevel(svgpath, distance)
}
/// Equivalent to the Rust `SvgPath::tessellate_fill()` function.
#[no_mangle]
pub extern "C" fn AzSvgPath_tessellateFill(
    svgpath: &AzSvgPath,
    fill_style: AzSvgFillStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_path_fill(svgpath, fill_style)
}
/// Equivalent to the Rust `SvgPath::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgPath_tessellateStroke(
    svgpath: &AzSvgPath,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_path_stroke(svgpath, stroke_style)
}
/// Destructor: Takes ownership of the `SvgPath` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgPath_delete(object: &mut AzSvgPath) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgPathElement` struct
pub use azul_layout::xml::svg::SvgPathElement as AzSvgPathElementTT;
pub use AzSvgPathElementTT as AzSvgPathElement;
/// Reverses the order of points in the path so that the path runs in the opposite direction
/// afterwards
#[no_mangle]
pub extern "C" fn AzSvgPathElement_reverse(svgpathelement: &mut AzSvgPathElement) {
    svgpathelement.reverse()
}
/// Returns the starting point of this item
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getStart(svgpathelement: &AzSvgPathElement) -> AzSvgPoint {
    svgpathelement.get_start()
}
/// Returns the ending point of this item
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getEnd(svgpathelement: &AzSvgPathElement) -> AzSvgPoint {
    svgpathelement.get_end()
}
/// Returns the bounding box of this item
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getBounds(svgpathelement: &AzSvgPathElement) -> AzSvgRect {
    svgpathelement.get_bounds()
}
/// Returns the length of the line or curve
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getLength(svgpathelement: &AzSvgPathElement) -> f64 {
    svgpathelement.get_length()
}
/// Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve
/// start
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getTAtOffset(
    svgpathelement: &AzSvgPathElement,
    offset: f64,
) -> f64 {
    svgpathelement.get_t_at_offset(offset)
}
/// Returns the point on the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getXAtT(svgpathelement: &AzSvgPathElement, t: f64) -> f64 {
    svgpathelement.get_x_at_t(t)
}
/// Returns the y position of the line or curve at t
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getYAtT(svgpathelement: &AzSvgPathElement, t: f64) -> f64 {
    svgpathelement.get_y_at_t(t)
}
/// Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgPathElement_getTangentVectorAtT(
    svgpathelement: &AzSvgPathElement,
    t: f64,
) -> AzSvgVector {
    svgpathelement.get_tangent_vector_at_t(t)
}
/// Equivalent to the Rust `SvgPathElement::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgPathElement_tessellateStroke(
    svgpathelement: &AzSvgPathElement,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_svgpathelement_stroke(svgpathelement, stroke_style)
}

/// Re-export of rust-allocated (stack based) `SvgPoint` struct
pub use azul_layout::xml::svg::SvgPoint as AzSvgPointTT;
pub use AzSvgPointTT as AzSvgPoint;
/// Returns the euclidean distance to some other point
#[no_mangle]
pub extern "C" fn AzSvgPoint_distance(svgpoint: &AzSvgPoint, other: AzSvgPoint) -> f64 {
    svgpoint.distance(other)
}

/// Re-export of rust-allocated (stack based) `SvgVector` struct
pub use azul_layout::xml::svg::SvgVector as AzSvgVectorTT;
pub use AzSvgVectorTT as AzSvgVector;
/// Returns the angle of this vector in degrees
#[no_mangle]
pub extern "C" fn AzSvgVector_angleDegrees(svgvector: &AzSvgVector) -> f64 {
    svgvector.angle_degrees()
}
/// Normalizes the vector, returning the normalized vector
#[no_mangle]
pub extern "C" fn AzSvgVector_normalize(svgvector: &AzSvgVector) -> AzSvgVector {
    svgvector.normalize()
}
/// Rotates the vector 90 degrees counter clockwise, returning the rotated vector
#[no_mangle]
pub extern "C" fn AzSvgVector_rotate90DegCcw(svgvector: &AzSvgVector) -> AzSvgVector {
    svgvector.rotate_90deg_ccw()
}

/// Re-export of rust-allocated (stack based) `SvgLine` struct
pub use azul_layout::xml::svg::SvgLine as AzSvgLineTT;
pub use AzSvgLineTT as AzSvgLine;
/// Reverses the order of points in the path so that the path runs in the opposite direction
/// afterwards
#[no_mangle]
pub extern "C" fn AzSvgLine_reverse(svgline: &mut AzSvgLine) {
    svgline.reverse()
}
/// Returns the starting point of this item
#[no_mangle]
pub extern "C" fn AzSvgLine_getStart(svgline: &AzSvgLine) -> AzSvgPoint {
    svgline.get_start()
}
/// Returns the ending point of this item
#[no_mangle]
pub extern "C" fn AzSvgLine_getEnd(svgline: &AzSvgLine) -> AzSvgPoint {
    svgline.get_end()
}
/// Returns the bounding box of this item
#[no_mangle]
pub extern "C" fn AzSvgLine_getBounds(svgline: &AzSvgLine) -> AzSvgRect {
    svgline.get_bounds()
}
/// Returns the length of the line or curve
#[no_mangle]
pub extern "C" fn AzSvgLine_getLength(svgline: &AzSvgLine) -> f64 {
    svgline.get_length()
}
/// Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve
/// start
#[no_mangle]
pub extern "C" fn AzSvgLine_getTAtOffset(svgline: &AzSvgLine, offset: f64) -> f64 {
    svgline.get_t_at_offset(offset)
}
/// Returns the point on the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgLine_getXAtT(svgline: &AzSvgLine, t: f64) -> f64 {
    svgline.get_x_at_t(t)
}
/// Returns the y position of the line or curve at t
#[no_mangle]
pub extern "C" fn AzSvgLine_getYAtT(svgline: &AzSvgLine, t: f64) -> f64 {
    svgline.get_y_at_t(t)
}
/// Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgLine_getTangentVectorAtT(svgline: &AzSvgLine, t: f64) -> AzSvgVector {
    svgline.get_tangent_vector_at_t(t)
}
/// Intersect two lines EVEN IF THEY ARE DISTINCT. Only returns None on parallel lines (never
/// intersect)
#[no_mangle]
pub extern "C" fn AzSvgLine_intersect(svgline: &AzSvgLine, other: AzSvgLine) -> AzOptionSvgPoint {
    azul_layout::xml::svg::raw_line_intersection(svgline, &other).into()
}
/// Equivalent to the Rust `SvgLine::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgLine_tessellateStroke(
    svgline: &AzSvgLine,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_line_stroke(svgline, stroke_style)
}

/// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
pub use azul_layout::xml::svg::SvgQuadraticCurve as AzSvgQuadraticCurveTT;
pub use AzSvgQuadraticCurveTT as AzSvgQuadraticCurve;
/// Reverses the order of points in the curve so that the curve runs in the opposite direction
/// afterwards
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_reverse(svgquadraticcurve: &mut AzSvgQuadraticCurve) {
    svgquadraticcurve.reverse()
}
/// Returns the starting point of this item
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getStart(
    svgquadraticcurve: &AzSvgQuadraticCurve,
) -> AzSvgPoint {
    svgquadraticcurve.get_start()
}
/// Returns the ending point of this item
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getEnd(
    svgquadraticcurve: &AzSvgQuadraticCurve,
) -> AzSvgPoint {
    svgquadraticcurve.get_end()
}
/// Returns the bounding box of this item
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getBounds(
    svgquadraticcurve: &AzSvgQuadraticCurve,
) -> AzSvgRect {
    svgquadraticcurve.get_bounds()
}
/// Returns the length of the line or curve
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getLength(svgquadraticcurve: &AzSvgQuadraticCurve) -> f64 {
    svgquadraticcurve.get_length()
}
/// Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve
/// start
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getTAtOffset(
    svgquadraticcurve: &AzSvgQuadraticCurve,
    offset: f64,
) -> f64 {
    svgquadraticcurve.get_t_at_offset(offset)
}
/// Returns the point on the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getXAtT(
    svgquadraticcurve: &AzSvgQuadraticCurve,
    t: f64,
) -> f64 {
    svgquadraticcurve.get_x_at_t(t)
}
/// Returns the y position of the line or curve at t
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getYAtT(
    svgquadraticcurve: &AzSvgQuadraticCurve,
    t: f64,
) -> f64 {
    svgquadraticcurve.get_y_at_t(t)
}
/// Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_getTangentVectorAtT(
    svgquadraticcurve: &AzSvgQuadraticCurve,
    t: f64,
) -> AzSvgVector {
    svgquadraticcurve.get_tangent_vector_at_t(t)
}
/// Equivalent to the Rust `SvgQuadraticCurve::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgQuadraticCurve_tessellateStroke(
    svgquadraticcurve: &AzSvgQuadraticCurve,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_quadraticcurve_stroke(svgquadraticcurve, stroke_style)
}

/// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
pub use azul_layout::xml::svg::SvgCubicCurve as AzSvgCubicCurveTT;
pub use AzSvgCubicCurveTT as AzSvgCubicCurve;
/// Reverses the order of points in the curve so that the curve runs in the opposite direction
/// afterwards
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_reverse(svgcubiccurve: &mut AzSvgCubicCurve) {
    svgcubiccurve.reverse()
}
/// Returns the starting point of this item
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getStart(svgcubiccurve: &AzSvgCubicCurve) -> AzSvgPoint {
    svgcubiccurve.get_start()
}
/// Returns the ending point of this item
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getEnd(svgcubiccurve: &AzSvgCubicCurve) -> AzSvgPoint {
    svgcubiccurve.get_end()
}
/// Returns the bounding box of this item
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getBounds(svgcubiccurve: &AzSvgCubicCurve) -> AzSvgRect {
    svgcubiccurve.get_bounds()
}
/// Returns the length of the line or curve
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getLength(svgcubiccurve: &AzSvgCubicCurve) -> f64 {
    svgcubiccurve.get_length()
}
/// Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve
/// start
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getTAtOffset(
    svgcubiccurve: &AzSvgCubicCurve,
    offset: f64,
) -> f64 {
    svgcubiccurve.get_t_at_offset(offset)
}
/// Returns the point on the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getXAtT(svgcubiccurve: &AzSvgCubicCurve, t: f64) -> f64 {
    svgcubiccurve.get_x_at_t(t)
}
/// Returns the y position of the line or curve at t
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getYAtT(svgcubiccurve: &AzSvgCubicCurve, t: f64) -> f64 {
    svgcubiccurve.get_y_at_t(t)
}
/// Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_getTangentVectorAtT(
    svgcubiccurve: &AzSvgCubicCurve,
    t: f64,
) -> AzSvgVector {
    svgcubiccurve.get_tangent_vector_at_t(t)
}
/// Equivalent to the Rust `SvgCubicCurve::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgCubicCurve_tessellateStroke(
    svgcubiccurve: &AzSvgCubicCurve,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_cubiccurve_stroke(svgcubiccurve, stroke_style)
}

/// Re-export of rust-allocated (stack based) `SvgRect` struct
pub use azul_layout::xml::svg::SvgRect as AzSvgRectTT;
pub use AzSvgRectTT as AzSvgRect;
/// Equivalent to the Rust `SvgRect::get_center()` function.
#[no_mangle]
pub extern "C" fn AzSvgRect_getCenter(svgrect: &AzSvgRect) -> AzSvgPoint {
    svgrect.get_center()
}
/// Equivalent to the Rust `SvgRect::contains_point()` function.
#[no_mangle]
pub extern "C" fn AzSvgRect_containsPoint(svgrect: &AzSvgRect, point: AzSvgPoint) -> bool {
    svgrect.contains_point(point.x, point.y)
}
/// Equivalent to the Rust `SvgRect::expand()` function.
#[no_mangle]
pub extern "C" fn AzSvgRect_expand(
    svgrect: &AzSvgRect,
    padding_top: f32,
    padding_bottom: f32,
    padding_left: f32,
    padding_right: f32,
) -> AzSvgRect {
    svgrect.expand(padding_top, padding_bottom, padding_left, padding_right)
}
/// Equivalent to the Rust `SvgRect::tessellate_fill()` function.
#[no_mangle]
pub extern "C" fn AzSvgRect_tessellateFill(
    svgrect: &AzSvgRect,
    fill_style: AzSvgFillStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_rect_fill(svgrect, fill_style)
}
/// Equivalent to the Rust `SvgRect::tessellate_stroke()` function.
#[no_mangle]
pub extern "C" fn AzSvgRect_tessellateStroke(
    svgrect: &AzSvgRect,
    stroke_style: AzSvgStrokeStyle,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::tessellate_rect_stroke(svgrect, stroke_style)
}

/// Re-export of rust-allocated (stack based) `TessellatedColoredSvgNode` struct
pub use azul_core::svg::TessellatedColoredSvgNode as AzTessellatedColoredSvgNodeTT;
/// Re-export of rust-allocated (stack based) `SvgColoredVertex` struct
pub use azul_layout::xml::svg::SvgColoredVertex as AzSvgColoredVertexTT;
pub use AzSvgColoredVertexTT as AzSvgColoredVertex;
pub use AzTessellatedColoredSvgNodeTT as AzTessellatedColoredSvgNode;
/// Returns an empty buffer vertices / indices
#[no_mangle]
pub extern "C" fn AzTessellatedColoredSvgNode_empty() -> AzTessellatedColoredSvgNode {
    AzTessellatedColoredSvgNode::empty()
}
/// Creates a new TessellatedColoredSvgNode by joining all the given nodes together into one array
/// and inserting a `GL_RESTART_INDEX` (`u32::MAX`) into the indices (so that the resulting buffer
/// can be drawn in one draw call).
#[no_mangle]
pub extern "C" fn AzTessellatedColoredSvgNode_fromNodes(
    nodes: AzTessellatedColoredSvgNodeVecRef,
) -> AzTessellatedColoredSvgNode {
    azul_layout::xml::svg::join_tessellated_colored_nodes(nodes.as_slice())
}
/// Destructor: Takes ownership of the `TessellatedColoredSvgNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedColoredSvgNode_delete(object: &mut AzTessellatedColoredSvgNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Rust wrapper over a `&[TessellatedColoredSvgNode]` or `&Vec<TessellatedColoredSvgNode>`
pub use azul_core::svg::TessellatedColoredSvgNodeVecRef as AzTessellatedColoredSvgNodeVecRefTT;
pub use AzTessellatedColoredSvgNodeVecRefTT as AzTessellatedColoredSvgNodeVecRef;
/// Destructor: Takes ownership of the `TessellatedColoredSvgNodeVecRef` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedColoredSvgNodeVecRef_delete(
    object: &mut AzTessellatedColoredSvgNodeVecRef,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TessellatedColoredGPUSvgNode` struct
pub use azul_core::svg::TessellatedColoredGPUSvgNode as AzTessellatedColoredGPUSvgNodeTT;
pub use AzTessellatedColoredGPUSvgNodeTT as AzTessellatedColoredGPUSvgNode;
/// Creates a new `TessellatedColoredGPUSvgNode` instance whose memory is owned by the rust
/// allocator Equivalent to the Rust `TessellatedColoredGPUSvgNode::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTessellatedColoredGPUSvgNode_new(
    tessellated_node: *const AzTessellatedColoredSvgNode,
    gl: AzGl,
) -> AzTessellatedColoredGPUSvgNode {
    AzTessellatedColoredGPUSvgNode::new(unsafe { &*tessellated_node }, gl)
}
/// Destructor: Takes ownership of the `TessellatedColoredGPUSvgNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedColoredGPUSvgNode_delete(
    object: &mut AzTessellatedColoredGPUSvgNode,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TessellatedSvgNode` struct
pub use azul_core::svg::TessellatedSvgNode as AzTessellatedSvgNodeTT;
/// Re-export of rust-allocated (stack based) `SvgVertex` struct
pub use azul_layout::xml::svg::SvgVertex as AzSvgVertexTT;
pub use AzSvgVertexTT as AzSvgVertex;
pub use AzTessellatedSvgNodeTT as AzTessellatedSvgNode;
/// Returns an empty buffer vertices / indices
#[no_mangle]
pub extern "C" fn AzTessellatedSvgNode_empty() -> AzTessellatedSvgNode {
    AzTessellatedSvgNode::empty()
}
/// Creates a new TessellatedSvgNode by joining all the given nodes together into one array and
/// inserting a `GL_RESTART_INDEX` (`u32::MAX`) into the indices (so that the resulting buffer can
/// be drawn in one draw call).
#[no_mangle]
pub extern "C" fn AzTessellatedSvgNode_fromNodes(
    nodes: AzTessellatedSvgNodeVecRef,
) -> AzTessellatedSvgNode {
    azul_layout::xml::svg::join_tessellated_nodes(nodes.as_slice())
}
/// Destructor: Takes ownership of the `TessellatedSvgNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedSvgNode_delete(object: &mut AzTessellatedSvgNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Rust wrapper over a `&[TessellatedSvgNode]` or `&Vec<TessellatedSvgNode>`
pub use azul_core::svg::TessellatedSvgNodeVecRef as AzTessellatedSvgNodeVecRefTT;
pub use AzTessellatedSvgNodeVecRefTT as AzTessellatedSvgNodeVecRef;
/// Destructor: Takes ownership of the `TessellatedSvgNodeVecRef` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedSvgNodeVecRef_delete(object: &mut AzTessellatedSvgNodeVecRef) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `TessellatedGPUSvgNode` struct
pub use azul_core::svg::TessellatedGPUSvgNode as AzTessellatedGPUSvgNodeTT;
pub use AzTessellatedGPUSvgNodeTT as AzTessellatedGPUSvgNode;
/// Creates a new `TessellatedGPUSvgNode` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `TessellatedGPUSvgNode::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTessellatedGPUSvgNode_new(
    tessellated_node: *const AzTessellatedSvgNode,
    gl: AzGl,
) -> AzTessellatedGPUSvgNode {
    AzTessellatedGPUSvgNode::new(unsafe { &*tessellated_node }, gl)
}
/// Destructor: Takes ownership of the `TessellatedGPUSvgNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedGPUSvgNode_delete(object: &mut AzTessellatedGPUSvgNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
pub use azul_layout::xml::svg::SvgParseOptions as AzSvgParseOptionsTT;
pub use AzSvgParseOptionsTT as AzSvgParseOptions;
/// Creates a new `SvgParseOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgParseOptions::default()` constructor.
#[no_mangle]
pub extern "C" fn AzSvgParseOptions_default() -> AzSvgParseOptions {
    AzSvgParseOptions::default()
}
/// Destructor: Takes ownership of the `SvgParseOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgParseOptions_delete(object: &mut AzSvgParseOptions) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `FontDatabase` struct
pub use azul_core::svg::FontDatabase as AzFontDatabaseTT;
/// Re-export of rust-allocated (stack based) `ImageRendering` struct
pub use azul_core::svg::ImageRendering as AzImageRenderingTT;
/// Re-export of rust-allocated (stack based) `ShapeRendering` struct
pub use azul_core::svg::ShapeRendering as AzShapeRenderingTT;
/// Re-export of rust-allocated (stack based) `TextRendering` struct
pub use azul_core::svg::TextRendering as AzTextRenderingTT;
/// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
pub use azul_layout::xml::svg::SvgRenderOptions as AzSvgRenderOptionsTT;
pub use AzFontDatabaseTT as AzFontDatabase;
pub use AzImageRenderingTT as AzImageRendering;
pub use AzShapeRenderingTT as AzShapeRendering;
pub use AzSvgRenderOptionsTT as AzSvgRenderOptions;
pub use AzTextRenderingTT as AzTextRendering;
/// Creates a new `SvgRenderOptions` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgRenderOptions::default()` constructor.
#[no_mangle]
pub extern "C" fn AzSvgRenderOptions_default() -> AzSvgRenderOptions {
    AzSvgRenderOptions::default()
}

/// Re-export of rust-allocated (stack based) `Indent` struct
pub use azul_core::svg::Indent as AzIndentTT;
/// Re-export of rust-allocated (stack based) `SvgFillRule` struct
pub use azul_layout::xml::svg::SvgFillRule as AzSvgFillRuleTT;
/// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
pub use azul_layout::xml::svg::SvgFillStyle as AzSvgFillStyleTT;
/// Re-export of rust-allocated (stack based) `SvgFitTo` struct
pub use azul_layout::xml::svg::SvgFitTo as AzSvgFitToTT;
/// Re-export of rust-allocated (stack based) `SvgRenderTransform` struct
pub use azul_layout::xml::svg::SvgRenderTransform as AzSvgRenderTransformTT;
/// Re-export of rust-allocated (stack based) `SvgStyle` struct
pub use azul_layout::xml::svg::SvgStyle as AzSvgStyleTT;
/// Re-export of rust-allocated (stack based) `SvgTransform` struct
pub use azul_layout::xml::svg::SvgTransform as AzSvgTransformTT;
/// Re-export of rust-allocated (stack based) `SvgStringFormatOptions` struct
pub use azul_layout::xml::svg::SvgXmlOptions as AzSvgStringFormatOptionsTT;
pub use AzIndentTT as AzIndent;
pub use AzSvgFillRuleTT as AzSvgFillRule;
pub use AzSvgFillStyleTT as AzSvgFillStyle;
pub use AzSvgFitToTT as AzSvgFitTo;
pub use AzSvgRenderTransformTT as AzSvgRenderTransform;
pub use AzSvgStringFormatOptionsTT as AzSvgStringFormatOptions;
pub use AzSvgStyleTT as AzSvgStyle;
pub use AzSvgTransformTT as AzSvgTransform;
/// Creates a new `SvgFillStyle` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgFillStyle::default()` constructor.
#[no_mangle]
pub extern "C" fn AzSvgFillStyle_default() -> AzSvgFillStyle {
    AzSvgFillStyle::default()
}

/// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
pub use azul_layout::xml::svg::SvgStrokeStyle as AzSvgStrokeStyleTT;
pub use AzSvgStrokeStyleTT as AzSvgStrokeStyle;
/// Creates a new `SvgStrokeStyle` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `SvgStrokeStyle::default()` constructor.
#[no_mangle]
pub extern "C" fn AzSvgStrokeStyle_default() -> AzSvgStrokeStyle {
    AzSvgStrokeStyle::default()
}

/// Re-export of rust-allocated (stack based) `Xml` struct
pub use azul_core::xml::Xml as AzXmlTT;
/// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
pub use azul_layout::xml::svg::SvgDashPattern as AzSvgDashPatternTT;
/// Re-export of rust-allocated (stack based) `SvgLineCap` struct
pub use azul_layout::xml::svg::SvgLineCap as AzSvgLineCapTT;
/// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
pub use azul_layout::xml::svg::SvgLineJoin as AzSvgLineJoinTT;
pub use AzSvgDashPatternTT as AzSvgDashPattern;
pub use AzSvgLineCapTT as AzSvgLineCap;
pub use AzSvgLineJoinTT as AzSvgLineJoin;
pub use AzXmlTT as AzXml;
/// Parses an XML document with one or more root nodes
#[no_mangle]
pub extern "C" fn AzXml_fromStr(xml_string: AzRefstr) -> AzResultXmlXmlError {
    azul_layout::xml::parse_xml(xml_string.as_str()).into()
}
/// Destructor: Takes ownership of the `Xml` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXml_delete(object: &mut AzXml) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `XmlNode` struct
pub use azul_core::xml::XmlNode as AzXmlNodeTT;
pub use AzXmlNodeTT as AzXmlNode;
/// Destructor: Takes ownership of the `XmlNode` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXmlNode_delete(object: &mut AzXmlNode) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFileTT as AzFile;

/// **Reference-counted** file handle
pub use crate::azul_impl::file::File as AzFileTT;
/// Opens a file at the given path. If the file exists, replaces it with a new file
#[no_mangle]
pub extern "C" fn AzFile_open(path: AzString) -> AzOptionFile {
    AzFile::open(path.as_str()).into()
}
/// Creates a file at the given path. If the file exists, replaces it with a new file
#[no_mangle]
pub extern "C" fn AzFile_create(path: AzString) -> AzOptionFile {
    AzFile::create(path.as_str()).into()
}
/// Reads the file to a UTF8-encoded String, returns None if the file can't be decoded correctly
#[no_mangle]
pub extern "C" fn AzFile_readToString(file: &mut AzFile) -> AzOptionString {
    file.read_to_string().into()
}
/// Reads the file as bytes, returns None if the file can't be decoded correctly
#[no_mangle]
pub extern "C" fn AzFile_readToBytes(file: &mut AzFile) -> AzOptionU8Vec {
    file.read_to_bytes().into()
}
/// Writes a string to the file, synchronizes the results before returning
#[no_mangle]
pub extern "C" fn AzFile_writeString(file: &mut AzFile, bytes: AzRefstr) -> bool {
    file.write_string(bytes.as_str()).is_some()
}
/// Writes some bytes to the file, synchronizes the results before returning
#[no_mangle]
pub extern "C" fn AzFile_writeBytes(file: &mut AzFile, bytes: AzU8VecRef) -> bool {
    file.write_bytes(bytes.as_slice()).is_some()
}
/// Destructor, closes the file handle
#[no_mangle]
pub extern "C" fn AzFile_close(file: &mut AzFile) {
    file.clone().close()
}
/// Destructor: Takes ownership of the `File` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFile_delete(object: &mut AzFile) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzFile_deepCopy(object: &AzFile) -> AzFile {
    object.clone()
}

pub use AzMsgBoxTT as AzMsgBox;

/// Re-export of rust-allocated (stack based) `MsgBox` struct
pub use crate::azul_impl::dialogs::MsgBox as AzMsgBoxTT;
/// Opens an informational message box with only an "OK" button
#[no_mangle]
pub extern "C" fn AzMsgBox_ok(icon: AzMsgBoxIcon, title: AzString, message: AzString) -> bool {
    crate::azul_impl::dialogs::msg_box_ok(title.as_str(), message.as_str(), icon.into());
    true
}
/// Shorthand for `MsgBox::ok("Info", $message, Icon::Info)`
#[no_mangle]
pub extern "C" fn AzMsgBox_info(message: AzString) -> bool {
    crate::azul_impl::dialogs::msg_box_ok("Info", message.as_str(), AzMsgBoxIcon::Info.into());
    true
}
/// Shorthand for `MsgBox::ok("Warning", $message, Icon::Warning)`
#[no_mangle]
pub extern "C" fn AzMsgBox_warning(message: AzString) -> bool {
    crate::azul_impl::dialogs::msg_box_ok(
        "Warning",
        message.as_str(),
        AzMsgBoxIcon::Warning.into(),
    );
    true
}
/// Shorthand for `MsgBox::ok("Error", $message, Icon::Error)`
#[no_mangle]
pub extern "C" fn AzMsgBox_error(message: AzString) -> bool {
    crate::azul_impl::dialogs::msg_box_ok("Error", message.as_str(), AzMsgBoxIcon::Error.into());
    true
}
/// Shorthand for `MsgBox::ok("Question", $message, Icon::Question)`
#[no_mangle]
pub extern "C" fn AzMsgBox_question(message: AzString) -> bool {
    crate::azul_impl::dialogs::msg_box_ok(
        "Question",
        message.as_str(),
        AzMsgBoxIcon::Question.into(),
    );
    true
}
/// Opens a ok / cancel message box. Blocks the current thread.
#[no_mangle]
pub extern "C" fn AzMsgBox_okCancel(
    icon: AzMsgBoxIcon,
    title: AzString,
    message: AzString,
    default_value: AzMsgBoxOkCancel,
) -> AzMsgBoxOkCancel {
    crate::azul_impl::dialogs::msg_box_ok_cancel(
        title.as_str(),
        message.as_str(),
        icon.into(),
        default_value,
    )
}
/// Opens a yes / no message box. Blocks the current thread.
#[no_mangle]
pub extern "C" fn AzMsgBox_yesNo(
    icon: AzMsgBoxIcon,
    title: AzString,
    message: AzString,
    default_value: AzMsgBoxYesNo,
) -> AzMsgBoxYesNo {
    crate::azul_impl::dialogs::msg_box_yes_no(
        title.as_str(),
        message.as_str(),
        icon.into(),
        default_value,
    )
}

pub use AzFileDialogTT as AzFileDialog;
pub use AzMsgBoxIconTT as AzMsgBoxIcon;
pub use AzMsgBoxOkCancelTT as AzMsgBoxOkCancel;
pub use AzMsgBoxYesNoTT as AzMsgBoxYesNo;

/// File picker dialog
pub use crate::azul_impl::dialogs::FileDialog as AzFileDialogTT;
/// Type of message box icon
pub use crate::azul_impl::dialogs::MsgBoxIcon as AzMsgBoxIconTT;
/// Value returned from an ok / cancel message box
pub use crate::azul_impl::dialogs::OkCancel as AzMsgBoxOkCancelTT;
/// Value returned from a yes / no message box
pub use crate::azul_impl::dialogs::YesNo as AzMsgBoxYesNoTT;
/// Select a single file using the system-native file picker. Blocks the current thread.
#[no_mangle]
pub extern "C" fn AzFileDialog_selectFile(
    title: AzString,
    default_path: AzOptionString,
    filter_list: AzOptionFileTypeList,
) -> AzOptionString {
    crate::azul_impl::dialogs::open_file_dialog(
        title.as_str(),
        default_path.as_ref().map(|s| s.as_str()),
        filter_list.into_option().map(|s| s.into()),
    )
    .into()
}
/// Select multiple files using the system-native file picker. Blocks the current thread.
#[no_mangle]
pub extern "C" fn AzFileDialog_selectMultipleFiles(
    title: AzString,
    default_path: AzOptionString,
    filter_list: AzOptionFileTypeList,
) -> AzOptionStringVec {
    crate::azul_impl::dialogs::open_multiple_files_dialog(
        title.as_str(),
        default_path.as_ref().map(|s| s.as_str()),
        filter_list.into_option().map(|s| s.into()),
    )
    .into()
}
/// Open a dialog prompting the user to select a directory to open. Blocks the current thread.
#[no_mangle]
pub extern "C" fn AzFileDialog_selectFolder(
    title: AzString,
    default_path: AzOptionString,
) -> AzOptionString {
    crate::azul_impl::dialogs::open_directory_dialog(
        title.as_str(),
        default_path.as_ref().map(|s| s.as_str()),
    )
    .into()
}
/// Open a dialog prompting the user to save a file. Blocks the current thread.
#[no_mangle]
pub extern "C" fn AzFileDialog_saveFile(
    title: AzString,
    default_path: AzOptionString,
) -> AzOptionString {
    crate::azul_impl::dialogs::save_file_dialog(
        title.as_str(),
        default_path.as_ref().map(|s| s.as_str()),
    )
    .into()
}

pub use AzFileTypeListTT as AzFileTypeList;

/// Re-export of rust-allocated (stack based) `FileTypeList` struct
pub use crate::azul_impl::dialogs::FileTypeList as AzFileTypeListTT;
/// Destructor: Takes ownership of the `FileTypeList` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFileTypeList_delete(object: &mut AzFileTypeList) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzColorPickerDialogTT as AzColorPickerDialog;

/// Re-export of rust-allocated (stack based) `ColorPickerDialog` struct
pub use crate::azul_impl::dialogs::ColorPickerDialog as AzColorPickerDialogTT;
/// Opens a system-native color picker dialog
#[no_mangle]
pub extern "C" fn AzColorPickerDialog_open(
    title: AzString,
    default_color: AzOptionColorU,
) -> AzOptionColorU {
    crate::azul_impl::dialogs::color_picker_dialog(
        title.as_str(),
        default_color.into_option().map(|s| s.into()),
    )
    .into()
}

pub use AzSystemClipboardTT as AzSystemClipboard;

/// Connection to the system clipboard, on some systems this connection can be cached
pub use crate::azul_impl::app::Clipboard as AzSystemClipboardTT;
/// Creates a new connection to the system clipboard manager
#[no_mangle]
pub extern "C" fn AzSystemClipboard_new() -> AzOptionSystemClipboard {
    AzSystemClipboard::new().into()
}
/// Returns the system clipboard contents or `None` if the clipboard is empty or there was an error
#[no_mangle]
pub extern "C" fn AzSystemClipboard_getStringContents(
    systemclipboard: &AzSystemClipboard,
) -> AzOptionString {
    systemclipboard.get_clipboard_string().into()
}
/// Sets the system clipboard contents to the new string, returns true if the system clipboard was
/// updated
#[no_mangle]
pub extern "C" fn AzSystemClipboard_setStringContents(
    systemclipboard: &mut AzSystemClipboard,
    contents: AzString,
) -> bool {
    systemclipboard.set_clipboard_string(contents).is_some()
}
/// Destructor: Takes ownership of the `SystemClipboard` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSystemClipboard_delete(object: &mut AzSystemClipboard) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzSystemClipboard_deepCopy(object: &AzSystemClipboard) -> AzSystemClipboard {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `Instant` struct
pub use azul_core::task::Instant as AzInstantTT;
pub use AzInstantTT as AzInstant;
/// Returns the duration since and earlier instant or None if the earlier instant is later than self
#[no_mangle]
pub extern "C" fn AzInstant_durationSince(
    instant: &AzInstant,
    earlier: AzInstant,
) -> AzOptionDuration {
    if &earlier < instant {
        Some(instant.duration_since(&earlier)).into()
    } else {
        None.into()
    }
}
/// Adds a duration to the current time instant, returning the new `Instant`
#[no_mangle]
pub extern "C" fn AzInstant_addDuration(
    instant: &mut AzInstant,
    duration: AzDuration,
) -> AzInstant {
    instant.add_optional_duration(Some(&duration))
}
/// Linearly interpolates between [start, end] if the `self` Instant lies between start and end.
/// Returns values between 0.0 and 1.0
#[no_mangle]
pub extern "C" fn AzInstant_linearInterpolate(
    instant: &AzInstant,
    start: AzInstant,
    end: AzInstant,
) -> f32 {
    instant.linear_interpolate(start, end)
}
/// Destructor: Takes ownership of the `Instant` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInstant_delete(object: &mut AzInstant) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `InstantPtr` struct
pub use azul_core::task::AzInstantPtr as AzInstantPtrTT;
pub use AzInstantPtrTT as AzInstantPtr;
/// Destructor: Takes ownership of the `InstantPtr` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInstantPtr_delete(object: &mut AzInstantPtr) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzInstantPtr_deepCopy(object: &AzInstantPtr) -> AzInstantPtr {
    object.clone()
}

pub type AzInstantPtrCloneFnType = extern "C" fn(&AzInstantPtr) -> AzInstantPtr;
/// Re-export of rust-allocated (stack based) `InstantPtrCloneFn` struct
pub use azul_core::task::InstantPtrCloneCallback as AzInstantPtrCloneFnTT;
pub use AzInstantPtrCloneFnTT as AzInstantPtrCloneFn;

pub type AzInstantPtrDestructorFnType = extern "C" fn(&mut AzInstantPtr);
/// Re-export of rust-allocated (stack based) `Duration` struct
pub use azul_core::task::Duration as AzDurationTT;
/// Re-export of rust-allocated (stack based) `InstantPtrDestructorFn` struct
pub use azul_core::task::InstantPtrDestructorCallback as AzInstantPtrDestructorFnTT;
/// Re-export of rust-allocated (stack based) `SystemTick` struct
pub use azul_core::task::SystemTick as AzSystemTickTT;
/// Re-export of rust-allocated (stack based) `SystemTickDiff` struct
pub use azul_core::task::SystemTickDiff as AzSystemTickDiffTT;
/// Re-export of rust-allocated (stack based) `SystemTimeDiff` struct
pub use azul_core::task::SystemTimeDiff as AzSystemTimeDiffTT;
/// Re-export of rust-allocated (stack based) `Timer` struct
pub use azul_core::task::Timer as AzTimerTT;
/// Re-export of rust-allocated (stack based) `TimerId` struct
pub use azul_core::task::TimerId as AzTimerIdTT;
pub use AzDurationTT as AzDuration;
pub use AzInstantPtrDestructorFnTT as AzInstantPtrDestructorFn;
pub use AzSystemTickDiffTT as AzSystemTickDiff;
pub use AzSystemTickTT as AzSystemTick;
pub use AzSystemTimeDiffTT as AzSystemTimeDiff;
pub use AzTimerIdTT as AzTimerId;
pub use AzTimerTT as AzTimer;
/// Creates a new `Timer` instance whose memory is owned by the rust allocator
/// Equivalent to the Rust `Timer::new()` constructor.
#[no_mangle]
pub extern "C" fn AzTimer_new(
    timer_data: AzRefAny,
    callback: AzTimerCallbackType,
    get_system_time_fn: AzGetSystemTimeFn,
) -> AzTimer {
    AzTimer::new(timer_data, callback, get_system_time_fn)
}
/// Equivalent to the Rust `Timer::with_delay()` function.
#[no_mangle]
pub extern "C" fn AzTimer_withDelay(timer: &AzTimer, delay: AzDuration) -> AzTimer {
    timer.clone().with_delay(delay)
}
/// Equivalent to the Rust `Timer::with_interval()` function.
#[no_mangle]
pub extern "C" fn AzTimer_withInterval(timer: &AzTimer, interval: AzDuration) -> AzTimer {
    timer.clone().with_interval(interval)
}
/// Equivalent to the Rust `Timer::with_timeout()` function.
#[no_mangle]
pub extern "C" fn AzTimer_withTimeout(timer: &AzTimer, timeout: AzDuration) -> AzTimer {
    timer.clone().with_timeout(timeout)
}
/// Destructor: Takes ownership of the `Timer` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTimer_delete(object: &mut AzTimer) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Should a timer terminate or not - used to remove active timers
pub use azul_core::task::TerminateTimer as AzTerminateTimerTT;
/// Re-export of rust-allocated (stack based) `Thread` struct
pub use azul_core::task::Thread as AzThreadTT;
/// Re-export of rust-allocated (stack based) `ThreadId` struct
pub use azul_core::task::ThreadId as AzThreadIdTT;
pub use AzTerminateTimerTT as AzTerminateTimer;
pub use AzThreadIdTT as AzThreadId;
pub use AzThreadTT as AzThread;
/// Destructor: Takes ownership of the `Thread` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzThread_delete(object: &mut AzThread) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzThread_deepCopy(object: &AzThread) -> AzThread {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `ThreadSender` struct
pub use azul_core::task::ThreadSender as AzThreadSenderTT;
pub use AzThreadSenderTT as AzThreadSender;
/// Equivalent to the Rust `ThreadSender::send()` function.
#[no_mangle]
pub extern "C" fn AzThreadSender_send(
    threadsender: &mut AzThreadSender,
    msg: AzThreadReceiveMsg,
) -> bool {
    threadsender.send(msg)
}
/// Destructor: Takes ownership of the `ThreadSender` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzThreadSender_delete(object: &mut AzThreadSender) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzThreadSender_deepCopy(object: &AzThreadSender) -> AzThreadSender {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
pub use azul_core::task::ThreadReceiver as AzThreadReceiverTT;
pub use AzThreadReceiverTT as AzThreadReceiver;
/// Equivalent to the Rust `ThreadReceiver::receive()` function.
#[no_mangle]
pub extern "C" fn AzThreadReceiver_receive(
    threadreceiver: &mut AzThreadReceiver,
) -> AzOptionThreadSendMsg {
    threadreceiver.recv().into()
}
/// Destructor: Takes ownership of the `ThreadReceiver` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzThreadReceiver_delete(object: &mut AzThreadReceiver) {
    if object.run_destructor {
        unsafe {
            core::ptr::drop_in_place(object);
        }
    }
}
/// Clones the object
#[no_mangle]
pub extern "C" fn AzThreadReceiver_deepCopy(object: &AzThreadReceiver) -> AzThreadReceiver {
    object.clone()
}

/// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
pub use azul_core::task::ThreadSendMsg as AzThreadSendMsgTT;
pub use AzThreadSendMsgTT as AzThreadSendMsg;
/// Destructor: Takes ownership of the `ThreadSendMsg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzThreadSendMsg_delete(object: &mut AzThreadSendMsg) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
pub use azul_core::task::ThreadReceiveMsg as AzThreadReceiveMsgTT;
pub use AzThreadReceiveMsgTT as AzThreadReceiveMsg;
/// Destructor: Takes ownership of the `ThreadReceiveMsg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzThreadReceiveMsg_delete(object: &mut AzThreadReceiveMsg) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
pub use azul_core::task::ThreadWriteBackMsg as AzThreadWriteBackMsgTT;
pub use AzThreadWriteBackMsgTT as AzThreadWriteBackMsg;
/// Destructor: Takes ownership of the `ThreadWriteBackMsg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzThreadWriteBackMsg_delete(object: &mut AzThreadWriteBackMsg) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub type AzCreateThreadFnType = extern "C" fn(AzRefAny, AzRefAny, AzThreadCallback) -> AzThread;
/// Re-export of rust-allocated (stack based) `CreateThreadFn` struct
pub use azul_core::task::CreateThreadCallback as AzCreateThreadFnTT;
pub use AzCreateThreadFnTT as AzCreateThreadFn;

pub type AzGetSystemTimeFnType = extern "C" fn() -> AzInstant;
/// Get the current system time, equivalent to `std::time::Instant::now()`, except it also
/// works on systems that work with "ticks" instead of timers
pub use azul_core::task::GetSystemTimeCallback as AzGetSystemTimeFnTT;
pub use AzGetSystemTimeFnTT as AzGetSystemTimeFn;

pub type AzCheckThreadFinishedFnType = extern "C" fn(&c_void) -> bool;
/// Function called to check if the thread has finished
pub use azul_core::task::CheckThreadFinishedCallback as AzCheckThreadFinishedFnTT;
pub use AzCheckThreadFinishedFnTT as AzCheckThreadFinishedFn;

pub type AzLibrarySendThreadMsgFnType = extern "C" fn(&c_void, AzThreadSendMsg) -> bool;
/// Function to send a message to the thread
pub use azul_core::task::LibrarySendThreadMsgCallback as AzLibrarySendThreadMsgFnTT;
pub use AzLibrarySendThreadMsgFnTT as AzLibrarySendThreadMsgFn;

pub type AzLibraryReceiveThreadMsgFnType = extern "C" fn(&c_void) -> AzOptionThreadReceiveMsg;
/// Function to receive a message from the thread
pub use azul_core::task::LibraryReceiveThreadMsgCallback as AzLibraryReceiveThreadMsgFnTT;
pub use AzLibraryReceiveThreadMsgFnTT as AzLibraryReceiveThreadMsgFn;

pub type AzThreadRecvFnType = extern "C" fn(&c_void) -> AzOptionThreadSendMsg;
/// Function that the running `Thread` can call to receive messages from the main UI thread
pub use azul_core::task::ThreadRecvCallback as AzThreadRecvFnTT;
pub use AzThreadRecvFnTT as AzThreadRecvFn;

pub type AzThreadSendFnType = extern "C" fn(&c_void, AzThreadReceiveMsg) -> bool;
/// Function that the running `Thread` can call to receive messages from the main UI thread
pub use azul_core::task::ThreadSendCallback as AzThreadSendFnTT;
pub use AzThreadSendFnTT as AzThreadSendFn;

pub type AzThreadDestructorFnType = extern "C" fn(&mut AzThread);
/// Destructor of the `Thread`
pub use azul_core::task::ThreadDestructorCallback as AzThreadDestructorFnTT;
pub use AzThreadDestructorFnTT as AzThreadDestructorFn;

pub type AzThreadReceiverDestructorFnType = extern "C" fn(&mut AzThreadReceiver);
/// Destructor of the `ThreadReceiver`
pub use azul_core::task::ThreadReceiverDestructorCallback as AzThreadReceiverDestructorFnTT;
pub use AzThreadReceiverDestructorFnTT as AzThreadReceiverDestructorFn;

pub type AzThreadSenderDestructorFnType = extern "C" fn(&mut AzThreadSender);
/// Destructor of the `ThreadSender`
pub use azul_core::task::ThreadSenderDestructorCallback as AzThreadSenderDestructorFnTT;
pub use AzFmtValueTT as AzFmtValue;
pub use AzThreadSenderDestructorFnTT as AzThreadSenderDestructorFn;

/// Re-export of rust-allocated (stack based) `FmtValue` struct
pub use crate::str::FmtValue as AzFmtValueTT;
/// Destructor: Takes ownership of the `FmtValue` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFmtValue_delete(object: &mut AzFmtValue) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFmtArgTT as AzFmtArg;

/// Re-export of rust-allocated (stack based) `FmtArg` struct
pub use crate::str::FmtArg as AzFmtArgTT;
/// Destructor: Takes ownership of the `FmtArg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFmtArg_delete(object: &mut AzFmtArg) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `String` struct
pub use azul_css::AzString as AzStringTT;
pub use AzStringTT as AzString;
/// Creates a dynamically formatted String from a fomat string + named arguments
#[no_mangle]
pub extern "C" fn AzString_format(format: AzString, args: AzFmtArgVec) -> AzString {
    crate::str::fmt_string(format, args).into()
}
/// Creates a new String from an arbitary pointer, a start offset (bytes from the start pointer,
/// usually 0) and a length (in bytes). The bytes are expected to point to a UTF-8 encoded string,
/// no error checking is performed.
#[no_mangle]
pub extern "C" fn AzString_copyFromBytes(ptr: *const u8, start: usize, len: usize) -> AzString {
    unsafe {
        let start_ptr = ptr.offset(start.max(core::isize::MAX as usize) as isize);
        let s = core::str::from_utf8_unchecked(core::slice::from_raw_parts(start_ptr, len));
        s.to_string().into()
    }
}
/// Trims whitespace from the start / end of the string
#[no_mangle]
pub extern "C" fn AzString_trim(string: &AzString) -> AzString {
    string.as_str().trim().to_string().into()
}
/// Returns a reference to the string - NOTE: the returned value is a reference to `self`, you MUST
/// NOT drop the `String` object that the `Refstr` references
#[no_mangle]
pub extern "C" fn AzString_asRefstr(string: &AzString) -> AzRefstr {
    string.as_str().into()
}
/// Destructor: Takes ownership of the `String` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzString_delete(object: &mut AzString) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzListViewRowVecTT as AzListViewRowVec;

/// Wrapper over a Rust-allocated `Vec<ListViewRow>`
pub use crate::widgets::list_view::ListViewRowVec as AzListViewRowVecTT;
/// Destructor: Takes ownership of the `ListViewRowVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzListViewRowVec_delete(object: &mut AzListViewRowVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleFilter>`
pub use azul_css::StyleFilterVec as AzStyleFilterVecTT;
pub use AzStyleFilterVecTT as AzStyleFilterVec;
/// Destructor: Takes ownership of the `StyleFilterVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleFilterVec_delete(object: &mut AzStyleFilterVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<LogicalRect>`
pub use azul_core::geom::LogicalRectVec as AzLogicalRectVecTT;
pub use AzLogicalRectVecTT as AzLogicalRectVec;
/// Destructor: Takes ownership of the `LogicalRectVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzLogicalRectVec_delete(object: &mut AzLogicalRectVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeTypeIdInfoMapVecTT as AzNodeTypeIdInfoMapVec;

/// Wrapper over a Rust-allocated `Vec<NodeTypeIdInfoMap>`
pub use crate::widgets::node_graph::NodeTypeIdInfoMapVec as AzNodeTypeIdInfoMapVecTT;
/// Destructor: Takes ownership of the `NodeTypeIdInfoMapVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeTypeIdInfoMapVec_delete(object: &mut AzNodeTypeIdInfoMapVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputOutputTypeIdInfoMapVecTT as AzInputOutputTypeIdInfoMapVec;

/// Wrapper over a Rust-allocated `Vec<InputOutputTypeIdInfoMap>`
pub use crate::widgets::node_graph::InputOutputTypeIdInfoMapVec as AzInputOutputTypeIdInfoMapVecTT;
/// Destructor: Takes ownership of the `InputOutputTypeIdInfoMapVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputOutputTypeIdInfoMapVec_delete(object: &mut AzInputOutputTypeIdInfoMapVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeIdNodeMapVecTT as AzNodeIdNodeMapVec;

/// Wrapper over a Rust-allocated `Vec<NodeIdNodeMap>`
pub use crate::widgets::node_graph::NodeIdNodeMapVec as AzNodeIdNodeMapVecTT;
/// Destructor: Takes ownership of the `NodeIdNodeMapVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeIdNodeMapVec_delete(object: &mut AzNodeIdNodeMapVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputOutputTypeIdVecTT as AzInputOutputTypeIdVec;

/// Wrapper over a Rust-allocated `Vec<InputOutputTypeId>`
pub use crate::widgets::node_graph::InputOutputTypeIdVec as AzInputOutputTypeIdVecTT;
/// Destructor: Takes ownership of the `InputOutputTypeIdVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputOutputTypeIdVec_delete(object: &mut AzInputOutputTypeIdVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzNodeTypeFieldVecTT as AzNodeTypeFieldVec;

/// Wrapper over a Rust-allocated `Vec<NodeTypeField>`
pub use crate::widgets::node_graph::NodeTypeFieldVec as AzNodeTypeFieldVecTT;
/// Destructor: Takes ownership of the `NodeTypeFieldVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeTypeFieldVec_delete(object: &mut AzNodeTypeFieldVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputConnectionVecTT as AzInputConnectionVec;

/// Wrapper over a Rust-allocated `Vec<InputConnection>`
pub use crate::widgets::node_graph::InputConnectionVec as AzInputConnectionVecTT;
/// Destructor: Takes ownership of the `InputConnectionVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputConnectionVec_delete(object: &mut AzInputConnectionVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOutputNodeAndIndexVecTT as AzOutputNodeAndIndexVec;

/// Wrapper over a Rust-allocated `Vec<OutputNodeAndIndex>`
pub use crate::widgets::node_graph::OutputNodeAndIndexVec as AzOutputNodeAndIndexVecTT;
/// Destructor: Takes ownership of the `OutputNodeAndIndexVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOutputNodeAndIndexVec_delete(object: &mut AzOutputNodeAndIndexVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOutputConnectionVecTT as AzOutputConnectionVec;

/// Wrapper over a Rust-allocated `Vec<OutputConnection>`
pub use crate::widgets::node_graph::OutputConnectionVec as AzOutputConnectionVecTT;
/// Destructor: Takes ownership of the `OutputConnectionVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOutputConnectionVec_delete(object: &mut AzOutputConnectionVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzInputNodeAndIndexVecTT as AzInputNodeAndIndexVec;

/// Wrapper over a Rust-allocated `Vec<InputNodeAndIndex>`
pub use crate::widgets::node_graph::InputNodeAndIndexVec as AzInputNodeAndIndexVecTT;
/// Destructor: Takes ownership of the `InputNodeAndIndexVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInputNodeAndIndexVec_delete(object: &mut AzInputNodeAndIndexVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<AccessibilityState>`
pub use azul_core::dom::AccessibilityStateVec as AzAccessibilityStateVecTT;
pub use AzAccessibilityStateVecTT as AzAccessibilityStateVec;
/// Destructor: Takes ownership of the `AccessibilityStateVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzAccessibilityStateVec_delete(object: &mut AzAccessibilityStateVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<MenuItem>`
pub use azul_core::window::MenuItemVec as AzMenuItemVecTT;
pub use AzMenuItemVecTT as AzMenuItemVec;
/// Destructor: Takes ownership of the `MenuItemVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMenuItemVec_delete(object: &mut AzMenuItemVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<TessellatedSvgNode>`
pub use azul_core::svg::TessellatedSvgNodeVec as AzTessellatedSvgNodeVecTT;
pub use AzTessellatedSvgNodeVecTT as AzTessellatedSvgNodeVec;
/// Returns the `TessellatedSvgNodeVec` as a non-owning slice, NOTE: The `U8Vec` that this slice was
/// borrowed from MUST NOT be deleted before the `U8VecRef`
#[no_mangle]
pub extern "C" fn AzTessellatedSvgNodeVec_asRefVec(
    tessellatedsvgnodevec: &AzTessellatedSvgNodeVec,
) -> AzTessellatedSvgNodeVecRef {
    tessellatedsvgnodevec.get_ref()
}
/// Destructor: Takes ownership of the `TessellatedSvgNodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedSvgNodeVec_delete(object: &mut AzTessellatedSvgNodeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<TessellatedColoredSvgNode>`
pub use azul_core::svg::TessellatedColoredSvgNodeVec as AzTessellatedColoredSvgNodeVecTT;
pub use AzTessellatedColoredSvgNodeVecTT as AzTessellatedColoredSvgNodeVec;
/// Returns the `TessellatedColoredSvgNodeVec` as a non-owning slice, NOTE: The
/// `TessellatedColoredSvgNodeVec` that this slice was borrowed from MUST NOT be deleted before the
/// `U8VecRef`
#[no_mangle]
pub extern "C" fn AzTessellatedColoredSvgNodeVec_asRefVec(
    tessellatedcoloredsvgnodevec: &AzTessellatedColoredSvgNodeVec,
) -> AzTessellatedColoredSvgNodeVecRef {
    tessellatedcoloredsvgnodevec.get_ref()
}
/// Destructor: Takes ownership of the `TessellatedColoredSvgNodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTessellatedColoredSvgNodeVec_delete(
    object: &mut AzTessellatedColoredSvgNodeVec,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleFontFamily>`
pub use azul_css::StyleFontFamilyVec as AzStyleFontFamilyVecTT;
pub use AzStyleFontFamilyVecTT as AzStyleFontFamilyVec;
/// Destructor: Takes ownership of the `StyleFontFamilyVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleFontFamilyVec_delete(object: &mut AzStyleFontFamilyVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<XmlNode>`
pub use azul_core::xml::XmlNodeVec as AzXmlNodeVecTT;
pub use AzXmlNodeVecTT as AzXmlNodeVec;
/// Destructor: Takes ownership of the `XmlNodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXmlNodeVec_delete(object: &mut AzXmlNodeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzFmtArgVecTT as AzFmtArgVec;

/// Wrapper over a Rust-allocated `Vec<FmtArg>`
pub use crate::str::FmtArgVec as AzFmtArgVecTT;
/// Destructor: Takes ownership of the `FmtArgVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzFmtArgVec_delete(object: &mut AzFmtArgVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<InlineLine>`
pub use azul_core::callbacks::InlineLineVec as AzInlineLineVecTT;
pub use AzInlineLineVecTT as AzInlineLineVec;
/// Destructor: Takes ownership of the `InlineLineVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineLineVec_delete(object: &mut AzInlineLineVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<InlineWord>`
pub use azul_core::callbacks::InlineWordVec as AzInlineWordVecTT;
pub use AzInlineWordVecTT as AzInlineWordVec;
/// Destructor: Takes ownership of the `InlineWordVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineWordVec_delete(object: &mut AzInlineWordVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<InlineGlyph>`
pub use azul_core::callbacks::InlineGlyphVec as AzInlineGlyphVecTT;
pub use AzInlineGlyphVecTT as AzInlineGlyphVec;
/// Destructor: Takes ownership of the `InlineGlyphVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineGlyphVec_delete(object: &mut AzInlineGlyphVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<InlineTextHit>`
pub use azul_core::callbacks::InlineTextHitVec as AzInlineTextHitVecTT;
pub use AzInlineTextHitVecTT as AzInlineTextHitVec;
/// Destructor: Takes ownership of the `InlineTextHitVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInlineTextHitVec_delete(object: &mut AzInlineTextHitVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<Monitor>`
pub use azul_core::window::MonitorVec as AzMonitorVecTT;
pub use AzMonitorVecTT as AzMonitorVec;
/// Destructor: Takes ownership of the `MonitorVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzMonitorVec_delete(object: &mut AzMonitorVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<VideoMode>`
pub use azul_core::window::VideoModeVec as AzVideoModeVecTT;
pub use AzVideoModeVecTT as AzVideoModeVec;
/// Destructor: Takes ownership of the `VideoModeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVideoModeVec_delete(object: &mut AzVideoModeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<Dom>`
pub use azul_core::dom::DomVec as AzDomVecTT;
pub use AzDomVecTT as AzDomVec;
/// Destructor: Takes ownership of the `DomVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDomVec_delete(object: &mut AzDomVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<IdOrClass>`
pub use azul_core::dom::IdOrClassVec as AzIdOrClassVecTT;
pub use AzIdOrClassVecTT as AzIdOrClassVec;
/// Destructor: Takes ownership of the `IdOrClassVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzIdOrClassVec_delete(object: &mut AzIdOrClassVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<NodeDataInlineCssProperty>`
pub use azul_core::dom::NodeDataInlineCssPropertyVec as AzNodeDataInlineCssPropertyVecTT;
pub use AzNodeDataInlineCssPropertyVecTT as AzNodeDataInlineCssPropertyVec;
/// Destructor: Takes ownership of the `NodeDataInlineCssPropertyVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeDataInlineCssPropertyVec_delete(
    object: &mut AzNodeDataInlineCssPropertyVec,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundContent>`
pub use azul_css::StyleBackgroundContentVec as AzStyleBackgroundContentVecTT;
pub use AzStyleBackgroundContentVecTT as AzStyleBackgroundContentVec;
/// Destructor: Takes ownership of the `StyleBackgroundContentVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundContentVec_delete(object: &mut AzStyleBackgroundContentVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundPosition>`
pub use azul_css::StyleBackgroundPositionVec as AzStyleBackgroundPositionVecTT;
pub use AzStyleBackgroundPositionVecTT as AzStyleBackgroundPositionVec;
/// Destructor: Takes ownership of the `StyleBackgroundPositionVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundPositionVec_delete(object: &mut AzStyleBackgroundPositionVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundRepeat>`
pub use azul_css::StyleBackgroundRepeatVec as AzStyleBackgroundRepeatVecTT;
pub use AzStyleBackgroundRepeatVecTT as AzStyleBackgroundRepeatVec;
/// Destructor: Takes ownership of the `StyleBackgroundRepeatVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundRepeatVec_delete(object: &mut AzStyleBackgroundRepeatVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleBackgroundSize>`
pub use azul_css::StyleBackgroundSizeVec as AzStyleBackgroundSizeVecTT;
pub use AzStyleBackgroundSizeVecTT as AzStyleBackgroundSizeVec;
/// Destructor: Takes ownership of the `StyleBackgroundSizeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleBackgroundSizeVec_delete(object: &mut AzStyleBackgroundSizeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<StyleTransform>`
pub use azul_css::StyleTransformVec as AzStyleTransformVecTT;
pub use AzStyleTransformVecTT as AzStyleTransformVec;
/// Destructor: Takes ownership of the `StyleTransformVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyleTransformVec_delete(object: &mut AzStyleTransformVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<CssProperty>`
pub use azul_css::CssPropertyVec as AzCssPropertyVecTT;
pub use AzCssPropertyVecTT as AzCssPropertyVec;
/// Destructor: Takes ownership of the `CssPropertyVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssPropertyVec_delete(object: &mut AzCssPropertyVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
pub use azul_layout::xml::svg::SvgMultiPolygonVec as AzSvgMultiPolygonVecTT;
pub use AzSvgMultiPolygonVecTT as AzSvgMultiPolygonVec;
/// Destructor: Takes ownership of the `SvgMultiPolygonVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgMultiPolygonVec_delete(object: &mut AzSvgMultiPolygonVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<SvgSimpleNode>`
pub use azul_layout::xml::svg::SvgSimpleNodeVec as AzSvgSimpleNodeVecTT;
pub use AzSvgSimpleNodeVecTT as AzSvgSimpleNodeVec;
/// Destructor: Takes ownership of the `SvgSimpleNodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgSimpleNodeVec_delete(object: &mut AzSvgSimpleNodeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<SvgPath>`
pub use azul_layout::xml::svg::SvgPathVec as AzSvgPathVecTT;
pub use AzSvgPathVecTT as AzSvgPathVec;
/// Destructor: Takes ownership of the `SvgPathVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgPathVec_delete(object: &mut AzSvgPathVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
pub use azul_core::gl::VertexAttributeVec as AzVertexAttributeVecTT;
pub use AzVertexAttributeVecTT as AzVertexAttributeVec;
/// Destructor: Takes ownership of the `VertexAttributeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVertexAttributeVec_delete(object: &mut AzVertexAttributeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `VertexAttribute`
pub use azul_layout::xml::svg::SvgPathElementVec as AzSvgPathElementVecTT;
pub use AzSvgPathElementVecTT as AzSvgPathElementVec;
/// Destructor: Takes ownership of the `SvgPathElementVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgPathElementVec_delete(object: &mut AzSvgPathElementVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `SvgVertex`
pub use azul_layout::xml::svg::SvgVertexVec as AzSvgVertexVecTT;
pub use AzSvgVertexVecTT as AzSvgVertexVec;
/// Destructor: Takes ownership of the `SvgVertexVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgVertexVec_delete(object: &mut AzSvgVertexVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `SvgColoredVertex`
pub use azul_layout::xml::svg::SvgColoredVertexVec as AzSvgColoredVertexVecTT;
pub use AzSvgColoredVertexVecTT as AzSvgColoredVertexVec;
/// Destructor: Takes ownership of the `SvgColoredVertexVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgColoredVertexVec_delete(object: &mut AzSvgColoredVertexVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<u32>`
pub use azul_css::U32Vec as AzU32VecTT;
pub use AzU32VecTT as AzU32Vec;
/// Destructor: Takes ownership of the `U32Vec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzU32Vec_delete(object: &mut AzU32Vec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `XWindowType`
pub use azul_core::window::XWindowTypeVec as AzXWindowTypeVecTT;
pub use AzXWindowTypeVecTT as AzXWindowTypeVec;
/// Destructor: Takes ownership of the `XWindowTypeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXWindowTypeVec_delete(object: &mut AzXWindowTypeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `VirtualKeyCode`
pub use azul_core::window::VirtualKeyCodeVec as AzVirtualKeyCodeVecTT;
pub use AzVirtualKeyCodeVecTT as AzVirtualKeyCodeVec;
/// Destructor: Takes ownership of the `VirtualKeyCodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzVirtualKeyCodeVec_delete(object: &mut AzVirtualKeyCodeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `CascadeInfo`
pub use azul_core::style::CascadeInfoVec as AzCascadeInfoVecTT;
pub use AzCascadeInfoVecTT as AzCascadeInfoVec;
/// Destructor: Takes ownership of the `CascadeInfoVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCascadeInfoVec_delete(object: &mut AzCascadeInfoVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `ScanCode`
pub use azul_core::window::ScanCodeVec as AzScanCodeVecTT;
pub use AzScanCodeVecTT as AzScanCodeVec;
/// Destructor: Takes ownership of the `ScanCodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzScanCodeVec_delete(object: &mut AzScanCodeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `CssDeclaration`
pub use azul_css::CssDeclarationVec as AzCssDeclarationVecTT;
pub use AzCssDeclarationVecTT as AzCssDeclarationVec;
/// Destructor: Takes ownership of the `CssDeclarationVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssDeclarationVec_delete(object: &mut AzCssDeclarationVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `CssPathSelector`
pub use azul_css::CssPathSelectorVec as AzCssPathSelectorVecTT;
pub use AzCssPathSelectorVecTT as AzCssPathSelectorVec;
/// Destructor: Takes ownership of the `CssPathSelectorVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssPathSelectorVec_delete(object: &mut AzCssPathSelectorVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Stylesheet`
pub use azul_css::StylesheetVec as AzStylesheetVecTT;
pub use AzStylesheetVecTT as AzStylesheetVec;
/// Destructor: Takes ownership of the `StylesheetVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStylesheetVec_delete(object: &mut AzStylesheetVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `CssRuleBlock`
pub use azul_css::CssRuleBlockVec as AzCssRuleBlockVecTT;
pub use AzCssRuleBlockVecTT as AzCssRuleBlockVec;
/// Destructor: Takes ownership of the `CssRuleBlockVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCssRuleBlockVec_delete(object: &mut AzCssRuleBlockVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<u16>`
pub use azul_css::U16Vec as AzU16VecTT;
pub use AzU16VecTT as AzU16Vec;
/// Destructor: Takes ownership of the `U16Vec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzU16Vec_delete(object: &mut AzU16Vec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<f32>`
pub use azul_css::F32Vec as AzF32VecTT;
pub use AzF32VecTT as AzF32Vec;
/// Destructor: Takes ownership of the `F32Vec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzF32Vec_delete(object: &mut AzF32Vec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `U8Vec`
pub use azul_css::U8Vec as AzU8VecTT;
pub use AzU8VecTT as AzU8Vec;
/// Creates a new, heap-allocated U8Vec by copying the memory into Rust (heap allocation)
#[no_mangle]
pub extern "C" fn AzU8Vec_copyFromBytes(ptr: *const u8, start: usize, len: usize) -> AzU8Vec {
    unsafe {
        let start_ptr = ptr.offset(start.max(core::isize::MAX as usize) as isize);
        let s = core::slice::from_raw_parts(start_ptr, len);
        s.to_vec().into()
    }
}
/// Returns the `U8Vec` as a non-owning slice, NOTE: The `U8Vec` that this slice was borrowed from
/// MUST NOT be deleted before the `U8VecRef`
#[no_mangle]
pub extern "C" fn AzU8Vec_asRefVec(u8vec: &AzU8Vec) -> AzU8VecRef {
    u8vec.as_ref().into()
}
/// Destructor: Takes ownership of the `U8Vec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzU8Vec_delete(object: &mut AzU8Vec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `CallbackData`
pub use azul_core::dom::CallbackDataVec as AzCallbackDataVecTT;
pub use AzCallbackDataVecTT as AzCallbackDataVec;
/// Destructor: Takes ownership of the `CallbackDataVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzCallbackDataVec_delete(object: &mut AzCallbackDataVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<DebugMessage>`
pub use azul_core::gl::AzDebugMessageVec as AzDebugMessageVecTT;
pub use AzDebugMessageVecTT as AzDebugMessageVec;
/// Destructor: Takes ownership of the `DebugMessageVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDebugMessageVec_delete(object: &mut AzDebugMessageVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `U32Vec`
pub use azul_core::gl::GLuintVec as AzGLuintVecTT;
pub use AzGLuintVecTT as AzGLuintVec;
/// Destructor: Takes ownership of the `GLuintVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGLuintVec_delete(object: &mut AzGLuintVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `GLintVec`
pub use azul_core::gl::GLintVec as AzGLintVecTT;
pub use AzGLintVecTT as AzGLintVec;
/// Destructor: Takes ownership of the `GLintVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzGLintVec_delete(object: &mut AzGLintVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `StringVec`
pub use azul_css::StringVec as AzStringVecTT;
pub use AzStringVecTT as AzStringVec;
/// Destructor: Takes ownership of the `StringVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStringVec_delete(object: &mut AzStringVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `StringPairVec`
pub use azul_core::window::StringPairVec as AzStringPairVecTT;
pub use AzStringPairVecTT as AzStringPairVec;
/// Destructor: Takes ownership of the `StringPairVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStringPairVec_delete(object: &mut AzStringPairVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `NormalizedLinearColorStopVec`
pub use azul_css::NormalizedLinearColorStopVec as AzNormalizedLinearColorStopVecTT;
pub use AzNormalizedLinearColorStopVecTT as AzNormalizedLinearColorStopVec;
/// Destructor: Takes ownership of the `NormalizedLinearColorStopVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNormalizedLinearColorStopVec_delete(
    object: &mut AzNormalizedLinearColorStopVec,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `NormalizedRadialColorStopVec`
pub use azul_css::NormalizedRadialColorStopVec as AzNormalizedRadialColorStopVecTT;
pub use AzNormalizedRadialColorStopVecTT as AzNormalizedRadialColorStopVec;
/// Destructor: Takes ownership of the `NormalizedRadialColorStopVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNormalizedRadialColorStopVec_delete(
    object: &mut AzNormalizedRadialColorStopVec,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `NodeIdVec`
pub use azul_core::styled_dom::NodeIdVec as AzNodeIdVecTT;
pub use AzNodeIdVecTT as AzNodeIdVec;
/// Destructor: Takes ownership of the `NodeIdVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeIdVec_delete(object: &mut AzNodeIdVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `Vec<NodeHierarchyItem>`
pub use azul_core::styled_dom::NodeHierarchyItemVec as AzNodeHierarchyItemVecTT;
pub use AzNodeHierarchyItemVecTT as AzNodeHierarchyItemVec;
/// Destructor: Takes ownership of the `NodeHierarchyItemVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeHierarchyItemVec_delete(object: &mut AzNodeHierarchyItemVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `StyledNodeVec`
pub use azul_core::styled_dom::StyledNodeVec as AzStyledNodeVecTT;
pub use AzStyledNodeVecTT as AzStyledNodeVec;
/// Destructor: Takes ownership of the `StyledNodeVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzStyledNodeVec_delete(object: &mut AzStyledNodeVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `TagIdToNodeIdMappingVec`
pub use azul_core::styled_dom::TagIdToNodeIdMappingVec as AzTagIdToNodeIdMappingVecTT;
pub use AzTagIdToNodeIdMappingVecTT as AzTagIdToNodeIdMappingVec;
/// Destructor: Takes ownership of the `TagIdToNodeIdMappingVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzTagIdToNodeIdMappingVec_delete(object: &mut AzTagIdToNodeIdMappingVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
pub use azul_core::styled_dom::ParentWithNodeDepthVec as AzParentWithNodeDepthVecTT;
pub use AzParentWithNodeDepthVecTT as AzParentWithNodeDepthVec;
/// Destructor: Takes ownership of the `ParentWithNodeDepthVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzParentWithNodeDepthVec_delete(object: &mut AzParentWithNodeDepthVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Wrapper over a Rust-allocated `NodeDataVec`
pub use azul_core::dom::NodeDataVec as AzNodeDataVecTT;
pub use AzNodeDataVecTT as AzNodeDataVec;
/// Destructor: Takes ownership of the `NodeDataVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzNodeDataVec_delete(object: &mut AzNodeDataVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `StyleFontFamilyVecDestructor` struct
pub use azul_css::StyleFontFamilyVecDestructor as AzStyleFontFamilyVecDestructorTT;
pub use AzStyleFontFamilyVecDestructorTT as AzStyleFontFamilyVecDestructor;

pub type AzStyleFontFamilyVecDestructorType = extern "C" fn(&mut AzStyleFontFamilyVec);
pub use AzListViewRowVecDestructorTT as AzListViewRowVecDestructor;

/// Re-export of rust-allocated (stack based) `ListViewRowVecDestructor` struct
pub use crate::widgets::list_view::ListViewRowVecDestructor as AzListViewRowVecDestructorTT;

pub type AzListViewRowVecDestructorType = extern "C" fn(&mut AzListViewRowVec);
/// Re-export of rust-allocated (stack based) `StyleFilterVecDestructor` struct
pub use azul_css::StyleFilterVecDestructor as AzStyleFilterVecDestructorTT;
pub use AzStyleFilterVecDestructorTT as AzStyleFilterVecDestructor;

pub type AzStyleFilterVecDestructorType = extern "C" fn(&mut AzStyleFilterVec);
/// Re-export of rust-allocated (stack based) `LogicalRectVecDestructor` struct
pub use azul_core::geom::LogicalRectVecDestructor as AzLogicalRectVecDestructorTT;
pub use AzLogicalRectVecDestructorTT as AzLogicalRectVecDestructor;

pub type AzLogicalRectVecDestructorType = extern "C" fn(&mut AzLogicalRectVec);
pub use AzNodeTypeIdInfoMapVecDestructorTT as AzNodeTypeIdInfoMapVecDestructor;

/// Re-export of rust-allocated (stack based) `NodeTypeIdInfoMapVecDestructor` struct
pub use crate::widgets::node_graph::NodeTypeIdInfoMapVecDestructor as AzNodeTypeIdInfoMapVecDestructorTT;

pub type AzNodeTypeIdInfoMapVecDestructorType = extern "C" fn(&mut AzNodeTypeIdInfoMapVec);
pub use AzInputOutputTypeIdInfoMapVecDestructorTT as AzInputOutputTypeIdInfoMapVecDestructor;

/// Re-export of rust-allocated (stack based) `InputOutputTypeIdInfoMapVecDestructor` struct
pub use crate::widgets::node_graph::InputOutputTypeIdInfoMapVecDestructor as AzInputOutputTypeIdInfoMapVecDestructorTT;

pub type AzInputOutputTypeIdInfoMapVecDestructorType =
    extern "C" fn(&mut AzInputOutputTypeIdInfoMapVec);
pub use AzNodeIdNodeMapVecDestructorTT as AzNodeIdNodeMapVecDestructor;

/// Re-export of rust-allocated (stack based) `NodeIdNodeMapVecDestructor` struct
pub use crate::widgets::node_graph::NodeIdNodeMapVecDestructor as AzNodeIdNodeMapVecDestructorTT;

pub type AzNodeIdNodeMapVecDestructorType = extern "C" fn(&mut AzNodeIdNodeMapVec);
pub use AzInputOutputTypeIdVecDestructorTT as AzInputOutputTypeIdVecDestructor;

/// Re-export of rust-allocated (stack based) `InputOutputTypeIdVecDestructor` struct
pub use crate::widgets::node_graph::InputOutputTypeIdVecDestructor as AzInputOutputTypeIdVecDestructorTT;

pub type AzInputOutputTypeIdVecDestructorType = extern "C" fn(&mut AzInputOutputTypeIdVec);
pub use AzNodeTypeFieldVecDestructorTT as AzNodeTypeFieldVecDestructor;

/// Re-export of rust-allocated (stack based) `NodeTypeFieldVecDestructor` struct
pub use crate::widgets::node_graph::NodeTypeFieldVecDestructor as AzNodeTypeFieldVecDestructorTT;

pub type AzNodeTypeFieldVecDestructorType = extern "C" fn(&mut AzNodeTypeFieldVec);
pub use AzInputConnectionVecDestructorTT as AzInputConnectionVecDestructor;

/// Re-export of rust-allocated (stack based) `InputConnectionVecDestructor` struct
pub use crate::widgets::node_graph::InputConnectionVecDestructor as AzInputConnectionVecDestructorTT;

pub type AzInputConnectionVecDestructorType = extern "C" fn(&mut AzInputConnectionVec);
pub use AzOutputNodeAndIndexVecDestructorTT as AzOutputNodeAndIndexVecDestructor;

/// Re-export of rust-allocated (stack based) `OutputNodeAndIndexVecDestructor` struct
pub use crate::widgets::node_graph::OutputNodeAndIndexVecDestructor as AzOutputNodeAndIndexVecDestructorTT;

pub type AzOutputNodeAndIndexVecDestructorType = extern "C" fn(&mut AzOutputNodeAndIndexVec);
pub use AzOutputConnectionVecDestructorTT as AzOutputConnectionVecDestructor;

/// Re-export of rust-allocated (stack based) `OutputConnectionVecDestructor` struct
pub use crate::widgets::node_graph::OutputConnectionVecDestructor as AzOutputConnectionVecDestructorTT;

pub type AzOutputConnectionVecDestructorType = extern "C" fn(&mut AzOutputConnectionVec);
pub use AzInputNodeAndIndexVecDestructorTT as AzInputNodeAndIndexVecDestructor;

/// Re-export of rust-allocated (stack based) `InputNodeAndIndexVecDestructor` struct
pub use crate::widgets::node_graph::InputNodeAndIndexVecDestructor as AzInputNodeAndIndexVecDestructorTT;

pub type AzInputNodeAndIndexVecDestructorType = extern "C" fn(&mut AzInputNodeAndIndexVec);
/// Re-export of rust-allocated (stack based) `AccessibilityStateVecDestructor` struct
pub use azul_core::dom::AccessibilityStateVecDestructor as AzAccessibilityStateVecDestructorTT;
pub use AzAccessibilityStateVecDestructorTT as AzAccessibilityStateVecDestructor;

pub type AzAccessibilityStateVecDestructorType = extern "C" fn(&mut AzAccessibilityStateVec);
/// Re-export of rust-allocated (stack based) `MenuItemVecDestructor` struct
pub use azul_core::window::MenuItemVecDestructor as AzMenuItemVecDestructorTT;
pub use AzMenuItemVecDestructorTT as AzMenuItemVecDestructor;

pub type AzMenuItemVecDestructorType = extern "C" fn(&mut AzMenuItemVec);
/// Re-export of rust-allocated (stack based) `TessellatedSvgNodeVecDestructor` struct
pub use azul_core::svg::TessellatedSvgNodeVecDestructor as AzTessellatedSvgNodeVecDestructorTT;
pub use AzTessellatedSvgNodeVecDestructorTT as AzTessellatedSvgNodeVecDestructor;

pub type AzTessellatedSvgNodeVecDestructorType = extern "C" fn(&mut AzTessellatedSvgNodeVec);
/// Re-export of rust-allocated (stack based) `TessellatedColoredSvgNodeVecDestructor` struct
pub use azul_core::svg::TessellatedColoredSvgNodeVecDestructor as AzTessellatedColoredSvgNodeVecDestructorTT;
pub use AzTessellatedColoredSvgNodeVecDestructorTT as AzTessellatedColoredSvgNodeVecDestructor;

pub type AzTessellatedColoredSvgNodeVecDestructorType =
    extern "C" fn(&mut AzTessellatedColoredSvgNodeVec);
/// Re-export of rust-allocated (stack based) `XmlNodeVecDestructor` struct
pub use azul_core::xml::XmlNodeVecDestructor as AzXmlNodeVecDestructorTT;
pub use AzXmlNodeVecDestructorTT as AzXmlNodeVecDestructor;

pub type AzXmlNodeVecDestructorType = extern "C" fn(&mut AzXmlNodeVec);
pub use AzFmtArgVecDestructorTT as AzFmtArgVecDestructor;

/// Re-export of rust-allocated (stack based) `FmtArgVecDestructor` struct
pub use crate::str::FmtArgVecDestructor as AzFmtArgVecDestructorTT;

pub type AzFmtArgVecDestructorType = extern "C" fn(&mut AzFmtArgVec);
/// Re-export of rust-allocated (stack based) `InlineLineVecDestructor` struct
pub use azul_core::callbacks::InlineLineVecDestructor as AzInlineLineVecDestructorTT;
pub use AzInlineLineVecDestructorTT as AzInlineLineVecDestructor;

pub type AzInlineLineVecDestructorType = extern "C" fn(&mut AzInlineLineVec);
/// Re-export of rust-allocated (stack based) `InlineWordVecDestructor` struct
pub use azul_core::callbacks::InlineWordVecDestructor as AzInlineWordVecDestructorTT;
pub use AzInlineWordVecDestructorTT as AzInlineWordVecDestructor;

pub type AzInlineWordVecDestructorType = extern "C" fn(&mut AzInlineWordVec);
/// Re-export of rust-allocated (stack based) `InlineGlyphVecDestructor` struct
pub use azul_core::callbacks::InlineGlyphVecDestructor as AzInlineGlyphVecDestructorTT;
pub use AzInlineGlyphVecDestructorTT as AzInlineGlyphVecDestructor;

pub type AzInlineGlyphVecDestructorType = extern "C" fn(&mut AzInlineGlyphVec);
/// Re-export of rust-allocated (stack based) `InlineTextHitVecDestructor` struct
pub use azul_core::callbacks::InlineTextHitVecDestructor as AzInlineTextHitVecDestructorTT;
pub use AzInlineTextHitVecDestructorTT as AzInlineTextHitVecDestructor;

pub type AzInlineTextHitVecDestructorType = extern "C" fn(&mut AzInlineTextHitVec);
/// Re-export of rust-allocated (stack based) `MonitorVecDestructor` struct
pub use azul_core::window::MonitorVecDestructor as AzMonitorVecDestructorTT;
pub use AzMonitorVecDestructorTT as AzMonitorVecDestructor;

pub type AzMonitorVecDestructorType = extern "C" fn(&mut AzMonitorVec);
/// Re-export of rust-allocated (stack based) `VideoModeVecDestructor` struct
pub use azul_core::window::VideoModeVecDestructor as AzVideoModeVecDestructorTT;
pub use AzVideoModeVecDestructorTT as AzVideoModeVecDestructor;

pub type AzVideoModeVecDestructorType = extern "C" fn(&mut AzVideoModeVec);
/// Re-export of rust-allocated (stack based) `DomVecDestructor` struct
pub use azul_core::dom::DomVecDestructor as AzDomVecDestructorTT;
pub use AzDomVecDestructorTT as AzDomVecDestructor;

pub type AzDomVecDestructorType = extern "C" fn(&mut AzDomVec);
/// Re-export of rust-allocated (stack based) `IdOrClassVecDestructor` struct
pub use azul_core::dom::IdOrClassVecDestructor as AzIdOrClassVecDestructorTT;
pub use AzIdOrClassVecDestructorTT as AzIdOrClassVecDestructor;

pub type AzIdOrClassVecDestructorType = extern "C" fn(&mut AzIdOrClassVec);
/// Re-export of rust-allocated (stack based) `NodeDataInlineCssPropertyVecDestructor` struct
pub use azul_core::dom::NodeDataInlineCssPropertyVecDestructor as AzNodeDataInlineCssPropertyVecDestructorTT;
pub use AzNodeDataInlineCssPropertyVecDestructorTT as AzNodeDataInlineCssPropertyVecDestructor;

pub type AzNodeDataInlineCssPropertyVecDestructorType =
    extern "C" fn(&mut AzNodeDataInlineCssPropertyVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecDestructor` struct
pub use azul_css::StyleBackgroundContentVecDestructor as AzStyleBackgroundContentVecDestructorTT;
pub use AzStyleBackgroundContentVecDestructorTT as AzStyleBackgroundContentVecDestructor;

pub type AzStyleBackgroundContentVecDestructorType =
    extern "C" fn(&mut AzStyleBackgroundContentVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecDestructor` struct
pub use azul_css::StyleBackgroundPositionVecDestructor as AzStyleBackgroundPositionVecDestructorTT;
pub use AzStyleBackgroundPositionVecDestructorTT as AzStyleBackgroundPositionVecDestructor;

pub type AzStyleBackgroundPositionVecDestructorType =
    extern "C" fn(&mut AzStyleBackgroundPositionVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecDestructor` struct
pub use azul_css::StyleBackgroundRepeatVecDestructor as AzStyleBackgroundRepeatVecDestructorTT;
pub use AzStyleBackgroundRepeatVecDestructorTT as AzStyleBackgroundRepeatVecDestructor;

pub type AzStyleBackgroundRepeatVecDestructorType = extern "C" fn(&mut AzStyleBackgroundRepeatVec);
/// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecDestructor` struct
pub use azul_css::StyleBackgroundSizeVecDestructor as AzStyleBackgroundSizeVecDestructorTT;
pub use AzStyleBackgroundSizeVecDestructorTT as AzStyleBackgroundSizeVecDestructor;

pub type AzStyleBackgroundSizeVecDestructorType = extern "C" fn(&mut AzStyleBackgroundSizeVec);
/// Re-export of rust-allocated (stack based) `StyleTransformVecDestructor` struct
pub use azul_css::StyleTransformVecDestructor as AzStyleTransformVecDestructorTT;
pub use AzStyleTransformVecDestructorTT as AzStyleTransformVecDestructor;

pub type AzStyleTransformVecDestructorType = extern "C" fn(&mut AzStyleTransformVec);
/// Re-export of rust-allocated (stack based) `CssPropertyVecDestructor` struct
pub use azul_css::CssPropertyVecDestructor as AzCssPropertyVecDestructorTT;
pub use AzCssPropertyVecDestructorTT as AzCssPropertyVecDestructor;

pub type AzCssPropertyVecDestructorType = extern "C" fn(&mut AzCssPropertyVec);
/// Re-export of rust-allocated (stack based) `SvgMultiPolygonVecDestructor` struct
pub use azul_layout::xml::svg::SvgMultiPolygonVecDestructor as AzSvgMultiPolygonVecDestructorTT;
pub use AzSvgMultiPolygonVecDestructorTT as AzSvgMultiPolygonVecDestructor;

pub type AzSvgMultiPolygonVecDestructorType = extern "C" fn(&mut AzSvgMultiPolygonVec);
/// Re-export of rust-allocated (stack based) `SvgSimpleNodeVecDestructor` struct
pub use azul_layout::xml::svg::SvgSimpleNodeVecDestructor as AzSvgSimpleNodeVecDestructorTT;
pub use AzSvgSimpleNodeVecDestructorTT as AzSvgSimpleNodeVecDestructor;

pub type AzSvgSimpleNodeVecDestructorType = extern "C" fn(&mut AzSvgSimpleNodeVec);
/// Re-export of rust-allocated (stack based) `SvgPathVecDestructor` struct
pub use azul_layout::xml::svg::SvgPathVecDestructor as AzSvgPathVecDestructorTT;
pub use AzSvgPathVecDestructorTT as AzSvgPathVecDestructor;

pub type AzSvgPathVecDestructorType = extern "C" fn(&mut AzSvgPathVec);
/// Re-export of rust-allocated (stack based) `VertexAttributeVecDestructor` struct
pub use azul_core::gl::VertexAttributeVecDestructor as AzVertexAttributeVecDestructorTT;
pub use AzVertexAttributeVecDestructorTT as AzVertexAttributeVecDestructor;

pub type AzVertexAttributeVecDestructorType = extern "C" fn(&mut AzVertexAttributeVec);
/// Re-export of rust-allocated (stack based) `SvgPathElementVecDestructor` struct
pub use azul_layout::xml::svg::SvgPathElementVecDestructor as AzSvgPathElementVecDestructorTT;
pub use AzSvgPathElementVecDestructorTT as AzSvgPathElementVecDestructor;

pub type AzSvgPathElementVecDestructorType = extern "C" fn(&mut AzSvgPathElementVec);
/// Re-export of rust-allocated (stack based) `SvgVertexVecDestructor` struct
pub use azul_layout::xml::svg::SvgVertexVecDestructor as AzSvgVertexVecDestructorTT;
pub use AzSvgVertexVecDestructorTT as AzSvgVertexVecDestructor;

pub type AzSvgVertexVecDestructorType = extern "C" fn(&mut AzSvgVertexVec);
/// Re-export of rust-allocated (stack based) `SvgColoredVertexVecDestructor` struct
pub use azul_layout::xml::svg::SvgColoredVertexVecDestructor as AzSvgColoredVertexVecDestructorTT;
pub use AzSvgColoredVertexVecDestructorTT as AzSvgColoredVertexVecDestructor;

pub type AzSvgColoredVertexVecDestructorType = extern "C" fn(&mut AzSvgColoredVertexVec);
/// Re-export of rust-allocated (stack based) `U32VecDestructor` struct
pub use azul_css::U32VecDestructor as AzU32VecDestructorTT;
pub use AzU32VecDestructorTT as AzU32VecDestructor;

pub type AzU32VecDestructorType = extern "C" fn(&mut AzU32Vec);
/// Re-export of rust-allocated (stack based) `XWindowTypeVecDestructor` struct
pub use azul_core::window::XWindowTypeVecDestructor as AzXWindowTypeVecDestructorTT;
pub use AzXWindowTypeVecDestructorTT as AzXWindowTypeVecDestructor;

pub type AzXWindowTypeVecDestructorType = extern "C" fn(&mut AzXWindowTypeVec);
/// Re-export of rust-allocated (stack based) `VirtualKeyCodeVecDestructor` struct
pub use azul_core::window::VirtualKeyCodeVecDestructor as AzVirtualKeyCodeVecDestructorTT;
pub use AzVirtualKeyCodeVecDestructorTT as AzVirtualKeyCodeVecDestructor;

pub type AzVirtualKeyCodeVecDestructorType = extern "C" fn(&mut AzVirtualKeyCodeVec);
/// Re-export of rust-allocated (stack based) `CascadeInfoVecDestructor` struct
pub use azul_core::style::CascadeInfoVecDestructor as AzCascadeInfoVecDestructorTT;
pub use AzCascadeInfoVecDestructorTT as AzCascadeInfoVecDestructor;

pub type AzCascadeInfoVecDestructorType = extern "C" fn(&mut AzCascadeInfoVec);
/// Re-export of rust-allocated (stack based) `ScanCodeVecDestructor` struct
pub use azul_core::window::ScanCodeVecDestructor as AzScanCodeVecDestructorTT;
pub use AzScanCodeVecDestructorTT as AzScanCodeVecDestructor;

pub type AzScanCodeVecDestructorType = extern "C" fn(&mut AzScanCodeVec);
/// Re-export of rust-allocated (stack based) `CssDeclarationVecDestructor` struct
pub use azul_css::CssDeclarationVecDestructor as AzCssDeclarationVecDestructorTT;
pub use AzCssDeclarationVecDestructorTT as AzCssDeclarationVecDestructor;

pub type AzCssDeclarationVecDestructorType = extern "C" fn(&mut AzCssDeclarationVec);
/// Re-export of rust-allocated (stack based) `CssPathSelectorVecDestructor` struct
pub use azul_css::CssPathSelectorVecDestructor as AzCssPathSelectorVecDestructorTT;
pub use AzCssPathSelectorVecDestructorTT as AzCssPathSelectorVecDestructor;

pub type AzCssPathSelectorVecDestructorType = extern "C" fn(&mut AzCssPathSelectorVec);
/// Re-export of rust-allocated (stack based) `StylesheetVecDestructor` struct
pub use azul_css::StylesheetVecDestructor as AzStylesheetVecDestructorTT;
pub use AzStylesheetVecDestructorTT as AzStylesheetVecDestructor;

pub type AzStylesheetVecDestructorType = extern "C" fn(&mut AzStylesheetVec);
/// Re-export of rust-allocated (stack based) `CssRuleBlockVecDestructor` struct
pub use azul_css::CssRuleBlockVecDestructor as AzCssRuleBlockVecDestructorTT;
pub use AzCssRuleBlockVecDestructorTT as AzCssRuleBlockVecDestructor;

pub type AzCssRuleBlockVecDestructorType = extern "C" fn(&mut AzCssRuleBlockVec);
/// Re-export of rust-allocated (stack based) `F32VecDestructor` struct
pub use azul_css::F32VecDestructor as AzF32VecDestructorTT;
pub use AzF32VecDestructorTT as AzF32VecDestructor;

pub type AzF32VecDestructorType = extern "C" fn(&mut AzF32Vec);
/// Re-export of rust-allocated (stack based) `U16VecDestructor` struct
pub use azul_css::U16VecDestructor as AzU16VecDestructorTT;
pub use AzU16VecDestructorTT as AzU16VecDestructor;

pub type AzU16VecDestructorType = extern "C" fn(&mut AzU16Vec);
/// Re-export of rust-allocated (stack based) `U8VecDestructor` struct
pub use azul_css::U8VecDestructor as AzU8VecDestructorTT;
pub use AzU8VecDestructorTT as AzU8VecDestructor;

pub type AzU8VecDestructorType = extern "C" fn(&mut AzU8Vec);
/// Re-export of rust-allocated (stack based) `CallbackDataVecDestructor` struct
pub use azul_core::dom::CallbackDataVecDestructor as AzCallbackDataVecDestructorTT;
pub use AzCallbackDataVecDestructorTT as AzCallbackDataVecDestructor;

pub type AzCallbackDataVecDestructorType = extern "C" fn(&mut AzCallbackDataVec);
/// Re-export of rust-allocated (stack based) `DebugMessageVecDestructor` struct
pub use azul_core::gl::AzDebugMessageVecDestructor as AzDebugMessageVecDestructorTT;
pub use AzDebugMessageVecDestructorTT as AzDebugMessageVecDestructor;

pub type AzDebugMessageVecDestructorType = extern "C" fn(&mut AzDebugMessageVec);
/// Re-export of rust-allocated (stack based) `GLuintVecDestructor` struct
pub use azul_core::gl::GLuintVecDestructor as AzGLuintVecDestructorTT;
pub use AzGLuintVecDestructorTT as AzGLuintVecDestructor;

pub type AzGLuintVecDestructorType = extern "C" fn(&mut AzGLuintVec);
/// Re-export of rust-allocated (stack based) `GLintVecDestructor` struct
pub use azul_core::gl::GLintVecDestructor as AzGLintVecDestructorTT;
pub use AzGLintVecDestructorTT as AzGLintVecDestructor;

pub type AzGLintVecDestructorType = extern "C" fn(&mut AzGLintVec);
/// Re-export of rust-allocated (stack based) `StringVecDestructor` struct
pub use azul_css::StringVecDestructor as AzStringVecDestructorTT;
pub use AzStringVecDestructorTT as AzStringVecDestructor;

pub type AzStringVecDestructorType = extern "C" fn(&mut AzStringVec);
/// Re-export of rust-allocated (stack based) `StringPairVecDestructor` struct
pub use azul_core::window::StringPairVecDestructor as AzStringPairVecDestructorTT;
pub use AzStringPairVecDestructorTT as AzStringPairVecDestructor;

pub type AzStringPairVecDestructorType = extern "C" fn(&mut AzStringPairVec);
/// Re-export of rust-allocated (stack based) `NormalizedLinearColorStopVecDestructor` struct
pub use azul_css::NormalizedLinearColorStopVecDestructor as AzNormalizedLinearColorStopVecDestructorTT;
pub use AzNormalizedLinearColorStopVecDestructorTT as AzNormalizedLinearColorStopVecDestructor;

pub type AzNormalizedLinearColorStopVecDestructorType =
    extern "C" fn(&mut AzNormalizedLinearColorStopVec);
/// Re-export of rust-allocated (stack based) `NormalizedRadialColorStopVecDestructor` struct
pub use azul_css::NormalizedRadialColorStopVecDestructor as AzNormalizedRadialColorStopVecDestructorTT;
pub use AzNormalizedRadialColorStopVecDestructorTT as AzNormalizedRadialColorStopVecDestructor;

pub type AzNormalizedRadialColorStopVecDestructorType =
    extern "C" fn(&mut AzNormalizedRadialColorStopVec);
/// Re-export of rust-allocated (stack based) `NodeIdVecDestructor` struct
pub use azul_core::styled_dom::NodeIdVecDestructor as AzNodeIdVecDestructorTT;
pub use AzNodeIdVecDestructorTT as AzNodeIdVecDestructor;

pub type AzNodeIdVecDestructorType = extern "C" fn(&mut AzNodeIdVec);
/// Re-export of rust-allocated (stack based) `NodeHierarchyItemVecDestructor` struct
pub use azul_core::styled_dom::NodeHierarchyItemVecDestructor as AzNodeHierarchyItemVecDestructorTT;
pub use AzNodeHierarchyItemVecDestructorTT as AzNodeHierarchyItemVecDestructor;

pub type AzNodeHierarchyItemVecDestructorType = extern "C" fn(&mut AzNodeHierarchyItemVec);
/// Re-export of rust-allocated (stack based) `StyledNodeVecDestructor` struct
pub use azul_core::styled_dom::StyledNodeVecDestructor as AzStyledNodeVecDestructorTT;
pub use AzStyledNodeVecDestructorTT as AzStyledNodeVecDestructor;

pub type AzStyledNodeVecDestructorType = extern "C" fn(&mut AzStyledNodeVec);
/// Re-export of rust-allocated (stack based) `TagIdToNodeIdMappingVecDestructor` struct
pub use azul_core::styled_dom::TagIdToNodeIdMappingVecDestructor as AzTagIdToNodeIdMappingVecDestructorTT;
pub use AzTagIdToNodeIdMappingVecDestructorTT as AzTagIdToNodeIdMappingVecDestructor;

pub type AzTagIdToNodeIdMappingVecDestructorType = extern "C" fn(&mut AzTagIdToNodeIdMappingVec);
/// Re-export of rust-allocated (stack based) `ParentWithNodeDepthVecDestructor` struct
pub use azul_core::styled_dom::ParentWithNodeDepthVecDestructor as AzParentWithNodeDepthVecDestructorTT;
pub use AzParentWithNodeDepthVecDestructorTT as AzParentWithNodeDepthVecDestructor;

pub type AzParentWithNodeDepthVecDestructorType = extern "C" fn(&mut AzParentWithNodeDepthVec);
/// Re-export of rust-allocated (stack based) `NodeDataVecDestructor` struct
pub use azul_core::dom::NodeDataVecDestructor as AzNodeDataVecDestructorTT;
pub use AzNodeDataVecDestructorTT as AzNodeDataVecDestructor;

pub type AzNodeDataVecDestructorType = extern "C" fn(&mut AzNodeDataVec);
/// Re-export of rust-allocated (stack based) `OptionStyleTextAlign` struct
pub use azul_css::OptionStyleTextAlign as AzOptionStyleTextAlignTT;
/// Re-export of rust-allocated (stack based) `OptionSvgPoint` struct
pub use azul_css::OptionSvgPoint as AzOptionSvgPointTT;
pub use AzOptionListViewOnRowClickTT as AzOptionListViewOnRowClick;
pub use AzOptionStyleTextAlignTT as AzOptionStyleTextAlign;
pub use AzOptionSvgPointTT as AzOptionSvgPoint;

/// Re-export of rust-allocated (stack based) `OptionListViewOnRowClick` struct
pub use crate::widgets::list_view::OptionListViewOnRowClick as AzOptionListViewOnRowClickTT;
/// Destructor: Takes ownership of the `OptionListViewOnRowClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionListViewOnRowClick_delete(object: &mut AzOptionListViewOnRowClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionListViewOnColumnClickTT as AzOptionListViewOnColumnClick;

/// Re-export of rust-allocated (stack based) `OptionListViewOnColumnClick` struct
pub use crate::widgets::list_view::OptionListViewOnColumnClick as AzOptionListViewOnColumnClickTT;
/// Destructor: Takes ownership of the `OptionListViewOnColumnClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionListViewOnColumnClick_delete(object: &mut AzOptionListViewOnColumnClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionListViewOnLazyLoadScrollTT as AzOptionListViewOnLazyLoadScroll;

/// Re-export of rust-allocated (stack based) `OptionListViewOnLazyLoadScroll` struct
pub use crate::widgets::list_view::OptionListViewOnLazyLoadScroll as AzOptionListViewOnLazyLoadScrollTT;
/// Destructor: Takes ownership of the `OptionListViewOnLazyLoadScroll` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionListViewOnLazyLoadScroll_delete(
    object: &mut AzOptionListViewOnLazyLoadScroll,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionMenu` struct
pub use azul_core::window::OptionMenu as AzOptionMenuTT;
pub use AzOptionMenuTT as AzOptionMenu;
/// Destructor: Takes ownership of the `OptionMenu` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionMenu_delete(object: &mut AzOptionMenu) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionPixelValueNoPercent` struct
pub use azul_css::OptionPixelValueNoPercent as AzOptionPixelValueNoPercentTT;
pub use AzOptionDropDownOnChoiceChangeTT as AzOptionDropDownOnChoiceChange;
pub use AzOptionPixelValueNoPercentTT as AzOptionPixelValueNoPercent;

/// Re-export of rust-allocated (stack based) `OptionDropDownOnChoiceChange` struct
pub use crate::widgets::drop_down::OptionDropDownOnChoiceChange as AzOptionDropDownOnChoiceChangeTT;
/// Destructor: Takes ownership of the `OptionDropDownOnChoiceChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionDropDownOnChoiceChange_delete(
    object: &mut AzOptionDropDownOnChoiceChange,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionResolvedTextLayoutOptions` struct
pub use azul_core::ui_solver::OptionResolvedTextLayoutOptions as AzOptionResolvedTextLayoutOptionsTT;
pub use AzOptionResolvedTextLayoutOptionsTT as AzOptionResolvedTextLayoutOptions;
/// Destructor: Takes ownership of the `OptionResolvedTextLayoutOptions` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionResolvedTextLayoutOptions_delete(
    object: &mut AzOptionResolvedTextLayoutOptions,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeAddedTT as AzOptionNodeGraphOnNodeAdded;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeAdded` struct
pub use crate::widgets::node_graph::OptionOnNodeAdded as AzOptionNodeGraphOnNodeAddedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeAdded` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeAdded_delete(object: &mut AzOptionNodeGraphOnNodeAdded) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeRemovedTT as AzOptionNodeGraphOnNodeRemoved;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeRemoved` struct
pub use crate::widgets::node_graph::OptionOnNodeRemoved as AzOptionNodeGraphOnNodeRemovedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeRemoved` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeRemoved_delete(
    object: &mut AzOptionNodeGraphOnNodeRemoved,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeGraphDraggedTT as AzOptionNodeGraphOnNodeGraphDragged;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeGraphDragged` struct
pub use crate::widgets::node_graph::OptionOnNodeGraphDragged as AzOptionNodeGraphOnNodeGraphDraggedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeGraphDragged` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeGraphDragged_delete(
    object: &mut AzOptionNodeGraphOnNodeGraphDragged,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeDraggedTT as AzOptionNodeGraphOnNodeDragged;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeDragged` struct
pub use crate::widgets::node_graph::OptionOnNodeDragged as AzOptionNodeGraphOnNodeDraggedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeDragged` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeDragged_delete(
    object: &mut AzOptionNodeGraphOnNodeDragged,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeConnectedTT as AzOptionNodeGraphOnNodeConnected;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeConnected` struct
pub use crate::widgets::node_graph::OptionOnNodeConnected as AzOptionNodeGraphOnNodeConnectedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeConnected` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeConnected_delete(
    object: &mut AzOptionNodeGraphOnNodeConnected,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeInputDisconnectedTT as AzOptionNodeGraphOnNodeInputDisconnected;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeInputDisconnected` struct
pub use crate::widgets::node_graph::OptionOnNodeInputDisconnected as AzOptionNodeGraphOnNodeInputDisconnectedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeInputDisconnected` pointer and deletes
/// it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeInputDisconnected_delete(
    object: &mut AzOptionNodeGraphOnNodeInputDisconnected,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeOutputDisconnectedTT as AzOptionNodeGraphOnNodeOutputDisconnected;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeOutputDisconnected` struct
pub use crate::widgets::node_graph::OptionOnNodeOutputDisconnected as AzOptionNodeGraphOnNodeOutputDisconnectedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeOutputDisconnected` pointer and deletes
/// it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeOutputDisconnected_delete(
    object: &mut AzOptionNodeGraphOnNodeOutputDisconnected,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNodeGraphOnNodeFieldEditedTT as AzOptionNodeGraphOnNodeFieldEdited;

/// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeFieldEdited` struct
pub use crate::widgets::node_graph::OptionOnNodeFieldEdited as AzOptionNodeGraphOnNodeFieldEditedTT;
/// Destructor: Takes ownership of the `OptionNodeGraphOnNodeFieldEdited` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNodeGraphOnNodeFieldEdited_delete(
    object: &mut AzOptionNodeGraphOnNodeFieldEdited,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionColorInputOnValueChangeTT as AzOptionColorInputOnValueChange;

/// Re-export of rust-allocated (stack based) `OptionColorInputOnValueChange` struct
pub use crate::widgets::color_input::OptionColorInputOnValueChange as AzOptionColorInputOnValueChangeTT;
/// Destructor: Takes ownership of the `OptionColorInputOnValueChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionColorInputOnValueChange_delete(
    object: &mut AzOptionColorInputOnValueChange,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionButtonOnClickTT as AzOptionButtonOnClick;

/// Re-export of rust-allocated (stack based) `OptionButtonOnClick` struct
pub use crate::widgets::button::OptionButtonOnClick as AzOptionButtonOnClickTT;
/// Destructor: Takes ownership of the `OptionButtonOnClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionButtonOnClick_delete(object: &mut AzOptionButtonOnClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionTabOnClickTT as AzOptionTabOnClick;

/// Re-export of rust-allocated (stack based) `OptionTabOnClick` struct
pub use crate::widgets::tabs::OptionTabOnClick as AzOptionTabOnClickTT;
/// Destructor: Takes ownership of the `OptionTabOnClick` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionTabOnClick_delete(object: &mut AzOptionTabOnClick) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionFileInputOnPathChangeTT as AzOptionFileInputOnPathChange;

/// Re-export of rust-allocated (stack based) `OptionFileInputOnPathChange` struct
pub use crate::widgets::file_input::OptionFileInputOnPathChange as AzOptionFileInputOnPathChangeTT;
/// Destructor: Takes ownership of the `OptionFileInputOnPathChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionFileInputOnPathChange_delete(object: &mut AzOptionFileInputOnPathChange) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionCheckBoxOnToggleTT as AzOptionCheckBoxOnToggle;

/// Re-export of rust-allocated (stack based) `OptionCheckBoxOnToggle` struct
pub use crate::widgets::check_box::OptionCheckBoxOnToggle as AzOptionCheckBoxOnToggleTT;
/// Destructor: Takes ownership of the `OptionCheckBoxOnToggle` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionCheckBoxOnToggle_delete(object: &mut AzOptionCheckBoxOnToggle) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionTextInputOnTextInputTT as AzOptionTextInputOnTextInput;

/// Re-export of rust-allocated (stack based) `OptionTextInputOnTextInput` struct
pub use crate::widgets::text_input::OptionTextInputOnTextInput as AzOptionTextInputOnTextInputTT;
/// Destructor: Takes ownership of the `OptionTextInputOnTextInput` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionTextInputOnTextInput_delete(object: &mut AzOptionTextInputOnTextInput) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionTextInputOnVirtualKeyDownTT as AzOptionTextInputOnVirtualKeyDown;

/// Re-export of rust-allocated (stack based) `OptionTextInputOnVirtualKeyDown` struct
pub use crate::widgets::text_input::OptionTextInputOnVirtualKeyDown as AzOptionTextInputOnVirtualKeyDownTT;
/// Destructor: Takes ownership of the `OptionTextInputOnVirtualKeyDown` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionTextInputOnVirtualKeyDown_delete(
    object: &mut AzOptionTextInputOnVirtualKeyDown,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionTextInputOnFocusLostTT as AzOptionTextInputOnFocusLost;

/// Re-export of rust-allocated (stack based) `OptionTextInputOnFocusLost` struct
pub use crate::widgets::text_input::OptionTextInputOnFocusLost as AzOptionTextInputOnFocusLostTT;
/// Destructor: Takes ownership of the `OptionTextInputOnFocusLost` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionTextInputOnFocusLost_delete(object: &mut AzOptionTextInputOnFocusLost) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNumberInputOnFocusLostTT as AzOptionNumberInputOnFocusLost;
pub use AzOptionTextInputSelectionTT as AzOptionTextInputSelection;

/// Re-export of rust-allocated (stack based) `OptionNumberInputOnFocusLost` struct
pub use crate::widgets::number_input::OptionNumberInputOnFocusLost as AzOptionNumberInputOnFocusLostTT;
/// Re-export of rust-allocated (stack based) `OptionTextInputSelection` struct
pub use crate::widgets::text_input::OptionTextInputSelection as AzOptionTextInputSelectionTT;
/// Destructor: Takes ownership of the `OptionNumberInputOnFocusLost` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNumberInputOnFocusLost_delete(
    object: &mut AzOptionNumberInputOnFocusLost,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionNumberInputOnValueChangeTT as AzOptionNumberInputOnValueChange;

/// Re-export of rust-allocated (stack based) `OptionNumberInputOnValueChange` struct
pub use crate::widgets::number_input::OptionNumberInputOnValueChange as AzOptionNumberInputOnValueChangeTT;
/// Destructor: Takes ownership of the `OptionNumberInputOnValueChange` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionNumberInputOnValueChange_delete(
    object: &mut AzOptionNumberInputOnValueChange,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionMenuItemIcon` struct
pub use azul_core::window::OptionMenuItemIcon as AzOptionMenuItemIconTT;
pub use AzOptionMenuItemIconTT as AzOptionMenuItemIcon;
/// Destructor: Takes ownership of the `OptionMenuItemIcon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionMenuItemIcon_delete(object: &mut AzOptionMenuItemIcon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionMenuCallback` struct
pub use azul_core::window::OptionMenuCallback as AzOptionMenuCallbackTT;
pub use AzOptionMenuCallbackTT as AzOptionMenuCallback;
/// Destructor: Takes ownership of the `OptionMenuCallback` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionMenuCallback_delete(object: &mut AzOptionMenuCallback) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionVirtualKeyCodeCombo` struct
pub use azul_core::window::OptionVirtualKeyCodeCombo as AzOptionVirtualKeyCodeComboTT;
pub use AzOptionVirtualKeyCodeComboTT as AzOptionVirtualKeyCodeCombo;
/// Destructor: Takes ownership of the `OptionVirtualKeyCodeCombo` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionVirtualKeyCodeCombo_delete(object: &mut AzOptionVirtualKeyCodeCombo) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionCssProperty` struct
pub use azul_css::OptionCssProperty as AzOptionCssPropertyTT;
pub use AzOptionCssPropertyTT as AzOptionCssProperty;
/// Destructor: Takes ownership of the `OptionCssProperty` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionCssProperty_delete(object: &mut AzOptionCssProperty) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionImageRef` struct
pub use azul_core::resources::OptionImageRef as AzOptionImageRefTT;
/// Re-export of rust-allocated (stack based) `OptionThreadId` struct
pub use azul_core::task::OptionThreadId as AzOptionThreadIdTT;
/// Re-export of rust-allocated (stack based) `OptionTimerId` struct
pub use azul_core::task::OptionTimerId as AzOptionTimerIdTT;
/// Re-export of rust-allocated (stack based) `OptionPositionInfo` struct
pub use azul_core::ui_solver::OptionPositionInfo as AzOptionPositionInfoTT;
/// Re-export of rust-allocated (stack based) `OptionI16` struct
pub use azul_css::OptionI16 as AzOptionI16TT;
/// Re-export of rust-allocated (stack based) `OptionU16` struct
pub use azul_css::OptionU16 as AzOptionU16TT;
/// Re-export of rust-allocated (stack based) `OptionU32` struct
pub use azul_css::OptionU32 as AzOptionU32TT;
pub use AzOptionI16TT as AzOptionI16;
pub use AzOptionImageRefTT as AzOptionImageRef;
pub use AzOptionPositionInfoTT as AzOptionPositionInfo;
pub use AzOptionThreadIdTT as AzOptionThreadId;
pub use AzOptionTimerIdTT as AzOptionTimerId;
pub use AzOptionU16TT as AzOptionU16;
pub use AzOptionU32TT as AzOptionU32;
/// Destructor: Takes ownership of the `OptionImageRef` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionImageRef_delete(object: &mut AzOptionImageRef) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionFontRef` struct
pub use azul_css::OptionFontRef as AzOptionFontRefTT;
pub use AzOptionFontRefTT as AzOptionFontRef;
/// Destructor: Takes ownership of the `OptionFontRef` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionFontRef_delete(object: &mut AzOptionFontRef) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionSystemClipboardTT as AzOptionSystemClipboard;

/// Re-export of rust-allocated (stack based) `OptionSystemClipboard` struct
pub use crate::azul_impl::app::OptionClipboard as AzOptionSystemClipboardTT;
/// Destructor: Takes ownership of the `OptionSystemClipboard` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionSystemClipboard_delete(object: &mut AzOptionSystemClipboard) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionFileTypeListTT as AzOptionFileTypeList;

/// Re-export of rust-allocated (stack based) `OptionFileTypeList` struct
pub use crate::azul_impl::dialogs::OptionFileTypeList as AzOptionFileTypeListTT;
/// Destructor: Takes ownership of the `OptionFileTypeList` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionFileTypeList_delete(object: &mut AzOptionFileTypeList) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionWindowState` struct
pub use azul_core::window::OptionWindowState as AzOptionWindowStateTT;
pub use AzOptionWindowStateTT as AzOptionWindowState;
/// Destructor: Takes ownership of the `OptionWindowState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionWindowState_delete(object: &mut AzOptionWindowState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionKeyboardState` struct
pub use azul_core::window::OptionKeyboardState as AzOptionKeyboardStateTT;
/// Re-export of rust-allocated (stack based) `OptionMouseState` struct
pub use azul_core::window::OptionMouseState as AzOptionMouseStateTT;
pub use AzOptionKeyboardStateTT as AzOptionKeyboardState;
pub use AzOptionMouseStateTT as AzOptionMouseState;
/// Destructor: Takes ownership of the `OptionKeyboardState` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionKeyboardState_delete(object: &mut AzOptionKeyboardState) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionStringVec` struct
pub use azul_css::OptionStringVec as AzOptionStringVecTT;
pub use AzOptionStringVecTT as AzOptionStringVec;
/// Destructor: Takes ownership of the `OptionStringVec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionStringVec_delete(object: &mut AzOptionStringVec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

pub use AzOptionFileTT as AzOptionFile;

/// Re-export of rust-allocated (stack based) `OptionFile` struct
pub use crate::azul_impl::file::OptionFile as AzOptionFileTT;
/// Destructor: Takes ownership of the `OptionFile` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionFile_delete(object: &mut AzOptionFile) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionGl` struct
pub use azul_core::gl::OptionGlContextPtr as AzOptionGlTT;
pub use AzOptionGlTT as AzOptionGl;
/// Destructor: Takes ownership of the `OptionGl` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionGl_delete(object: &mut AzOptionGl) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionThreadReceiveMsg` struct
pub use azul_core::task::OptionThreadReceiveMsg as AzOptionThreadReceiveMsgTT;
pub use AzOptionThreadReceiveMsgTT as AzOptionThreadReceiveMsg;
/// Destructor: Takes ownership of the `OptionThreadReceiveMsg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionThreadReceiveMsg_delete(object: &mut AzOptionThreadReceiveMsg) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionCallback` struct
pub use azul_core::callbacks::OptionCallback as AzOptionCallbackTT;
/// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
pub use azul_core::task::OptionThreadSendMsg as AzOptionThreadSendMsgTT;
/// Re-export of rust-allocated (stack based) `OptionRendererOptions` struct
pub use azul_core::window::OptionRendererOptions as AzOptionRendererOptionsTT;
/// Re-export of rust-allocated (stack based) `OptionAngleValue` struct
pub use azul_css::OptionAngleValue as AzOptionAngleValueTT;
/// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
pub use azul_css::OptionPercentageValue as AzOptionPercentageValueTT;
pub use AzOptionAngleValueTT as AzOptionAngleValue;
pub use AzOptionCallbackTT as AzOptionCallback;
pub use AzOptionPercentageValueTT as AzOptionPercentageValue;
pub use AzOptionRendererOptionsTT as AzOptionRendererOptions;
pub use AzOptionThreadSendMsgTT as AzOptionThreadSendMsg;
/// Destructor: Takes ownership of the `OptionThreadSendMsg` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionThreadSendMsg_delete(object: &mut AzOptionThreadSendMsg) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionRefAny` struct
pub use azul_core::callbacks::OptionRefAny as AzOptionRefAnyTT;
/// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
pub use azul_css::OptionLayoutRect as AzOptionLayoutRectTT;
pub use AzOptionLayoutRectTT as AzOptionLayoutRect;
pub use AzOptionRefAnyTT as AzOptionRefAny;
/// Destructor: Takes ownership of the `OptionRefAny` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionRefAny_delete(object: &mut AzOptionRefAny) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionInlineText` struct
pub use azul_core::callbacks::OptionInlineText as AzOptionInlineTextTT;
pub use AzOptionInlineTextTT as AzOptionInlineText;
/// Destructor: Takes ownership of the `OptionInlineText` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionInlineText_delete(object: &mut AzOptionInlineText) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
pub use azul_core::callbacks::OptionDomNodeId as AzOptionDomNodeIdTT;
/// Re-export of rust-allocated (stack based) `OptionRawImage` struct
pub use azul_core::resources::OptionRawImage as AzOptionRawImageTT;
/// Re-export of rust-allocated (stack based) `OptionNodeId` struct
pub use azul_core::styled_dom::OptionNodeId as AzOptionNodeIdTT;
/// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
pub use azul_core::window::OptionWindowTheme as AzOptionWindowThemeTT;
/// Re-export of rust-allocated (stack based) `OptionColorU` struct
pub use azul_css::OptionColorU as AzOptionColorUTT;
/// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
pub use azul_css::OptionLayoutPoint as AzOptionLayoutPointTT;
/// Re-export of rust-allocated (stack based) `OptionLayoutSize` struct
pub use azul_css::OptionLayoutSize as AzOptionLayoutSizeTT;
pub use AzOptionColorUTT as AzOptionColorU;
pub use AzOptionDomNodeIdTT as AzOptionDomNodeId;
pub use AzOptionLayoutPointTT as AzOptionLayoutPoint;
pub use AzOptionLayoutSizeTT as AzOptionLayoutSize;
pub use AzOptionNodeIdTT as AzOptionNodeId;
pub use AzOptionRawImageTT as AzOptionRawImage;
pub use AzOptionWindowThemeTT as AzOptionWindowTheme;
/// Destructor: Takes ownership of the `OptionRawImage` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionRawImage_delete(object: &mut AzOptionRawImage) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
pub use azul_core::svg::OptionSvgDashPattern as AzOptionSvgDashPatternTT;
/// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
pub use azul_core::window::OptionWaylandTheme as AzOptionWaylandThemeTT;
pub use AzOptionSvgDashPatternTT as AzOptionSvgDashPattern;
pub use AzOptionWaylandThemeTT as AzOptionWaylandTheme;
/// Destructor: Takes ownership of the `OptionWaylandTheme` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionWaylandTheme_delete(object: &mut AzOptionWaylandTheme) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
pub use azul_core::window::OptionTaskBarIcon as AzOptionTaskBarIconTT;
pub use AzOptionTaskBarIconTT as AzOptionTaskBarIcon;
/// Destructor: Takes ownership of the `OptionTaskBarIcon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionTaskBarIcon_delete(object: &mut AzOptionTaskBarIcon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
pub use azul_core::window::OptionHwndHandle as AzOptionHwndHandleTT;
/// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
pub use azul_core::window::OptionLogicalPosition as AzOptionLogicalPositionTT;
/// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
pub use azul_core::window::OptionPhysicalPositionI32 as AzOptionPhysicalPositionI32TT;
/// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
pub use azul_core::window::OptionWindowIcon as AzOptionWindowIconTT;
pub use AzOptionHwndHandleTT as AzOptionHwndHandle;
pub use AzOptionLogicalPositionTT as AzOptionLogicalPosition;
pub use AzOptionPhysicalPositionI32TT as AzOptionPhysicalPositionI32;
pub use AzOptionWindowIconTT as AzOptionWindowIcon;
/// Destructor: Takes ownership of the `OptionWindowIcon` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionWindowIcon_delete(object: &mut AzOptionWindowIcon) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionString` struct
pub use azul_css::OptionAzString as AzOptionStringTT;
pub use AzOptionStringTT as AzOptionString;
/// Destructor: Takes ownership of the `OptionString` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionString_delete(object: &mut AzOptionString) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionDom` struct
pub use azul_core::dom::OptionDom as AzOptionDomTT;
/// Option<char> but the char is a u32, for C FFI stability reasons
pub use azul_core::window::OptionChar as AzOptionCharTT;
/// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
pub use azul_core::window::OptionLogicalSize as AzOptionLogicalSizeTT;
/// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
pub use azul_core::window::OptionMouseCursorType as AzOptionMouseCursorTypeTT;
/// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
pub use azul_core::window::OptionVirtualKeyCode as AzOptionVirtualKeyCodeTT;
/// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
pub use azul_core::window::OptionX11Visual as AzOptionX11VisualTT;
/// Re-export of rust-allocated (stack based) `OptionF32` struct
pub use azul_css::OptionF32 as AzOptionF32TT;
/// Re-export of rust-allocated (stack based) `OptionI32` struct
pub use azul_css::OptionI32 as AzOptionI32TT;
pub use AzOptionCharTT as AzOptionChar;
pub use AzOptionDomTT as AzOptionDom;
pub use AzOptionF32TT as AzOptionF32;
pub use AzOptionI32TT as AzOptionI32;
pub use AzOptionLogicalSizeTT as AzOptionLogicalSize;
pub use AzOptionMouseCursorTypeTT as AzOptionMouseCursorType;
pub use AzOptionVirtualKeyCodeTT as AzOptionVirtualKeyCode;
pub use AzOptionX11VisualTT as AzOptionX11Visual;
/// Destructor: Takes ownership of the `OptionDom` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionDom_delete(object: &mut AzOptionDom) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionTexture` struct
pub use azul_core::gl::OptionTexture as AzOptionTextureTT;
pub use AzOptionTextureTT as AzOptionTexture;
/// Destructor: Takes ownership of the `OptionTexture` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionTexture_delete(object: &mut AzOptionTexture) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionImageMask` struct
pub use azul_core::resources::OptionImageMask as AzOptionImageMaskTT;
pub use AzOptionImageMaskTT as AzOptionImageMask;
/// Destructor: Takes ownership of the `OptionImageMask` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionImageMask_delete(object: &mut AzOptionImageMask) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
pub use azul_core::dom::OptionTabIndex as AzOptionTabIndexTT;
/// Re-export of rust-allocated (stack based) `OptionTagId` struct
pub use azul_core::styled_dom::OptionTagId as AzOptionTagIdTT;
/// Re-export of rust-allocated (stack based) `OptionDuration` struct
pub use azul_core::task::OptionDuration as AzOptionDurationTT;
/// Re-export of rust-allocated (stack based) `OptionInstant` struct
pub use azul_core::task::OptionInstant as AzOptionInstantTT;
pub use AzOptionDurationTT as AzOptionDuration;
pub use AzOptionInstantTT as AzOptionInstant;
pub use AzOptionTabIndexTT as AzOptionTabIndex;
pub use AzOptionTagIdTT as AzOptionTagId;
/// Destructor: Takes ownership of the `OptionInstant` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionInstant_delete(object: &mut AzOptionInstant) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionUsize` struct
pub use azul_core::gl::OptionUsize as AzOptionUsizeTT;
/// Re-export of rust-allocated (stack based) `OptionU8Vec` struct
pub use azul_css::OptionU8Vec as AzOptionU8VecTT;
pub use AzOptionU8VecTT as AzOptionU8Vec;
pub use AzOptionUsizeTT as AzOptionUsize;
/// Destructor: Takes ownership of the `OptionU8Vec` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzOptionU8Vec_delete(object: &mut AzOptionU8Vec) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
pub use azul_core::gl::OptionU8VecRef as AzOptionU8VecRefTT;
/// Re-export of rust-allocated (stack based) `ResultXmlXmlError` struct
pub use azul_core::xml::ResultXmlXmlError as AzResultXmlXmlErrorTT;
pub use AzOptionU8VecRefTT as AzOptionU8VecRef;
pub use AzResultXmlXmlErrorTT as AzResultXmlXmlError;
/// Destructor: Takes ownership of the `ResultXmlXmlError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzResultXmlXmlError_delete(object: &mut AzResultXmlXmlError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ResultRawImageDecodeImageError` struct
pub use azul_layout::image::decode::ResultRawImageDecodeImageError as AzResultRawImageDecodeImageErrorTT;
pub use AzResultRawImageDecodeImageErrorTT as AzResultRawImageDecodeImageError;
/// Destructor: Takes ownership of the `ResultRawImageDecodeImageError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzResultRawImageDecodeImageError_delete(
    object: &mut AzResultRawImageDecodeImageError,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ResultU8VecEncodeImageError` struct
pub use azul_layout::image::encode::ResultU8VecEncodeImageError as AzResultU8VecEncodeImageErrorTT;
pub use AzResultU8VecEncodeImageErrorTT as AzResultU8VecEncodeImageError;
/// Destructor: Takes ownership of the `ResultU8VecEncodeImageError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzResultU8VecEncodeImageError_delete(object: &mut AzResultU8VecEncodeImageError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ResultSvgXmlNodeSvgParseError` struct
pub use azul_core::svg::ResultSvgXmlNodeSvgParseError as AzResultSvgXmlNodeSvgParseErrorTT;
pub use AzResultSvgXmlNodeSvgParseErrorTT as AzResultSvgXmlNodeSvgParseError;
/// Destructor: Takes ownership of the `ResultSvgXmlNodeSvgParseError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzResultSvgXmlNodeSvgParseError_delete(
    object: &mut AzResultSvgXmlNodeSvgParseError,
) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
pub use azul_core::svg::ResultSvgSvgParseError as AzResultSvgSvgParseErrorTT;
pub use AzResultSvgSvgParseErrorTT as AzResultSvgSvgParseError;
/// Destructor: Takes ownership of the `ResultSvgSvgParseError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzResultSvgSvgParseError_delete(object: &mut AzResultSvgSvgParseError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgParseError` struct
pub use azul_layout::xml::svg::SvgParseError as AzSvgParseErrorTT;
pub use AzSvgParseErrorTT as AzSvgParseError;
/// Destructor: Takes ownership of the `SvgParseError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzSvgParseError_delete(object: &mut AzSvgParseError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `XmlError` struct
pub use azul_core::xml::XmlError as AzXmlErrorTT;
pub use AzXmlErrorTT as AzXmlError;
/// Destructor: Takes ownership of the `XmlError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXmlError_delete(object: &mut AzXmlError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
pub use azul_core::xml::DuplicatedNamespaceError as AzDuplicatedNamespaceErrorTT;
pub use AzDuplicatedNamespaceErrorTT as AzDuplicatedNamespaceError;
/// Destructor: Takes ownership of the `DuplicatedNamespaceError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDuplicatedNamespaceError_delete(object: &mut AzDuplicatedNamespaceError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
pub use azul_core::xml::UnknownNamespaceError as AzUnknownNamespaceErrorTT;
pub use AzUnknownNamespaceErrorTT as AzUnknownNamespaceError;
/// Destructor: Takes ownership of the `UnknownNamespaceError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzUnknownNamespaceError_delete(object: &mut AzUnknownNamespaceError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
pub use azul_core::xml::UnexpectedCloseTagError as AzUnexpectedCloseTagErrorTT;
pub use AzUnexpectedCloseTagErrorTT as AzUnexpectedCloseTagError;
/// Destructor: Takes ownership of the `UnexpectedCloseTagError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzUnexpectedCloseTagError_delete(object: &mut AzUnexpectedCloseTagError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
pub use azul_core::xml::UnknownEntityReferenceError as AzUnknownEntityReferenceErrorTT;
pub use AzUnknownEntityReferenceErrorTT as AzUnknownEntityReferenceError;
/// Destructor: Takes ownership of the `UnknownEntityReferenceError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzUnknownEntityReferenceError_delete(object: &mut AzUnknownEntityReferenceError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
pub use azul_core::xml::DuplicatedAttributeError as AzDuplicatedAttributeErrorTT;
pub use AzDuplicatedAttributeErrorTT as AzDuplicatedAttributeError;
/// Destructor: Takes ownership of the `DuplicatedAttributeError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzDuplicatedAttributeError_delete(object: &mut AzDuplicatedAttributeError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `XmlParseError` struct
pub use azul_core::xml::XmlParseError as AzXmlParseErrorTT;
pub use AzXmlParseErrorTT as AzXmlParseError;
/// Destructor: Takes ownership of the `XmlParseError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXmlParseError_delete(object: &mut AzXmlParseError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `XmlTextError` struct
pub use azul_core::xml::XmlTextError as AzXmlTextErrorTT;
pub use AzXmlTextErrorTT as AzXmlTextError;
/// Destructor: Takes ownership of the `XmlTextError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXmlTextError_delete(object: &mut AzXmlTextError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `XmlStreamError` struct
pub use azul_core::xml::XmlStreamError as AzXmlStreamErrorTT;
pub use AzXmlStreamErrorTT as AzXmlStreamError;
/// Destructor: Takes ownership of the `XmlStreamError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzXmlStreamError_delete(object: &mut AzXmlStreamError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `InvalidCharError` struct
pub use azul_core::xml::InvalidCharError as AzInvalidCharErrorTT;
/// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
pub use azul_core::xml::InvalidCharMultipleError as AzInvalidCharMultipleErrorTT;
/// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
pub use azul_core::xml::NonXmlCharError as AzNonXmlCharErrorTT;
pub use AzInvalidCharErrorTT as AzInvalidCharError;
pub use AzInvalidCharMultipleErrorTT as AzInvalidCharMultipleError;
pub use AzNonXmlCharErrorTT as AzNonXmlCharError;
/// Destructor: Takes ownership of the `InvalidCharMultipleError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInvalidCharMultipleError_delete(object: &mut AzInvalidCharMultipleError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
pub use azul_core::xml::InvalidQuoteError as AzInvalidQuoteErrorTT;
/// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
pub use azul_core::xml::InvalidSpaceError as AzInvalidSpaceErrorTT;
/// Re-export of rust-allocated (stack based) `InvalidStringError` struct
pub use azul_core::xml::InvalidStringError as AzInvalidStringErrorTT;
pub use AzInvalidQuoteErrorTT as AzInvalidQuoteError;
pub use AzInvalidSpaceErrorTT as AzInvalidSpaceError;
pub use AzInvalidStringErrorTT as AzInvalidStringError;
/// Destructor: Takes ownership of the `InvalidStringError` pointer and deletes it.
#[no_mangle]
pub extern "C" fn AzInvalidStringError_delete(object: &mut AzInvalidStringError) {
    unsafe {
        core::ptr::drop_in_place(object);
    }
}

/// Re-export of rust-allocated (stack based) `SvgParseErrorPosition` struct
pub use azul_core::xml::XmlTextPos as AzSvgParseErrorPositionTT;
pub use AzSvgParseErrorPositionTT as AzSvgParseErrorPosition;

#[cfg(all(test, not(feature = "rlib")))]
#[allow(dead_code)]
mod test_sizes {

    #[cfg(not(feature = "link-static"))]
    impl AzString {
        #[inline]
        pub fn as_str(&self) -> &str {
            unsafe { core::str::from_utf8_unchecked(self.as_bytes()) }
        }
        #[inline]
        pub fn as_bytes(&self) -> &[u8] {
            unsafe { core::slice::from_raw_parts(self.vec.ptr, self.vec.len) }
        }
    }

    #[cfg(not(feature = "link-static"))]
    pub use self::dummy::*;

    #[cfg(not(feature = "link-static"))]
    pub(crate) mod dummy {
        use super::*;
        impl ::core::fmt::Debug for AzCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzLayoutCallbackInner {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzMarshaledLayoutCallbackInner {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzRenderImageCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzIFrameCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzTimerCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzWriteBackCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzThreadDestructorFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzLibraryReceiveThreadMsgFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzLibrarySendThreadMsgFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzCheckThreadFinishedFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzGetSystemTimeFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzCreateThreadFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzThreadRecvFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzThreadReceiverDestructorFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzThreadSenderDestructorFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzInstantPtrDestructorFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzInstantPtrCloneFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzThreadSendFn {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzCheckBoxOnToggleCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzColorInputOnValueChangeCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzTextInputOnTextInputCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzTextInputOnVirtualKeyDownCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzTextInputOnFocusLostCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzNumberInputOnValueChangeCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }
        impl ::core::fmt::Debug for AzTabOnClickCallback {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                write!(f, "{:x}", self.cb as usize)
            }
        }

        impl ::core::fmt::Debug for AzDomVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzDomVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzIdOrClassVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzIdOrClassVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzNodeDataInlineCssPropertyVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzNodeDataInlineCssPropertyVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStyleBackgroundContentVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStyleBackgroundContentVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStyleBackgroundPositionVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStyleBackgroundPositionVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStyleBackgroundRepeatVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStyleBackgroundRepeatVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStyleBackgroundSizeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStyleBackgroundSizeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStyleTransformVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStyleTransformVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzCssPropertyVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzCssPropertyVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzSvgMultiPolygonVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzSvgMultiPolygonVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzSvgPathVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzSvgPathVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzVertexAttributeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzVertexAttributeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzSvgPathElementVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzSvgPathElementVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzSvgVertexVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzSvgVertexVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzSvgColoredVertexVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzSvgColoredVertexVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzU32VecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzU32VecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzXWindowTypeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzXWindowTypeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzVirtualKeyCodeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzVirtualKeyCodeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzCascadeInfoVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzCascadeInfoVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzScanCodeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzScanCodeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzCssDeclarationVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzCssDeclarationVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzCssPathSelectorVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzCssPathSelectorVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStylesheetVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStylesheetVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzCssRuleBlockVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzCssRuleBlockVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzU8VecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzU8VecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzCallbackDataVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzCallbackDataVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzDebugMessageVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzDebugMessageVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzGLuintVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzGLuintVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzGLintVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzGLintVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStringVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStringVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStringPairVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStringPairVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzNormalizedLinearColorStopVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzNormalizedLinearColorStopVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzNormalizedRadialColorStopVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzNormalizedRadialColorStopVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzNodeIdVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzNodeIdVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzNodeHierarchyItemVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzNodeHierarchyItemVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzStyledNodeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzStyledNodeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzTagIdToNodeIdMappingVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzTagIdToNodeIdMappingVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzParentWithNodeDepthVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzParentWithNodeDepthVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzNodeDataVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzNodeDataVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
        impl ::core::fmt::Debug for AzSvgSimpleNodeVecDestructor {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                use AzSvgSimpleNodeVecDestructor::*;
                match self {
                    DefaultRust => write!(f, "DefaultRust"),
                    NoDestructor => write!(f, "NoDestructor"),
                    External(_) => write!(f, "External"),
                }
            }
        }
    }
    /// Main application class
    #[repr(C)]
    pub struct AzApp {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// Configuration to set which messages should be logged.
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzAppLogLevel {
        Off,
        Error,
        Warn,
        Info,
        Debug,
        Trace,
    }

    /// Version of the layout solver to use - future binary versions of azul may have more fields
    /// here, necessary so that old compiled applications don't break with newer releases of azul.
    /// Newer layout versions are opt-in only.
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzLayoutSolver {
        Default,
    }

    /// Whether the renderer has VSync enabled
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzVsync {
        Enabled,
        Disabled,
        DontCare,
    }

    /// Does the renderer render in SRGB color space? By default, azul tries to set it to `Enabled`
    /// and falls back to `Disabled` if the OpenGL context can't be initialized properly
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzSrgb {
        Enabled,
        Disabled,
        DontCare,
    }

    /// Does the renderer render using hardware acceleration? By default, azul tries to set it to
    /// `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzHwAcceleration {
        Enabled,
        Disabled,
        DontCare,
    }

    /// Offset in physical pixels (integer units)
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzLayoutPoint {
        pub x: isize,
        pub y: isize,
    }

    /// Size in physical pixels (integer units)
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzLayoutSize {
        pub width: isize,
        pub height: isize,
    }

    /// Re-export of rust-allocated (stack based) `IOSHandle` struct
    #[repr(C)]
    pub struct AzIOSHandle {
        pub ui_window: *mut c_void,
        pub ui_view: *mut c_void,
        pub ui_view_controller: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `MacOSHandle` struct
    #[repr(C)]
    pub struct AzMacOSHandle {
        pub ns_window: *mut c_void,
        pub ns_view: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `XlibHandle` struct
    #[repr(C)]
    pub struct AzXlibHandle {
        pub window: u64,
        pub display: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `XcbHandle` struct
    #[repr(C)]
    pub struct AzXcbHandle {
        pub window: u32,
        pub connection: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `WaylandHandle` struct
    #[repr(C)]
    pub struct AzWaylandHandle {
        pub surface: *mut c_void,
        pub display: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `WindowsHandle` struct
    #[repr(C)]
    pub struct AzWindowsHandle {
        pub hwnd: *mut c_void,
        pub hinstance: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `WebHandle` struct
    #[repr(C)]
    pub struct AzWebHandle {
        pub id: u32,
    }

    /// Re-export of rust-allocated (stack based) `AndroidHandle` struct
    #[repr(C)]
    pub struct AzAndroidHandle {
        pub a_native_window: *mut c_void,
    }

    /// X11 window hint: Type of window
    #[repr(C)]
    pub enum AzXWindowType {
        Desktop,
        Dock,
        Toolbar,
        Menu,
        Utility,
        Splash,
        Dialog,
        DropdownMenu,
        PopupMenu,
        Tooltip,
        Notification,
        Combo,
        Dnd,
        Normal,
    }

    /// Same as `LayoutPoint`, but uses `i32` instead of `isize`
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzPhysicalPositionI32 {
        pub x: i32,
        pub y: i32,
    }

    /// Same as `LayoutPoint`, but uses `u32` instead of `isize`
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzPhysicalSizeU32 {
        pub width: u32,
        pub height: u32,
    }

    /// Logical position (can differ based on HiDPI settings). Usually this is what you'd want for
    /// hit-testing and positioning elements.
    #[repr(C)]
    #[derive(Default)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzLogicalPosition {
        pub x: f32,
        pub y: f32,
    }

    /// A size in "logical" (non-HiDPI-adjusted) pixels in floating-point units
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzLogicalSize {
        pub width: f32,
        pub height: f32,
    }

    /// Unique hash of a window icon, so that azul does not have to compare the actual bytes to see
    /// wether the window icon has changed.
    #[repr(C)]
    pub struct AzIconKey {
        pub id: usize,
    }

    /// Symbolic name for a keyboard key, does **not** take the keyboard locale into account
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzVirtualKeyCode {
        Key1,
        Key2,
        Key3,
        Key4,
        Key5,
        Key6,
        Key7,
        Key8,
        Key9,
        Key0,
        A,
        B,
        C,
        D,
        E,
        F,
        G,
        H,
        I,
        J,
        K,
        L,
        M,
        N,
        O,
        P,
        Q,
        R,
        S,
        T,
        U,
        V,
        W,
        X,
        Y,
        Z,
        Escape,
        F1,
        F2,
        F3,
        F4,
        F5,
        F6,
        F7,
        F8,
        F9,
        F10,
        F11,
        F12,
        F13,
        F14,
        F15,
        F16,
        F17,
        F18,
        F19,
        F20,
        F21,
        F22,
        F23,
        F24,
        Snapshot,
        Scroll,
        Pause,
        Insert,
        Home,
        Delete,
        End,
        PageDown,
        PageUp,
        Left,
        Up,
        Right,
        Down,
        Back,
        Return,
        Space,
        Compose,
        Caret,
        Numlock,
        Numpad0,
        Numpad1,
        Numpad2,
        Numpad3,
        Numpad4,
        Numpad5,
        Numpad6,
        Numpad7,
        Numpad8,
        Numpad9,
        NumpadAdd,
        NumpadDivide,
        NumpadDecimal,
        NumpadComma,
        NumpadEnter,
        NumpadEquals,
        NumpadMultiply,
        NumpadSubtract,
        AbntC1,
        AbntC2,
        Apostrophe,
        Apps,
        Asterisk,
        At,
        Ax,
        Backslash,
        Calculator,
        Capital,
        Colon,
        Comma,
        Convert,
        Equals,
        Grave,
        Kana,
        Kanji,
        LAlt,
        LBracket,
        LControl,
        LShift,
        LWin,
        Mail,
        MediaSelect,
        MediaStop,
        Minus,
        Mute,
        MyComputer,
        NavigateForward,
        NavigateBackward,
        NextTrack,
        NoConvert,
        OEM102,
        Period,
        PlayPause,
        Plus,
        Power,
        PrevTrack,
        RAlt,
        RBracket,
        RControl,
        RShift,
        RWin,
        Semicolon,
        Slash,
        Sleep,
        Stop,
        Sysrq,
        Tab,
        Underline,
        Unlabeled,
        VolumeDown,
        VolumeUp,
        Wake,
        WebBack,
        WebFavorites,
        WebForward,
        WebHome,
        WebRefresh,
        WebSearch,
        WebStop,
        Yen,
        Copy,
        Paste,
        Cut,
    }

    /// State of the window frame (minimized, maximized, fullscreen or normal window)
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzWindowFrame {
        Normal,
        Minimized,
        Maximized,
        Fullscreen,
    }

    /// Debugging information, will be rendered as an overlay on top of the UI
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzDebugState {
        pub profiler_dbg: bool,
        pub render_target_dbg: bool,
        pub texture_cache_dbg: bool,
        pub gpu_time_queries: bool,
        pub gpu_sample_queries: bool,
        pub disable_batching: bool,
        pub epochs: bool,
        pub echo_driver_messages: bool,
        pub show_overdraw: bool,
        pub gpu_cache_dbg: bool,
        pub texture_cache_dbg_clear_evicted: bool,
        pub picture_caching_dbg: bool,
        pub primitive_dbg: bool,
        pub zoom_dbg: bool,
        pub small_screen: bool,
        pub disable_opaque_pass: bool,
        pub disable_alpha_pass: bool,
        pub disable_clip_masks: bool,
        pub disable_text_prims: bool,
        pub disable_gradient_prims: bool,
        pub obscure_images: bool,
        pub glyph_flashing: bool,
        pub smart_profiler: bool,
        pub invalidation_dbg: bool,
        pub tile_cache_logging_dbg: bool,
        pub profiler_capture: bool,
        pub force_picture_invalidation: bool,
    }

    /// Current icon of the mouse cursor
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzMouseCursorType {
        Default,
        Crosshair,
        Hand,
        Arrow,
        Move,
        Text,
        Wait,
        Help,
        Progress,
        NotAllowed,
        ContextMenu,
        Cell,
        VerticalText,
        Alias,
        Copy,
        NoDrop,
        Grab,
        Grabbing,
        AllScroll,
        ZoomIn,
        ZoomOut,
        EResize,
        NResize,
        NeResize,
        NwResize,
        SResize,
        SeResize,
        SwResize,
        WResize,
        EwResize,
        NsResize,
        NeswResize,
        NwseResize,
        ColResize,
        RowResize,
    }

    /// Renderer type of the current windows OpenGL context
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzRendererType {
        Hardware,
        Software,
    }

    /// Re-export of rust-allocated (stack based) `MacWindowOptions` struct
    #[repr(C)]
    pub struct AzMacWindowOptions {
        pub _reserved: u8,
    }

    /// Re-export of rust-allocated (stack based) `WasmWindowOptions` struct
    #[repr(C)]
    pub struct AzWasmWindowOptions {
        pub _reserved: u8,
    }

    /// Re-export of rust-allocated (stack based) `FullScreenMode` struct
    #[repr(C)]
    pub enum AzFullScreenMode {
        SlowFullScreen,
        FastFullScreen,
        SlowWindowed,
        FastWindowed,
    }

    /// Window theme, set by the operating system or `WindowCreateOptions.theme` on startup
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzWindowTheme {
        DarkMode,
        LightMode,
    }

    /// Current state of touch devices / touch inputs
    #[repr(C)]
    pub struct AzTouchState {
        pub unused: u8,
    }

    /// C-ABI stable wrapper over a `MarshaledLayoutCallbackInner`
    #[repr(C)]
    pub struct AzMarshaledLayoutCallbackInner {
        pub cb: AzMarshaledLayoutCallbackType,
    }

    /// `AzMarshaledLayoutCallbackType` struct
    pub type AzMarshaledLayoutCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzRefAny, AzLayoutCallbackInfo) -> AzStyledDom;

    /// C-ABI stable wrapper over a `LayoutCallbackType`
    #[repr(C)]
    pub struct AzLayoutCallbackInner {
        pub cb: AzLayoutCallbackType,
    }

    /// `AzLayoutCallbackType` struct
    pub type AzLayoutCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzLayoutCallbackInfo) -> AzStyledDom;

    /// C-ABI stable wrapper over a `CallbackType`
    #[repr(C)]
    pub struct AzCallback {
        pub cb: AzCallbackType,
    }

    /// `AzCallbackType` struct
    pub type AzCallbackType = extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo) -> AzUpdate;

    /// Which type of image should be updated: background image (the CSS background) or content
    /// image (the <img src=""> content)
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzUpdateImageType {
        Background,
        Content,
    }

    /// Specifies if the screen should be updated after the callback function has returned
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzUpdate {
        DoNothing,
        RefreshDom,
        RefreshDomAllWindows,
    }

    /// Index of a Node in the internal `NodeDataContainer`
    #[repr(C)]
    pub struct AzNodeId {
        pub inner: usize,
    }

    /// ID of a DOM - one window can contain multiple, nested DOMs (such as iframes)
    #[repr(C)]
    pub struct AzDomId {
        pub inner: usize,
    }

    /// Re-export of rust-allocated (stack based) `PositionInfoInner` struct
    #[repr(C)]
    pub struct AzPositionInfoInner {
        pub x_offset: f32,
        pub y_offset: f32,
        pub static_x_offset: f32,
        pub static_y_offset: f32,
    }

    /// Re-export of rust-allocated (stack based) `ScriptType` struct
    #[repr(C)]
    pub enum AzScriptType {
        Mixed,
        LTR,
        RTL,
    }

    /// How should an animation repeat (loop, ping-pong, etc.)
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzAnimationRepeat {
        NoRepeat,
        Loop,
        PingPong,
    }

    /// How many times should an animation repeat
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzAnimationRepeatCount {
        Times(usize),
        Infinite,
    }

    /// C-ABI wrapper over an `IFrameCallbackType`
    #[repr(C)]
    pub struct AzIFrameCallback {
        pub cb: AzIFrameCallbackType,
    }

    /// `AzIFrameCallbackType` struct
    pub type AzIFrameCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzIFrameCallbackInfo) -> AzIFrameCallbackReturn;

    /// Re-export of rust-allocated (stack based) `RenderImageCallback` struct
    #[repr(C)]
    pub struct AzRenderImageCallback {
        pub cb: AzRenderImageCallbackType,
    }

    /// `AzRenderImageCallbackType` struct
    pub type AzRenderImageCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzRenderImageCallbackInfo) -> AzImageRef;

    /// Re-export of rust-allocated (stack based) `TimerCallback` struct
    #[repr(C)]
    pub struct AzTimerCallback {
        pub cb: AzTimerCallbackType,
    }

    /// `AzTimerCallbackType` struct
    pub type AzTimerCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzTimerCallbackInfo) -> AzTimerCallbackReturn;

    /// `AzWriteBackCallbackType` struct
    pub type AzWriteBackCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzRefAny, &mut AzCallbackInfo) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `WriteBackCallback` struct
    #[repr(C)]
    pub struct AzWriteBackCallback {
        pub cb: AzWriteBackCallbackType,
    }

    /// Re-export of rust-allocated (stack based) `ThreadCallback` struct
    #[repr(C)]
    pub struct AzThreadCallback {
        pub cb: AzThreadCallbackType,
    }

    /// `AzThreadCallbackType` struct
    pub type AzThreadCallbackType = extern "C" fn(AzRefAny, AzThreadSender, AzThreadReceiver);

    /// `AzRefAnyDestructorType` struct
    pub type AzRefAnyDestructorType = extern "C" fn(&mut c_void);

    /// Re-export of rust-allocated (stack based) `RefCount` struct
    #[repr(C)]
    pub struct AzRefCount {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.
    #[repr(C)]
    pub enum AzOn {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        MiddleMouseDown,
        RightMouseDown,
        MouseUp,
        LeftMouseUp,
        MiddleMouseUp,
        RightMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        FocusReceived,
        FocusLost,
    }

    /// Re-export of rust-allocated (stack based) `HoverEventFilter` struct
    #[repr(C)]
    pub enum AzHoverEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        TouchStart,
        TouchMove,
        TouchEnd,
        TouchCancel,
    }

    /// Re-export of rust-allocated (stack based) `FocusEventFilter` struct
    #[repr(C)]
    pub enum AzFocusEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        FocusReceived,
        FocusLost,
    }

    /// Re-export of rust-allocated (stack based) `WindowEventFilter` struct
    #[repr(C)]
    pub enum AzWindowEventFilter {
        MouseOver,
        MouseDown,
        LeftMouseDown,
        RightMouseDown,
        MiddleMouseDown,
        MouseUp,
        LeftMouseUp,
        RightMouseUp,
        MiddleMouseUp,
        MouseEnter,
        MouseLeave,
        Scroll,
        ScrollStart,
        ScrollEnd,
        TextInput,
        VirtualKeyDown,
        VirtualKeyUp,
        HoveredFile,
        DroppedFile,
        HoveredFileCancelled,
        Resized,
        Moved,
        TouchStart,
        TouchMove,
        TouchEnd,
        TouchCancel,
        FocusReceived,
        FocusLost,
        CloseRequested,
        ThemeChanged,
    }

    /// Re-export of rust-allocated (stack based) `ComponentEventFilter` struct
    #[repr(C)]
    pub enum AzComponentEventFilter {
        AfterMount,
        BeforeUnmount,
        NodeResized,
        DefaultAction,
        Selected,
    }

    /// Re-export of rust-allocated (stack based) `ApplicationEventFilter` struct
    #[repr(C)]
    pub enum AzApplicationEventFilter {
        DeviceConnected,
        DeviceDisconnected,
    }

    /// MSAA Accessibility role constants. For information on what each role does, see the <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/object-roles">MSDN Role Constants page</a>
    #[repr(C)]
    pub enum AzAccessibilityRole {
        TitleBar,
        MenuBar,
        ScrollBar,
        Grip,
        Sound,
        Cursor,
        Caret,
        Alert,
        Window,
        Client,
        MenuPopup,
        MenuItem,
        Tooltip,
        Application,
        Document,
        Pane,
        Chart,
        Dialog,
        Border,
        Grouping,
        Separator,
        Toolbar,
        StatusBar,
        Table,
        ColumnHeader,
        RowHeader,
        Column,
        Row,
        Cell,
        Link,
        HelpBalloon,
        Character,
        List,
        ListItem,
        Outline,
        OutlineItem,
        Pagetab,
        PropertyPage,
        Indicator,
        Graphic,
        StaticText,
        Text,
        PushButton,
        CheckButton,
        RadioButton,
        ComboBox,
        DropList,
        ProgressBar,
        Dial,
        HotkeyField,
        Slider,
        SpinButton,
        Diagram,
        Animation,
        Equation,
        ButtonDropdown,
        ButtonMenu,
        ButtonDropdownGrid,
        Whitespace,
        PageTabList,
        Clock,
        SplitButton,
        IpAddress,
        Nothing,
    }

    /// MSAA accessibility state. For information on what each state does, see the <a href="https://docs.microsoft.com/en-us/windows/win32/winauto/object-state-constants">MSDN State Constants page</a>.
    #[repr(C)]
    pub enum AzAccessibilityState {
        Unavailable,
        Selected,
        Focused,
        Checked,
        Readonly,
        Default,
        Expanded,
        Collapsed,
        Busy,
        Offscreen,
        Focusable,
        Selectable,
        Linked,
        Traversed,
        Multiselectable,
        Protected,
    }

    /// Re-export of rust-allocated (stack based) `TabIndex` struct
    #[repr(C, u8)]
    pub enum AzTabIndex {
        Auto,
        OverrideInParent(u32),
        NoKeyboardFocus,
    }

    /// Determines whether this context menu should pop up on a left, right or middle click
    #[repr(C)]
    pub enum AzContextMenuMouseButton {
        Right,
        Middle,
        Left,
    }

    /// Position of where the context menu should pop up
    #[repr(C)]
    pub enum AzMenuPopupPosition {
        BottomLeftOfCursor,
        BottomRightOfCursor,
        TopLeftOfCursor,
        TopRightOfCursor,
        BottomOfHitRect,
        LeftOfHitRect,
        TopOfHitRect,
        RightOfHitRect,
        AutoCursor,
        AutoHitRect,
    }

    /// Describes the state of a menu item
    #[repr(C)]
    pub enum AzMenuItemState {
        Normal,
        Greyed,
        Disabled,
    }

    /// Re-export of rust-allocated (stack based) `NodeTypeKey` struct
    #[repr(C)]
    pub enum AzNodeTypeKey {
        Body,
        Div,
        Br,
        P,
        Img,
        IFrame,
    }

    /// Re-export of rust-allocated (stack based) `CssNthChildPattern` struct
    #[repr(C)]
    pub struct AzCssNthChildPattern {
        pub repeat: u32,
        pub offset: u32,
    }

    /// Re-export of rust-allocated (stack based) `CssPropertyType` struct
    #[repr(C)]
    pub enum AzCssPropertyType {
        TextColor,
        FontSize,
        FontFamily,
        TextAlign,
        LetterSpacing,
        LineHeight,
        WordSpacing,
        TabWidth,
        Cursor,
        Display,
        Float,
        BoxSizing,
        Width,
        Height,
        MinWidth,
        MinHeight,
        MaxWidth,
        MaxHeight,
        Position,
        Top,
        Right,
        Left,
        Bottom,
        FlexWrap,
        FlexDirection,
        FlexGrow,
        FlexShrink,
        JustifyContent,
        AlignItems,
        AlignContent,
        BackgroundContent,
        BackgroundPosition,
        BackgroundSize,
        BackgroundRepeat,
        OverflowX,
        OverflowY,
        PaddingTop,
        PaddingLeft,
        PaddingRight,
        PaddingBottom,
        MarginTop,
        MarginLeft,
        MarginRight,
        MarginBottom,
        BorderTopLeftRadius,
        BorderTopRightRadius,
        BorderBottomLeftRadius,
        BorderBottomRightRadius,
        BorderTopColor,
        BorderRightColor,
        BorderLeftColor,
        BorderBottomColor,
        BorderTopStyle,
        BorderRightStyle,
        BorderLeftStyle,
        BorderBottomStyle,
        BorderTopWidth,
        BorderRightWidth,
        BorderLeftWidth,
        BorderBottomWidth,
        BoxShadowLeft,
        BoxShadowRight,
        BoxShadowTop,
        BoxShadowBottom,
        ScrollbarStyle,
        Opacity,
        Transform,
        TransformOrigin,
        PerspectiveOrigin,
        BackfaceVisibility,
        MixBlendMode,
        Filter,
        BackdropFilter,
        TextShadow,
    }

    /// Re-export of rust-allocated (stack based) `ColorU` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzColorU {
        pub r: u8,
        pub g: u8,
        pub b: u8,
        pub a: u8,
    }

    /// Re-export of rust-allocated (stack based) `SizeMetric` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzSizeMetric {
        Px,
        Pt,
        Em,
        Percent,
    }

    /// Re-export of rust-allocated (stack based) `BoxShadowClipMode` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzBoxShadowClipMode {
        Outset,
        Inset,
    }

    /// Re-export of rust-allocated (stack based) `StyleMixBlendMode` struct
    #[repr(C)]
    pub enum AzStyleMixBlendMode {
        Normal,
        Multiply,
        Screen,
        Overlay,
        Darken,
        Lighten,
        ColorDodge,
        ColorBurn,
        HardLight,
        SoftLight,
        Difference,
        Exclusion,
        Hue,
        Saturation,
        Color,
        Luminosity,
    }

    /// Re-export of rust-allocated (stack based) `LayoutAlignContent` struct
    #[repr(C)]
    pub enum AzLayoutAlignContent {
        Stretch,
        Center,
        Start,
        End,
        SpaceBetween,
        SpaceAround,
    }

    /// Re-export of rust-allocated (stack based) `LayoutAlignItems` struct
    #[repr(C)]
    pub enum AzLayoutAlignItems {
        Stretch,
        Center,
        FlexStart,
        FlexEnd,
    }

    /// Re-export of rust-allocated (stack based) `LayoutBoxSizing` struct
    #[repr(C)]
    pub enum AzLayoutBoxSizing {
        ContentBox,
        BorderBox,
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexDirection` struct
    #[repr(C)]
    pub enum AzLayoutFlexDirection {
        Row,
        RowReverse,
        Column,
        ColumnReverse,
    }

    /// Re-export of rust-allocated (stack based) `LayoutDisplay` struct
    #[repr(C)]
    pub enum AzLayoutDisplay {
        None,
        Flex,
        Block,
        InlineBlock,
    }

    /// Re-export of rust-allocated (stack based) `LayoutFloat` struct
    #[repr(C)]
    pub enum AzLayoutFloat {
        Left,
        Right,
        None,
    }

    /// Re-export of rust-allocated (stack based) `LayoutJustifyContent` struct
    #[repr(C)]
    pub enum AzLayoutJustifyContent {
        Start,
        End,
        Center,
        SpaceBetween,
        SpaceAround,
        SpaceEvenly,
    }

    /// Re-export of rust-allocated (stack based) `LayoutPosition` struct
    #[repr(C)]
    pub enum AzLayoutPosition {
        Static,
        Relative,
        Absolute,
        Fixed,
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexWrap` struct
    #[repr(C)]
    pub enum AzLayoutFlexWrap {
        Wrap,
        NoWrap,
    }

    /// Re-export of rust-allocated (stack based) `LayoutOverflow` struct
    #[repr(C)]
    pub enum AzLayoutOverflow {
        Scroll,
        Auto,
        Hidden,
        Visible,
    }

    /// Re-export of rust-allocated (stack based) `FloatValue` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzFloatValue {
        pub number: isize,
    }

    /// Re-export of rust-allocated (stack based) `AngleMetric` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzAngleMetric {
        Degree,
        Radians,
        Grad,
        Turn,
        Percent,
    }

    /// Re-export of rust-allocated (stack based) `DirectionCorner` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzDirectionCorner {
        Right,
        Left,
        Top,
        Bottom,
        TopRight,
        TopLeft,
        BottomRight,
        BottomLeft,
    }

    /// Re-export of rust-allocated (stack based) `ExtendMode` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzExtendMode {
        Clamp,
        Repeat,
    }

    /// Re-export of rust-allocated (stack based) `Shape` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzShape {
        Ellipse,
        Circle,
    }

    /// Re-export of rust-allocated (stack based) `RadialGradientSize` struct
    #[repr(C)]
    pub enum AzRadialGradientSize {
        ClosestSide,
        ClosestCorner,
        FarthestSide,
        FarthestCorner,
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeat` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzStyleBackgroundRepeat {
        NoRepeat,
        Repeat,
        RepeatX,
        RepeatY,
    }

    /// Re-export of rust-allocated (stack based) `BorderStyle` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzBorderStyle {
        None,
        Solid,
        Double,
        Dotted,
        Dashed,
        Hidden,
        Groove,
        Ridge,
        Inset,
        Outset,
    }

    /// Re-export of rust-allocated (stack based) `StyleCursor` struct
    #[repr(C)]
    pub enum AzStyleCursor {
        Alias,
        AllScroll,
        Cell,
        ColResize,
        ContextMenu,
        Copy,
        Crosshair,
        Default,
        EResize,
        EwResize,
        Grab,
        Grabbing,
        Help,
        Move,
        NResize,
        NsResize,
        NeswResize,
        NwseResize,
        Pointer,
        Progress,
        RowResize,
        SResize,
        SeResize,
        Text,
        Unset,
        VerticalText,
        WResize,
        Wait,
        ZoomIn,
        ZoomOut,
    }

    /// Re-export of rust-allocated (stack based) `StyleBackfaceVisibility` struct
    #[repr(C)]
    pub enum AzStyleBackfaceVisibility {
        Hidden,
        Visible,
    }

    /// Re-export of rust-allocated (stack based) `StyleTextAlign` struct
    #[repr(C)]
    pub enum AzStyleTextAlign {
        Left,
        Center,
        Right,
        Justify,
    }

    /// Re-export of rust-allocated (stack based) `Ribbon` struct
    #[repr(C)]
    pub struct AzRibbon {
        pub tab_active: i32,
    }

    /// Re-export of rust-allocated (stack based) `RibbonOnTabClickedCallback` struct
    #[repr(C)]
    pub struct AzRibbonOnTabClickedCallback {
        pub cb: AzRibbonOnTabClickedCallbackType,
    }

    /// `AzRibbonOnTabClickedCallbackType` struct
    pub type AzRibbonOnTabClickedCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, i32) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `FileInputOnPathChangeCallback` struct
    #[repr(C)]
    pub struct AzFileInputOnPathChangeCallback {
        pub cb: AzFileInputOnPathChangeCallbackType,
    }

    /// `AzFileInputOnPathChangeCallbackType` struct
    pub type AzFileInputOnPathChangeCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzFileInputState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `CheckBoxOnToggleCallback` struct
    #[repr(C)]
    pub struct AzCheckBoxOnToggleCallback {
        pub cb: AzCheckBoxOnToggleCallbackType,
    }

    /// `AzCheckBoxOnToggleCallbackType` struct
    pub type AzCheckBoxOnToggleCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzCheckBoxState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `CheckBoxState` struct
    #[repr(C)]
    pub struct AzCheckBoxState {
        pub checked: bool,
    }

    /// Re-export of rust-allocated (stack based) `ColorInputOnValueChangeCallback` struct
    #[repr(C)]
    pub struct AzColorInputOnValueChangeCallback {
        pub cb: AzColorInputOnValueChangeCallbackType,
    }

    /// `AzColorInputOnValueChangeCallbackType` struct
    pub type AzColorInputOnValueChangeCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzColorInputState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `TextInputSelectionRange` struct
    #[repr(C)]
    pub struct AzTextInputSelectionRange {
        pub from: usize,
        pub to: usize,
    }

    /// Re-export of rust-allocated (stack based) `TextInputOnTextInputCallback` struct
    #[repr(C)]
    pub struct AzTextInputOnTextInputCallback {
        pub cb: AzTextInputOnTextInputCallbackType,
    }

    /// `AzTextInputOnTextInputCallbackType` struct
    pub type AzTextInputOnTextInputCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTextInputState) -> AzOnTextInputReturn;

    /// Re-export of rust-allocated (stack based) `TextInputOnVirtualKeyDownCallback` struct
    #[repr(C)]
    pub struct AzTextInputOnVirtualKeyDownCallback {
        pub cb: AzTextInputOnVirtualKeyDownCallbackType,
    }

    /// `AzTextInputOnVirtualKeyDownCallbackType` struct
    pub type AzTextInputOnVirtualKeyDownCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTextInputState) -> AzOnTextInputReturn;

    /// Re-export of rust-allocated (stack based) `TextInputOnFocusLostCallback` struct
    #[repr(C)]
    pub struct AzTextInputOnFocusLostCallback {
        pub cb: AzTextInputOnFocusLostCallbackType,
    }

    /// `AzTextInputOnFocusLostCallbackType` struct
    pub type AzTextInputOnFocusLostCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTextInputState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `TextInputValid` struct
    #[repr(C)]
    pub enum AzTextInputValid {
        Yes,
        No,
    }

    /// Re-export of rust-allocated (stack based) `NumberInputState` struct
    #[repr(C)]
    pub struct AzNumberInputState {
        pub previous: f32,
        pub number: f32,
        pub min: f32,
        pub max: f32,
    }

    /// Re-export of rust-allocated (stack based) `NumberInputOnValueChangeCallback` struct
    #[repr(C)]
    pub struct AzNumberInputOnValueChangeCallback {
        pub cb: AzNumberInputOnValueChangeCallbackType,
    }

    /// `AzNumberInputOnValueChangeCallbackType` struct
    pub type AzNumberInputOnValueChangeCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzNumberInputState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NumberInputOnFocusLostCallback` struct
    #[repr(C)]
    pub struct AzNumberInputOnFocusLostCallback {
        pub cb: AzNumberInputOnFocusLostCallbackType,
    }

    /// `AzNumberInputOnFocusLostCallbackType` struct
    pub type AzNumberInputOnFocusLostCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzNumberInputState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `ProgressBarState` struct
    #[repr(C)]
    pub struct AzProgressBarState {
        pub percent_done: f32,
        pub display_percentage: bool,
    }

    /// Re-export of rust-allocated (stack based) `TabHeaderState` struct
    #[repr(C)]
    pub struct AzTabHeaderState {
        pub active_tab: usize,
    }

    /// Re-export of rust-allocated (stack based) `TabOnClickCallback` struct
    #[repr(C)]
    pub struct AzTabOnClickCallback {
        pub cb: AzTabOnClickCallbackType,
    }

    /// `AzTabOnClickCallbackType` struct
    pub type AzTabOnClickCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzTabHeaderState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphStyle` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzNodeGraphStyle {
        Default,
    }

    /// `AzNodeGraphOnNodeAddedCallbackType` struct
    pub type AzNodeGraphOnNodeAddedCallbackType = extern "C" fn(
        &mut AzRefAny,
        &mut AzCallbackInfo,
        AzNodeTypeId,
        AzNodeGraphNodeId,
        AzNodePosition,
    ) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeAddedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeAddedCallback {
        pub cb: AzNodeGraphOnNodeAddedCallbackType,
    }

    /// `AzNodeGraphOnNodeRemovedCallbackType` struct
    pub type AzNodeGraphOnNodeRemovedCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzNodeGraphNodeId) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeRemovedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeRemovedCallback {
        pub cb: AzNodeGraphOnNodeRemovedCallbackType,
    }

    /// `AzNodeGraphOnNodeGraphDraggedCallbackType` struct
    pub type AzNodeGraphOnNodeGraphDraggedCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzGraphDragAmount) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeGraphDraggedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeGraphDraggedCallback {
        pub cb: AzNodeGraphOnNodeGraphDraggedCallbackType,
    }

    /// `AzNodeGraphOnNodeDraggedCallbackType` struct
    pub type AzNodeGraphOnNodeDraggedCallbackType = extern "C" fn(
        &mut AzRefAny,
        &mut AzCallbackInfo,
        AzNodeGraphNodeId,
        AzNodeDragAmount,
    ) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeDraggedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeDraggedCallback {
        pub cb: AzNodeGraphOnNodeDraggedCallbackType,
    }

    /// `AzNodeGraphOnNodeConnectedCallbackType` struct
    pub type AzNodeGraphOnNodeConnectedCallbackType = extern "C" fn(
        &mut AzRefAny,
        &mut AzCallbackInfo,
        AzNodeGraphNodeId,
        usize,
        AzNodeGraphNodeId,
        usize,
    ) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeConnectedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeConnectedCallback {
        pub cb: AzNodeGraphOnNodeConnectedCallbackType,
    }

    /// `AzNodeGraphOnNodeInputDisconnectedCallbackType` struct
    pub type AzNodeGraphOnNodeInputDisconnectedCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzNodeGraphNodeId, usize) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeInputDisconnectedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeInputDisconnectedCallback {
        pub cb: AzNodeGraphOnNodeInputDisconnectedCallbackType,
    }

    /// `AzNodeGraphOnNodeOutputDisconnectedCallbackType` struct
    pub type AzNodeGraphOnNodeOutputDisconnectedCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, AzNodeGraphNodeId, usize) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeOutputDisconnectedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeOutputDisconnectedCallback {
        pub cb: AzNodeGraphOnNodeOutputDisconnectedCallbackType,
    }

    /// `AzNodeGraphOnNodeFieldEditedCallbackType` struct
    pub type AzNodeGraphOnNodeFieldEditedCallbackType = extern "C" fn(
        &mut AzRefAny,
        &mut AzCallbackInfo,
        AzNodeGraphNodeId,
        usize,
        AzNodeTypeId,
        AzNodeTypeFieldValue,
    ) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeFieldEditedCallback` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeFieldEditedCallback {
        pub cb: AzNodeGraphOnNodeFieldEditedCallbackType,
    }

    /// Re-export of rust-allocated (stack based) `InputOutputTypeId` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    #[cfg_attr(feature = "serde-support", serde(transparent))]
    pub struct AzInputOutputTypeId {
        pub inner: u64,
    }

    /// Re-export of rust-allocated (stack based) `NodeTypeId` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    #[cfg_attr(feature = "serde-support", serde(transparent))]
    pub struct AzNodeTypeId {
        pub inner: u64,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphNodeId` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    #[cfg_attr(feature = "serde-support", serde(transparent))]
    pub struct AzNodeGraphNodeId {
        pub inner: u64,
    }

    /// Re-export of rust-allocated (stack based) `NodePosition` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNodePosition {
        pub x: f32,
        pub y: f32,
    }

    /// Re-export of rust-allocated (stack based) `GraphDragAmount` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzGraphDragAmount {
        pub x: f32,
        pub y: f32,
    }

    /// Re-export of rust-allocated (stack based) `NodeDragAmount` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNodeDragAmount {
        pub x: f32,
        pub y: f32,
    }

    /// `AzListViewOnLazyLoadScrollCallbackType` struct
    pub type AzListViewOnLazyLoadScrollCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzListViewState) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `ListViewOnLazyLoadScrollCallback` struct
    #[repr(C)]
    pub struct AzListViewOnLazyLoadScrollCallback {
        pub cb: AzListViewOnLazyLoadScrollCallbackType,
    }

    /// `AzListViewOnColumnClickCallbackType` struct
    pub type AzListViewOnColumnClickCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzListViewState, usize) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `ListViewOnColumnClickCallback` struct
    #[repr(C)]
    pub struct AzListViewOnColumnClickCallback {
        pub cb: AzListViewOnColumnClickCallbackType,
    }

    /// `AzListViewOnRowClickCallbackType` struct
    pub type AzListViewOnRowClickCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, &AzListViewState, usize) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `ListViewOnRowClickCallback` struct
    #[repr(C)]
    pub struct AzListViewOnRowClickCallback {
        pub cb: AzListViewOnRowClickCallbackType,
    }

    /// `AzDropDownOnChoiceChangeCallbackType` struct
    pub type AzDropDownOnChoiceChangeCallbackType =
        extern "C" fn(&mut AzRefAny, &mut AzCallbackInfo, usize) -> AzUpdate;

    /// Re-export of rust-allocated (stack based) `DropDownOnChoiceChangeCallback` struct
    #[repr(C)]
    pub struct AzDropDownOnChoiceChangeCallback {
        pub cb: AzDropDownOnChoiceChangeCallbackType,
    }

    /// Re-export of rust-allocated (stack based) `NodeHierarchyItem` struct
    #[repr(C)]
    pub struct AzNodeHierarchyItem {
        pub parent: usize,
        pub previous_sibling: usize,
        pub next_sibling: usize,
        pub last_child: usize,
    }

    /// Re-export of rust-allocated (stack based) `CascadeInfo` struct
    #[repr(C)]
    pub struct AzCascadeInfo {
        pub index_in_parent: u32,
        pub is_last_child: bool,
    }

    /// Re-export of rust-allocated (stack based) `StyledNodeState` struct
    #[repr(C)]
    pub struct AzStyledNodeState {
        pub normal: bool,
        pub hover: bool,
        pub active: bool,
        pub focused: bool,
    }

    /// Re-export of rust-allocated (stack based) `TagId` struct
    #[repr(C)]
    pub struct AzTagId {
        pub inner: u64,
    }

    /// Re-export of rust-allocated (stack based) `CssPropertyCache` struct
    #[repr(C)]
    pub struct AzCssPropertyCache {
        pub(crate) ptr: *mut c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `GlVoidPtrConst` struct
    #[repr(C)]
    pub struct AzGlVoidPtrConst {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `GlVoidPtrMut` struct
    #[repr(C)]
    pub struct AzGlVoidPtrMut {
        pub(crate) ptr: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `GlShaderPrecisionFormatReturn` struct
    #[repr(C)]
    pub struct AzGlShaderPrecisionFormatReturn {
        pub _0: i32,
        pub _1: i32,
        pub _2: i32,
    }

    /// Re-export of rust-allocated (stack based) `VertexAttributeType` struct
    #[repr(C)]
    pub enum AzVertexAttributeType {
        Float,
        Double,
        UnsignedByte,
        UnsignedShort,
        UnsignedInt,
    }

    /// Re-export of rust-allocated (stack based) `IndexBufferFormat` struct
    #[repr(C)]
    pub enum AzIndexBufferFormat {
        Points,
        Lines,
        LineStrip,
        Triangles,
        TriangleStrip,
        TriangleFan,
    }

    /// Re-export of rust-allocated (stack based) `GlType` struct
    #[repr(C)]
    pub enum AzGlType {
        Gl,
        Gles,
    }

    /// C-ABI stable reexport of `&[u8]`
    #[repr(C)]
    pub struct AzU8VecRef {
        pub(crate) ptr: *const u8,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&mut [u8]`
    #[repr(C)]
    pub struct AzU8VecRefMut {
        pub(crate) ptr: *mut u8,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&[f32]`
    #[repr(C)]
    pub struct AzF32VecRef {
        pub(crate) ptr: *const f32,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&[i32]`
    #[repr(C)]
    pub struct AzI32VecRef {
        pub(crate) ptr: *const i32,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&[GLuint]` aka `&[u32]`
    #[repr(C)]
    pub struct AzGLuintVecRef {
        pub(crate) ptr: *const u32,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&[GLenum]` aka `&[u32]`
    #[repr(C)]
    pub struct AzGLenumVecRef {
        pub(crate) ptr: *const u32,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`
    #[repr(C)]
    pub struct AzGLintVecRefMut {
        pub(crate) ptr: *mut i32,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`
    #[repr(C)]
    pub struct AzGLint64VecRefMut {
        pub(crate) ptr: *mut i64,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`
    #[repr(C)]
    pub struct AzGLbooleanVecRefMut {
        pub(crate) ptr: *mut u8,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`
    #[repr(C)]
    pub struct AzGLfloatVecRefMut {
        pub(crate) ptr: *mut f32,
        pub len: usize,
    }

    /// C-ABI stable reexport of `&str`
    #[repr(C)]
    pub struct AzRefstr {
        pub(crate) ptr: *const u8,
        pub len: usize,
    }

    /// C-ABI stable reexport of `*const gleam::gl::GLsync`
    #[repr(C)]
    pub struct AzGLsyncPtr {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `TextureFlags` struct
    #[repr(C)]
    pub struct AzTextureFlags {
        pub is_opaque: bool,
        pub is_video_texture: bool,
    }

    /// Re-export of rust-allocated (stack based) `ImageRef` struct
    #[repr(C)]
    pub struct AzImageRef {
        pub data: *const c_void,
        pub copies: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `RawImageFormat` struct
    #[repr(C)]
    pub enum AzRawImageFormat {
        R8,
        RG8,
        RGB8,
        RGBA8,
        R16,
        RG16,
        RGB16,
        RGBA16,
        BGR8,
        BGRA8,
    }

    /// Re-export of rust-allocated (stack based) `EncodeImageError` struct
    #[repr(C)]
    pub enum AzEncodeImageError {
        EncoderNotAvailable,
        InsufficientMemory,
        DimensionError,
        InvalidData,
        Unknown,
    }

    /// Re-export of rust-allocated (stack based) `DecodeImageError` struct
    #[repr(C)]
    pub enum AzDecodeImageError {
        InsufficientMemory,
        DimensionError,
        UnsupportedImageFormat,
        Unknown,
    }

    /// `AzParsedFontDestructorFnType` struct
    pub type AzParsedFontDestructorFnType = extern "C" fn(&mut c_void);

    /// Atomically reference-counted parsed font data
    #[repr(C)]
    pub struct AzFontRef {
        pub data: *const c_void,
        pub copies: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `Svg` struct
    #[repr(C)]
    pub struct AzSvg {
        pub(crate) ptr: *mut c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `SvgXmlNode` struct
    #[repr(C)]
    pub struct AzSvgXmlNode {
        pub(crate) ptr: *mut c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `SvgCircle` struct
    #[repr(C)]
    pub struct AzSvgCircle {
        pub center_x: f32,
        pub center_y: f32,
        pub radius: f32,
    }

    /// Re-export of rust-allocated (stack based) `SvgPoint` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgPoint {
        pub x: f32,
        pub y: f32,
    }

    /// Re-export of rust-allocated (stack based) `SvgVector` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgVector {
        pub x: f64,
        pub y: f64,
    }

    /// Re-export of rust-allocated (stack based) `SvgRect` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgRect {
        pub width: f32,
        pub height: f32,
        pub x: f32,
        pub y: f32,
        pub radius_top_left: f32,
        pub radius_top_right: f32,
        pub radius_bottom_left: f32,
        pub radius_bottom_right: f32,
    }

    /// Re-export of rust-allocated (stack based) `SvgColoredVertex` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgColoredVertex {
        pub x: f32,
        pub y: f32,
        pub z: f32,
        pub r: f32,
        pub g: f32,
        pub b: f32,
        pub a: f32,
    }

    /// Re-export of rust-allocated (stack based) `SvgVertex` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgVertex {
        pub x: f32,
        pub y: f32,
    }

    /// Re-export of rust-allocated (stack based) `ShapeRendering` struct
    #[repr(C)]
    pub enum AzShapeRendering {
        OptimizeSpeed,
        CrispEdges,
        GeometricPrecision,
    }

    /// Re-export of rust-allocated (stack based) `TextRendering` struct
    #[repr(C)]
    pub enum AzTextRendering {
        OptimizeSpeed,
        OptimizeLegibility,
        GeometricPrecision,
    }

    /// Re-export of rust-allocated (stack based) `ImageRendering` struct
    #[repr(C)]
    pub enum AzImageRendering {
        OptimizeQuality,
        OptimizeSpeed,
    }

    /// Re-export of rust-allocated (stack based) `FontDatabase` struct
    #[repr(C)]
    pub enum AzFontDatabase {
        Empty,
        System,
    }

    /// Re-export of rust-allocated (stack based) `SvgRenderTransform` struct
    #[repr(C)]
    pub struct AzSvgRenderTransform {
        pub sx: f32,
        pub kx: f32,
        pub ky: f32,
        pub sy: f32,
        pub tx: f32,
        pub ty: f32,
    }

    /// Re-export of rust-allocated (stack based) `Indent` struct
    #[repr(C, u8)]
    pub enum AzIndent {
        None,
        Spaces(u8),
        Tabs,
    }

    /// Re-export of rust-allocated (stack based) `SvgFitTo` struct
    #[repr(C, u8)]
    pub enum AzSvgFitTo {
        Original,
        Width(u32),
        Height(u32),
        Zoom(f32),
    }

    /// Re-export of rust-allocated (stack based) `SvgFillRule` struct
    #[repr(C)]
    pub enum AzSvgFillRule {
        Winding,
        EvenOdd,
    }

    /// Re-export of rust-allocated (stack based) `SvgTransform` struct
    #[repr(C)]
    pub struct AzSvgTransform {
        pub sx: f32,
        pub kx: f32,
        pub ky: f32,
        pub sy: f32,
        pub tx: f32,
        pub ty: f32,
    }

    /// Re-export of rust-allocated (stack based) `SvgLineJoin` struct
    #[repr(C)]
    pub enum AzSvgLineJoin {
        Miter,
        MiterClip,
        Round,
        Bevel,
    }

    /// Re-export of rust-allocated (stack based) `SvgLineCap` struct
    #[repr(C)]
    pub enum AzSvgLineCap {
        Butt,
        Square,
        Round,
    }

    /// Re-export of rust-allocated (stack based) `SvgDashPattern` struct
    #[repr(C)]
    pub struct AzSvgDashPattern {
        pub offset: f32,
        pub length_1: f32,
        pub gap_1: f32,
        pub length_2: f32,
        pub gap_2: f32,
        pub length_3: f32,
        pub gap_3: f32,
    }

    /// Re-export of rust-allocated (stack based) `MsgBox` struct
    #[repr(C)]
    pub struct AzMsgBox {
        pub _reserved: usize,
    }

    /// Type of message box icon
    #[repr(C)]
    pub enum AzMsgBoxIcon {
        Info,
        Warning,
        Error,
        Question,
    }

    /// Value returned from a yes / no message box
    #[repr(C)]
    pub enum AzMsgBoxYesNo {
        Yes,
        No,
    }

    /// Value returned from an ok / cancel message box
    #[repr(C)]
    pub enum AzMsgBoxOkCancel {
        Ok,
        Cancel,
    }

    /// File picker dialog
    #[repr(C)]
    pub struct AzFileDialog {
        pub _reserved: usize,
    }

    /// Re-export of rust-allocated (stack based) `ColorPickerDialog` struct
    #[repr(C)]
    pub struct AzColorPickerDialog {
        pub _reserved: usize,
    }

    /// Connection to the system clipboard, on some systems this connection can be cached
    #[repr(C)]
    pub struct AzSystemClipboard {
        pub _native: *const c_void,
        pub run_destructor: bool,
    }

    /// `AzInstantPtrCloneFnType` struct
    pub type AzInstantPtrCloneFnType = extern "C" fn(&AzInstantPtr) -> AzInstantPtr;

    /// Re-export of rust-allocated (stack based) `InstantPtrCloneFn` struct
    #[repr(C)]
    pub struct AzInstantPtrCloneFn {
        pub cb: AzInstantPtrCloneFnType,
    }

    /// `AzInstantPtrDestructorFnType` struct
    pub type AzInstantPtrDestructorFnType = extern "C" fn(&mut AzInstantPtr);

    /// Re-export of rust-allocated (stack based) `InstantPtrDestructorFn` struct
    #[repr(C)]
    pub struct AzInstantPtrDestructorFn {
        pub cb: AzInstantPtrDestructorFnType,
    }

    /// Re-export of rust-allocated (stack based) `SystemTick` struct
    #[repr(C)]
    pub struct AzSystemTick {
        pub tick_counter: u64,
    }

    /// Re-export of rust-allocated (stack based) `SystemTimeDiff` struct
    #[repr(C)]
    pub struct AzSystemTimeDiff {
        pub secs: u64,
        pub nanos: u32,
    }

    /// Re-export of rust-allocated (stack based) `SystemTickDiff` struct
    #[repr(C)]
    pub struct AzSystemTickDiff {
        pub tick_diff: u64,
    }

    /// Re-export of rust-allocated (stack based) `TimerId` struct
    #[repr(C)]
    pub struct AzTimerId {
        pub id: usize,
    }

    /// Should a timer terminate or not - used to remove active timers
    #[repr(C)]
    pub enum AzTerminateTimer {
        Terminate,
        Continue,
    }

    /// Re-export of rust-allocated (stack based) `ThreadId` struct
    #[repr(C)]
    pub struct AzThreadId {
        pub id: usize,
    }

    /// Re-export of rust-allocated (stack based) `Thread` struct
    #[repr(C)]
    pub struct AzThread {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `ThreadSender` struct
    #[repr(C)]
    pub struct AzThreadSender {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `ThreadReceiver` struct
    #[repr(C)]
    pub struct AzThreadReceiver {
        pub(crate) ptr: *const c_void,
        pub run_destructor: bool,
    }

    /// `AzCreateThreadFnType` struct
    pub type AzCreateThreadFnType = extern "C" fn(AzRefAny, AzRefAny, AzThreadCallback) -> AzThread;

    /// Re-export of rust-allocated (stack based) `CreateThreadFn` struct
    #[repr(C)]
    pub struct AzCreateThreadFn {
        pub cb: AzCreateThreadFnType,
    }

    /// `AzGetSystemTimeFnType` struct
    pub type AzGetSystemTimeFnType = extern "C" fn() -> AzInstant;

    /// Get the current system time, equivalent to `std::time::Instant::now()`, except it also works
    /// on systems that work with "ticks" instead of timers
    #[repr(C)]
    pub struct AzGetSystemTimeFn {
        pub cb: AzGetSystemTimeFnType,
    }

    /// `AzCheckThreadFinishedFnType` struct
    pub type AzCheckThreadFinishedFnType = extern "C" fn(&c_void) -> bool;

    /// Function called to check if the thread has finished
    #[repr(C)]
    pub struct AzCheckThreadFinishedFn {
        pub cb: AzCheckThreadFinishedFnType,
    }

    /// `AzLibrarySendThreadMsgFnType` struct
    pub type AzLibrarySendThreadMsgFnType = extern "C" fn(&c_void, AzThreadSendMsg) -> bool;

    /// Function to send a message to the thread
    #[repr(C)]
    pub struct AzLibrarySendThreadMsgFn {
        pub cb: AzLibrarySendThreadMsgFnType,
    }

    /// `AzLibraryReceiveThreadMsgFnType` struct
    pub type AzLibraryReceiveThreadMsgFnType = extern "C" fn(&c_void) -> AzOptionThreadReceiveMsg;

    /// Function to receive a message from the thread
    #[repr(C)]
    pub struct AzLibraryReceiveThreadMsgFn {
        pub cb: AzLibraryReceiveThreadMsgFnType,
    }

    /// `AzThreadRecvFnType` struct
    pub type AzThreadRecvFnType = extern "C" fn(&c_void) -> AzOptionThreadSendMsg;

    /// Function that the running `Thread` can call to receive messages from the main UI thread
    #[repr(C)]
    pub struct AzThreadRecvFn {
        pub cb: AzThreadRecvFnType,
    }

    /// `AzThreadSendFnType` struct
    pub type AzThreadSendFnType = extern "C" fn(&c_void, AzThreadReceiveMsg) -> bool;

    /// Function that the running `Thread` can call to receive messages from the main UI thread
    #[repr(C)]
    pub struct AzThreadSendFn {
        pub cb: AzThreadSendFnType,
    }

    /// `AzThreadDestructorFnType` struct
    pub type AzThreadDestructorFnType = extern "C" fn(&mut AzThread);

    /// Destructor of the `Thread`
    #[repr(C)]
    pub struct AzThreadDestructorFn {
        pub cb: AzThreadDestructorFnType,
    }

    /// `AzThreadReceiverDestructorFnType` struct
    pub type AzThreadReceiverDestructorFnType = extern "C" fn(&mut AzThreadReceiver);

    /// Destructor of the `ThreadReceiver`
    #[repr(C)]
    pub struct AzThreadReceiverDestructorFn {
        pub cb: AzThreadReceiverDestructorFnType,
    }

    /// `AzThreadSenderDestructorFnType` struct
    pub type AzThreadSenderDestructorFnType = extern "C" fn(&mut AzThreadSender);

    /// Destructor of the `ThreadSender`
    #[repr(C)]
    pub struct AzThreadSenderDestructorFn {
        pub cb: AzThreadSenderDestructorFnType,
    }

    /// Re-export of rust-allocated (stack based) `StyleFontFamilyVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleFontFamilyVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleFontFamilyVecDestructorType),
    }

    /// `AzStyleFontFamilyVecDestructorType` struct
    pub type AzStyleFontFamilyVecDestructorType = extern "C" fn(&mut AzStyleFontFamilyVec);

    /// Re-export of rust-allocated (stack based) `ListViewRowVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzListViewRowVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzListViewRowVecDestructorType),
    }

    /// `AzListViewRowVecDestructorType` struct
    pub type AzListViewRowVecDestructorType = extern "C" fn(&mut AzListViewRowVec);

    /// Re-export of rust-allocated (stack based) `StyleFilterVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleFilterVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleFilterVecDestructorType),
    }

    /// `AzStyleFilterVecDestructorType` struct
    pub type AzStyleFilterVecDestructorType = extern "C" fn(&mut AzStyleFilterVec);

    /// Re-export of rust-allocated (stack based) `LogicalRectVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzLogicalRectVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzLogicalRectVecDestructorType),
    }

    /// `AzLogicalRectVecDestructorType` struct
    pub type AzLogicalRectVecDestructorType = extern "C" fn(&mut AzLogicalRectVec);

    /// Re-export of rust-allocated (stack based) `NodeTypeIdInfoMapVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeTypeIdInfoMapVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeTypeIdInfoMapVecDestructorType),
    }

    /// `AzNodeTypeIdInfoMapVecDestructorType` struct
    pub type AzNodeTypeIdInfoMapVecDestructorType = extern "C" fn(&mut AzNodeTypeIdInfoMapVec);

    /// Re-export of rust-allocated (stack based) `InputOutputTypeIdInfoMapVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInputOutputTypeIdInfoMapVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInputOutputTypeIdInfoMapVecDestructorType),
    }

    /// `AzInputOutputTypeIdInfoMapVecDestructorType` struct
    pub type AzInputOutputTypeIdInfoMapVecDestructorType =
        extern "C" fn(&mut AzInputOutputTypeIdInfoMapVec);

    /// Re-export of rust-allocated (stack based) `NodeIdNodeMapVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeIdNodeMapVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeIdNodeMapVecDestructorType),
    }

    /// `AzNodeIdNodeMapVecDestructorType` struct
    pub type AzNodeIdNodeMapVecDestructorType = extern "C" fn(&mut AzNodeIdNodeMapVec);

    /// Re-export of rust-allocated (stack based) `InputOutputTypeIdVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInputOutputTypeIdVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInputOutputTypeIdVecDestructorType),
    }

    /// `AzInputOutputTypeIdVecDestructorType` struct
    pub type AzInputOutputTypeIdVecDestructorType = extern "C" fn(&mut AzInputOutputTypeIdVec);

    /// Re-export of rust-allocated (stack based) `NodeTypeFieldVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeTypeFieldVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeTypeFieldVecDestructorType),
    }

    /// `AzNodeTypeFieldVecDestructorType` struct
    pub type AzNodeTypeFieldVecDestructorType = extern "C" fn(&mut AzNodeTypeFieldVec);

    /// Re-export of rust-allocated (stack based) `InputConnectionVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInputConnectionVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInputConnectionVecDestructorType),
    }

    /// `AzInputConnectionVecDestructorType` struct
    pub type AzInputConnectionVecDestructorType = extern "C" fn(&mut AzInputConnectionVec);

    /// Re-export of rust-allocated (stack based) `OutputNodeAndIndexVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzOutputNodeAndIndexVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzOutputNodeAndIndexVecDestructorType),
    }

    /// `AzOutputNodeAndIndexVecDestructorType` struct
    pub type AzOutputNodeAndIndexVecDestructorType = extern "C" fn(&mut AzOutputNodeAndIndexVec);

    /// Re-export of rust-allocated (stack based) `OutputConnectionVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzOutputConnectionVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzOutputConnectionVecDestructorType),
    }

    /// `AzOutputConnectionVecDestructorType` struct
    pub type AzOutputConnectionVecDestructorType = extern "C" fn(&mut AzOutputConnectionVec);

    /// Re-export of rust-allocated (stack based) `InputNodeAndIndexVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInputNodeAndIndexVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInputNodeAndIndexVecDestructorType),
    }

    /// `AzInputNodeAndIndexVecDestructorType` struct
    pub type AzInputNodeAndIndexVecDestructorType = extern "C" fn(&mut AzInputNodeAndIndexVec);

    /// Re-export of rust-allocated (stack based) `AccessibilityStateVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzAccessibilityStateVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzAccessibilityStateVecDestructorType),
    }

    /// `AzAccessibilityStateVecDestructorType` struct
    pub type AzAccessibilityStateVecDestructorType = extern "C" fn(&mut AzAccessibilityStateVec);

    /// Re-export of rust-allocated (stack based) `MenuItemVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzMenuItemVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzMenuItemVecDestructorType),
    }

    /// `AzMenuItemVecDestructorType` struct
    pub type AzMenuItemVecDestructorType = extern "C" fn(&mut AzMenuItemVec);

    /// Re-export of rust-allocated (stack based) `TessellatedSvgNodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzTessellatedSvgNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzTessellatedSvgNodeVecDestructorType),
    }

    /// `AzTessellatedSvgNodeVecDestructorType` struct
    pub type AzTessellatedSvgNodeVecDestructorType = extern "C" fn(&mut AzTessellatedSvgNodeVec);

    /// Re-export of rust-allocated (stack based) `TessellatedColoredSvgNodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzTessellatedColoredSvgNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzTessellatedColoredSvgNodeVecDestructorType),
    }

    /// `AzTessellatedColoredSvgNodeVecDestructorType` struct
    pub type AzTessellatedColoredSvgNodeVecDestructorType =
        extern "C" fn(&mut AzTessellatedColoredSvgNodeVec);

    /// Re-export of rust-allocated (stack based) `XmlNodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzXmlNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzXmlNodeVecDestructorType),
    }

    /// `AzXmlNodeVecDestructorType` struct
    pub type AzXmlNodeVecDestructorType = extern "C" fn(&mut AzXmlNodeVec);

    /// Re-export of rust-allocated (stack based) `FmtArgVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzFmtArgVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzFmtArgVecDestructorType),
    }

    /// `AzFmtArgVecDestructorType` struct
    pub type AzFmtArgVecDestructorType = extern "C" fn(&mut AzFmtArgVec);

    /// Re-export of rust-allocated (stack based) `InlineLineVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInlineLineVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInlineLineVecDestructorType),
    }

    /// `AzInlineLineVecDestructorType` struct
    pub type AzInlineLineVecDestructorType = extern "C" fn(&mut AzInlineLineVec);

    /// Re-export of rust-allocated (stack based) `InlineWordVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInlineWordVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInlineWordVecDestructorType),
    }

    /// `AzInlineWordVecDestructorType` struct
    pub type AzInlineWordVecDestructorType = extern "C" fn(&mut AzInlineWordVec);

    /// Re-export of rust-allocated (stack based) `InlineGlyphVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInlineGlyphVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInlineGlyphVecDestructorType),
    }

    /// `AzInlineGlyphVecDestructorType` struct
    pub type AzInlineGlyphVecDestructorType = extern "C" fn(&mut AzInlineGlyphVec);

    /// Re-export of rust-allocated (stack based) `InlineTextHitVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzInlineTextHitVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzInlineTextHitVecDestructorType),
    }

    /// `AzInlineTextHitVecDestructorType` struct
    pub type AzInlineTextHitVecDestructorType = extern "C" fn(&mut AzInlineTextHitVec);

    /// Re-export of rust-allocated (stack based) `MonitorVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzMonitorVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzMonitorVecDestructorType),
    }

    /// `AzMonitorVecDestructorType` struct
    pub type AzMonitorVecDestructorType = extern "C" fn(&mut AzMonitorVec);

    /// Re-export of rust-allocated (stack based) `VideoModeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzVideoModeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzVideoModeVecDestructorType),
    }

    /// `AzVideoModeVecDestructorType` struct
    pub type AzVideoModeVecDestructorType = extern "C" fn(&mut AzVideoModeVec);

    /// Re-export of rust-allocated (stack based) `DomVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzDomVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzDomVecDestructorType),
    }

    /// `AzDomVecDestructorType` struct
    pub type AzDomVecDestructorType = extern "C" fn(&mut AzDomVec);

    /// Re-export of rust-allocated (stack based) `IdOrClassVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzIdOrClassVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzIdOrClassVecDestructorType),
    }

    /// `AzIdOrClassVecDestructorType` struct
    pub type AzIdOrClassVecDestructorType = extern "C" fn(&mut AzIdOrClassVec);

    /// Re-export of rust-allocated (stack based) `NodeDataInlineCssPropertyVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeDataInlineCssPropertyVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeDataInlineCssPropertyVecDestructorType),
    }

    /// `AzNodeDataInlineCssPropertyVecDestructorType` struct
    pub type AzNodeDataInlineCssPropertyVecDestructorType =
        extern "C" fn(&mut AzNodeDataInlineCssPropertyVec);

    /// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundContentVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundContentVecDestructorType),
    }

    /// `AzStyleBackgroundContentVecDestructorType` struct
    pub type AzStyleBackgroundContentVecDestructorType =
        extern "C" fn(&mut AzStyleBackgroundContentVec);

    /// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundPositionVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundPositionVecDestructorType),
    }

    /// `AzStyleBackgroundPositionVecDestructorType` struct
    pub type AzStyleBackgroundPositionVecDestructorType =
        extern "C" fn(&mut AzStyleBackgroundPositionVec);

    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundRepeatVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundRepeatVecDestructorType),
    }

    /// `AzStyleBackgroundRepeatVecDestructorType` struct
    pub type AzStyleBackgroundRepeatVecDestructorType =
        extern "C" fn(&mut AzStyleBackgroundRepeatVec);

    /// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundSizeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleBackgroundSizeVecDestructorType),
    }

    /// `AzStyleBackgroundSizeVecDestructorType` struct
    pub type AzStyleBackgroundSizeVecDestructorType = extern "C" fn(&mut AzStyleBackgroundSizeVec);

    /// Re-export of rust-allocated (stack based) `StyleTransformVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyleTransformVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyleTransformVecDestructorType),
    }

    /// `AzStyleTransformVecDestructorType` struct
    pub type AzStyleTransformVecDestructorType = extern "C" fn(&mut AzStyleTransformVec);

    /// Re-export of rust-allocated (stack based) `CssPropertyVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzCssPropertyVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssPropertyVecDestructorType),
    }

    /// `AzCssPropertyVecDestructorType` struct
    pub type AzCssPropertyVecDestructorType = extern "C" fn(&mut AzCssPropertyVec);

    /// Re-export of rust-allocated (stack based) `SvgMultiPolygonVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzSvgMultiPolygonVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgMultiPolygonVecDestructorType),
    }

    /// `AzSvgMultiPolygonVecDestructorType` struct
    pub type AzSvgMultiPolygonVecDestructorType = extern "C" fn(&mut AzSvgMultiPolygonVec);

    /// Re-export of rust-allocated (stack based) `SvgSimpleNodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzSvgSimpleNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgSimpleNodeVecDestructorType),
    }

    /// `AzSvgSimpleNodeVecDestructorType` struct
    pub type AzSvgSimpleNodeVecDestructorType = extern "C" fn(&mut AzSvgSimpleNodeVec);

    /// Re-export of rust-allocated (stack based) `SvgPathVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzSvgPathVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgPathVecDestructorType),
    }

    /// `AzSvgPathVecDestructorType` struct
    pub type AzSvgPathVecDestructorType = extern "C" fn(&mut AzSvgPathVec);

    /// Re-export of rust-allocated (stack based) `VertexAttributeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzVertexAttributeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzVertexAttributeVecDestructorType),
    }

    /// `AzVertexAttributeVecDestructorType` struct
    pub type AzVertexAttributeVecDestructorType = extern "C" fn(&mut AzVertexAttributeVec);

    /// Re-export of rust-allocated (stack based) `SvgPathElementVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzSvgPathElementVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgPathElementVecDestructorType),
    }

    /// `AzSvgPathElementVecDestructorType` struct
    pub type AzSvgPathElementVecDestructorType = extern "C" fn(&mut AzSvgPathElementVec);

    /// Re-export of rust-allocated (stack based) `SvgVertexVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzSvgVertexVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgVertexVecDestructorType),
    }

    /// `AzSvgVertexVecDestructorType` struct
    pub type AzSvgVertexVecDestructorType = extern "C" fn(&mut AzSvgVertexVec);

    /// Re-export of rust-allocated (stack based) `SvgColoredVertexVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzSvgColoredVertexVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzSvgColoredVertexVecDestructorType),
    }

    /// `AzSvgColoredVertexVecDestructorType` struct
    pub type AzSvgColoredVertexVecDestructorType = extern "C" fn(&mut AzSvgColoredVertexVec);

    /// Re-export of rust-allocated (stack based) `U32VecDestructor` struct
    #[repr(C, u8)]
    pub enum AzU32VecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzU32VecDestructorType),
    }

    /// `AzU32VecDestructorType` struct
    pub type AzU32VecDestructorType = extern "C" fn(&mut AzU32Vec);

    /// Re-export of rust-allocated (stack based) `XWindowTypeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzXWindowTypeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzXWindowTypeVecDestructorType),
    }

    /// `AzXWindowTypeVecDestructorType` struct
    pub type AzXWindowTypeVecDestructorType = extern "C" fn(&mut AzXWindowTypeVec);

    /// Re-export of rust-allocated (stack based) `VirtualKeyCodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzVirtualKeyCodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzVirtualKeyCodeVecDestructorType),
    }

    /// `AzVirtualKeyCodeVecDestructorType` struct
    pub type AzVirtualKeyCodeVecDestructorType = extern "C" fn(&mut AzVirtualKeyCodeVec);

    /// Re-export of rust-allocated (stack based) `CascadeInfoVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzCascadeInfoVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCascadeInfoVecDestructorType),
    }

    /// `AzCascadeInfoVecDestructorType` struct
    pub type AzCascadeInfoVecDestructorType = extern "C" fn(&mut AzCascadeInfoVec);

    /// Re-export of rust-allocated (stack based) `ScanCodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzScanCodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzScanCodeVecDestructorType),
    }

    /// `AzScanCodeVecDestructorType` struct
    pub type AzScanCodeVecDestructorType = extern "C" fn(&mut AzScanCodeVec);

    /// Re-export of rust-allocated (stack based) `CssDeclarationVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzCssDeclarationVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssDeclarationVecDestructorType),
    }

    /// `AzCssDeclarationVecDestructorType` struct
    pub type AzCssDeclarationVecDestructorType = extern "C" fn(&mut AzCssDeclarationVec);

    /// Re-export of rust-allocated (stack based) `CssPathSelectorVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzCssPathSelectorVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssPathSelectorVecDestructorType),
    }

    /// `AzCssPathSelectorVecDestructorType` struct
    pub type AzCssPathSelectorVecDestructorType = extern "C" fn(&mut AzCssPathSelectorVec);

    /// Re-export of rust-allocated (stack based) `StylesheetVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStylesheetVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStylesheetVecDestructorType),
    }

    /// `AzStylesheetVecDestructorType` struct
    pub type AzStylesheetVecDestructorType = extern "C" fn(&mut AzStylesheetVec);

    /// Re-export of rust-allocated (stack based) `CssRuleBlockVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzCssRuleBlockVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCssRuleBlockVecDestructorType),
    }

    /// `AzCssRuleBlockVecDestructorType` struct
    pub type AzCssRuleBlockVecDestructorType = extern "C" fn(&mut AzCssRuleBlockVec);

    /// Re-export of rust-allocated (stack based) `F32VecDestructor` struct
    #[repr(C, u8)]
    pub enum AzF32VecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzF32VecDestructorType),
    }

    /// `AzF32VecDestructorType` struct
    pub type AzF32VecDestructorType = extern "C" fn(&mut AzF32Vec);

    /// Re-export of rust-allocated (stack based) `U16VecDestructor` struct
    #[repr(C, u8)]
    pub enum AzU16VecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzU16VecDestructorType),
    }

    /// `AzU16VecDestructorType` struct
    pub type AzU16VecDestructorType = extern "C" fn(&mut AzU16Vec);

    /// Re-export of rust-allocated (stack based) `U8VecDestructor` struct
    #[repr(C, u8)]
    pub enum AzU8VecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzU8VecDestructorType),
    }

    /// `AzU8VecDestructorType` struct
    pub type AzU8VecDestructorType = extern "C" fn(&mut AzU8Vec);

    /// Re-export of rust-allocated (stack based) `CallbackDataVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzCallbackDataVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzCallbackDataVecDestructorType),
    }

    /// `AzCallbackDataVecDestructorType` struct
    pub type AzCallbackDataVecDestructorType = extern "C" fn(&mut AzCallbackDataVec);

    /// Re-export of rust-allocated (stack based) `DebugMessageVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzDebugMessageVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzDebugMessageVecDestructorType),
    }

    /// `AzDebugMessageVecDestructorType` struct
    pub type AzDebugMessageVecDestructorType = extern "C" fn(&mut AzDebugMessageVec);

    /// Re-export of rust-allocated (stack based) `GLuintVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzGLuintVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzGLuintVecDestructorType),
    }

    /// `AzGLuintVecDestructorType` struct
    pub type AzGLuintVecDestructorType = extern "C" fn(&mut AzGLuintVec);

    /// Re-export of rust-allocated (stack based) `GLintVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzGLintVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzGLintVecDestructorType),
    }

    /// `AzGLintVecDestructorType` struct
    pub type AzGLintVecDestructorType = extern "C" fn(&mut AzGLintVec);

    /// Re-export of rust-allocated (stack based) `StringVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStringVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStringVecDestructorType),
    }

    /// `AzStringVecDestructorType` struct
    pub type AzStringVecDestructorType = extern "C" fn(&mut AzStringVec);

    /// Re-export of rust-allocated (stack based) `StringPairVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStringPairVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStringPairVecDestructorType),
    }

    /// `AzStringPairVecDestructorType` struct
    pub type AzStringPairVecDestructorType = extern "C" fn(&mut AzStringPairVec);

    /// Re-export of rust-allocated (stack based) `NormalizedLinearColorStopVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNormalizedLinearColorStopVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNormalizedLinearColorStopVecDestructorType),
    }

    /// `AzNormalizedLinearColorStopVecDestructorType` struct
    pub type AzNormalizedLinearColorStopVecDestructorType =
        extern "C" fn(&mut AzNormalizedLinearColorStopVec);

    /// Re-export of rust-allocated (stack based) `NormalizedRadialColorStopVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNormalizedRadialColorStopVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNormalizedRadialColorStopVecDestructorType),
    }

    /// `AzNormalizedRadialColorStopVecDestructorType` struct
    pub type AzNormalizedRadialColorStopVecDestructorType =
        extern "C" fn(&mut AzNormalizedRadialColorStopVec);

    /// Re-export of rust-allocated (stack based) `NodeIdVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeIdVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeIdVecDestructorType),
    }

    /// `AzNodeIdVecDestructorType` struct
    pub type AzNodeIdVecDestructorType = extern "C" fn(&mut AzNodeIdVec);

    /// Re-export of rust-allocated (stack based) `NodeHierarchyItemVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeHierarchyItemVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeHierarchyItemVecDestructorType),
    }

    /// `AzNodeHierarchyItemVecDestructorType` struct
    pub type AzNodeHierarchyItemVecDestructorType = extern "C" fn(&mut AzNodeHierarchyItemVec);

    /// Re-export of rust-allocated (stack based) `StyledNodeVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzStyledNodeVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzStyledNodeVecDestructorType),
    }

    /// `AzStyledNodeVecDestructorType` struct
    pub type AzStyledNodeVecDestructorType = extern "C" fn(&mut AzStyledNodeVec);

    /// Re-export of rust-allocated (stack based) `TagIdToNodeIdMappingVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzTagIdToNodeIdMappingVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzTagIdToNodeIdMappingVecDestructorType),
    }

    /// `AzTagIdToNodeIdMappingVecDestructorType` struct
    pub type AzTagIdToNodeIdMappingVecDestructorType =
        extern "C" fn(&mut AzTagIdToNodeIdMappingVec);

    /// Re-export of rust-allocated (stack based) `ParentWithNodeDepthVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzParentWithNodeDepthVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzParentWithNodeDepthVecDestructorType),
    }

    /// `AzParentWithNodeDepthVecDestructorType` struct
    pub type AzParentWithNodeDepthVecDestructorType = extern "C" fn(&mut AzParentWithNodeDepthVec);

    /// Re-export of rust-allocated (stack based) `NodeDataVecDestructor` struct
    #[repr(C, u8)]
    pub enum AzNodeDataVecDestructor {
        DefaultRust,
        NoDestructor,
        External(AzNodeDataVecDestructorType),
    }

    /// `AzNodeDataVecDestructorType` struct
    pub type AzNodeDataVecDestructorType = extern "C" fn(&mut AzNodeDataVec);

    /// Re-export of rust-allocated (stack based) `OptionI16` struct
    #[repr(C, u8)]
    pub enum AzOptionI16 {
        None,
        Some(i16),
    }

    /// Re-export of rust-allocated (stack based) `OptionU16` struct
    #[repr(C, u8)]
    pub enum AzOptionU16 {
        None,
        Some(u16),
    }

    /// Re-export of rust-allocated (stack based) `OptionU32` struct
    #[repr(C, u8)]
    pub enum AzOptionU32 {
        None,
        Some(u32),
    }

    /// Re-export of rust-allocated (stack based) `OptionHwndHandle` struct
    #[repr(C, u8)]
    pub enum AzOptionHwndHandle {
        None,
        Some(*mut c_void),
    }

    /// Re-export of rust-allocated (stack based) `OptionX11Visual` struct
    #[repr(C, u8)]
    pub enum AzOptionX11Visual {
        None,
        Some(*const c_void),
    }

    /// Re-export of rust-allocated (stack based) `OptionI32` struct
    #[repr(C, u8)]
    pub enum AzOptionI32 {
        None,
        Some(i32),
    }

    /// Re-export of rust-allocated (stack based) `OptionF32` struct
    #[repr(C, u8)]
    pub enum AzOptionF32 {
        None,
        Some(f32),
    }

    /// Option<char> but the char is a u32, for C FFI stability reasons
    #[repr(C, u8)]
    pub enum AzOptionChar {
        None,
        Some(u32),
    }

    /// Re-export of rust-allocated (stack based) `OptionUsize` struct
    #[repr(C, u8)]
    pub enum AzOptionUsize {
        None,
        Some(usize),
    }

    /// Re-export of rust-allocated (stack based) `SvgParseErrorPosition` struct
    #[repr(C)]
    pub struct AzSvgParseErrorPosition {
        pub row: u32,
        pub col: u32,
    }

    /// External system callbacks to get the system time or create / manage threads
    #[repr(C)]
    pub struct AzSystemCallbacks {
        pub create_thread_fn: AzCreateThreadFn,
        pub get_system_time_fn: AzGetSystemTimeFn,
    }

    /// Force a specific renderer: note that azul will **crash** on startup if the `RendererOptions`
    /// are not satisfied.
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzRendererOptions {
        pub vsync: AzVsync,
        pub srgb: AzSrgb,
        pub hw_accel: AzHwAcceleration,
    }

    /// Represents a rectangle in physical pixels (integer units)
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzLayoutRect {
        pub origin: AzLayoutPoint,
        pub size: AzLayoutSize,
    }

    /// Raw platform handle, for integration in / with other toolkits and custom non-azul window
    /// extensions
    #[repr(C, u8)]
    pub enum AzRawWindowHandle {
        IOS(AzIOSHandle),
        MacOS(AzMacOSHandle),
        Xlib(AzXlibHandle),
        Xcb(AzXcbHandle),
        Wayland(AzWaylandHandle),
        Windows(AzWindowsHandle),
        Web(AzWebHandle),
        Android(AzAndroidHandle),
        Unsupported,
    }

    /// Logical rectangle area (can differ based on HiDPI settings). Usually this is what you'd want
    /// for hit-testing and positioning elements.
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzLogicalRect {
        pub origin: AzLogicalPosition,
        pub size: AzLogicalSize,
    }

    /// Symbolic accelerator key (ctrl, alt, shift)
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzAcceleratorKey {
        Ctrl,
        Alt,
        Shift,
        Key(AzVirtualKeyCode),
    }

    /// Boolean flags relating to the current window state
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzWindowFlags {
        pub frame: AzWindowFrame,
        pub is_about_to_close: bool,
        pub has_decorations: bool,
        pub is_visible: bool,
        pub is_always_on_top: bool,
        pub is_resizable: bool,
        pub has_focus: bool,
        pub has_extended_window_frame: bool,
        pub has_blur_behind_window: bool,
        pub smooth_scroll_enabled: bool,
        pub autotab_enabled: bool,
    }

    /// Current position of the mouse cursor, relative to the window. Set to `Uninitialized` on
    /// startup (gets initialized on the first frame).
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzCursorPosition {
        OutOfWindow(AzLogicalPosition),
        Uninitialized,
        InWindow(AzLogicalPosition),
    }

    /// Position of the top left corner of the window relative to the top left of the monitor
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzWindowPosition {
        Uninitialized,
        Initialized(AzPhysicalPositionI32),
    }

    /// Position of the virtual keyboard necessary to insert CJK characters
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzImePosition {
        Uninitialized,
        Initialized(AzLogicalPosition),
    }

    /// Describes a rendering configuration for a monitor
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzVideoMode {
        pub size: AzLayoutSize,
        pub bit_depth: u16,
        pub refresh_rate: u16,
    }

    /// Combination of node ID + DOM ID, both together can identify a node
    #[repr(C)]
    pub struct AzDomNodeId {
        pub dom: AzDomId,
        pub node: AzNodeId,
    }

    /// Re-export of rust-allocated (stack based) `PositionInfo` struct
    #[repr(C, u8)]
    pub enum AzPositionInfo {
        Static(AzPositionInfoInner),
        Fixed(AzPositionInfoInner),
        Absolute(AzPositionInfoInner),
        Relative(AzPositionInfoInner),
    }

    /// Re-export of rust-allocated (stack based) `HidpiAdjustedBounds` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzHidpiAdjustedBounds {
        pub logical_size: AzLogicalSize,
        pub hidpi_factor: f32,
    }

    /// Re-export of rust-allocated (stack based) `InlineGlyph` struct
    #[repr(C)]
    pub struct AzInlineGlyph {
        pub bounds: AzLogicalRect,
        pub unicode_codepoint: AzOptionChar,
        pub glyph_index: u32,
    }

    /// Re-export of rust-allocated (stack based) `InlineTextHit` struct
    #[repr(C)]
    pub struct AzInlineTextHit {
        pub unicode_codepoint: AzOptionChar,
        pub hit_relative_to_inline_text: AzLogicalPosition,
        pub hit_relative_to_line: AzLogicalPosition,
        pub hit_relative_to_text_content: AzLogicalPosition,
        pub hit_relative_to_glyph: AzLogicalPosition,
        pub line_index_relative_to_text: usize,
        pub word_index_relative_to_text: usize,
        pub text_content_index_relative_to_text: usize,
        pub glyph_index_relative_to_text: usize,
        pub char_index_relative_to_text: usize,
        pub word_index_relative_to_line: usize,
        pub text_content_index_relative_to_line: usize,
        pub glyph_index_relative_to_line: usize,
        pub char_index_relative_to_line: usize,
        pub glyph_index_relative_to_word: usize,
        pub char_index_relative_to_word: usize,
    }

    /// Re-export of rust-allocated (stack based) `IFrameCallbackInfo` struct
    #[repr(C)]
    pub struct AzIFrameCallbackInfo {
        pub system_fonts: *const c_void,
        pub image_cache: *const c_void,
        pub window_theme: AzWindowTheme,
        pub bounds: AzHidpiAdjustedBounds,
        pub scroll_size: AzLogicalSize,
        pub scroll_offset: AzLogicalPosition,
        pub virtual_scroll_size: AzLogicalSize,
        pub virtual_scroll_offset: AzLogicalPosition,
        pub _reserved_ref: *const c_void,
        pub _reserved_mut: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `TimerCallbackReturn` struct
    #[repr(C)]
    pub struct AzTimerCallbackReturn {
        pub should_update: AzUpdate,
        pub should_terminate: AzTerminateTimer,
    }

    /// RefAny is a reference-counted, opaque pointer, which stores a reference to a struct.
    /// `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in
    /// the Rust API)
    #[repr(C)]
    pub struct AzRefAny {
        pub _internal_ptr: *const c_void,
        pub sharing_info: AzRefCount,
        pub instance_id: u64,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `IFrameNode` struct
    #[repr(C)]
    pub struct AzIFrameNode {
        pub callback: AzIFrameCallback,
        pub data: AzRefAny,
    }

    /// Re-export of rust-allocated (stack based) `NotEventFilter` struct
    #[repr(C, u8)]
    pub enum AzNotEventFilter {
        Hover(AzHoverEventFilter),
        Focus(AzFocusEventFilter),
    }

    /// Similar to `dom.CallbackData`, stores some data + a callback to call when the menu is
    /// activated
    #[repr(C)]
    pub struct AzMenuCallback {
        pub callback: AzCallback,
        pub data: AzRefAny,
    }

    /// Icon of a menu entry
    #[repr(C, u8)]
    pub enum AzMenuItemIcon {
        Checkbox(bool),
        Image(AzImageRef),
    }

    /// Re-export of rust-allocated (stack based) `CssNthChildSelector` struct
    #[repr(C, u8)]
    pub enum AzCssNthChildSelector {
        Number(u32),
        Even,
        Odd,
        Pattern(AzCssNthChildPattern),
    }

    /// Re-export of rust-allocated (stack based) `PixelValue` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzPixelValue {
        pub metric: AzSizeMetric,
        pub number: AzFloatValue,
    }

    /// Re-export of rust-allocated (stack based) `PixelValueNoPercent` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzPixelValueNoPercent {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBoxShadow` struct
    #[repr(C)]
    pub struct AzStyleBoxShadow {
        pub offset: [AzPixelValueNoPercent; 2],
        pub color: AzColorU,
        pub blur_radius: AzPixelValueNoPercent,
        pub spread_radius: AzPixelValueNoPercent,
        pub clip_mode: AzBoxShadowClipMode,
    }

    /// Re-export of rust-allocated (stack based) `StyleBlur` struct
    #[repr(C)]
    pub struct AzStyleBlur {
        pub width: AzPixelValue,
        pub height: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleColorMatrix` struct
    #[repr(C)]
    pub struct AzStyleColorMatrix {
        pub matrix: [AzFloatValue; 20],
    }

    /// Re-export of rust-allocated (stack based) `StyleFilterOffset` struct
    #[repr(C)]
    pub struct AzStyleFilterOffset {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleCompositeFilter` struct
    #[repr(C, u8)]
    pub enum AzStyleCompositeFilter {
        Over,
        In,
        Atop,
        Out,
        Xor,
        Lighter,
        Arithmetic([AzFloatValue; 4]),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBottom` struct
    #[repr(C)]
    pub struct AzLayoutBottom {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexGrow` struct
    #[repr(C)]
    pub struct AzLayoutFlexGrow {
        pub inner: AzFloatValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexShrink` struct
    #[repr(C)]
    pub struct AzLayoutFlexShrink {
        pub inner: AzFloatValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutHeight` struct
    #[repr(C)]
    pub struct AzLayoutHeight {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutLeft` struct
    #[repr(C)]
    pub struct AzLayoutLeft {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginBottom` struct
    #[repr(C)]
    pub struct AzLayoutMarginBottom {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginLeft` struct
    #[repr(C)]
    pub struct AzLayoutMarginLeft {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginRight` struct
    #[repr(C)]
    pub struct AzLayoutMarginRight {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginTop` struct
    #[repr(C)]
    pub struct AzLayoutMarginTop {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMaxHeight` struct
    #[repr(C)]
    pub struct AzLayoutMaxHeight {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMaxWidth` struct
    #[repr(C)]
    pub struct AzLayoutMaxWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMinHeight` struct
    #[repr(C)]
    pub struct AzLayoutMinHeight {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutMinWidth` struct
    #[repr(C)]
    pub struct AzLayoutMinWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingBottom` struct
    #[repr(C)]
    pub struct AzLayoutPaddingBottom {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingLeft` struct
    #[repr(C)]
    pub struct AzLayoutPaddingLeft {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingRight` struct
    #[repr(C)]
    pub struct AzLayoutPaddingRight {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingTop` struct
    #[repr(C)]
    pub struct AzLayoutPaddingTop {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutRight` struct
    #[repr(C)]
    pub struct AzLayoutRight {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutTop` struct
    #[repr(C)]
    pub struct AzLayoutTop {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `LayoutWidth` struct
    #[repr(C)]
    pub struct AzLayoutWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `PercentageValue` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzPercentageValue {
        pub number: AzFloatValue,
    }

    /// Re-export of rust-allocated (stack based) `AngleValue` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzAngleValue {
        pub metric: AzAngleMetric,
        pub number: AzFloatValue,
    }

    /// Re-export of rust-allocated (stack based) `NormalizedLinearColorStop` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNormalizedLinearColorStop {
        pub offset: AzPercentageValue,
        pub color: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `NormalizedRadialColorStop` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNormalizedRadialColorStop {
        pub offset: AzAngleValue,
        pub color: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `DirectionCorners` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzDirectionCorners {
        pub from: AzDirectionCorner,
        pub to: AzDirectionCorner,
    }

    /// Re-export of rust-allocated (stack based) `Direction` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzDirection {
        Angle(AzAngleValue),
        FromTo(AzDirectionCorners),
    }

    /// Re-export of rust-allocated (stack based) `BackgroundPositionHorizontal` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzBackgroundPositionHorizontal {
        Left,
        Center,
        Right,
        Exact(AzPixelValue),
    }

    /// Re-export of rust-allocated (stack based) `BackgroundPositionVertical` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzBackgroundPositionVertical {
        Top,
        Center,
        Bottom,
        Exact(AzPixelValue),
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundPosition` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzStyleBackgroundPosition {
        pub horizontal: AzBackgroundPositionHorizontal,
        pub vertical: AzBackgroundPositionVertical,
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundSize` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzStyleBackgroundSize {
        ExactSize([AzPixelValue; 2]),
        Contain,
        Cover,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomColor` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzStyleBorderBottomColor {
        pub inner: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadius` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzStyleBorderBottomLeftRadius {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadius` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzStyleBorderBottomRightRadius {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomStyle` struct
    #[repr(C)]
    pub struct AzStyleBorderBottomStyle {
        pub inner: AzBorderStyle,
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidth` struct
    #[repr(C)]
    pub struct AzLayoutBorderBottomWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderLeftColor` struct
    #[repr(C)]
    pub struct AzStyleBorderLeftColor {
        pub inner: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderLeftStyle` struct
    #[repr(C)]
    pub struct AzStyleBorderLeftStyle {
        pub inner: AzBorderStyle,
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidth` struct
    #[repr(C)]
    pub struct AzLayoutBorderLeftWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderRightColor` struct
    #[repr(C)]
    pub struct AzStyleBorderRightColor {
        pub inner: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderRightStyle` struct
    #[repr(C)]
    pub struct AzStyleBorderRightStyle {
        pub inner: AzBorderStyle,
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderRightWidth` struct
    #[repr(C)]
    pub struct AzLayoutBorderRightWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopColor` struct
    #[repr(C)]
    pub struct AzStyleBorderTopColor {
        pub inner: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadius` struct
    #[repr(C)]
    pub struct AzStyleBorderTopLeftRadius {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadius` struct
    #[repr(C)]
    pub struct AzStyleBorderTopRightRadius {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopStyle` struct
    #[repr(C)]
    pub struct AzStyleBorderTopStyle {
        pub inner: AzBorderStyle,
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderTopWidth` struct
    #[repr(C)]
    pub struct AzLayoutBorderTopWidth {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleFontSize` struct
    #[repr(C)]
    pub struct AzStyleFontSize {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleLetterSpacing` struct
    #[repr(C)]
    pub struct AzStyleLetterSpacing {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleLineHeight` struct
    #[repr(C)]
    pub struct AzStyleLineHeight {
        pub inner: AzPercentageValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTabWidth` struct
    #[repr(C)]
    pub struct AzStyleTabWidth {
        pub inner: AzPercentageValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleOpacity` struct
    #[repr(C)]
    pub struct AzStyleOpacity {
        pub inner: AzPercentageValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformOrigin` struct
    #[repr(C)]
    pub struct AzStyleTransformOrigin {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StylePerspectiveOrigin` struct
    #[repr(C)]
    pub struct AzStylePerspectiveOrigin {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformMatrix2D` struct
    #[repr(C)]
    pub struct AzStyleTransformMatrix2D {
        pub a: AzPixelValue,
        pub b: AzPixelValue,
        pub c: AzPixelValue,
        pub d: AzPixelValue,
        pub tx: AzPixelValue,
        pub ty: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformMatrix3D` struct
    #[repr(C)]
    pub struct AzStyleTransformMatrix3D {
        pub m11: AzPixelValue,
        pub m12: AzPixelValue,
        pub m13: AzPixelValue,
        pub m14: AzPixelValue,
        pub m21: AzPixelValue,
        pub m22: AzPixelValue,
        pub m23: AzPixelValue,
        pub m24: AzPixelValue,
        pub m31: AzPixelValue,
        pub m32: AzPixelValue,
        pub m33: AzPixelValue,
        pub m34: AzPixelValue,
        pub m41: AzPixelValue,
        pub m42: AzPixelValue,
        pub m43: AzPixelValue,
        pub m44: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformTranslate2D` struct
    #[repr(C)]
    pub struct AzStyleTransformTranslate2D {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformTranslate3D` struct
    #[repr(C)]
    pub struct AzStyleTransformTranslate3D {
        pub x: AzPixelValue,
        pub y: AzPixelValue,
        pub z: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformRotate3D` struct
    #[repr(C)]
    pub struct AzStyleTransformRotate3D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
        pub z: AzPercentageValue,
        pub angle: AzAngleValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformScale2D` struct
    #[repr(C)]
    pub struct AzStyleTransformScale2D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformScale3D` struct
    #[repr(C)]
    pub struct AzStyleTransformScale3D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
        pub z: AzPercentageValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformSkew2D` struct
    #[repr(C)]
    pub struct AzStyleTransformSkew2D {
        pub x: AzPercentageValue,
        pub y: AzPercentageValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleTextColor` struct
    #[repr(C)]
    pub struct AzStyleTextColor {
        pub inner: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `StyleWordSpacing` struct
    #[repr(C)]
    pub struct AzStyleWordSpacing {
        pub inner: AzPixelValue,
    }

    /// Re-export of rust-allocated (stack based) `StyleBoxShadowValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBoxShadowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBoxShadow),
    }

    /// Re-export of rust-allocated (stack based) `LayoutAlignContentValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutAlignContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutAlignContent),
    }

    /// Re-export of rust-allocated (stack based) `LayoutAlignItemsValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutAlignItemsValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutAlignItems),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBottomValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBottom),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBoxSizingValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutBoxSizingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBoxSizing),
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexDirectionValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutFlexDirectionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexDirection),
    }

    /// Re-export of rust-allocated (stack based) `LayoutDisplayValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutDisplayValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutDisplay),
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexGrowValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutFlexGrowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexGrow),
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexShrinkValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutFlexShrinkValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexShrink),
    }

    /// Re-export of rust-allocated (stack based) `LayoutFloatValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutFloatValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFloat),
    }

    /// Re-export of rust-allocated (stack based) `LayoutHeightValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutHeight),
    }

    /// Re-export of rust-allocated (stack based) `LayoutJustifyContentValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutJustifyContentValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutJustifyContent),
    }

    /// Re-export of rust-allocated (stack based) `LayoutLeftValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutLeft),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginBottomValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMarginBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginBottom),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginLeftValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMarginLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginLeft),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginRightValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMarginRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginRight),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMarginTopValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMarginTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMarginTop),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMaxHeightValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMaxHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMaxHeight),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMaxWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMaxWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMaxWidth),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMinHeightValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMinHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMinHeight),
    }

    /// Re-export of rust-allocated (stack based) `LayoutMinWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutMinWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutMinWidth),
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingBottomValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutPaddingBottomValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingBottom),
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingLeftValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutPaddingLeftValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingLeft),
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingRightValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutPaddingRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingRight),
    }

    /// Re-export of rust-allocated (stack based) `LayoutPaddingTopValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutPaddingTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPaddingTop),
    }

    /// Re-export of rust-allocated (stack based) `LayoutPositionValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutPositionValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutPosition),
    }

    /// Re-export of rust-allocated (stack based) `LayoutRightValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutRightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutRight),
    }

    /// Re-export of rust-allocated (stack based) `LayoutTopValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutTopValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutTop),
    }

    /// Re-export of rust-allocated (stack based) `LayoutWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutWidth),
    }

    /// Re-export of rust-allocated (stack based) `LayoutFlexWrapValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutFlexWrapValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutFlexWrap),
    }

    /// Re-export of rust-allocated (stack based) `LayoutOverflowValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutOverflowValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutOverflow),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomColorValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderBottomColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomColor),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomLeftRadiusValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderBottomLeftRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomLeftRadius),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomRightRadiusValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderBottomRightRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomRightRadius),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderBottomStyleValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderBottomStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderBottomStyle),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderBottomWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutBorderBottomWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderBottomWidth),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderLeftColorValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderLeftColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftColor),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderLeftStyleValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderLeftStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderLeftStyle),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderLeftWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutBorderLeftWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderLeftWidth),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderRightColorValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderRightColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightColor),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderRightStyleValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderRightStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderRightStyle),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderRightWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutBorderRightWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderRightWidth),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopColorValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderTopColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopColor),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopLeftRadiusValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderTopLeftRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopLeftRadius),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopRightRadiusValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderTopRightRadiusValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopRightRadius),
    }

    /// Re-export of rust-allocated (stack based) `StyleBorderTopStyleValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBorderTopStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBorderTopStyle),
    }

    /// Re-export of rust-allocated (stack based) `LayoutBorderTopWidthValue` struct
    #[repr(C, u8)]
    pub enum AzLayoutBorderTopWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzLayoutBorderTopWidth),
    }

    /// Re-export of rust-allocated (stack based) `StyleCursorValue` struct
    #[repr(C, u8)]
    pub enum AzStyleCursorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleCursor),
    }

    /// Re-export of rust-allocated (stack based) `StyleFontSizeValue` struct
    #[repr(C, u8)]
    pub enum AzStyleFontSizeValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFontSize),
    }

    /// Re-export of rust-allocated (stack based) `StyleLetterSpacingValue` struct
    #[repr(C, u8)]
    pub enum AzStyleLetterSpacingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleLetterSpacing),
    }

    /// Re-export of rust-allocated (stack based) `StyleLineHeightValue` struct
    #[repr(C, u8)]
    pub enum AzStyleLineHeightValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleLineHeight),
    }

    /// Re-export of rust-allocated (stack based) `StyleTabWidthValue` struct
    #[repr(C, u8)]
    pub enum AzStyleTabWidthValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTabWidth),
    }

    /// Re-export of rust-allocated (stack based) `StyleTextAlignValue` struct
    #[repr(C, u8)]
    pub enum AzStyleTextAlignValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTextAlign),
    }

    /// Re-export of rust-allocated (stack based) `StyleTextColorValue` struct
    #[repr(C, u8)]
    pub enum AzStyleTextColorValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTextColor),
    }

    /// Re-export of rust-allocated (stack based) `StyleWordSpacingValue` struct
    #[repr(C, u8)]
    pub enum AzStyleWordSpacingValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleWordSpacing),
    }

    /// Re-export of rust-allocated (stack based) `StyleOpacityValue` struct
    #[repr(C, u8)]
    pub enum AzStyleOpacityValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleOpacity),
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformOriginValue` struct
    #[repr(C, u8)]
    pub enum AzStyleTransformOriginValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTransformOrigin),
    }

    /// Re-export of rust-allocated (stack based) `StylePerspectiveOriginValue` struct
    #[repr(C, u8)]
    pub enum AzStylePerspectiveOriginValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStylePerspectiveOrigin),
    }

    /// Re-export of rust-allocated (stack based) `StyleBackfaceVisibilityValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBackfaceVisibilityValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackfaceVisibility),
    }

    /// Re-export of rust-allocated (stack based) `StyleMixBlendModeValue` struct
    #[repr(C, u8)]
    pub enum AzStyleMixBlendModeValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleMixBlendMode),
    }

    /// Re-export of rust-allocated (stack based) `ButtonOnClick` struct
    #[repr(C)]
    pub struct AzButtonOnClick {
        pub data: AzRefAny,
        pub callback: AzCallback,
    }

    /// Re-export of rust-allocated (stack based) `FileInputOnPathChange` struct
    #[repr(C)]
    pub struct AzFileInputOnPathChange {
        pub data: AzRefAny,
        pub callback: AzFileInputOnPathChangeCallback,
    }

    /// Re-export of rust-allocated (stack based) `CheckBoxOnToggle` struct
    #[repr(C)]
    pub struct AzCheckBoxOnToggle {
        pub data: AzRefAny,
        pub callback: AzCheckBoxOnToggleCallback,
    }

    /// Re-export of rust-allocated (stack based) `ColorInputState` struct
    #[repr(C)]
    pub struct AzColorInputState {
        pub color: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `ColorInputOnValueChange` struct
    #[repr(C)]
    pub struct AzColorInputOnValueChange {
        pub data: AzRefAny,
        pub callback: AzColorInputOnValueChangeCallback,
    }

    /// Re-export of rust-allocated (stack based) `TextInputSelection` struct
    #[repr(C, u8)]
    pub enum AzTextInputSelection {
        All,
        FromTo(AzTextInputSelectionRange),
    }

    /// Re-export of rust-allocated (stack based) `TextInputOnTextInput` struct
    #[repr(C)]
    pub struct AzTextInputOnTextInput {
        pub data: AzRefAny,
        pub callback: AzTextInputOnTextInputCallback,
    }

    /// Re-export of rust-allocated (stack based) `TextInputOnVirtualKeyDown` struct
    #[repr(C)]
    pub struct AzTextInputOnVirtualKeyDown {
        pub data: AzRefAny,
        pub callback: AzTextInputOnVirtualKeyDownCallback,
    }

    /// Re-export of rust-allocated (stack based) `TextInputOnFocusLost` struct
    #[repr(C)]
    pub struct AzTextInputOnFocusLost {
        pub data: AzRefAny,
        pub callback: AzTextInputOnFocusLostCallback,
    }

    /// Re-export of rust-allocated (stack based) `OnTextInputReturn` struct
    #[repr(C)]
    pub struct AzOnTextInputReturn {
        pub update: AzUpdate,
        pub valid: AzTextInputValid,
    }

    /// Re-export of rust-allocated (stack based) `NumberInputOnValueChange` struct
    #[repr(C)]
    pub struct AzNumberInputOnValueChange {
        pub data: AzRefAny,
        pub callback: AzNumberInputOnValueChangeCallback,
    }

    /// Re-export of rust-allocated (stack based) `NumberInputOnFocusLost` struct
    #[repr(C)]
    pub struct AzNumberInputOnFocusLost {
        pub data: AzRefAny,
        pub callback: AzNumberInputOnFocusLostCallback,
    }

    /// Re-export of rust-allocated (stack based) `TabOnClick` struct
    #[repr(C)]
    pub struct AzTabOnClick {
        pub data: AzRefAny,
        pub callback: AzTabOnClickCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeAdded` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeAdded {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeAddedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeRemoved` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeRemoved {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeRemovedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeGraphDragged` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeGraphDragged {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeGraphDraggedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeDragged` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeDragged {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeDraggedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeConnected` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeConnected {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeConnectedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeInputDisconnected` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeInputDisconnected {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeInputDisconnectedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeOutputDisconnected` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeOutputDisconnected {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeOutputDisconnectedCallback,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphOnNodeFieldEdited` struct
    #[repr(C)]
    pub struct AzNodeGraphOnNodeFieldEdited {
        pub data: AzRefAny,
        pub callback: AzNodeGraphOnNodeFieldEditedCallback,
    }

    /// Re-export of rust-allocated (stack based) `OutputNodeAndIndex` struct
    #[repr(C)]
    pub struct AzOutputNodeAndIndex {
        pub node_id: AzNodeGraphNodeId,
        pub output_index: usize,
    }

    /// Re-export of rust-allocated (stack based) `InputNodeAndIndex` struct
    #[repr(C)]
    pub struct AzInputNodeAndIndex {
        pub node_id: AzNodeGraphNodeId,
        pub input_index: usize,
    }

    /// Re-export of rust-allocated (stack based) `ListViewOnLazyLoadScroll` struct
    #[repr(C)]
    pub struct AzListViewOnLazyLoadScroll {
        pub data: AzRefAny,
        pub callback: AzListViewOnLazyLoadScrollCallback,
    }

    /// Re-export of rust-allocated (stack based) `ListViewOnColumnClick` struct
    #[repr(C)]
    pub struct AzListViewOnColumnClick {
        pub data: AzRefAny,
        pub callback: AzListViewOnColumnClickCallback,
    }

    /// Re-export of rust-allocated (stack based) `ListViewOnRowClick` struct
    #[repr(C)]
    pub struct AzListViewOnRowClick {
        pub data: AzRefAny,
        pub callback: AzListViewOnRowClickCallback,
    }

    /// Re-export of rust-allocated (stack based) `DropDownOnChoiceChange` struct
    #[repr(C)]
    pub struct AzDropDownOnChoiceChange {
        pub data: AzRefAny,
        pub callback: AzDropDownOnChoiceChangeCallback,
    }

    /// Re-export of rust-allocated (stack based) `ParentWithNodeDepth` struct
    #[repr(C)]
    pub struct AzParentWithNodeDepth {
        pub depth: usize,
        pub node_id: AzNodeId,
    }

    /// Re-export of rust-allocated (stack based) `Gl` struct
    #[repr(C)]
    pub struct AzGl {
        pub(crate) ptr: *const c_void,
        pub renderer_type: AzRendererType,
        pub run_destructor: bool,
    }

    /// C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`
    #[repr(C)]
    pub struct AzRefstrVecRef {
        pub(crate) ptr: *const AzRefstr,
        pub len: usize,
    }

    /// Re-export of rust-allocated (stack based) `ImageMask` struct
    #[repr(C)]
    pub struct AzImageMask {
        pub image: AzImageRef,
        pub rect: AzLogicalRect,
        pub repeat: bool,
    }

    /// Re-export of rust-allocated (stack based) `FontMetrics` struct
    #[repr(C)]
    pub struct AzFontMetrics {
        pub units_per_em: u16,
        pub font_flags: u16,
        pub x_min: i16,
        pub y_min: i16,
        pub x_max: i16,
        pub y_max: i16,
        pub ascender: i16,
        pub descender: i16,
        pub line_gap: i16,
        pub advance_width_max: u16,
        pub min_left_side_bearing: i16,
        pub min_right_side_bearing: i16,
        pub x_max_extent: i16,
        pub caret_slope_rise: i16,
        pub caret_slope_run: i16,
        pub caret_offset: i16,
        pub num_h_metrics: u16,
        pub x_avg_char_width: i16,
        pub us_weight_class: u16,
        pub us_width_class: u16,
        pub fs_type: u16,
        pub y_subscript_x_size: i16,
        pub y_subscript_y_size: i16,
        pub y_subscript_x_offset: i16,
        pub y_subscript_y_offset: i16,
        pub y_superscript_x_size: i16,
        pub y_superscript_y_size: i16,
        pub y_superscript_x_offset: i16,
        pub y_superscript_y_offset: i16,
        pub y_strikeout_size: i16,
        pub y_strikeout_position: i16,
        pub s_family_class: i16,
        pub panose: [u8; 10],
        pub ul_unicode_range1: u32,
        pub ul_unicode_range2: u32,
        pub ul_unicode_range3: u32,
        pub ul_unicode_range4: u32,
        pub ach_vend_id: u32,
        pub fs_selection: u16,
        pub us_first_char_index: u16,
        pub us_last_char_index: u16,
        pub s_typo_ascender: AzOptionI16,
        pub s_typo_descender: AzOptionI16,
        pub s_typo_line_gap: AzOptionI16,
        pub us_win_ascent: AzOptionU16,
        pub us_win_descent: AzOptionU16,
        pub ul_code_page_range1: AzOptionU32,
        pub ul_code_page_range2: AzOptionU32,
        pub sx_height: AzOptionI16,
        pub s_cap_height: AzOptionI16,
        pub us_default_char: AzOptionU16,
        pub us_break_char: AzOptionU16,
        pub us_max_context: AzOptionU16,
        pub us_lower_optical_point_size: AzOptionU16,
        pub us_upper_optical_point_size: AzOptionU16,
    }

    /// Re-export of rust-allocated (stack based) `SvgLine` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgLine {
        pub start: AzSvgPoint,
        pub end: AzSvgPoint,
    }

    /// Re-export of rust-allocated (stack based) `SvgQuadraticCurve` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgQuadraticCurve {
        pub start: AzSvgPoint,
        pub ctrl: AzSvgPoint,
        pub end: AzSvgPoint,
    }

    /// Re-export of rust-allocated (stack based) `SvgCubicCurve` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgCubicCurve {
        pub start: AzSvgPoint,
        pub ctrl_1: AzSvgPoint,
        pub ctrl_2: AzSvgPoint,
        pub end: AzSvgPoint,
    }

    /// Re-export of rust-allocated (stack based) `SvgStringFormatOptions` struct
    #[repr(C)]
    pub struct AzSvgStringFormatOptions {
        pub use_single_quote: bool,
        pub indent: AzIndent,
        pub attributes_indent: AzIndent,
    }

    /// Re-export of rust-allocated (stack based) `SvgFillStyle` struct
    #[repr(C)]
    pub struct AzSvgFillStyle {
        pub line_join: AzSvgLineJoin,
        pub miter_limit: f32,
        pub tolerance: f32,
        pub fill_rule: AzSvgFillRule,
        pub transform: AzSvgTransform,
        pub anti_alias: bool,
        pub high_quality_aa: bool,
    }

    /// Re-export of rust-allocated (stack based) `InstantPtr` struct
    #[repr(C)]
    pub struct AzInstantPtr {
        pub(crate) ptr: *const c_void,
        pub clone_fn: AzInstantPtrCloneFn,
        pub destructor: AzInstantPtrDestructorFn,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `Duration` struct
    #[repr(C, u8)]
    pub enum AzDuration {
        System(AzSystemTimeDiff),
        Tick(AzSystemTickDiff),
    }

    /// Re-export of rust-allocated (stack based) `ThreadSendMsg` struct
    #[repr(C, u8)]
    pub enum AzThreadSendMsg {
        TerminateThread,
        Tick,
        Custom(AzRefAny),
    }

    /// Re-export of rust-allocated (stack based) `ThreadWriteBackMsg` struct
    #[repr(C)]
    pub struct AzThreadWriteBackMsg {
        pub data: AzRefAny,
        pub callback: AzWriteBackCallback,
    }

    /// Wrapper over a Rust-allocated `Vec<LogicalRect>`
    #[repr(C)]
    pub struct AzLogicalRectVec {
        pub(crate) ptr: *const AzLogicalRect,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzLogicalRectVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InputOutputTypeId>`
    #[repr(C)]
    pub struct AzInputOutputTypeIdVec {
        pub(crate) ptr: *const AzInputOutputTypeId,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInputOutputTypeIdVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<OutputNodeAndIndex>`
    #[repr(C)]
    pub struct AzOutputNodeAndIndexVec {
        pub(crate) ptr: *const AzOutputNodeAndIndex,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzOutputNodeAndIndexVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InputNodeAndIndex>`
    #[repr(C)]
    pub struct AzInputNodeAndIndexVec {
        pub(crate) ptr: *const AzInputNodeAndIndex,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInputNodeAndIndexVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<AccessibilityState>`
    #[repr(C)]
    pub struct AzAccessibilityStateVec {
        pub(crate) ptr: *const AzAccessibilityState,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzAccessibilityStateVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<MenuItem>`
    #[repr(C)]
    pub struct AzMenuItemVec {
        pub(crate) ptr: *const AzMenuItem,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzMenuItemVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<XmlNode>`
    #[repr(C)]
    pub struct AzXmlNodeVec {
        pub(crate) ptr: *const AzXmlNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzXmlNodeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InlineGlyph>`
    #[repr(C)]
    pub struct AzInlineGlyphVec {
        pub(crate) ptr: *const AzInlineGlyph,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInlineGlyphVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InlineTextHit>`
    #[repr(C)]
    pub struct AzInlineTextHitVec {
        pub(crate) ptr: *const AzInlineTextHit,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInlineTextHitVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<VideoMode>`
    #[repr(C)]
    pub struct AzVideoModeVec {
        pub(crate) ptr: *const AzVideoMode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzVideoModeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<Dom>`
    #[repr(C)]
    pub struct AzDomVec {
        pub(crate) ptr: *const AzDom,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzDomVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundPosition>`
    #[repr(C)]
    pub struct AzStyleBackgroundPositionVec {
        pub(crate) ptr: *const AzStyleBackgroundPosition,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundPositionVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundRepeat>`
    #[repr(C)]
    pub struct AzStyleBackgroundRepeatVec {
        pub(crate) ptr: *const AzStyleBackgroundRepeat,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundRepeatVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundSize>`
    #[repr(C)]
    pub struct AzStyleBackgroundSizeVec {
        pub(crate) ptr: *const AzStyleBackgroundSize,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundSizeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `SvgVertex`
    #[repr(C)]
    pub struct AzSvgVertexVec {
        pub(crate) ptr: *const AzSvgVertex,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgVertexVecDestructor,
    }

    /// Wrapper over a Rust-allocated `SvgColoredVertex`
    #[repr(C)]
    pub struct AzSvgColoredVertexVec {
        pub(crate) ptr: *const AzSvgColoredVertex,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgColoredVertexVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<u32>`
    #[repr(C)]
    pub struct AzU32Vec {
        pub(crate) ptr: *const u32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzU32VecDestructor,
    }

    /// Wrapper over a Rust-allocated `XWindowType`
    #[repr(C)]
    pub struct AzXWindowTypeVec {
        pub(crate) ptr: *const AzXWindowType,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzXWindowTypeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `VirtualKeyCode`
    #[repr(C)]
    pub struct AzVirtualKeyCodeVec {
        pub(crate) ptr: *const AzVirtualKeyCode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzVirtualKeyCodeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `CascadeInfo`
    #[repr(C)]
    pub struct AzCascadeInfoVec {
        pub(crate) ptr: *const AzCascadeInfo,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCascadeInfoVecDestructor,
    }

    /// Wrapper over a Rust-allocated `ScanCode`
    #[repr(C)]
    pub struct AzScanCodeVec {
        pub(crate) ptr: *const u32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzScanCodeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<u16>`
    #[repr(C)]
    pub struct AzU16Vec {
        pub(crate) ptr: *const u16,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzU16VecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<f32>`
    #[repr(C)]
    pub struct AzF32Vec {
        pub(crate) ptr: *const f32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzF32VecDestructor,
    }

    /// Wrapper over a Rust-allocated `U8Vec`
    #[repr(C)]
    pub struct AzU8Vec {
        pub(crate) ptr: *const u8,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzU8VecDestructor,
    }

    /// Wrapper over a Rust-allocated `U32Vec`
    #[repr(C)]
    pub struct AzGLuintVec {
        pub(crate) ptr: *const u32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzGLuintVecDestructor,
    }

    /// Wrapper over a Rust-allocated `GLintVec`
    #[repr(C)]
    pub struct AzGLintVec {
        pub(crate) ptr: *const i32,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzGLintVecDestructor,
    }

    /// Wrapper over a Rust-allocated `NormalizedLinearColorStopVec`
    #[repr(C)]
    pub struct AzNormalizedLinearColorStopVec {
        pub(crate) ptr: *const AzNormalizedLinearColorStop,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNormalizedLinearColorStopVecDestructor,
    }

    /// Wrapper over a Rust-allocated `NormalizedRadialColorStopVec`
    #[repr(C)]
    pub struct AzNormalizedRadialColorStopVec {
        pub(crate) ptr: *const AzNormalizedRadialColorStop,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNormalizedRadialColorStopVecDestructor,
    }

    /// Wrapper over a Rust-allocated `NodeIdVec`
    #[repr(C)]
    pub struct AzNodeIdVec {
        pub(crate) ptr: *const AzNodeId,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeIdVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<NodeHierarchyItem>`
    #[repr(C)]
    pub struct AzNodeHierarchyItemVec {
        pub(crate) ptr: *const AzNodeHierarchyItem,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeHierarchyItemVecDestructor,
    }

    /// Wrapper over a Rust-allocated `ParentWithNodeDepthVec`
    #[repr(C)]
    pub struct AzParentWithNodeDepthVec {
        pub(crate) ptr: *const AzParentWithNodeDepth,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzParentWithNodeDepthVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `OptionSvgPoint` struct
    #[repr(C, u8)]
    pub enum AzOptionSvgPoint {
        None,
        Some(AzSvgPoint),
    }

    /// Re-export of rust-allocated (stack based) `OptionStyleTextAlign` struct
    #[repr(C, u8)]
    pub enum AzOptionStyleTextAlign {
        None,
        Some(AzStyleTextAlign),
    }

    /// Re-export of rust-allocated (stack based) `OptionListViewOnRowClick` struct
    #[repr(C, u8)]
    pub enum AzOptionListViewOnRowClick {
        None,
        Some(AzListViewOnRowClick),
    }

    /// Re-export of rust-allocated (stack based) `OptionListViewOnColumnClick` struct
    #[repr(C, u8)]
    pub enum AzOptionListViewOnColumnClick {
        None,
        Some(AzListViewOnColumnClick),
    }

    /// Re-export of rust-allocated (stack based) `OptionListViewOnLazyLoadScroll` struct
    #[repr(C, u8)]
    pub enum AzOptionListViewOnLazyLoadScroll {
        None,
        Some(AzListViewOnLazyLoadScroll),
    }

    /// Re-export of rust-allocated (stack based) `OptionPixelValueNoPercent` struct
    #[repr(C, u8)]
    pub enum AzOptionPixelValueNoPercent {
        None,
        Some(AzPixelValueNoPercent),
    }

    /// Re-export of rust-allocated (stack based) `OptionDropDownOnChoiceChange` struct
    #[repr(C, u8)]
    pub enum AzOptionDropDownOnChoiceChange {
        None,
        Some(AzDropDownOnChoiceChange),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeAdded` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeAdded {
        None,
        Some(AzNodeGraphOnNodeAdded),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeRemoved` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeRemoved {
        None,
        Some(AzNodeGraphOnNodeRemoved),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeGraphDragged` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeGraphDragged {
        None,
        Some(AzNodeGraphOnNodeGraphDragged),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeDragged` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeDragged {
        None,
        Some(AzNodeGraphOnNodeDragged),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeConnected` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeConnected {
        None,
        Some(AzNodeGraphOnNodeConnected),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeInputDisconnected` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeInputDisconnected {
        None,
        Some(AzNodeGraphOnNodeInputDisconnected),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeOutputDisconnected` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeOutputDisconnected {
        None,
        Some(AzNodeGraphOnNodeOutputDisconnected),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeGraphOnNodeFieldEdited` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeGraphOnNodeFieldEdited {
        None,
        Some(AzNodeGraphOnNodeFieldEdited),
    }

    /// Re-export of rust-allocated (stack based) `OptionColorInputOnValueChange` struct
    #[repr(C, u8)]
    pub enum AzOptionColorInputOnValueChange {
        None,
        Some(AzColorInputOnValueChange),
    }

    /// Re-export of rust-allocated (stack based) `OptionButtonOnClick` struct
    #[repr(C, u8)]
    pub enum AzOptionButtonOnClick {
        None,
        Some(AzButtonOnClick),
    }

    /// Re-export of rust-allocated (stack based) `OptionTabOnClick` struct
    #[repr(C, u8)]
    pub enum AzOptionTabOnClick {
        None,
        Some(AzTabOnClick),
    }

    /// Re-export of rust-allocated (stack based) `OptionFileInputOnPathChange` struct
    #[repr(C, u8)]
    pub enum AzOptionFileInputOnPathChange {
        None,
        Some(AzFileInputOnPathChange),
    }

    /// Re-export of rust-allocated (stack based) `OptionCheckBoxOnToggle` struct
    #[repr(C, u8)]
    pub enum AzOptionCheckBoxOnToggle {
        None,
        Some(AzCheckBoxOnToggle),
    }

    /// Re-export of rust-allocated (stack based) `OptionTextInputOnTextInput` struct
    #[repr(C, u8)]
    pub enum AzOptionTextInputOnTextInput {
        None,
        Some(AzTextInputOnTextInput),
    }

    /// Re-export of rust-allocated (stack based) `OptionTextInputOnVirtualKeyDown` struct
    #[repr(C, u8)]
    pub enum AzOptionTextInputOnVirtualKeyDown {
        None,
        Some(AzTextInputOnVirtualKeyDown),
    }

    /// Re-export of rust-allocated (stack based) `OptionTextInputOnFocusLost` struct
    #[repr(C, u8)]
    pub enum AzOptionTextInputOnFocusLost {
        None,
        Some(AzTextInputOnFocusLost),
    }

    /// Re-export of rust-allocated (stack based) `OptionTextInputSelection` struct
    #[repr(C, u8)]
    pub enum AzOptionTextInputSelection {
        None,
        Some(AzTextInputSelection),
    }

    /// Re-export of rust-allocated (stack based) `OptionNumberInputOnFocusLost` struct
    #[repr(C, u8)]
    pub enum AzOptionNumberInputOnFocusLost {
        None,
        Some(AzNumberInputOnFocusLost),
    }

    /// Re-export of rust-allocated (stack based) `OptionNumberInputOnValueChange` struct
    #[repr(C, u8)]
    pub enum AzOptionNumberInputOnValueChange {
        None,
        Some(AzNumberInputOnValueChange),
    }

    /// Re-export of rust-allocated (stack based) `OptionMenuItemIcon` struct
    #[repr(C, u8)]
    pub enum AzOptionMenuItemIcon {
        None,
        Some(AzMenuItemIcon),
    }

    /// Re-export of rust-allocated (stack based) `OptionMenuCallback` struct
    #[repr(C, u8)]
    pub enum AzOptionMenuCallback {
        None,
        Some(AzMenuCallback),
    }

    /// Re-export of rust-allocated (stack based) `OptionPositionInfo` struct
    #[repr(C, u8)]
    pub enum AzOptionPositionInfo {
        None,
        Some(AzPositionInfo),
    }

    /// Re-export of rust-allocated (stack based) `OptionTimerId` struct
    #[repr(C, u8)]
    pub enum AzOptionTimerId {
        None,
        Some(AzTimerId),
    }

    /// Re-export of rust-allocated (stack based) `OptionThreadId` struct
    #[repr(C, u8)]
    pub enum AzOptionThreadId {
        None,
        Some(AzThreadId),
    }

    /// Re-export of rust-allocated (stack based) `OptionImageRef` struct
    #[repr(C, u8)]
    pub enum AzOptionImageRef {
        None,
        Some(AzImageRef),
    }

    /// Re-export of rust-allocated (stack based) `OptionFontRef` struct
    #[repr(C, u8)]
    pub enum AzOptionFontRef {
        None,
        Some(AzFontRef),
    }

    /// Re-export of rust-allocated (stack based) `OptionSystemClipboard` struct
    #[repr(C, u8)]
    pub enum AzOptionSystemClipboard {
        None,
        Some(AzSystemClipboard),
    }

    /// Re-export of rust-allocated (stack based) `OptionGl` struct
    #[repr(C, u8)]
    pub enum AzOptionGl {
        None,
        Some(AzGl),
    }

    /// Re-export of rust-allocated (stack based) `OptionPercentageValue` struct
    #[repr(C, u8)]
    pub enum AzOptionPercentageValue {
        None,
        Some(AzPercentageValue),
    }

    /// Re-export of rust-allocated (stack based) `OptionAngleValue` struct
    #[repr(C, u8)]
    pub enum AzOptionAngleValue {
        None,
        Some(AzAngleValue),
    }

    /// Re-export of rust-allocated (stack based) `OptionRendererOptions` struct
    #[repr(C, u8)]
    pub enum AzOptionRendererOptions {
        None,
        Some(AzRendererOptions),
    }

    /// Re-export of rust-allocated (stack based) `OptionCallback` struct
    #[repr(C, u8)]
    pub enum AzOptionCallback {
        None,
        Some(AzCallback),
    }

    /// Re-export of rust-allocated (stack based) `OptionThreadSendMsg` struct
    #[repr(C, u8)]
    pub enum AzOptionThreadSendMsg {
        None,
        Some(AzThreadSendMsg),
    }

    /// Re-export of rust-allocated (stack based) `OptionLayoutRect` struct
    #[repr(C, u8)]
    pub enum AzOptionLayoutRect {
        None,
        Some(AzLayoutRect),
    }

    /// Re-export of rust-allocated (stack based) `OptionRefAny` struct
    #[repr(C, u8)]
    pub enum AzOptionRefAny {
        None,
        Some(AzRefAny),
    }

    /// Re-export of rust-allocated (stack based) `OptionLayoutPoint` struct
    #[repr(C, u8)]
    pub enum AzOptionLayoutPoint {
        None,
        Some(AzLayoutPoint),
    }

    /// Re-export of rust-allocated (stack based) `OptionLayoutSize` struct
    #[repr(C, u8)]
    pub enum AzOptionLayoutSize {
        None,
        Some(AzLayoutSize),
    }

    /// Re-export of rust-allocated (stack based) `OptionWindowTheme` struct
    #[repr(C, u8)]
    pub enum AzOptionWindowTheme {
        None,
        Some(AzWindowTheme),
    }

    /// Re-export of rust-allocated (stack based) `OptionNodeId` struct
    #[repr(C, u8)]
    pub enum AzOptionNodeId {
        None,
        Some(AzNodeId),
    }

    /// Re-export of rust-allocated (stack based) `OptionDomNodeId` struct
    #[repr(C, u8)]
    pub enum AzOptionDomNodeId {
        None,
        Some(AzDomNodeId),
    }

    /// Re-export of rust-allocated (stack based) `OptionColorU` struct
    #[repr(C, u8)]
    pub enum AzOptionColorU {
        None,
        Some(AzColorU),
    }

    /// Re-export of rust-allocated (stack based) `OptionSvgDashPattern` struct
    #[repr(C, u8)]
    pub enum AzOptionSvgDashPattern {
        None,
        Some(AzSvgDashPattern),
    }

    /// Re-export of rust-allocated (stack based) `OptionLogicalPosition` struct
    #[repr(C, u8)]
    pub enum AzOptionLogicalPosition {
        None,
        Some(AzLogicalPosition),
    }

    /// Re-export of rust-allocated (stack based) `OptionPhysicalPositionI32` struct
    #[repr(C, u8)]
    pub enum AzOptionPhysicalPositionI32 {
        None,
        Some(AzPhysicalPositionI32),
    }

    /// Re-export of rust-allocated (stack based) `OptionMouseCursorType` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzOptionMouseCursorType {
        None,
        Some(AzMouseCursorType),
    }

    /// Re-export of rust-allocated (stack based) `OptionLogicalSize` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzOptionLogicalSize {
        None,
        Some(AzLogicalSize),
    }

    /// Re-export of rust-allocated (stack based) `OptionVirtualKeyCode` struct
    #[repr(C, u8)]
    pub enum AzOptionVirtualKeyCode {
        None,
        Some(AzVirtualKeyCode),
    }

    /// Re-export of rust-allocated (stack based) `OptionImageMask` struct
    #[repr(C, u8)]
    pub enum AzOptionImageMask {
        None,
        Some(AzImageMask),
    }

    /// Re-export of rust-allocated (stack based) `OptionTabIndex` struct
    #[repr(C, u8)]
    pub enum AzOptionTabIndex {
        None,
        Some(AzTabIndex),
    }

    /// Re-export of rust-allocated (stack based) `OptionTagId` struct
    #[repr(C, u8)]
    pub enum AzOptionTagId {
        None,
        Some(AzTagId),
    }

    /// Re-export of rust-allocated (stack based) `OptionDuration` struct
    #[repr(C, u8)]
    pub enum AzOptionDuration {
        None,
        Some(AzDuration),
    }

    /// Re-export of rust-allocated (stack based) `OptionU8Vec` struct
    #[repr(C, u8)]
    pub enum AzOptionU8Vec {
        None,
        Some(AzU8Vec),
    }

    /// Re-export of rust-allocated (stack based) `OptionU8VecRef` struct
    #[repr(C, u8)]
    pub enum AzOptionU8VecRef {
        None,
        Some(AzU8VecRef),
    }

    /// Re-export of rust-allocated (stack based) `ResultU8VecEncodeImageError` struct
    #[repr(C, u8)]
    pub enum AzResultU8VecEncodeImageError {
        Ok(AzU8Vec),
        Err(AzEncodeImageError),
    }

    /// Re-export of rust-allocated (stack based) `NonXmlCharError` struct
    #[repr(C)]
    pub struct AzNonXmlCharError {
        pub ch: u32,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `InvalidCharError` struct
    #[repr(C)]
    pub struct AzInvalidCharError {
        pub expected: u8,
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `InvalidCharMultipleError` struct
    #[repr(C)]
    pub struct AzInvalidCharMultipleError {
        pub expected: u8,
        pub got: AzU8Vec,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `InvalidQuoteError` struct
    #[repr(C)]
    pub struct AzInvalidQuoteError {
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `InvalidSpaceError` struct
    #[repr(C)]
    pub struct AzInvalidSpaceError {
        pub got: u8,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Configuration for optional features, such as whether to enable logging or panic hooks
    #[repr(C)]
    pub struct AzAppConfig {
        pub layout_solver: AzLayoutSolver,
        pub log_level: AzAppLogLevel,
        pub enable_visual_panic_hook: bool,
        pub enable_logging_on_panic: bool,
        pub enable_tab_navigation: bool,
        pub system_callbacks: AzSystemCallbacks,
    }

    /// Small (16x16x4) window icon, usually shown in the window titlebar
    #[repr(C)]
    pub struct AzSmallWindowIconBytes {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }

    /// Large (32x32x4) window icon, usually used on high-resolution displays (instead of
    /// `SmallWindowIcon`)
    #[repr(C)]
    pub struct AzLargeWindowIconBytes {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }

    /// Window "favicon", usually shown in the top left of the window on Windows
    #[repr(C, u8)]
    pub enum AzWindowIcon {
        Small(AzSmallWindowIconBytes),
        Large(AzLargeWindowIconBytes),
    }

    /// Application taskbar icon, 256x256x4 bytes in size
    #[repr(C)]
    pub struct AzTaskBarIcon {
        pub key: AzIconKey,
        pub rgba_bytes: AzU8Vec,
    }

    /// Minimum / maximum / current size of the window in logical dimensions
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzWindowSize {
        pub dimensions: AzLogicalSize,
        pub dpi: u32,
        pub min_dimensions: AzOptionLogicalSize,
        pub max_dimensions: AzOptionLogicalSize,
    }

    /// Current keyboard state, stores what keys / characters have been pressed
    #[repr(C)]
    pub struct AzKeyboardState {
        pub current_char: AzOptionChar,
        pub current_virtual_keycode: AzOptionVirtualKeyCode,
        pub pressed_virtual_keycodes: AzVirtualKeyCodeVec,
        pub pressed_scancodes: AzScanCodeVec,
    }

    /// Current mouse / cursor state
    #[repr(C)]
    pub struct AzMouseState {
        pub mouse_cursor_type: AzOptionMouseCursorType,
        pub cursor_position: AzCursorPosition,
        pub is_cursor_locked: bool,
        pub left_down: bool,
        pub right_down: bool,
        pub middle_down: bool,
        pub scroll_x: AzOptionF32,
        pub scroll_y: AzOptionF32,
    }

    /// C-ABI stable wrapper over a `MarshaledLayoutCallback`
    #[repr(C)]
    pub struct AzMarshaledLayoutCallback {
        pub marshal_data: AzRefAny,
        pub cb: AzMarshaledLayoutCallbackInner,
    }

    /// Re-export of rust-allocated (stack based) `InlineTextContents` struct
    #[repr(C)]
    pub struct AzInlineTextContents {
        pub glyphs: AzInlineGlyphVec,
        pub bounds: AzLogicalRect,
    }

    /// Re-export of rust-allocated (stack based) `ResolvedTextLayoutOptions` struct
    #[repr(C)]
    pub struct AzResolvedTextLayoutOptions {
        pub font_size_px: f32,
        pub line_height: AzOptionF32,
        pub letter_spacing: AzOptionF32,
        pub word_spacing: AzOptionF32,
        pub tab_width: AzOptionF32,
        pub max_horizontal_width: AzOptionF32,
        pub leading: AzOptionF32,
        pub holes: AzLogicalRectVec,
        pub max_vertical_height: AzOptionF32,
        pub can_break: bool,
        pub can_hyphenate: bool,
        pub hyphenation_character: AzOptionChar,
        pub is_rtl: AzScriptType,
        pub text_justify: AzOptionStyleTextAlign,
    }

    /// Easing function of the animation (ease-in, ease-out, ease-in-out, custom)
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzAnimationEasing {
        Ease,
        Linear,
        EaseIn,
        EaseOut,
        EaseInOut,
        CubicBezier(AzSvgCubicCurve),
    }

    /// Re-export of rust-allocated (stack based) `RenderImageCallbackInfo` struct
    #[repr(C)]
    pub struct AzRenderImageCallbackInfo {
        pub callback_node_id: AzDomNodeId,
        pub bounds: AzHidpiAdjustedBounds,
        pub gl_context: *const AzOptionGl,
        pub image_cache: *const c_void,
        pub system_fonts: *const c_void,
        pub node_hierarchy: *const AzNodeHierarchyItemVec,
        pub words_cache: *const c_void,
        pub shaped_words_cache: *const c_void,
        pub positioned_words_cache: *const c_void,
        pub positioned_rects: *const c_void,
        pub _reserved_ref: *const c_void,
        pub _reserved_mut: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `LayoutCallbackInfo` struct
    #[repr(C)]
    pub struct AzLayoutCallbackInfo {
        pub window_size: AzWindowSize,
        pub theme: AzWindowTheme,
        pub image_cache: *const c_void,
        pub gl_context: *const AzOptionGl,
        pub system_fonts: *const c_void,
        pub _reserved_ref: *const c_void,
        pub _reserved_mut: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `EventFilter` struct
    #[repr(C, u8)]
    pub enum AzEventFilter {
        Hover(AzHoverEventFilter),
        Not(AzNotEventFilter),
        Focus(AzFocusEventFilter),
        Window(AzWindowEventFilter),
        Component(AzComponentEventFilter),
        Application(AzApplicationEventFilter),
    }

    /// Menu struct (application / window menu, dropdown menu, context menu). Modeled after the
    /// Windows API
    #[repr(C)]
    pub struct AzMenu {
        pub items: AzMenuItemVec,
        pub position: AzMenuPopupPosition,
        pub context_mouse_btn: AzContextMenuMouseButton,
    }

    /// Combination of virtual key codes that have to be pressed together
    #[repr(C)]
    pub struct AzVirtualKeyCodeCombo {
        pub keys: AzVirtualKeyCodeVec,
    }

    /// Re-export of rust-allocated (stack based) `CssPathPseudoSelector` struct
    #[repr(C, u8)]
    pub enum AzCssPathPseudoSelector {
        First,
        Last,
        NthChild(AzCssNthChildSelector),
        Hover,
        Active,
        Focus,
    }

    /// Re-export of rust-allocated (stack based) `AnimationInterpolationFunction` struct
    #[repr(C, u8)]
    pub enum AzAnimationInterpolationFunction {
        Ease,
        Linear,
        EaseIn,
        EaseOut,
        EaseInOut,
        CubicBezier(AzSvgCubicCurve),
    }

    /// Re-export of rust-allocated (stack based) `InterpolateContext` struct
    #[repr(C)]
    pub struct AzInterpolateContext {
        pub animation_func: AzAnimationInterpolationFunction,
        pub parent_rect_width: f32,
        pub parent_rect_height: f32,
        pub current_rect_width: f32,
        pub current_rect_height: f32,
    }

    /// Re-export of rust-allocated (stack based) `StyleFilter` struct
    #[repr(C, u8)]
    pub enum AzStyleFilter {
        Blend(AzStyleMixBlendMode),
        Flood(AzColorU),
        Blur(AzStyleBlur),
        Opacity(AzPercentageValue),
        ColorMatrix(AzStyleColorMatrix),
        DropShadow(AzStyleBoxShadow),
        ComponentTransfer,
        Offset(AzStyleFilterOffset),
        Composite(AzStyleCompositeFilter),
    }

    /// Re-export of rust-allocated (stack based) `LinearGradient` struct
    #[repr(C)]
    pub struct AzLinearGradient {
        pub direction: AzDirection,
        pub extend_mode: AzExtendMode,
        pub stops: AzNormalizedLinearColorStopVec,
    }

    /// Re-export of rust-allocated (stack based) `RadialGradient` struct
    #[repr(C)]
    pub struct AzRadialGradient {
        pub shape: AzShape,
        pub size: AzRadialGradientSize,
        pub position: AzStyleBackgroundPosition,
        pub extend_mode: AzExtendMode,
        pub stops: AzNormalizedLinearColorStopVec,
    }

    /// Re-export of rust-allocated (stack based) `ConicGradient` struct
    #[repr(C)]
    pub struct AzConicGradient {
        pub extend_mode: AzExtendMode,
        pub center: AzStyleBackgroundPosition,
        pub angle: AzAngleValue,
        pub stops: AzNormalizedRadialColorStopVec,
    }

    /// Re-export of rust-allocated (stack based) `StyleTransform` struct
    #[repr(C, u8)]
    pub enum AzStyleTransform {
        Matrix(AzStyleTransformMatrix2D),
        Matrix3D(AzStyleTransformMatrix3D),
        Translate(AzStyleTransformTranslate2D),
        Translate3D(AzStyleTransformTranslate3D),
        TranslateX(AzPixelValue),
        TranslateY(AzPixelValue),
        TranslateZ(AzPixelValue),
        Rotate(AzAngleValue),
        Rotate3D(AzStyleTransformRotate3D),
        RotateX(AzAngleValue),
        RotateY(AzAngleValue),
        RotateZ(AzAngleValue),
        Scale(AzStyleTransformScale2D),
        Scale3D(AzStyleTransformScale3D),
        ScaleX(AzPercentageValue),
        ScaleY(AzPercentageValue),
        ScaleZ(AzPercentageValue),
        Skew(AzStyleTransformSkew2D),
        SkewX(AzPercentageValue),
        SkewY(AzPercentageValue),
        Perspective(AzPixelValue),
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundPositionVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundPositionVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundPositionVec),
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundRepeatVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundRepeatVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundRepeatVec),
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundSizeVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundSizeVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundSizeVec),
    }

    /// Re-export of rust-allocated (stack based) `CheckBoxStateWrapper` struct
    #[repr(C)]
    pub struct AzCheckBoxStateWrapper {
        pub inner: AzCheckBoxState,
        pub on_toggle: AzOptionCheckBoxOnToggle,
    }

    /// Re-export of rust-allocated (stack based) `NumberInputStateWrapper` struct
    #[repr(C)]
    pub struct AzNumberInputStateWrapper {
        pub inner: AzNumberInputState,
        pub on_value_change: AzOptionNumberInputOnValueChange,
        pub on_focus_lost: AzOptionNumberInputOnFocusLost,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraphCallbacks` struct
    #[repr(C)]
    pub struct AzNodeGraphCallbacks {
        pub on_node_added: AzOptionNodeGraphOnNodeAdded,
        pub on_node_removed: AzOptionNodeGraphOnNodeRemoved,
        pub on_node_dragged: AzOptionNodeGraphOnNodeDragged,
        pub on_node_graph_dragged: AzOptionNodeGraphOnNodeGraphDragged,
        pub on_node_connected: AzOptionNodeGraphOnNodeConnected,
        pub on_node_input_disconnected: AzOptionNodeGraphOnNodeInputDisconnected,
        pub on_node_output_disconnected: AzOptionNodeGraphOnNodeOutputDisconnected,
        pub on_node_field_edited: AzOptionNodeGraphOnNodeFieldEdited,
    }

    /// Re-export of rust-allocated (stack based) `InputConnection` struct
    #[repr(C)]
    pub struct AzInputConnection {
        pub input_index: usize,
        pub connects_to: AzOutputNodeAndIndexVec,
    }

    /// Re-export of rust-allocated (stack based) `OutputConnection` struct
    #[repr(C)]
    pub struct AzOutputConnection {
        pub output_index: usize,
        pub connects_to: AzInputNodeAndIndexVec,
    }

    /// Re-export of rust-allocated (stack based) `ListViewRow` struct
    #[repr(C)]
    pub struct AzListViewRow {
        pub cells: AzDomVec,
        pub height: AzOptionPixelValueNoPercent,
    }

    /// Re-export of rust-allocated (stack based) `StyledNode` struct
    #[repr(C)]
    pub struct AzStyledNode {
        pub state: AzStyledNodeState,
        pub tag_id: AzOptionTagId,
    }

    /// Re-export of rust-allocated (stack based) `TagIdToNodeIdMapping` struct
    #[repr(C)]
    pub struct AzTagIdToNodeIdMapping {
        pub tag_id: AzTagId,
        pub node_id: AzNodeId,
        pub tab_index: AzOptionTabIndex,
        pub parents: AzNodeIdVec,
    }

    /// Re-export of rust-allocated (stack based) `Texture` struct
    #[repr(C)]
    pub struct AzTexture {
        pub texture_id: u32,
        pub flags: AzTextureFlags,
        pub size: AzPhysicalSizeU32,
        pub background_color: AzColorU,
        pub gl_context: AzGl,
        pub format: AzRawImageFormat,
        pub refcount: *const c_void,
        pub run_destructor: bool,
    }

    /// C-ABI stable reexport of `(U8Vec, u32)`
    #[repr(C)]
    pub struct AzGetProgramBinaryReturn {
        pub _0: AzU8Vec,
        pub _1: u32,
    }

    /// Re-export of rust-allocated (stack based) `RawImageData` struct
    #[repr(C, u8)]
    pub enum AzRawImageData {
        U8(AzU8Vec),
        U16(AzU16Vec),
        F32(AzF32Vec),
    }

    /// Source data of a font file (bytes)
    #[repr(C)]
    pub struct AzFontSource {
        pub data: AzU8Vec,
        pub font_index: u32,
        pub parse_glyph_outlines: bool,
    }

    /// Re-export of rust-allocated (stack based) `SvgPathElement` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzSvgPathElement {
        Line(AzSvgLine),
        QuadraticCurve(AzSvgQuadraticCurve),
        CubicCurve(AzSvgCubicCurve),
    }

    /// Re-export of rust-allocated (stack based) `TessellatedColoredSvgNode` struct
    #[repr(C)]
    pub struct AzTessellatedColoredSvgNode {
        pub vertices: AzSvgColoredVertexVec,
        pub indices: AzU32Vec,
    }

    /// Rust wrapper over a `&[TessellatedColoredSvgNode]` or `&Vec<TessellatedColoredSvgNode>`
    #[repr(C)]
    pub struct AzTessellatedColoredSvgNodeVecRef {
        pub(crate) ptr: *const AzTessellatedColoredSvgNode,
        pub len: usize,
    }

    /// Re-export of rust-allocated (stack based) `TessellatedSvgNode` struct
    #[repr(C)]
    pub struct AzTessellatedSvgNode {
        pub vertices: AzSvgVertexVec,
        pub indices: AzU32Vec,
    }

    /// Rust wrapper over a `&[TessellatedSvgNode]` or `&Vec<TessellatedSvgNode>`
    #[repr(C)]
    pub struct AzTessellatedSvgNodeVecRef {
        pub(crate) ptr: *const AzTessellatedSvgNode,
        pub len: usize,
    }

    /// Re-export of rust-allocated (stack based) `SvgRenderOptions` struct
    #[repr(C)]
    pub struct AzSvgRenderOptions {
        pub target_size: AzOptionLayoutSize,
        pub background_color: AzOptionColorU,
        pub fit: AzSvgFitTo,
        pub transform: AzSvgRenderTransform,
    }

    /// Re-export of rust-allocated (stack based) `SvgStrokeStyle` struct
    #[repr(C)]
    pub struct AzSvgStrokeStyle {
        pub start_cap: AzSvgLineCap,
        pub end_cap: AzSvgLineCap,
        pub line_join: AzSvgLineJoin,
        pub dash_pattern: AzOptionSvgDashPattern,
        pub line_width: f32,
        pub miter_limit: f32,
        pub tolerance: f32,
        pub apply_line_width: bool,
        pub transform: AzSvgTransform,
        pub anti_alias: bool,
        pub high_quality_aa: bool,
    }

    /// Re-export of rust-allocated (stack based) `Xml` struct
    #[repr(C)]
    pub struct AzXml {
        pub root: AzXmlNodeVec,
    }

    /// Re-export of rust-allocated (stack based) `Instant` struct
    #[repr(C, u8)]
    pub enum AzInstant {
        System(AzInstantPtr),
        Tick(AzSystemTick),
    }

    /// Re-export of rust-allocated (stack based) `ThreadReceiveMsg` struct
    #[repr(C, u8)]
    pub enum AzThreadReceiveMsg {
        WriteBack(AzThreadWriteBackMsg),
        Update(AzUpdate),
    }

    /// Re-export of rust-allocated (stack based) `String` struct
    #[repr(C)]
    pub struct AzString {
        pub vec: AzU8Vec,
    }

    /// Wrapper over a Rust-allocated `Vec<ListViewRow>`
    #[repr(C)]
    pub struct AzListViewRowVec {
        pub(crate) ptr: *const AzListViewRow,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzListViewRowVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleFilter>`
    #[repr(C)]
    pub struct AzStyleFilterVec {
        pub(crate) ptr: *const AzStyleFilter,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleFilterVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InputConnection>`
    #[repr(C)]
    pub struct AzInputConnectionVec {
        pub(crate) ptr: *const AzInputConnection,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInputConnectionVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<OutputConnection>`
    #[repr(C)]
    pub struct AzOutputConnectionVec {
        pub(crate) ptr: *const AzOutputConnection,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzOutputConnectionVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<TessellatedSvgNode>`
    #[repr(C)]
    pub struct AzTessellatedSvgNodeVec {
        pub(crate) ptr: *const AzTessellatedSvgNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzTessellatedSvgNodeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<TessellatedColoredSvgNode>`
    #[repr(C)]
    pub struct AzTessellatedColoredSvgNodeVec {
        pub(crate) ptr: *const AzTessellatedColoredSvgNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzTessellatedColoredSvgNodeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleTransform>`
    #[repr(C)]
    pub struct AzStyleTransformVec {
        pub(crate) ptr: *const AzStyleTransform,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleTransformVecDestructor,
    }

    /// Wrapper over a Rust-allocated `VertexAttribute`
    #[repr(C)]
    pub struct AzSvgPathElementVec {
        pub(crate) ptr: *const AzSvgPathElement,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgPathElementVecDestructor,
    }

    /// Wrapper over a Rust-allocated `StringVec`
    #[repr(C)]
    pub struct AzStringVec {
        pub(crate) ptr: *const AzString,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStringVecDestructor,
    }

    /// Wrapper over a Rust-allocated `StyledNodeVec`
    #[repr(C)]
    pub struct AzStyledNodeVec {
        pub(crate) ptr: *const AzStyledNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyledNodeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `TagIdToNodeIdMappingVec`
    #[repr(C)]
    pub struct AzTagIdToNodeIdMappingVec {
        pub(crate) ptr: *const AzTagIdToNodeIdMapping,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzTagIdToNodeIdMappingVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `OptionMenu` struct
    #[repr(C, u8)]
    pub enum AzOptionMenu {
        None,
        Some(AzMenu),
    }

    /// Re-export of rust-allocated (stack based) `OptionResolvedTextLayoutOptions` struct
    #[repr(C, u8)]
    pub enum AzOptionResolvedTextLayoutOptions {
        None,
        Some(AzResolvedTextLayoutOptions),
    }

    /// Re-export of rust-allocated (stack based) `OptionVirtualKeyCodeCombo` struct
    #[repr(C, u8)]
    pub enum AzOptionVirtualKeyCodeCombo {
        None,
        Some(AzVirtualKeyCodeCombo),
    }

    /// Re-export of rust-allocated (stack based) `OptionMouseState` struct
    #[repr(C, u8)]
    pub enum AzOptionMouseState {
        None,
        Some(AzMouseState),
    }

    /// Re-export of rust-allocated (stack based) `OptionKeyboardState` struct
    #[repr(C, u8)]
    pub enum AzOptionKeyboardState {
        None,
        Some(AzKeyboardState),
    }

    /// Re-export of rust-allocated (stack based) `OptionStringVec` struct
    #[repr(C, u8)]
    pub enum AzOptionStringVec {
        None,
        Some(AzStringVec),
    }

    /// Re-export of rust-allocated (stack based) `OptionThreadReceiveMsg` struct
    #[repr(C, u8)]
    pub enum AzOptionThreadReceiveMsg {
        None,
        Some(AzThreadReceiveMsg),
    }

    /// Re-export of rust-allocated (stack based) `OptionTaskBarIcon` struct
    #[repr(C, u8)]
    pub enum AzOptionTaskBarIcon {
        None,
        Some(AzTaskBarIcon),
    }

    /// Re-export of rust-allocated (stack based) `OptionWindowIcon` struct
    #[repr(C, u8)]
    pub enum AzOptionWindowIcon {
        None,
        Some(AzWindowIcon),
    }

    /// Re-export of rust-allocated (stack based) `OptionString` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzOptionString {
        None,
        Some(AzString),
    }

    /// Re-export of rust-allocated (stack based) `OptionTexture` struct
    #[repr(C, u8)]
    pub enum AzOptionTexture {
        None,
        Some(AzTexture),
    }

    /// Re-export of rust-allocated (stack based) `OptionInstant` struct
    #[repr(C, u8)]
    pub enum AzOptionInstant {
        None,
        Some(AzInstant),
    }

    /// Re-export of rust-allocated (stack based) `DuplicatedNamespaceError` struct
    #[repr(C)]
    pub struct AzDuplicatedNamespaceError {
        pub ns: AzString,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `UnknownNamespaceError` struct
    #[repr(C)]
    pub struct AzUnknownNamespaceError {
        pub ns: AzString,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `UnexpectedCloseTagError` struct
    #[repr(C)]
    pub struct AzUnexpectedCloseTagError {
        pub expected: AzString,
        pub actual: AzString,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `UnknownEntityReferenceError` struct
    #[repr(C)]
    pub struct AzUnknownEntityReferenceError {
        pub entity: AzString,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `DuplicatedAttributeError` struct
    #[repr(C)]
    pub struct AzDuplicatedAttributeError {
        pub attribute: AzString,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Re-export of rust-allocated (stack based) `InvalidStringError` struct
    #[repr(C)]
    pub struct AzInvalidStringError {
        pub got: AzString,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Window configuration specific to Win32
    #[repr(C)]
    pub struct AzWindowsWindowOptions {
        pub allow_drag_drop: bool,
        pub no_redirection_bitmap: bool,
        pub window_icon: AzOptionWindowIcon,
        pub taskbar_icon: AzOptionTaskBarIcon,
        pub parent_window: AzOptionHwndHandle,
    }

    /// CSD theme of the window title / button controls
    #[repr(C)]
    pub struct AzWaylandTheme {
        pub title_bar_active_background_color: [u8; 4],
        pub title_bar_active_separator_color: [u8; 4],
        pub title_bar_active_text_color: [u8; 4],
        pub title_bar_inactive_background_color: [u8; 4],
        pub title_bar_inactive_separator_color: [u8; 4],
        pub title_bar_inactive_text_color: [u8; 4],
        pub maximize_idle_foreground_inactive_color: [u8; 4],
        pub minimize_idle_foreground_inactive_color: [u8; 4],
        pub close_idle_foreground_inactive_color: [u8; 4],
        pub maximize_hovered_foreground_inactive_color: [u8; 4],
        pub minimize_hovered_foreground_inactive_color: [u8; 4],
        pub close_hovered_foreground_inactive_color: [u8; 4],
        pub maximize_disabled_foreground_inactive_color: [u8; 4],
        pub minimize_disabled_foreground_inactive_color: [u8; 4],
        pub close_disabled_foreground_inactive_color: [u8; 4],
        pub maximize_idle_background_inactive_color: [u8; 4],
        pub minimize_idle_background_inactive_color: [u8; 4],
        pub close_idle_background_inactive_color: [u8; 4],
        pub maximize_hovered_background_inactive_color: [u8; 4],
        pub minimize_hovered_background_inactive_color: [u8; 4],
        pub close_hovered_background_inactive_color: [u8; 4],
        pub maximize_disabled_background_inactive_color: [u8; 4],
        pub minimize_disabled_background_inactive_color: [u8; 4],
        pub close_disabled_background_inactive_color: [u8; 4],
        pub maximize_idle_foreground_active_color: [u8; 4],
        pub minimize_idle_foreground_active_color: [u8; 4],
        pub close_idle_foreground_active_color: [u8; 4],
        pub maximize_hovered_foreground_active_color: [u8; 4],
        pub minimize_hovered_foreground_active_color: [u8; 4],
        pub close_hovered_foreground_active_color: [u8; 4],
        pub maximize_disabled_foreground_active_color: [u8; 4],
        pub minimize_disabled_foreground_active_color: [u8; 4],
        pub close_disabled_foreground_active_color: [u8; 4],
        pub maximize_idle_background_active_color: [u8; 4],
        pub minimize_idle_background_active_color: [u8; 4],
        pub close_idle_background_active_color: [u8; 4],
        pub maximize_hovered_background_active_color: [u8; 4],
        pub minimize_hovered_background_active_color: [u8; 4],
        pub close_hovered_background_active_color: [u8; 4],
        pub maximize_disabled_background_active_color: [u8; 4],
        pub minimize_disabled_background_active_color: [u8; 4],
        pub close_disabled_background_active_color: [u8; 4],
        pub title_bar_font: AzString,
        pub title_bar_font_size: f32,
    }

    /// Key-value pair, used for setting WM hints values specific to GNOME
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzStringPair {
        pub key: AzString,
        pub value: AzString,
    }

    /// Information about a single (or many) monitors, useful for dock widgets
    #[repr(C)]
    pub struct AzMonitor {
        pub id: usize,
        pub name: AzOptionString,
        pub size: AzLayoutSize,
        pub position: AzLayoutPoint,
        pub scale_factor: f64,
        pub video_modes: AzVideoModeVec,
        pub is_primary_monitor: bool,
    }

    /// Re-export of rust-allocated (stack based) `LayoutCallback` struct
    #[repr(C, u8)]
    pub enum AzLayoutCallback {
        Raw(AzLayoutCallbackInner),
        Marshaled(AzMarshaledLayoutCallback),
    }

    /// Re-export of rust-allocated (stack based) `InlineWord` struct
    #[repr(C, u8)]
    pub enum AzInlineWord {
        Tab,
        Return,
        Space,
        Word(AzInlineTextContents),
    }

    /// Re-export of rust-allocated (stack based) `CallbackData` struct
    #[repr(C)]
    pub struct AzCallbackData {
        pub event: AzEventFilter,
        pub callback: AzCallback,
        pub data: AzRefAny,
    }

    /// List of core DOM node types built-into by `azul`
    #[repr(C, u8)]
    pub enum AzNodeType {
        Body,
        Div,
        Br,
        Text(AzString),
        Image(AzImageRef),
        IFrame(AzIFrameNode),
    }

    /// Accessibility information (MSAA wrapper). See `NodeData.set_accessibility_info()`
    #[repr(C)]
    pub struct AzAccessibilityInfo {
        pub name: AzOptionString,
        pub value: AzOptionString,
        pub role: AzAccessibilityRole,
        pub states: AzAccessibilityStateVec,
        pub accelerator: AzOptionVirtualKeyCodeCombo,
        pub default_action: AzOptionString,
    }

    /// Re-export of rust-allocated (stack based) `IdOrClass` struct
    #[repr(C, u8)]
    pub enum AzIdOrClass {
        Id(AzString),
        Class(AzString),
    }

    /// Regular labeled menu item
    #[repr(C)]
    pub struct AzStringMenuItem {
        pub label: AzString,
        pub accelerator: AzOptionVirtualKeyCodeCombo,
        pub callback: AzOptionMenuCallback,
        pub state: AzMenuItemState,
        pub icon: AzOptionMenuItemIcon,
        pub children: AzMenuItemVec,
    }

    /// Re-export of rust-allocated (stack based) `CssPathSelector` struct
    #[repr(C, u8)]
    pub enum AzCssPathSelector {
        Global,
        Type(AzNodeTypeKey),
        Class(AzString),
        Id(AzString),
        PseudoSelector(AzCssPathPseudoSelector),
        DirectChildren,
        Children,
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundContent` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundContent {
        LinearGradient(AzLinearGradient),
        RadialGradient(AzRadialGradient),
        ConicGradient(AzConicGradient),
        Image(AzString),
        Color(AzColorU),
    }

    /// Re-export of rust-allocated (stack based) `ScrollbarInfo` struct
    #[repr(C)]
    pub struct AzScrollbarInfo {
        pub width: AzLayoutWidth,
        pub padding_left: AzLayoutPaddingLeft,
        pub padding_right: AzLayoutPaddingRight,
        pub track: AzStyleBackgroundContent,
        pub thumb: AzStyleBackgroundContent,
        pub button: AzStyleBackgroundContent,
        pub corner: AzStyleBackgroundContent,
        pub resizer: AzStyleBackgroundContent,
    }

    /// Re-export of rust-allocated (stack based) `ScrollbarStyle` struct
    #[repr(C)]
    pub struct AzScrollbarStyle {
        pub horizontal: AzScrollbarInfo,
        pub vertical: AzScrollbarInfo,
    }

    /// Re-export of rust-allocated (stack based) `StyleFontFamily` struct
    #[repr(C, u8)]
    pub enum AzStyleFontFamily {
        System(AzString),
        File(AzString),
        Ref(AzFontRef),
    }

    /// Re-export of rust-allocated (stack based) `ScrollbarStyleValue` struct
    #[repr(C, u8)]
    pub enum AzScrollbarStyleValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzScrollbarStyle),
    }

    /// Re-export of rust-allocated (stack based) `StyleTransformVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleTransformVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleTransformVec),
    }

    /// Re-export of rust-allocated (stack based) `StyleFilterVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleFilterVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFilterVec),
    }

    /// Re-export of rust-allocated (stack based) `FileInputState` struct
    #[repr(C)]
    pub struct AzFileInputState {
        pub path: AzOptionString,
    }

    /// Re-export of rust-allocated (stack based) `ColorInputStateWrapper` struct
    #[repr(C)]
    pub struct AzColorInputStateWrapper {
        pub inner: AzColorInputState,
        pub title: AzString,
        pub on_value_change: AzOptionColorInputOnValueChange,
    }

    /// Re-export of rust-allocated (stack based) `TextInputState` struct
    #[repr(C)]
    pub struct AzTextInputState {
        pub text: AzU32Vec,
        pub placeholder: AzOptionString,
        pub max_len: usize,
        pub selection: AzOptionTextInputSelection,
        pub cursor_pos: usize,
    }

    /// Re-export of rust-allocated (stack based) `TabHeader` struct
    #[repr(C)]
    pub struct AzTabHeader {
        pub tabs: AzStringVec,
        pub active_tab: usize,
        pub on_click: AzOptionTabOnClick,
    }

    /// Re-export of rust-allocated (stack based) `NodeTypeFieldValue` struct
    #[repr(C, u8)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub enum AzNodeTypeFieldValue {
        TextInput(AzString),
        NumberInput(f32),
        CheckBox(bool),
        ColorInput(AzColorU),
        FileInput(AzOptionString),
    }

    /// Re-export of rust-allocated (stack based) `NodeTypeInfo` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNodeTypeInfo {
        pub is_root: bool,
        pub name: AzString,
        pub inputs: AzInputOutputTypeIdVec,
        pub outputs: AzInputOutputTypeIdVec,
    }

    /// Re-export of rust-allocated (stack based) `InputOutputInfo` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzInputOutputInfo {
        pub data_type: AzString,
        pub color: AzColorU,
    }

    /// Re-export of rust-allocated (stack based) `ListView` struct
    #[repr(C)]
    pub struct AzListView {
        pub columns: AzStringVec,
        pub rows: AzListViewRowVec,
        pub sorted_by: AzOptionUsize,
        pub scroll_offset: AzPixelValueNoPercent,
        pub content_height: AzOptionPixelValueNoPercent,
        pub column_context_menu: AzOptionMenu,
        pub on_lazy_load_scroll: AzOptionListViewOnLazyLoadScroll,
        pub on_column_click: AzOptionListViewOnColumnClick,
        pub on_row_click: AzOptionListViewOnRowClick,
    }

    /// Re-export of rust-allocated (stack based) `ListViewState` struct
    #[repr(C)]
    pub struct AzListViewState {
        pub columns: AzStringVec,
        pub sorted_by: AzOptionUsize,
        pub current_row_count: usize,
        pub scroll_offset: AzPixelValueNoPercent,
        pub current_scroll_position: AzLogicalPosition,
        pub current_content_height: AzLogicalSize,
    }

    /// Re-export of rust-allocated (stack based) `TreeView` struct
    #[repr(C)]
    pub struct AzTreeView {
        pub root: AzString,
    }

    /// Re-export of rust-allocated (stack based) `DropDown` struct
    #[repr(C)]
    pub struct AzDropDown {
        pub choices: AzStringVec,
        pub selected: usize,
        pub on_choice_change: AzOptionDropDownOnChoiceChange,
    }

    /// Re-export of rust-allocated (stack based) `VertexAttribute` struct
    #[repr(C)]
    pub struct AzVertexAttribute {
        pub name: AzString,
        pub layout_location: AzOptionUsize,
        pub attribute_type: AzVertexAttributeType,
        pub item_count: usize,
    }

    /// Re-export of rust-allocated (stack based) `DebugMessage` struct
    #[repr(C)]
    pub struct AzDebugMessage {
        pub message: AzString,
        pub source: u32,
        pub ty: u32,
        pub id: u32,
        pub severity: u32,
    }

    /// C-ABI stable reexport of `(i32, u32, AzString)`
    #[repr(C)]
    pub struct AzGetActiveAttribReturn {
        pub _0: i32,
        pub _1: u32,
        pub _2: AzString,
    }

    /// C-ABI stable reexport of `(i32, u32, AzString)`
    #[repr(C)]
    pub struct AzGetActiveUniformReturn {
        pub _0: i32,
        pub _1: u32,
        pub _2: AzString,
    }

    /// Re-export of rust-allocated (stack based) `RawImage` struct
    #[repr(C)]
    pub struct AzRawImage {
        pub pixels: AzRawImageData,
        pub width: usize,
        pub height: usize,
        pub alpha_premultiplied: bool,
        pub data_format: AzRawImageFormat,
        pub tag: AzU8Vec,
    }

    /// Re-export of rust-allocated (stack based) `SvgPath` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzSvgPath {
        pub items: AzSvgPathElementVec,
    }

    /// Re-export of rust-allocated (stack based) `SvgParseOptions` struct
    #[repr(C)]
    pub struct AzSvgParseOptions {
        pub relative_image_path: AzOptionString,
        pub dpi: f32,
        pub default_font_family: AzString,
        pub font_size: f32,
        pub languages: AzStringVec,
        pub shape_rendering: AzShapeRendering,
        pub text_rendering: AzTextRendering,
        pub image_rendering: AzImageRendering,
        pub keep_named_groups: bool,
        pub fontdb: AzFontDatabase,
    }

    /// Re-export of rust-allocated (stack based) `SvgStyle` struct
    #[repr(C, u8)]
    pub enum AzSvgStyle {
        Fill(AzSvgFillStyle),
        Stroke(AzSvgStrokeStyle),
    }

    /// **Reference-counted** file handle
    #[repr(C)]
    pub struct AzFile {
        pub(crate) ptr: *const c_void,
        pub path: AzString,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `FileTypeList` struct
    #[repr(C)]
    pub struct AzFileTypeList {
        pub document_types: AzStringVec,
        pub document_descriptor: AzString,
    }

    /// Re-export of rust-allocated (stack based) `Timer` struct
    #[repr(C)]
    pub struct AzTimer {
        pub data: AzRefAny,
        pub node_id: AzOptionDomNodeId,
        pub created: AzInstant,
        pub last_run: AzOptionInstant,
        pub run_count: usize,
        pub delay: AzOptionDuration,
        pub interval: AzOptionDuration,
        pub timeout: AzOptionDuration,
        pub callback: AzTimerCallback,
    }

    /// Re-export of rust-allocated (stack based) `FmtValue` struct
    #[repr(C, u8)]
    pub enum AzFmtValue {
        Bool(bool),
        Uchar(u8),
        Schar(i8),
        Ushort(u16),
        Sshort(i16),
        Uint(u32),
        Sint(i32),
        Ulong(u64),
        Slong(i64),
        Isize(isize),
        Usize(usize),
        Float(f32),
        Double(f64),
        Str(AzString),
        StrVec(AzStringVec),
    }

    /// Re-export of rust-allocated (stack based) `FmtArg` struct
    #[repr(C)]
    pub struct AzFmtArg {
        pub key: AzString,
        pub value: AzFmtValue,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleFontFamily>`
    #[repr(C)]
    pub struct AzStyleFontFamilyVec {
        pub(crate) ptr: *const AzStyleFontFamily,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleFontFamilyVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<FmtArg>`
    #[repr(C)]
    pub struct AzFmtArgVec {
        pub(crate) ptr: *const AzFmtArg,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzFmtArgVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InlineWord>`
    #[repr(C)]
    pub struct AzInlineWordVec {
        pub(crate) ptr: *const AzInlineWord,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInlineWordVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<Monitor>`
    #[repr(C)]
    pub struct AzMonitorVec {
        pub(crate) ptr: *const AzMonitor,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzMonitorVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<IdOrClass>`
    #[repr(C)]
    pub struct AzIdOrClassVec {
        pub(crate) ptr: *const AzIdOrClass,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzIdOrClassVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<StyleBackgroundContent>`
    #[repr(C)]
    pub struct AzStyleBackgroundContentVec {
        pub(crate) ptr: *const AzStyleBackgroundContent,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStyleBackgroundContentVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<SvgPath>`
    #[repr(C)]
    pub struct AzSvgPathVec {
        pub(crate) ptr: *const AzSvgPath,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgPathVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<VertexAttribute>`
    #[repr(C)]
    pub struct AzVertexAttributeVec {
        pub(crate) ptr: *const AzVertexAttribute,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzVertexAttributeVecDestructor,
    }

    /// Wrapper over a Rust-allocated `CssPathSelector`
    #[repr(C)]
    pub struct AzCssPathSelectorVec {
        pub(crate) ptr: *const AzCssPathSelector,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssPathSelectorVecDestructor,
    }

    /// Wrapper over a Rust-allocated `CallbackData`
    #[repr(C)]
    pub struct AzCallbackDataVec {
        pub(crate) ptr: *const AzCallbackData,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCallbackDataVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<DebugMessage>`
    #[repr(C)]
    pub struct AzDebugMessageVec {
        pub(crate) ptr: *const AzDebugMessage,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzDebugMessageVecDestructor,
    }

    /// Wrapper over a Rust-allocated `StringPairVec`
    #[repr(C)]
    pub struct AzStringPairVec {
        pub(crate) ptr: *const AzStringPair,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStringPairVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `OptionFileTypeList` struct
    #[repr(C, u8)]
    pub enum AzOptionFileTypeList {
        None,
        Some(AzFileTypeList),
    }

    /// Re-export of rust-allocated (stack based) `OptionFile` struct
    #[repr(C, u8)]
    pub enum AzOptionFile {
        None,
        Some(AzFile),
    }

    /// Re-export of rust-allocated (stack based) `OptionRawImage` struct
    #[repr(C, u8)]
    pub enum AzOptionRawImage {
        None,
        Some(AzRawImage),
    }

    /// Re-export of rust-allocated (stack based) `OptionWaylandTheme` struct
    #[repr(C, u8)]
    pub enum AzOptionWaylandTheme {
        None,
        Some(AzWaylandTheme),
    }

    /// Re-export of rust-allocated (stack based) `ResultRawImageDecodeImageError` struct
    #[repr(C, u8)]
    pub enum AzResultRawImageDecodeImageError {
        Ok(AzRawImage),
        Err(AzDecodeImageError),
    }

    /// Re-export of rust-allocated (stack based) `XmlStreamError` struct
    #[repr(C, u8)]
    pub enum AzXmlStreamError {
        UnexpectedEndOfStream,
        InvalidName,
        NonXmlChar(AzNonXmlCharError),
        InvalidChar(AzInvalidCharError),
        InvalidCharMultiple(AzInvalidCharMultipleError),
        InvalidQuote(AzInvalidQuoteError),
        InvalidSpace(AzInvalidSpaceError),
        InvalidString(AzInvalidStringError),
        InvalidReference,
        InvalidExternalID,
        InvalidCommentData,
        InvalidCommentEnd,
        InvalidCharacterData,
    }

    /// Re-export of rust-allocated (stack based) `LinuxWindowOptions` struct
    #[repr(C)]
    pub struct AzLinuxWindowOptions {
        pub x11_visual: AzOptionX11Visual,
        pub x11_screen: AzOptionI32,
        pub x11_wm_classes: AzStringPairVec,
        pub x11_override_redirect: bool,
        pub x11_window_types: AzXWindowTypeVec,
        pub x11_gtk_theme_variant: AzOptionString,
        pub x11_resize_increments: AzOptionLogicalSize,
        pub x11_base_size: AzOptionLogicalSize,
        pub wayland_app_id: AzOptionString,
        pub wayland_theme: AzOptionWaylandTheme,
        pub request_user_attention: bool,
        pub window_icon: AzOptionWindowIcon,
    }

    /// Re-export of rust-allocated (stack based) `InlineLine` struct
    #[repr(C)]
    pub struct AzInlineLine {
        pub words: AzInlineWordVec,
        pub bounds: AzLogicalRect,
    }

    /// Item entry in a menu or menu bar
    #[repr(C, u8)]
    pub enum AzMenuItem {
        String(AzStringMenuItem),
        Separator,
        BreakLine,
    }

    /// Re-export of rust-allocated (stack based) `CssPath` struct
    #[repr(C)]
    pub struct AzCssPath {
        pub selectors: AzCssPathSelectorVec,
    }

    /// Re-export of rust-allocated (stack based) `StyleBackgroundContentVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleBackgroundContentVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleBackgroundContentVec),
    }

    /// Re-export of rust-allocated (stack based) `StyleFontFamilyVecValue` struct
    #[repr(C, u8)]
    pub enum AzStyleFontFamilyVecValue {
        Auto,
        None,
        Inherit,
        Initial,
        Exact(AzStyleFontFamilyVec),
    }

    /// Parsed CSS key-value pair
    #[repr(C, u8)]
    pub enum AzCssProperty {
        TextColor(AzStyleTextColorValue),
        FontSize(AzStyleFontSizeValue),
        FontFamily(AzStyleFontFamilyVecValue),
        TextAlign(AzStyleTextAlignValue),
        LetterSpacing(AzStyleLetterSpacingValue),
        LineHeight(AzStyleLineHeightValue),
        WordSpacing(AzStyleWordSpacingValue),
        TabWidth(AzStyleTabWidthValue),
        Cursor(AzStyleCursorValue),
        Display(AzLayoutDisplayValue),
        Float(AzLayoutFloatValue),
        BoxSizing(AzLayoutBoxSizingValue),
        Width(AzLayoutWidthValue),
        Height(AzLayoutHeightValue),
        MinWidth(AzLayoutMinWidthValue),
        MinHeight(AzLayoutMinHeightValue),
        MaxWidth(AzLayoutMaxWidthValue),
        MaxHeight(AzLayoutMaxHeightValue),
        Position(AzLayoutPositionValue),
        Top(AzLayoutTopValue),
        Right(AzLayoutRightValue),
        Left(AzLayoutLeftValue),
        Bottom(AzLayoutBottomValue),
        FlexWrap(AzLayoutFlexWrapValue),
        FlexDirection(AzLayoutFlexDirectionValue),
        FlexGrow(AzLayoutFlexGrowValue),
        FlexShrink(AzLayoutFlexShrinkValue),
        JustifyContent(AzLayoutJustifyContentValue),
        AlignItems(AzLayoutAlignItemsValue),
        AlignContent(AzLayoutAlignContentValue),
        BackgroundContent(AzStyleBackgroundContentVecValue),
        BackgroundPosition(AzStyleBackgroundPositionVecValue),
        BackgroundSize(AzStyleBackgroundSizeVecValue),
        BackgroundRepeat(AzStyleBackgroundRepeatVecValue),
        OverflowX(AzLayoutOverflowValue),
        OverflowY(AzLayoutOverflowValue),
        PaddingTop(AzLayoutPaddingTopValue),
        PaddingLeft(AzLayoutPaddingLeftValue),
        PaddingRight(AzLayoutPaddingRightValue),
        PaddingBottom(AzLayoutPaddingBottomValue),
        MarginTop(AzLayoutMarginTopValue),
        MarginLeft(AzLayoutMarginLeftValue),
        MarginRight(AzLayoutMarginRightValue),
        MarginBottom(AzLayoutMarginBottomValue),
        BorderTopLeftRadius(AzStyleBorderTopLeftRadiusValue),
        BorderTopRightRadius(AzStyleBorderTopRightRadiusValue),
        BorderBottomLeftRadius(AzStyleBorderBottomLeftRadiusValue),
        BorderBottomRightRadius(AzStyleBorderBottomRightRadiusValue),
        BorderTopColor(AzStyleBorderTopColorValue),
        BorderRightColor(AzStyleBorderRightColorValue),
        BorderLeftColor(AzStyleBorderLeftColorValue),
        BorderBottomColor(AzStyleBorderBottomColorValue),
        BorderTopStyle(AzStyleBorderTopStyleValue),
        BorderRightStyle(AzStyleBorderRightStyleValue),
        BorderLeftStyle(AzStyleBorderLeftStyleValue),
        BorderBottomStyle(AzStyleBorderBottomStyleValue),
        BorderTopWidth(AzLayoutBorderTopWidthValue),
        BorderRightWidth(AzLayoutBorderRightWidthValue),
        BorderLeftWidth(AzLayoutBorderLeftWidthValue),
        BorderBottomWidth(AzLayoutBorderBottomWidthValue),
        BoxShadowLeft(AzStyleBoxShadowValue),
        BoxShadowRight(AzStyleBoxShadowValue),
        BoxShadowTop(AzStyleBoxShadowValue),
        BoxShadowBottom(AzStyleBoxShadowValue),
        ScrollbarStyle(AzScrollbarStyleValue),
        Opacity(AzStyleOpacityValue),
        Transform(AzStyleTransformVecValue),
        TransformOrigin(AzStyleTransformOriginValue),
        PerspectiveOrigin(AzStylePerspectiveOriginValue),
        BackfaceVisibility(AzStyleBackfaceVisibilityValue),
        MixBlendMode(AzStyleMixBlendModeValue),
        Filter(AzStyleFilterVecValue),
        BackdropFilter(AzStyleFilterVecValue),
        TextShadow(AzStyleBoxShadowValue),
    }

    /// Re-export of rust-allocated (stack based) `FileInputStateWrapper` struct
    #[repr(C)]
    pub struct AzFileInputStateWrapper {
        pub inner: AzFileInputState,
        pub on_file_path_change: AzOptionFileInputOnPathChange,
        pub file_dialog_title: AzString,
        pub default_dir: AzOptionString,
        pub file_types: AzOptionFileTypeList,
    }

    /// Re-export of rust-allocated (stack based) `TextInputStateWrapper` struct
    #[repr(C)]
    pub struct AzTextInputStateWrapper {
        pub inner: AzTextInputState,
        pub on_text_input: AzOptionTextInputOnTextInput,
        pub on_virtual_key_down: AzOptionTextInputOnVirtualKeyDown,
        pub on_focus_lost: AzOptionTextInputOnFocusLost,
        pub update_text_input_before_calling_focus_lost_fn: bool,
        pub update_text_input_before_calling_vk_down_fn: bool,
        pub cursor_animation: AzOptionTimerId,
    }

    /// Re-export of rust-allocated (stack based) `ProgressBar` struct
    #[repr(C)]
    pub struct AzProgressBar {
        pub state: AzProgressBarState,
        pub height: AzPixelValue,
        pub bar_background: AzStyleBackgroundContentVec,
        pub container_background: AzStyleBackgroundContentVec,
    }

    /// Re-export of rust-allocated (stack based) `NodeTypeIdInfoMap` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNodeTypeIdInfoMap {
        pub node_type_id: AzNodeTypeId,
        pub node_type_info: AzNodeTypeInfo,
    }

    /// Re-export of rust-allocated (stack based) `InputOutputTypeIdInfoMap` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzInputOutputTypeIdInfoMap {
        pub io_type_id: AzInputOutputTypeId,
        pub io_info: AzInputOutputInfo,
    }

    /// Re-export of rust-allocated (stack based) `NodeTypeField` struct
    #[repr(C)]
    #[cfg_attr(feature = "serde-support", derive(Serialize, Deserialize))]
    pub struct AzNodeTypeField {
        pub key: AzString,
        pub value: AzNodeTypeFieldValue,
    }

    /// Re-export of rust-allocated (stack based) `CssPropertySource` struct
    #[repr(C, u8)]
    pub enum AzCssPropertySource {
        Css(AzCssPath),
        Inline,
    }

    /// Re-export of rust-allocated (stack based) `VertexLayout` struct
    #[repr(C)]
    pub struct AzVertexLayout {
        pub fields: AzVertexAttributeVec,
    }

    /// Re-export of rust-allocated (stack based) `VertexArrayObject` struct
    #[repr(C)]
    pub struct AzVertexArrayObject {
        pub vertex_layout: AzVertexLayout,
        pub vao_id: u32,
        pub gl_context: AzGl,
        pub refcount: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `VertexBuffer` struct
    #[repr(C)]
    pub struct AzVertexBuffer {
        pub vertex_buffer_id: u32,
        pub vertex_buffer_len: usize,
        pub vao: AzVertexArrayObject,
        pub index_buffer_id: u32,
        pub index_buffer_len: usize,
        pub index_buffer_format: AzIndexBufferFormat,
        pub refcount: *const c_void,
        pub run_destructor: bool,
    }

    /// Re-export of rust-allocated (stack based) `SvgMultiPolygon` struct
    #[repr(C)]
    pub struct AzSvgMultiPolygon {
        pub rings: AzSvgPathVec,
    }

    /// Re-export of rust-allocated (stack based) `SvgSimpleNode` struct
    #[repr(C, u8)]
    pub enum AzSvgSimpleNode {
        Path(AzSvgPath),
        Circle(AzSvgCircle),
        Rect(AzSvgRect),
        CircleHole(AzSvgCircle),
        RectHole(AzSvgRect),
    }

    /// Re-export of rust-allocated (stack based) `TessellatedColoredGPUSvgNode` struct
    #[repr(C)]
    pub struct AzTessellatedColoredGPUSvgNode {
        pub vertex_index_buffer: AzVertexBuffer,
    }

    /// Re-export of rust-allocated (stack based) `TessellatedGPUSvgNode` struct
    #[repr(C)]
    pub struct AzTessellatedGPUSvgNode {
        pub vertex_index_buffer: AzVertexBuffer,
    }

    /// Re-export of rust-allocated (stack based) `XmlNode` struct
    #[repr(C)]
    pub struct AzXmlNode {
        pub tag: AzString,
        pub attributes: AzStringPairVec,
        pub children: AzXmlNodeVec,
        pub text: AzOptionString,
    }

    /// Wrapper over a Rust-allocated `Vec<NodeTypeIdInfoMap>`
    #[repr(C)]
    pub struct AzNodeTypeIdInfoMapVec {
        pub(crate) ptr: *const AzNodeTypeIdInfoMap,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeTypeIdInfoMapVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InputOutputTypeIdInfoMap>`
    #[repr(C)]
    pub struct AzInputOutputTypeIdInfoMapVec {
        pub(crate) ptr: *const AzInputOutputTypeIdInfoMap,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInputOutputTypeIdInfoMapVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<NodeTypeField>`
    #[repr(C)]
    pub struct AzNodeTypeFieldVec {
        pub(crate) ptr: *const AzNodeTypeField,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeTypeFieldVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<InlineLine>`
    #[repr(C)]
    pub struct AzInlineLineVec {
        pub(crate) ptr: *const AzInlineLine,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzInlineLineVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<CssProperty>`
    #[repr(C)]
    pub struct AzCssPropertyVec {
        pub(crate) ptr: *const AzCssProperty,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssPropertyVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`
    #[repr(C)]
    pub struct AzSvgMultiPolygonVec {
        pub(crate) ptr: *const AzSvgMultiPolygon,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgMultiPolygonVecDestructor,
    }

    /// Wrapper over a Rust-allocated `Vec<SvgSimpleNode>`
    #[repr(C)]
    pub struct AzSvgSimpleNodeVec {
        pub(crate) ptr: *const AzSvgSimpleNode,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzSvgSimpleNodeVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `OptionCssProperty` struct
    #[repr(C, u8)]
    pub enum AzOptionCssProperty {
        None,
        Some(AzCssProperty),
    }

    /// Re-export of rust-allocated (stack based) `XmlTextError` struct
    #[repr(C)]
    pub struct AzXmlTextError {
        pub stream_error: AzXmlStreamError,
        pub pos: AzSvgParseErrorPosition,
    }

    /// Platform-specific window configuration, i.e. WM options that are not cross-platform
    #[repr(C)]
    pub struct AzPlatformSpecificOptions {
        pub windows_options: AzWindowsWindowOptions,
        pub linux_options: AzLinuxWindowOptions,
        pub mac_options: AzMacWindowOptions,
        pub wasm_options: AzWasmWindowOptions,
    }

    /// Re-export of rust-allocated (stack based) `WindowState` struct
    #[repr(C)]
    pub struct AzWindowState {
        pub title: AzString,
        pub theme: AzWindowTheme,
        pub size: AzWindowSize,
        pub position: AzWindowPosition,
        pub flags: AzWindowFlags,
        pub debug_state: AzDebugState,
        pub keyboard_state: AzKeyboardState,
        pub mouse_state: AzMouseState,
        pub touch_state: AzTouchState,
        pub ime_position: AzImePosition,
        pub monitor: AzMonitor,
        pub platform_specific_options: AzPlatformSpecificOptions,
        pub renderer_options: AzRendererOptions,
        pub background_color: AzColorU,
        pub layout_callback: AzLayoutCallback,
        pub close_callback: AzOptionCallback,
    }

    /// Re-export of rust-allocated (stack based) `CallbackInfo` struct
    #[repr(C)]
    pub struct AzCallbackInfo {
        pub layout_results: *const c_void,
        pub layout_results_count: usize,
        pub renderer_resources: *const c_void,
        pub previous_window_state: *const c_void,
        pub current_window_state: *const c_void,
        pub modifiable_window_state: *mut AzWindowState,
        pub gl_context: *const AzOptionGl,
        pub image_cache: *mut c_void,
        pub system_fonts: *mut c_void,
        pub timers: *mut c_void,
        pub threads: *mut c_void,
        pub timers_removed: *mut c_void,
        pub threads_removed: *mut c_void,
        pub current_window_handle: *const AzRawWindowHandle,
        pub new_windows: *mut c_void,
        pub system_callbacks: *const AzSystemCallbacks,
        pub stop_propagation: *mut bool,
        pub focus_target: *mut c_void,
        pub words_changed_in_callbacks: *mut c_void,
        pub images_changed_in_callbacks: *mut c_void,
        pub image_masks_changed_in_callbacks: *mut c_void,
        pub css_properties_changed_in_callbacks: *mut c_void,
        pub current_scroll_states: *const c_void,
        pub nodes_scrolled_in_callback: *mut c_void,
        pub hit_dom_node: AzDomNodeId,
        pub cursor_relative_to_item: AzOptionLogicalPosition,
        pub cursor_in_viewport: AzOptionLogicalPosition,
        pub _reserved_ref: *const c_void,
        pub _reserved_mut: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `InlineText` struct
    #[repr(C)]
    pub struct AzInlineText {
        pub lines: AzInlineLineVec,
        pub content_size: AzLogicalSize,
        pub font_size_px: f32,
        pub last_word_index: usize,
        pub baseline_descender_px: f32,
    }

    /// CSS path to set the keyboard input focus
    #[repr(C)]
    pub struct AzFocusTargetPath {
        pub dom: AzDomId,
        pub css_path: AzCssPath,
    }

    /// Animation struct to start a new animation
    #[repr(C)]
    pub struct AzAnimation {
        pub from: AzCssProperty,
        pub to: AzCssProperty,
        pub duration: AzDuration,
        pub repeat: AzAnimationRepeat,
        pub repeat_count: AzAnimationRepeatCount,
        pub easing: AzAnimationEasing,
        pub relayout_on_finish: bool,
    }

    /// Re-export of rust-allocated (stack based) `TimerCallbackInfo` struct
    #[repr(C)]
    pub struct AzTimerCallbackInfo {
        pub callback_info: AzCallbackInfo,
        pub node_id: AzOptionDomNodeId,
        pub frame_start: AzInstant,
        pub call_count: usize,
        pub is_about_to_finish: bool,
        pub _reserved_ref: *const c_void,
        pub _reserved_mut: *mut c_void,
    }

    /// Re-export of rust-allocated (stack based) `NodeDataInlineCssProperty` struct
    #[repr(C, u8)]
    pub enum AzNodeDataInlineCssProperty {
        Normal(AzCssProperty),
        Active(AzCssProperty),
        Focus(AzCssProperty),
        Hover(AzCssProperty),
    }

    /// Re-export of rust-allocated (stack based) `DynamicCssProperty` struct
    #[repr(C)]
    pub struct AzDynamicCssProperty {
        pub dynamic_id: AzString,
        pub default_value: AzCssProperty,
    }

    /// Re-export of rust-allocated (stack based) `Node` struct
    #[repr(C)]
    pub struct AzNode {
        pub node_type: AzNodeTypeId,
        pub position: AzNodePosition,
        pub fields: AzNodeTypeFieldVec,
        pub connect_in: AzInputConnectionVec,
        pub connect_out: AzOutputConnectionVec,
    }

    /// Re-export of rust-allocated (stack based) `SvgNode` struct
    #[repr(C, u8)]
    pub enum AzSvgNode {
        MultiPolygonCollection(AzSvgMultiPolygonVec),
        MultiPolygon(AzSvgMultiPolygon),
        MultiShape(AzSvgSimpleNodeVec),
        Path(AzSvgPath),
        Circle(AzSvgCircle),
        Rect(AzSvgRect),
    }

    /// Re-export of rust-allocated (stack based) `SvgStyledNode` struct
    #[repr(C)]
    pub struct AzSvgStyledNode {
        pub geometry: AzSvgNode,
        pub style: AzSvgStyle,
    }

    /// Wrapper over a Rust-allocated `Vec<NodeDataInlineCssProperty>`
    #[repr(C)]
    pub struct AzNodeDataInlineCssPropertyVec {
        pub(crate) ptr: *const AzNodeDataInlineCssProperty,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeDataInlineCssPropertyVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `OptionWindowState` struct
    #[repr(C, u8)]
    pub enum AzOptionWindowState {
        None,
        Some(AzWindowState),
    }

    /// Re-export of rust-allocated (stack based) `OptionInlineText` struct
    #[repr(C, u8)]
    pub enum AzOptionInlineText {
        None,
        Some(AzInlineText),
    }

    /// Re-export of rust-allocated (stack based) `XmlParseError` struct
    #[repr(C, u8)]
    pub enum AzXmlParseError {
        InvalidDeclaration(AzXmlTextError),
        InvalidComment(AzXmlTextError),
        InvalidPI(AzXmlTextError),
        InvalidDoctype(AzXmlTextError),
        InvalidEntity(AzXmlTextError),
        InvalidElement(AzXmlTextError),
        InvalidAttribute(AzXmlTextError),
        InvalidCdata(AzXmlTextError),
        InvalidCharData(AzXmlTextError),
        UnknownToken(AzSvgParseErrorPosition),
    }

    /// Options on how to initially create the window
    #[repr(C)]
    pub struct AzWindowCreateOptions {
        pub state: AzWindowState,
        pub size_to_content: bool,
        pub renderer_type: AzOptionRendererOptions,
        pub theme: AzOptionWindowTheme,
        pub create_callback: AzOptionCallback,
        pub hot_reload: bool,
    }

    /// Defines the keyboard input focus target
    #[repr(C, u8)]
    pub enum AzFocusTarget {
        Id(AzDomNodeId),
        Path(AzFocusTargetPath),
        Previous,
        Next,
        First,
        Last,
        NoFocus,
    }

    /// Represents one single DOM node (node type, classes, ids and callbacks are stored here)
    #[repr(C)]
    pub struct AzNodeData {
        pub node_type: AzNodeType,
        pub dataset: AzOptionRefAny,
        pub ids_and_classes: AzIdOrClassVec,
        pub callbacks: AzCallbackDataVec,
        pub inline_css_props: AzNodeDataInlineCssPropertyVec,
        pub tab_index: AzOptionTabIndex,
        pub extra: *const c_void,
    }

    /// Re-export of rust-allocated (stack based) `CssDeclaration` struct
    #[repr(C, u8)]
    pub enum AzCssDeclaration {
        Static(AzCssProperty),
        Dynamic(AzDynamicCssProperty),
    }

    /// Re-export of rust-allocated (stack based) `Button` struct
    #[repr(C)]
    pub struct AzButton {
        pub label: AzString,
        pub image: AzOptionImageRef,
        pub container_style: AzNodeDataInlineCssPropertyVec,
        pub label_style: AzNodeDataInlineCssPropertyVec,
        pub image_style: AzNodeDataInlineCssPropertyVec,
        pub on_click: AzOptionButtonOnClick,
    }

    /// Re-export of rust-allocated (stack based) `FileInput` struct
    #[repr(C)]
    pub struct AzFileInput {
        pub state: AzFileInputStateWrapper,
        pub default_text: AzString,
        pub image: AzOptionImageRef,
        pub container_style: AzNodeDataInlineCssPropertyVec,
        pub label_style: AzNodeDataInlineCssPropertyVec,
        pub image_style: AzNodeDataInlineCssPropertyVec,
    }

    /// Re-export of rust-allocated (stack based) `CheckBox` struct
    #[repr(C)]
    pub struct AzCheckBox {
        pub state: AzCheckBoxStateWrapper,
        pub container_style: AzNodeDataInlineCssPropertyVec,
        pub content_style: AzNodeDataInlineCssPropertyVec,
    }

    /// Re-export of rust-allocated (stack based) `Label` struct
    #[repr(C)]
    pub struct AzLabel {
        pub text: AzString,
        pub style: AzNodeDataInlineCssPropertyVec,
    }

    /// Re-export of rust-allocated (stack based) `ColorInput` struct
    #[repr(C)]
    pub struct AzColorInput {
        pub state: AzColorInputStateWrapper,
        pub style: AzNodeDataInlineCssPropertyVec,
    }

    /// Re-export of rust-allocated (stack based) `TextInput` struct
    #[repr(C)]
    pub struct AzTextInput {
        pub state: AzTextInputStateWrapper,
        pub placeholder_style: AzNodeDataInlineCssPropertyVec,
        pub container_style: AzNodeDataInlineCssPropertyVec,
        pub label_style: AzNodeDataInlineCssPropertyVec,
    }

    /// Re-export of rust-allocated (stack based) `NumberInput` struct
    #[repr(C)]
    pub struct AzNumberInput {
        pub text_input: AzTextInput,
        pub state: AzNumberInputStateWrapper,
    }

    /// Re-export of rust-allocated (stack based) `NodeIdNodeMap` struct
    #[repr(C)]
    pub struct AzNodeIdNodeMap {
        pub node_id: AzNodeGraphNodeId,
        pub node: AzNode,
    }

    /// Wrapper over a Rust-allocated `Vec<NodeIdNodeMap>`
    #[repr(C)]
    pub struct AzNodeIdNodeMapVec {
        pub(crate) ptr: *const AzNodeIdNodeMap,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeIdNodeMapVecDestructor,
    }

    /// Wrapper over a Rust-allocated `CssDeclaration`
    #[repr(C)]
    pub struct AzCssDeclarationVec {
        pub(crate) ptr: *const AzCssDeclaration,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssDeclarationVecDestructor,
    }

    /// Wrapper over a Rust-allocated `NodeDataVec`
    #[repr(C)]
    pub struct AzNodeDataVec {
        pub(crate) ptr: *const AzNodeData,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzNodeDataVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `XmlError` struct
    #[repr(C, u8)]
    pub enum AzXmlError {
        NoParserAvailable,
        InvalidXmlPrefixUri(AzSvgParseErrorPosition),
        UnexpectedXmlUri(AzSvgParseErrorPosition),
        UnexpectedXmlnsUri(AzSvgParseErrorPosition),
        InvalidElementNamePrefix(AzSvgParseErrorPosition),
        DuplicatedNamespace(AzDuplicatedNamespaceError),
        UnknownNamespace(AzUnknownNamespaceError),
        UnexpectedCloseTag(AzUnexpectedCloseTagError),
        UnexpectedEntityCloseTag(AzSvgParseErrorPosition),
        UnknownEntityReference(AzUnknownEntityReferenceError),
        MalformedEntityReference(AzSvgParseErrorPosition),
        EntityReferenceLoop(AzSvgParseErrorPosition),
        InvalidAttributeValue(AzSvgParseErrorPosition),
        DuplicatedAttribute(AzDuplicatedAttributeError),
        NoRootNode,
        SizeLimit,
        ParserError(AzXmlParseError),
    }

    /// Re-export of rust-allocated (stack based) `Dom` struct
    #[repr(C)]
    pub struct AzDom {
        pub root: AzNodeData,
        pub children: AzDomVec,
        pub total_children: usize,
    }

    /// Re-export of rust-allocated (stack based) `CssRuleBlock` struct
    #[repr(C)]
    pub struct AzCssRuleBlock {
        pub path: AzCssPath,
        pub declarations: AzCssDeclarationVec,
    }

    /// Re-export of rust-allocated (stack based) `TabContent` struct
    #[repr(C)]
    pub struct AzTabContent {
        pub content: AzDom,
        pub has_padding: bool,
    }

    /// Re-export of rust-allocated (stack based) `Frame` struct
    #[repr(C)]
    pub struct AzFrame {
        pub title: AzString,
        pub flex_grow: f32,
        pub content: AzDom,
    }

    /// Re-export of rust-allocated (stack based) `NodeGraph` struct
    #[repr(C)]
    pub struct AzNodeGraph {
        pub node_types: AzNodeTypeIdInfoMapVec,
        pub input_output_types: AzInputOutputTypeIdInfoMapVec,
        pub nodes: AzNodeIdNodeMapVec,
        pub allow_multiple_root_nodes: bool,
        pub offset: AzLogicalPosition,
        pub style: AzNodeGraphStyle,
        pub callbacks: AzNodeGraphCallbacks,
        pub add_node_str: AzString,
        pub scale_factor: f32,
    }

    /// Re-export of rust-allocated (stack based) `StyledDom` struct
    #[repr(C)]
    pub struct AzStyledDom {
        pub root: AzNodeId,
        pub node_hierarchy: AzNodeHierarchyItemVec,
        pub node_data: AzNodeDataVec,
        pub styled_nodes: AzStyledNodeVec,
        pub cascade_info: AzCascadeInfoVec,
        pub nodes_with_window_callbacks: AzNodeIdVec,
        pub nodes_with_not_callbacks: AzNodeIdVec,
        pub nodes_with_datasets_and_callbacks: AzNodeIdVec,
        pub tag_ids_to_node_ids: AzTagIdToNodeIdMappingVec,
        pub non_leaf_nodes: AzParentWithNodeDepthVec,
        pub css_property_cache: AzCssPropertyCache,
    }

    /// Wrapper over a Rust-allocated `CssRuleBlock`
    #[repr(C)]
    pub struct AzCssRuleBlockVec {
        pub(crate) ptr: *const AzCssRuleBlock,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzCssRuleBlockVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `OptionDom` struct
    #[repr(C, u8)]
    pub enum AzOptionDom {
        None,
        Some(AzDom),
    }

    /// Re-export of rust-allocated (stack based) `ResultXmlXmlError` struct
    #[repr(C, u8)]
    pub enum AzResultXmlXmlError {
        Ok(AzXml),
        Err(AzXmlError),
    }

    /// Re-export of rust-allocated (stack based) `SvgParseError` struct
    #[repr(C, u8)]
    pub enum AzSvgParseError {
        NoParserAvailable,
        ElementsLimitReached,
        NotAnUtf8Str,
        MalformedGZip,
        InvalidSize,
        ParsingFailed(AzXmlError),
    }

    /// <img src="../images/scrollbounds.png"/>
    #[repr(C)]
    pub struct AzIFrameCallbackReturn {
        pub dom: AzStyledDom,
        pub scroll_size: AzLogicalSize,
        pub scroll_offset: AzLogicalPosition,
        pub virtual_scroll_size: AzLogicalSize,
        pub virtual_scroll_offset: AzLogicalPosition,
    }

    /// Re-export of rust-allocated (stack based) `Stylesheet` struct
    #[repr(C)]
    pub struct AzStylesheet {
        pub rules: AzCssRuleBlockVec,
    }

    /// Wrapper over a Rust-allocated `Stylesheet`
    #[repr(C)]
    pub struct AzStylesheetVec {
        pub(crate) ptr: *const AzStylesheet,
        pub len: usize,
        pub cap: usize,
        pub destructor: AzStylesheetVecDestructor,
    }

    /// Re-export of rust-allocated (stack based) `ResultSvgXmlNodeSvgParseError` struct
    #[repr(C, u8)]
    pub enum AzResultSvgXmlNodeSvgParseError {
        Ok(AzSvgXmlNode),
        Err(AzSvgParseError),
    }

    /// Re-export of rust-allocated (stack based) `ResultSvgSvgParseError` struct
    #[repr(C, u8)]
    pub enum AzResultSvgSvgParseError {
        Ok(AzSvg),
        Err(AzSvgParseError),
    }

    /// Re-export of rust-allocated (stack based) `Css` struct
    #[repr(C)]
    pub struct AzCss {
        pub stylesheets: AzStylesheetVec,
    }

    use core::ffi::c_void;

    use azul_impl::css::*;

    #[test]
    fn test_size() {
        use core::alloc::Layout;
        assert_eq!(
            (Layout::new::<crate::azul_impl::app::AzAppPtr>(), "AzApp"),
            (Layout::new::<AzApp>(), "AzApp")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::AppLogLevel>(),
                "AzAppLogLevel"
            ),
            (Layout::new::<AzAppLogLevel>(), "AzAppLogLevel")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::Vsync>(), "AzVsync"),
            (Layout::new::<AzVsync>(), "AzVsync")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::Srgb>(), "AzSrgb"),
            (Layout::new::<AzSrgb>(), "AzSrgb")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::HwAcceleration>(),
                "AzHwAcceleration"
            ),
            (Layout::new::<AzHwAcceleration>(), "AzHwAcceleration")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::geom::LayoutPoint>(),
                "AzLayoutPoint"
            ),
            (Layout::new::<AzLayoutPoint>(), "AzLayoutPoint")
        );
        assert_eq!(
            (Layout::new::<azul_core::geom::LayoutSize>(), "AzLayoutSize"),
            (Layout::new::<AzLayoutSize>(), "AzLayoutSize")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::IOSHandle>(), "AzIOSHandle"),
            (Layout::new::<AzIOSHandle>(), "AzIOSHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MacOSHandle>(),
                "AzMacOSHandle"
            ),
            (Layout::new::<AzMacOSHandle>(), "AzMacOSHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::XlibHandle>(),
                "AzXlibHandle"
            ),
            (Layout::new::<AzXlibHandle>(), "AzXlibHandle")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::XcbHandle>(), "AzXcbHandle"),
            (Layout::new::<AzXcbHandle>(), "AzXcbHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WaylandHandle>(),
                "AzWaylandHandle"
            ),
            (Layout::new::<AzWaylandHandle>(), "AzWaylandHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowsHandle>(),
                "AzWindowsHandle"
            ),
            (Layout::new::<AzWindowsHandle>(), "AzWindowsHandle")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::WebHandle>(), "AzWebHandle"),
            (Layout::new::<AzWebHandle>(), "AzWebHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::AndroidHandle>(),
                "AzAndroidHandle"
            ),
            (Layout::new::<AzAndroidHandle>(), "AzAndroidHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::XWindowType>(),
                "AzXWindowType"
            ),
            (Layout::new::<AzXWindowType>(), "AzXWindowType")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::PhysicalPositionI32>(),
                "AzPhysicalPositionI32"
            ),
            (
                Layout::new::<AzPhysicalPositionI32>(),
                "AzPhysicalPositionI32"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::PhysicalSizeU32>(),
                "AzPhysicalSizeU32"
            ),
            (Layout::new::<AzPhysicalSizeU32>(), "AzPhysicalSizeU32")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::geom::LogicalPosition>(),
                "AzLogicalPosition"
            ),
            (Layout::new::<AzLogicalPosition>(), "AzLogicalPosition")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::geom::LogicalSize>(),
                "AzLogicalSize"
            ),
            (Layout::new::<AzLogicalSize>(), "AzLogicalSize")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::IconKey>(), "AzIconKey"),
            (Layout::new::<AzIconKey>(), "AzIconKey")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::VirtualKeyCode>(),
                "AzVirtualKeyCode"
            ),
            (Layout::new::<AzVirtualKeyCode>(), "AzVirtualKeyCode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowFrame>(),
                "AzWindowFrame"
            ),
            (Layout::new::<AzWindowFrame>(), "AzWindowFrame")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::DebugState>(),
                "AzDebugState"
            ),
            (Layout::new::<AzDebugState>(), "AzDebugState")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MouseCursorType>(),
                "AzMouseCursorType"
            ),
            (Layout::new::<AzMouseCursorType>(), "AzMouseCursorType")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::RendererType>(),
                "AzRendererType"
            ),
            (Layout::new::<AzRendererType>(), "AzRendererType")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MacWindowOptions>(),
                "AzMacWindowOptions"
            ),
            (Layout::new::<AzMacWindowOptions>(), "AzMacWindowOptions")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WasmWindowOptions>(),
                "AzWasmWindowOptions"
            ),
            (Layout::new::<AzWasmWindowOptions>(), "AzWasmWindowOptions")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::FullScreenMode>(),
                "AzFullScreenMode"
            ),
            (Layout::new::<AzFullScreenMode>(), "AzFullScreenMode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowTheme>(),
                "AzWindowTheme"
            ),
            (Layout::new::<AzWindowTheme>(), "AzWindowTheme")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::TouchState>(),
                "AzTouchState"
            ),
            (Layout::new::<AzTouchState>(), "AzTouchState")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::MarshaledLayoutCallbackInner>(),
                "AzMarshaledLayoutCallbackInner"
            ),
            (
                Layout::new::<AzMarshaledLayoutCallbackInner>(),
                "AzMarshaledLayoutCallbackInner"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::LayoutCallbackInner>(),
                "AzLayoutCallbackInner"
            ),
            (
                Layout::new::<AzLayoutCallbackInner>(),
                "AzLayoutCallbackInner"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::Callback>(),
                "AzCallback"
            ),
            (Layout::new::<AzCallback>(), "AzCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::UpdateImageType>(),
                "AzUpdateImageType"
            ),
            (Layout::new::<AzUpdateImageType>(), "AzUpdateImageType")
        );
        assert_eq!(
            (Layout::new::<azul_core::callbacks::Update>(), "AzUpdate"),
            (Layout::new::<AzUpdate>(), "AzUpdate")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::NodeHierarchyItemId>(),
                "AzNodeId"
            ),
            (Layout::new::<AzNodeId>(), "AzNodeId")
        );
        assert_eq!(
            (Layout::new::<azul_core::styled_dom::DomId>(), "AzDomId"),
            (Layout::new::<AzDomId>(), "AzDomId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::ui_solver::PositionInfoInner>(),
                "AzPositionInfoInner"
            ),
            (Layout::new::<AzPositionInfoInner>(), "AzPositionInfoInner")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::ui_solver::ScriptType>(),
                "AzScriptType"
            ),
            (Layout::new::<AzScriptType>(), "AzScriptType")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::AnimationRepeat>(),
                "AzAnimationRepeat"
            ),
            (Layout::new::<AzAnimationRepeat>(), "AzAnimationRepeat")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::AnimationRepeatCount>(),
                "AzAnimationRepeatCount"
            ),
            (
                Layout::new::<AzAnimationRepeatCount>(),
                "AzAnimationRepeatCount"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::IFrameCallback>(),
                "AzIFrameCallback"
            ),
            (Layout::new::<AzIFrameCallback>(), "AzIFrameCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::RenderImageCallback>(),
                "AzRenderImageCallback"
            ),
            (
                Layout::new::<AzRenderImageCallback>(),
                "AzRenderImageCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::TimerCallback>(),
                "AzTimerCallback"
            ),
            (Layout::new::<AzTimerCallback>(), "AzTimerCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::WriteBackCallback>(),
                "AzWriteBackCallback"
            ),
            (Layout::new::<AzWriteBackCallback>(), "AzWriteBackCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::ThreadCallback>(),
                "AzThreadCallback"
            ),
            (Layout::new::<AzThreadCallback>(), "AzThreadCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::RefCount>(),
                "AzRefCount"
            ),
            (Layout::new::<AzRefCount>(), "AzRefCount")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::On>(), "AzOn"),
            (Layout::new::<AzOn>(), "AzOn")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::HoverEventFilter>(),
                "AzHoverEventFilter"
            ),
            (Layout::new::<AzHoverEventFilter>(), "AzHoverEventFilter")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::FocusEventFilter>(),
                "AzFocusEventFilter"
            ),
            (Layout::new::<AzFocusEventFilter>(), "AzFocusEventFilter")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::WindowEventFilter>(),
                "AzWindowEventFilter"
            ),
            (Layout::new::<AzWindowEventFilter>(), "AzWindowEventFilter")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::ComponentEventFilter>(),
                "AzComponentEventFilter"
            ),
            (
                Layout::new::<AzComponentEventFilter>(),
                "AzComponentEventFilter"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::ApplicationEventFilter>(),
                "AzApplicationEventFilter"
            ),
            (
                Layout::new::<AzApplicationEventFilter>(),
                "AzApplicationEventFilter"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::AccessibilityRole>(),
                "AzAccessibilityRole"
            ),
            (Layout::new::<AzAccessibilityRole>(), "AzAccessibilityRole")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::AccessibilityState>(),
                "AzAccessibilityState"
            ),
            (
                Layout::new::<AzAccessibilityState>(),
                "AzAccessibilityState"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::TabIndex>(), "AzTabIndex"),
            (Layout::new::<AzTabIndex>(), "AzTabIndex")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::ContextMenuMouseButton>(),
                "AzContextMenuMouseButton"
            ),
            (
                Layout::new::<AzContextMenuMouseButton>(),
                "AzContextMenuMouseButton"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MenuPopupPosition>(),
                "AzMenuPopupPosition"
            ),
            (Layout::new::<AzMenuPopupPosition>(), "AzMenuPopupPosition")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MenuItemState>(),
                "AzMenuItemState"
            ),
            (Layout::new::<AzMenuItemState>(), "AzMenuItemState")
        );
        assert_eq!(
            (Layout::new::<azul_css::NodeTypeTag>(), "AzNodeTypeKey"),
            (Layout::new::<AzNodeTypeKey>(), "AzNodeTypeKey")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssNthChildPattern>(),
                "AzCssNthChildPattern"
            ),
            (
                Layout::new::<AzCssNthChildPattern>(),
                "AzCssNthChildPattern"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPropertyType>(),
                "AzCssPropertyType"
            ),
            (Layout::new::<AzCssPropertyType>(), "AzCssPropertyType")
        );
        assert_eq!(
            (Layout::new::<azul_css::ColorU>(), "AzColorU"),
            (Layout::new::<AzColorU>(), "AzColorU")
        );
        assert_eq!(
            (Layout::new::<azul_css::SizeMetric>(), "AzSizeMetric"),
            (Layout::new::<AzSizeMetric>(), "AzSizeMetric")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::BoxShadowClipMode>(),
                "AzBoxShadowClipMode"
            ),
            (Layout::new::<AzBoxShadowClipMode>(), "AzBoxShadowClipMode")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleMixBlendMode>(),
                "AzStyleMixBlendMode"
            ),
            (Layout::new::<AzStyleMixBlendMode>(), "AzStyleMixBlendMode")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutAlignContent>(),
                "AzLayoutAlignContent"
            ),
            (
                Layout::new::<AzLayoutAlignContent>(),
                "AzLayoutAlignContent"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutAlignItems>(),
                "AzLayoutAlignItems"
            ),
            (Layout::new::<AzLayoutAlignItems>(), "AzLayoutAlignItems")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBoxSizing>(),
                "AzLayoutBoxSizing"
            ),
            (Layout::new::<AzLayoutBoxSizing>(), "AzLayoutBoxSizing")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexDirection>(),
                "AzLayoutFlexDirection"
            ),
            (
                Layout::new::<AzLayoutFlexDirection>(),
                "AzLayoutFlexDirection"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutDisplay>(), "AzLayoutDisplay"),
            (Layout::new::<AzLayoutDisplay>(), "AzLayoutDisplay")
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutFloat>(), "AzLayoutFloat"),
            (Layout::new::<AzLayoutFloat>(), "AzLayoutFloat")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutJustifyContent>(),
                "AzLayoutJustifyContent"
            ),
            (
                Layout::new::<AzLayoutJustifyContent>(),
                "AzLayoutJustifyContent"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPosition>(),
                "AzLayoutPosition"
            ),
            (Layout::new::<AzLayoutPosition>(), "AzLayoutPosition")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexWrap>(),
                "AzLayoutFlexWrap"
            ),
            (Layout::new::<AzLayoutFlexWrap>(), "AzLayoutFlexWrap")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutOverflow>(),
                "AzLayoutOverflow"
            ),
            (Layout::new::<AzLayoutOverflow>(), "AzLayoutOverflow")
        );
        assert_eq!(
            (Layout::new::<azul_css::FloatValue>(), "AzFloatValue"),
            (Layout::new::<AzFloatValue>(), "AzFloatValue")
        );
        assert_eq!(
            (Layout::new::<azul_css::AngleMetric>(), "AzAngleMetric"),
            (Layout::new::<AzAngleMetric>(), "AzAngleMetric")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::DirectionCorner>(),
                "AzDirectionCorner"
            ),
            (Layout::new::<AzDirectionCorner>(), "AzDirectionCorner")
        );
        assert_eq!(
            (Layout::new::<azul_css::ExtendMode>(), "AzExtendMode"),
            (Layout::new::<AzExtendMode>(), "AzExtendMode")
        );
        assert_eq!(
            (Layout::new::<azul_css::Shape>(), "AzShape"),
            (Layout::new::<AzShape>(), "AzShape")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::RadialGradientSize>(),
                "AzRadialGradientSize"
            ),
            (
                Layout::new::<AzRadialGradientSize>(),
                "AzRadialGradientSize"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundRepeat>(),
                "AzStyleBackgroundRepeat"
            ),
            (
                Layout::new::<AzStyleBackgroundRepeat>(),
                "AzStyleBackgroundRepeat"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::BorderStyle>(), "AzBorderStyle"),
            (Layout::new::<AzBorderStyle>(), "AzBorderStyle")
        );
        assert_eq!(
            (Layout::new::<azul_css::StyleCursor>(), "AzStyleCursor"),
            (Layout::new::<AzStyleCursor>(), "AzStyleCursor")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackfaceVisibility>(),
                "AzStyleBackfaceVisibility"
            ),
            (
                Layout::new::<AzStyleBackfaceVisibility>(),
                "AzStyleBackfaceVisibility"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTextAlign>(),
                "AzStyleTextAlign"
            ),
            (Layout::new::<AzStyleTextAlign>(), "AzStyleTextAlign")
        );
        assert_eq!(
            (Layout::new::<crate::widgets::ribbon::Ribbon>(), "AzRibbon"),
            (Layout::new::<AzRibbon>(), "AzRibbon")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::ribbon::RibbonOnTabClickedCallback>(),
                "AzRibbonOnTabClickedCallback"
            ),
            (
                Layout::new::<AzRibbonOnTabClickedCallback>(),
                "AzRibbonOnTabClickedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::file_input::FileInputOnPathChangeCallback>(),
                "AzFileInputOnPathChangeCallback"
            ),
            (
                Layout::new::<AzFileInputOnPathChangeCallback>(),
                "AzFileInputOnPathChangeCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::check_box::CheckBoxOnToggleCallback>(),
                "AzCheckBoxOnToggleCallback"
            ),
            (
                Layout::new::<AzCheckBoxOnToggleCallback>(),
                "AzCheckBoxOnToggleCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::check_box::CheckBoxState>(),
                "AzCheckBoxState"
            ),
            (Layout::new::<AzCheckBoxState>(), "AzCheckBoxState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::color_input::ColorInputOnValueChangeCallback>(),
                "AzColorInputOnValueChangeCallback"
            ),
            (
                Layout::new::<AzColorInputOnValueChangeCallback>(),
                "AzColorInputOnValueChangeCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputSelectionRange>(),
                "AzTextInputSelectionRange"
            ),
            (
                Layout::new::<AzTextInputSelectionRange>(),
                "AzTextInputSelectionRange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputOnTextInputCallback>(),
                "AzTextInputOnTextInputCallback"
            ),
            (
                Layout::new::<AzTextInputOnTextInputCallback>(),
                "AzTextInputOnTextInputCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputOnVirtualKeyDownCallback>(),
                "AzTextInputOnVirtualKeyDownCallback"
            ),
            (
                Layout::new::<AzTextInputOnVirtualKeyDownCallback>(),
                "AzTextInputOnVirtualKeyDownCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputOnFocusLostCallback>(),
                "AzTextInputOnFocusLostCallback"
            ),
            (
                Layout::new::<AzTextInputOnFocusLostCallback>(),
                "AzTextInputOnFocusLostCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputValid>(),
                "AzTextInputValid"
            ),
            (Layout::new::<AzTextInputValid>(), "AzTextInputValid")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInputState>(),
                "AzNumberInputState"
            ),
            (Layout::new::<AzNumberInputState>(), "AzNumberInputState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInputOnValueChangeCallback>(),
                "AzNumberInputOnValueChangeCallback"
            ),
            (
                Layout::new::<AzNumberInputOnValueChangeCallback>(),
                "AzNumberInputOnValueChangeCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInputOnFocusLostCallback>(),
                "AzNumberInputOnFocusLostCallback"
            ),
            (
                Layout::new::<AzNumberInputOnFocusLostCallback>(),
                "AzNumberInputOnFocusLostCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::progressbar::ProgressBarState>(),
                "AzProgressBarState"
            ),
            (Layout::new::<AzProgressBarState>(), "AzProgressBarState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tabs::TabHeaderState>(),
                "AzTabHeaderState"
            ),
            (Layout::new::<AzTabHeaderState>(), "AzTabHeaderState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tabs::TabOnClickCallback>(),
                "AzTabOnClickCallback"
            ),
            (
                Layout::new::<AzTabOnClickCallback>(),
                "AzTabOnClickCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeGraphStyle>(),
                "AzNodeGraphStyle"
            ),
            (Layout::new::<AzNodeGraphStyle>(), "AzNodeGraphStyle")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeAddedCallback>(),
                "AzNodeGraphOnNodeAddedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeAddedCallback>(),
                "AzNodeGraphOnNodeAddedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeRemovedCallback>(),
                "AzNodeGraphOnNodeRemovedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeRemovedCallback>(),
                "AzNodeGraphOnNodeRemovedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeGraphDraggedCallback>(),
                "AzNodeGraphOnNodeGraphDraggedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeGraphDraggedCallback>(),
                "AzNodeGraphOnNodeGraphDraggedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeDraggedCallback>(),
                "AzNodeGraphOnNodeDraggedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeDraggedCallback>(),
                "AzNodeGraphOnNodeDraggedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeConnectedCallback>(),
                "AzNodeGraphOnNodeConnectedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeConnectedCallback>(),
                "AzNodeGraphOnNodeConnectedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeInputDisconnectedCallback>(),
                "AzNodeGraphOnNodeInputDisconnectedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeInputDisconnectedCallback>(),
                "AzNodeGraphOnNodeInputDisconnectedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeOutputDisconnectedCallback>(),
                "AzNodeGraphOnNodeOutputDisconnectedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeOutputDisconnectedCallback>(),
                "AzNodeGraphOnNodeOutputDisconnectedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeFieldEditedCallback>(),
                "AzNodeGraphOnNodeFieldEditedCallback"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeFieldEditedCallback>(),
                "AzNodeGraphOnNodeFieldEditedCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputTypeId>(),
                "AzInputOutputTypeId"
            ),
            (Layout::new::<AzInputOutputTypeId>(), "AzInputOutputTypeId")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeId>(),
                "AzNodeTypeId"
            ),
            (Layout::new::<AzNodeTypeId>(), "AzNodeTypeId")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeGraphNodeId>(),
                "AzNodeGraphNodeId"
            ),
            (Layout::new::<AzNodeGraphNodeId>(), "AzNodeGraphNodeId")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodePosition>(),
                "AzNodePosition"
            ),
            (Layout::new::<AzNodePosition>(), "AzNodePosition")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::GraphDragAmount>(),
                "AzGraphDragAmount"
            ),
            (Layout::new::<AzGraphDragAmount>(), "AzGraphDragAmount")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeDragAmount>(),
                "AzNodeDragAmount"
            ),
            (Layout::new::<AzNodeDragAmount>(), "AzNodeDragAmount")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewOnLazyLoadScrollCallback>(),
                "AzListViewOnLazyLoadScrollCallback"
            ),
            (
                Layout::new::<AzListViewOnLazyLoadScrollCallback>(),
                "AzListViewOnLazyLoadScrollCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewOnColumnClickCallback>(),
                "AzListViewOnColumnClickCallback"
            ),
            (
                Layout::new::<AzListViewOnColumnClickCallback>(),
                "AzListViewOnColumnClickCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewOnRowClickCallback>(),
                "AzListViewOnRowClickCallback"
            ),
            (
                Layout::new::<AzListViewOnRowClickCallback>(),
                "AzListViewOnRowClickCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::drop_down::DropDownOnChoiceChangeCallback>(),
                "AzDropDownOnChoiceChangeCallback"
            ),
            (
                Layout::new::<AzDropDownOnChoiceChangeCallback>(),
                "AzDropDownOnChoiceChangeCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::NodeHierarchyItem>(),
                "AzNodeHierarchyItem"
            ),
            (Layout::new::<AzNodeHierarchyItem>(), "AzNodeHierarchyItem")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::style::CascadeInfo>(),
                "AzCascadeInfo"
            ),
            (Layout::new::<AzCascadeInfo>(), "AzCascadeInfo")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::StyledNodeState>(),
                "AzStyledNodeState"
            ),
            (Layout::new::<AzStyledNodeState>(), "AzStyledNodeState")
        );
        assert_eq!(
            (Layout::new::<azul_core::styled_dom::AzTagId>(), "AzTagId"),
            (Layout::new::<AzTagId>(), "AzTagId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::CssPropertyCachePtr>(),
                "AzCssPropertyCache"
            ),
            (Layout::new::<AzCssPropertyCache>(), "AzCssPropertyCache")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GlVoidPtrConst>(),
                "AzGlVoidPtrConst"
            ),
            (Layout::new::<AzGlVoidPtrConst>(), "AzGlVoidPtrConst")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GlVoidPtrMut>(),
                "AzGlVoidPtrMut"
            ),
            (Layout::new::<AzGlVoidPtrMut>(), "AzGlVoidPtrMut")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GlShaderPrecisionFormatReturn>(),
                "AzGlShaderPrecisionFormatReturn"
            ),
            (
                Layout::new::<AzGlShaderPrecisionFormatReturn>(),
                "AzGlShaderPrecisionFormatReturn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexAttributeType>(),
                "AzVertexAttributeType"
            ),
            (
                Layout::new::<AzVertexAttributeType>(),
                "AzVertexAttributeType"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::IndexBufferFormat>(),
                "AzIndexBufferFormat"
            ),
            (Layout::new::<AzIndexBufferFormat>(), "AzIndexBufferFormat")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::AzGlType>(), "AzGlType"),
            (Layout::new::<AzGlType>(), "AzGlType")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::U8VecRef>(), "AzU8VecRef"),
            (Layout::new::<AzU8VecRef>(), "AzU8VecRef")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::U8VecRefMut>(), "AzU8VecRefMut"),
            (Layout::new::<AzU8VecRefMut>(), "AzU8VecRefMut")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::F32VecRef>(), "AzF32VecRef"),
            (Layout::new::<AzF32VecRef>(), "AzF32VecRef")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::I32VecRef>(), "AzI32VecRef"),
            (Layout::new::<AzI32VecRef>(), "AzI32VecRef")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLuintVecRef>(),
                "AzGLuintVecRef"
            ),
            (Layout::new::<AzGLuintVecRef>(), "AzGLuintVecRef")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLenumVecRef>(),
                "AzGLenumVecRef"
            ),
            (Layout::new::<AzGLenumVecRef>(), "AzGLenumVecRef")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLintVecRefMut>(),
                "AzGLintVecRefMut"
            ),
            (Layout::new::<AzGLintVecRefMut>(), "AzGLintVecRefMut")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLint64VecRefMut>(),
                "AzGLint64VecRefMut"
            ),
            (Layout::new::<AzGLint64VecRefMut>(), "AzGLint64VecRefMut")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLbooleanVecRefMut>(),
                "AzGLbooleanVecRefMut"
            ),
            (
                Layout::new::<AzGLbooleanVecRefMut>(),
                "AzGLbooleanVecRefMut"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLfloatVecRefMut>(),
                "AzGLfloatVecRefMut"
            ),
            (Layout::new::<AzGLfloatVecRefMut>(), "AzGLfloatVecRefMut")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::Refstr>(), "AzRefstr"),
            (Layout::new::<AzRefstr>(), "AzRefstr")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::GLsyncPtr>(), "AzGLsyncPtr"),
            (Layout::new::<AzGLsyncPtr>(), "AzGLsyncPtr")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::TextureFlags>(),
                "AzTextureFlags"
            ),
            (Layout::new::<AzTextureFlags>(), "AzTextureFlags")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::ImageRef>(),
                "AzImageRef"
            ),
            (Layout::new::<AzImageRef>(), "AzImageRef")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::RawImageFormat>(),
                "AzRawImageFormat"
            ),
            (Layout::new::<AzRawImageFormat>(), "AzRawImageFormat")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::image::encode::EncodeImageError>(),
                "AzEncodeImageError"
            ),
            (Layout::new::<AzEncodeImageError>(), "AzEncodeImageError")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::image::decode::DecodeImageError>(),
                "AzDecodeImageError"
            ),
            (Layout::new::<AzDecodeImageError>(), "AzDecodeImageError")
        );
        assert_eq!(
            (Layout::new::<azul_css::FontRef>(), "AzFontRef"),
            (Layout::new::<AzFontRef>(), "AzFontRef")
        );
        assert_eq!(
            (Layout::new::<azul_layout::xml::svg::Svg>(), "AzSvg"),
            (Layout::new::<AzSvg>(), "AzSvg")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgXmlNode>(),
                "AzSvgXmlNode"
            ),
            (Layout::new::<AzSvgXmlNode>(), "AzSvgXmlNode")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgCircle>(),
                "AzSvgCircle"
            ),
            (Layout::new::<AzSvgCircle>(), "AzSvgCircle")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgPoint>(),
                "AzSvgPoint"
            ),
            (Layout::new::<AzSvgPoint>(), "AzSvgPoint")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgVector>(),
                "AzSvgVector"
            ),
            (Layout::new::<AzSvgVector>(), "AzSvgVector")
        );
        assert_eq!(
            (Layout::new::<azul_layout::xml::svg::SvgRect>(), "AzSvgRect"),
            (Layout::new::<AzSvgRect>(), "AzSvgRect")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgColoredVertex>(),
                "AzSvgColoredVertex"
            ),
            (Layout::new::<AzSvgColoredVertex>(), "AzSvgColoredVertex")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgVertex>(),
                "AzSvgVertex"
            ),
            (Layout::new::<AzSvgVertex>(), "AzSvgVertex")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::ShapeRendering>(),
                "AzShapeRendering"
            ),
            (Layout::new::<AzShapeRendering>(), "AzShapeRendering")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TextRendering>(),
                "AzTextRendering"
            ),
            (Layout::new::<AzTextRendering>(), "AzTextRendering")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::ImageRendering>(),
                "AzImageRendering"
            ),
            (Layout::new::<AzImageRendering>(), "AzImageRendering")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::FontDatabase>(),
                "AzFontDatabase"
            ),
            (Layout::new::<AzFontDatabase>(), "AzFontDatabase")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgRenderTransform>(),
                "AzSvgRenderTransform"
            ),
            (
                Layout::new::<AzSvgRenderTransform>(),
                "AzSvgRenderTransform"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::svg::Indent>(), "AzIndent"),
            (Layout::new::<AzIndent>(), "AzIndent")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgFitTo>(),
                "AzSvgFitTo"
            ),
            (Layout::new::<AzSvgFitTo>(), "AzSvgFitTo")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgFillRule>(),
                "AzSvgFillRule"
            ),
            (Layout::new::<AzSvgFillRule>(), "AzSvgFillRule")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgTransform>(),
                "AzSvgTransform"
            ),
            (Layout::new::<AzSvgTransform>(), "AzSvgTransform")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgLineJoin>(),
                "AzSvgLineJoin"
            ),
            (Layout::new::<AzSvgLineJoin>(), "AzSvgLineJoin")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgLineCap>(),
                "AzSvgLineCap"
            ),
            (Layout::new::<AzSvgLineCap>(), "AzSvgLineCap")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgDashPattern>(),
                "AzSvgDashPattern"
            ),
            (Layout::new::<AzSvgDashPattern>(), "AzSvgDashPattern")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::MsgBox>(),
                "AzMsgBox"
            ),
            (Layout::new::<AzMsgBox>(), "AzMsgBox")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::MsgBoxIcon>(),
                "AzMsgBoxIcon"
            ),
            (Layout::new::<AzMsgBoxIcon>(), "AzMsgBoxIcon")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::YesNo>(),
                "AzMsgBoxYesNo"
            ),
            (Layout::new::<AzMsgBoxYesNo>(), "AzMsgBoxYesNo")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::OkCancel>(),
                "AzMsgBoxOkCancel"
            ),
            (Layout::new::<AzMsgBoxOkCancel>(), "AzMsgBoxOkCancel")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::FileDialog>(),
                "AzFileDialog"
            ),
            (Layout::new::<AzFileDialog>(), "AzFileDialog")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::ColorPickerDialog>(),
                "AzColorPickerDialog"
            ),
            (Layout::new::<AzColorPickerDialog>(), "AzColorPickerDialog")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::app::Clipboard>(),
                "AzSystemClipboard"
            ),
            (Layout::new::<AzSystemClipboard>(), "AzSystemClipboard")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::InstantPtrCloneCallback>(),
                "AzInstantPtrCloneFn"
            ),
            (Layout::new::<AzInstantPtrCloneFn>(), "AzInstantPtrCloneFn")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::InstantPtrDestructorCallback>(),
                "AzInstantPtrDestructorFn"
            ),
            (
                Layout::new::<AzInstantPtrDestructorFn>(),
                "AzInstantPtrDestructorFn"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::task::SystemTick>(), "AzSystemTick"),
            (Layout::new::<AzSystemTick>(), "AzSystemTick")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::SystemTimeDiff>(),
                "AzSystemTimeDiff"
            ),
            (Layout::new::<AzSystemTimeDiff>(), "AzSystemTimeDiff")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::SystemTickDiff>(),
                "AzSystemTickDiff"
            ),
            (Layout::new::<AzSystemTickDiff>(), "AzSystemTickDiff")
        );
        assert_eq!(
            (Layout::new::<azul_core::task::TimerId>(), "AzTimerId"),
            (Layout::new::<AzTimerId>(), "AzTimerId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::TerminateTimer>(),
                "AzTerminateTimer"
            ),
            (Layout::new::<AzTerminateTimer>(), "AzTerminateTimer")
        );
        assert_eq!(
            (Layout::new::<azul_core::task::ThreadId>(), "AzThreadId"),
            (Layout::new::<AzThreadId>(), "AzThreadId")
        );
        assert_eq!(
            (Layout::new::<azul_core::task::Thread>(), "AzThread"),
            (Layout::new::<AzThread>(), "AzThread")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadSender>(),
                "AzThreadSender"
            ),
            (Layout::new::<AzThreadSender>(), "AzThreadSender")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadReceiver>(),
                "AzThreadReceiver"
            ),
            (Layout::new::<AzThreadReceiver>(), "AzThreadReceiver")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::CreateThreadCallback>(),
                "AzCreateThreadFn"
            ),
            (Layout::new::<AzCreateThreadFn>(), "AzCreateThreadFn")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::GetSystemTimeCallback>(),
                "AzGetSystemTimeFn"
            ),
            (Layout::new::<AzGetSystemTimeFn>(), "AzGetSystemTimeFn")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::CheckThreadFinishedCallback>(),
                "AzCheckThreadFinishedFn"
            ),
            (
                Layout::new::<AzCheckThreadFinishedFn>(),
                "AzCheckThreadFinishedFn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::LibrarySendThreadMsgCallback>(),
                "AzLibrarySendThreadMsgFn"
            ),
            (
                Layout::new::<AzLibrarySendThreadMsgFn>(),
                "AzLibrarySendThreadMsgFn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::LibraryReceiveThreadMsgCallback>(),
                "AzLibraryReceiveThreadMsgFn"
            ),
            (
                Layout::new::<AzLibraryReceiveThreadMsgFn>(),
                "AzLibraryReceiveThreadMsgFn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadRecvCallback>(),
                "AzThreadRecvFn"
            ),
            (Layout::new::<AzThreadRecvFn>(), "AzThreadRecvFn")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadSendCallback>(),
                "AzThreadSendFn"
            ),
            (Layout::new::<AzThreadSendFn>(), "AzThreadSendFn")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadDestructorCallback>(),
                "AzThreadDestructorFn"
            ),
            (
                Layout::new::<AzThreadDestructorFn>(),
                "AzThreadDestructorFn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadReceiverDestructorCallback>(),
                "AzThreadReceiverDestructorFn"
            ),
            (
                Layout::new::<AzThreadReceiverDestructorFn>(),
                "AzThreadReceiverDestructorFn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadSenderDestructorCallback>(),
                "AzThreadSenderDestructorFn"
            ),
            (
                Layout::new::<AzThreadSenderDestructorFn>(),
                "AzThreadSenderDestructorFn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFontFamilyVecDestructor>(),
                "AzStyleFontFamilyVecDestructor"
            ),
            (
                Layout::new::<AzStyleFontFamilyVecDestructor>(),
                "AzStyleFontFamilyVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewRowVecDestructor>(),
                "AzListViewRowVecDestructor"
            ),
            (
                Layout::new::<AzListViewRowVecDestructor>(),
                "AzListViewRowVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFilterVecDestructor>(),
                "AzStyleFilterVecDestructor"
            ),
            (
                Layout::new::<AzStyleFilterVecDestructor>(),
                "AzStyleFilterVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::geom::LogicalRectVecDestructor>(),
                "AzLogicalRectVecDestructor"
            ),
            (
                Layout::new::<AzLogicalRectVecDestructor>(),
                "AzLogicalRectVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeIdInfoMapVecDestructor>(),
                "AzNodeTypeIdInfoMapVecDestructor"
            ),
            (
                Layout::new::<AzNodeTypeIdInfoMapVecDestructor>(),
                "AzNodeTypeIdInfoMapVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputTypeIdInfoMapVecDestructor>(),
                "AzInputOutputTypeIdInfoMapVecDestructor"
            ),
            (
                Layout::new::<AzInputOutputTypeIdInfoMapVecDestructor>(),
                "AzInputOutputTypeIdInfoMapVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeIdNodeMapVecDestructor>(),
                "AzNodeIdNodeMapVecDestructor"
            ),
            (
                Layout::new::<AzNodeIdNodeMapVecDestructor>(),
                "AzNodeIdNodeMapVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputTypeIdVecDestructor>(),
                "AzInputOutputTypeIdVecDestructor"
            ),
            (
                Layout::new::<AzInputOutputTypeIdVecDestructor>(),
                "AzInputOutputTypeIdVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeFieldVecDestructor>(),
                "AzNodeTypeFieldVecDestructor"
            ),
            (
                Layout::new::<AzNodeTypeFieldVecDestructor>(),
                "AzNodeTypeFieldVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputConnectionVecDestructor>(),
                "AzInputConnectionVecDestructor"
            ),
            (
                Layout::new::<AzInputConnectionVecDestructor>(),
                "AzInputConnectionVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OutputNodeAndIndexVecDestructor>(),
                "AzOutputNodeAndIndexVecDestructor"
            ),
            (
                Layout::new::<AzOutputNodeAndIndexVecDestructor>(),
                "AzOutputNodeAndIndexVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OutputConnectionVecDestructor>(),
                "AzOutputConnectionVecDestructor"
            ),
            (
                Layout::new::<AzOutputConnectionVecDestructor>(),
                "AzOutputConnectionVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputNodeAndIndexVecDestructor>(),
                "AzInputNodeAndIndexVecDestructor"
            ),
            (
                Layout::new::<AzInputNodeAndIndexVecDestructor>(),
                "AzInputNodeAndIndexVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::AccessibilityStateVecDestructor>(),
                "AzAccessibilityStateVecDestructor"
            ),
            (
                Layout::new::<AzAccessibilityStateVecDestructor>(),
                "AzAccessibilityStateVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MenuItemVecDestructor>(),
                "AzMenuItemVecDestructor"
            ),
            (
                Layout::new::<AzMenuItemVecDestructor>(),
                "AzMenuItemVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedSvgNodeVecDestructor>(),
                "AzTessellatedSvgNodeVecDestructor"
            ),
            (
                Layout::new::<AzTessellatedSvgNodeVecDestructor>(),
                "AzTessellatedSvgNodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedColoredSvgNodeVecDestructor>(),
                "AzTessellatedColoredSvgNodeVecDestructor"
            ),
            (
                Layout::new::<AzTessellatedColoredSvgNodeVecDestructor>(),
                "AzTessellatedColoredSvgNodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::XmlNodeVecDestructor>(),
                "AzXmlNodeVecDestructor"
            ),
            (
                Layout::new::<AzXmlNodeVecDestructor>(),
                "AzXmlNodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::str::FmtArgVecDestructor>(),
                "AzFmtArgVecDestructor"
            ),
            (
                Layout::new::<AzFmtArgVecDestructor>(),
                "AzFmtArgVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineLineVecDestructor>(),
                "AzInlineLineVecDestructor"
            ),
            (
                Layout::new::<AzInlineLineVecDestructor>(),
                "AzInlineLineVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineWordVecDestructor>(),
                "AzInlineWordVecDestructor"
            ),
            (
                Layout::new::<AzInlineWordVecDestructor>(),
                "AzInlineWordVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineGlyphVecDestructor>(),
                "AzInlineGlyphVecDestructor"
            ),
            (
                Layout::new::<AzInlineGlyphVecDestructor>(),
                "AzInlineGlyphVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineTextHitVecDestructor>(),
                "AzInlineTextHitVecDestructor"
            ),
            (
                Layout::new::<AzInlineTextHitVecDestructor>(),
                "AzInlineTextHitVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MonitorVecDestructor>(),
                "AzMonitorVecDestructor"
            ),
            (
                Layout::new::<AzMonitorVecDestructor>(),
                "AzMonitorVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::VideoModeVecDestructor>(),
                "AzVideoModeVecDestructor"
            ),
            (
                Layout::new::<AzVideoModeVecDestructor>(),
                "AzVideoModeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::DomVecDestructor>(),
                "AzDomVecDestructor"
            ),
            (Layout::new::<AzDomVecDestructor>(), "AzDomVecDestructor")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::IdOrClassVecDestructor>(),
                "AzIdOrClassVecDestructor"
            ),
            (
                Layout::new::<AzIdOrClassVecDestructor>(),
                "AzIdOrClassVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::NodeDataInlineCssPropertyVecDestructor>(),
                "AzNodeDataInlineCssPropertyVecDestructor"
            ),
            (
                Layout::new::<AzNodeDataInlineCssPropertyVecDestructor>(),
                "AzNodeDataInlineCssPropertyVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundContentVecDestructor>(),
                "AzStyleBackgroundContentVecDestructor"
            ),
            (
                Layout::new::<AzStyleBackgroundContentVecDestructor>(),
                "AzStyleBackgroundContentVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundPositionVecDestructor>(),
                "AzStyleBackgroundPositionVecDestructor"
            ),
            (
                Layout::new::<AzStyleBackgroundPositionVecDestructor>(),
                "AzStyleBackgroundPositionVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundRepeatVecDestructor>(),
                "AzStyleBackgroundRepeatVecDestructor"
            ),
            (
                Layout::new::<AzStyleBackgroundRepeatVecDestructor>(),
                "AzStyleBackgroundRepeatVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundSizeVecDestructor>(),
                "AzStyleBackgroundSizeVecDestructor"
            ),
            (
                Layout::new::<AzStyleBackgroundSizeVecDestructor>(),
                "AzStyleBackgroundSizeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformVecDestructor>(),
                "AzStyleTransformVecDestructor"
            ),
            (
                Layout::new::<AzStyleTransformVecDestructor>(),
                "AzStyleTransformVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPropertyVecDestructor>(),
                "AzCssPropertyVecDestructor"
            ),
            (
                Layout::new::<AzCssPropertyVecDestructor>(),
                "AzCssPropertyVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgMultiPolygonVecDestructor>(),
                "AzSvgMultiPolygonVecDestructor"
            ),
            (
                Layout::new::<AzSvgMultiPolygonVecDestructor>(),
                "AzSvgMultiPolygonVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgSimpleNodeVecDestructor>(),
                "AzSvgSimpleNodeVecDestructor"
            ),
            (
                Layout::new::<AzSvgSimpleNodeVecDestructor>(),
                "AzSvgSimpleNodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgPathVecDestructor>(),
                "AzSvgPathVecDestructor"
            ),
            (
                Layout::new::<AzSvgPathVecDestructor>(),
                "AzSvgPathVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexAttributeVecDestructor>(),
                "AzVertexAttributeVecDestructor"
            ),
            (
                Layout::new::<AzVertexAttributeVecDestructor>(),
                "AzVertexAttributeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgPathElementVecDestructor>(),
                "AzSvgPathElementVecDestructor"
            ),
            (
                Layout::new::<AzSvgPathElementVecDestructor>(),
                "AzSvgPathElementVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgVertexVecDestructor>(),
                "AzSvgVertexVecDestructor"
            ),
            (
                Layout::new::<AzSvgVertexVecDestructor>(),
                "AzSvgVertexVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgColoredVertexVecDestructor>(),
                "AzSvgColoredVertexVecDestructor"
            ),
            (
                Layout::new::<AzSvgColoredVertexVecDestructor>(),
                "AzSvgColoredVertexVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::U32VecDestructor>(),
                "AzU32VecDestructor"
            ),
            (Layout::new::<AzU32VecDestructor>(), "AzU32VecDestructor")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::XWindowTypeVecDestructor>(),
                "AzXWindowTypeVecDestructor"
            ),
            (
                Layout::new::<AzXWindowTypeVecDestructor>(),
                "AzXWindowTypeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::VirtualKeyCodeVecDestructor>(),
                "AzVirtualKeyCodeVecDestructor"
            ),
            (
                Layout::new::<AzVirtualKeyCodeVecDestructor>(),
                "AzVirtualKeyCodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::style::CascadeInfoVecDestructor>(),
                "AzCascadeInfoVecDestructor"
            ),
            (
                Layout::new::<AzCascadeInfoVecDestructor>(),
                "AzCascadeInfoVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::ScanCodeVecDestructor>(),
                "AzScanCodeVecDestructor"
            ),
            (
                Layout::new::<AzScanCodeVecDestructor>(),
                "AzScanCodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssDeclarationVecDestructor>(),
                "AzCssDeclarationVecDestructor"
            ),
            (
                Layout::new::<AzCssDeclarationVecDestructor>(),
                "AzCssDeclarationVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPathSelectorVecDestructor>(),
                "AzCssPathSelectorVecDestructor"
            ),
            (
                Layout::new::<AzCssPathSelectorVecDestructor>(),
                "AzCssPathSelectorVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StylesheetVecDestructor>(),
                "AzStylesheetVecDestructor"
            ),
            (
                Layout::new::<AzStylesheetVecDestructor>(),
                "AzStylesheetVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssRuleBlockVecDestructor>(),
                "AzCssRuleBlockVecDestructor"
            ),
            (
                Layout::new::<AzCssRuleBlockVecDestructor>(),
                "AzCssRuleBlockVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::F32VecDestructor>(),
                "AzF32VecDestructor"
            ),
            (Layout::new::<AzF32VecDestructor>(), "AzF32VecDestructor")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::U16VecDestructor>(),
                "AzU16VecDestructor"
            ),
            (Layout::new::<AzU16VecDestructor>(), "AzU16VecDestructor")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::U8VecDestructor>(),
                "AzU8VecDestructor"
            ),
            (Layout::new::<AzU8VecDestructor>(), "AzU8VecDestructor")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::CallbackDataVecDestructor>(),
                "AzCallbackDataVecDestructor"
            ),
            (
                Layout::new::<AzCallbackDataVecDestructor>(),
                "AzCallbackDataVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::AzDebugMessageVecDestructor>(),
                "AzDebugMessageVecDestructor"
            ),
            (
                Layout::new::<AzDebugMessageVecDestructor>(),
                "AzDebugMessageVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLuintVecDestructor>(),
                "AzGLuintVecDestructor"
            ),
            (
                Layout::new::<AzGLuintVecDestructor>(),
                "AzGLuintVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GLintVecDestructor>(),
                "AzGLintVecDestructor"
            ),
            (
                Layout::new::<AzGLintVecDestructor>(),
                "AzGLintVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StringVecDestructor>(),
                "AzStringVecDestructor"
            ),
            (
                Layout::new::<AzStringVecDestructor>(),
                "AzStringVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::StringPairVecDestructor>(),
                "AzStringPairVecDestructor"
            ),
            (
                Layout::new::<AzStringPairVecDestructor>(),
                "AzStringPairVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::NormalizedLinearColorStopVecDestructor>(),
                "AzNormalizedLinearColorStopVecDestructor"
            ),
            (
                Layout::new::<AzNormalizedLinearColorStopVecDestructor>(),
                "AzNormalizedLinearColorStopVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::NormalizedRadialColorStopVecDestructor>(),
                "AzNormalizedRadialColorStopVecDestructor"
            ),
            (
                Layout::new::<AzNormalizedRadialColorStopVecDestructor>(),
                "AzNormalizedRadialColorStopVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::NodeIdVecDestructor>(),
                "AzNodeIdVecDestructor"
            ),
            (
                Layout::new::<AzNodeIdVecDestructor>(),
                "AzNodeIdVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::NodeHierarchyItemVecDestructor>(),
                "AzNodeHierarchyItemVecDestructor"
            ),
            (
                Layout::new::<AzNodeHierarchyItemVecDestructor>(),
                "AzNodeHierarchyItemVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::StyledNodeVecDestructor>(),
                "AzStyledNodeVecDestructor"
            ),
            (
                Layout::new::<AzStyledNodeVecDestructor>(),
                "AzStyledNodeVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::TagIdToNodeIdMappingVecDestructor>(),
                "AzTagIdToNodeIdMappingVecDestructor"
            ),
            (
                Layout::new::<AzTagIdToNodeIdMappingVecDestructor>(),
                "AzTagIdToNodeIdMappingVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::ParentWithNodeDepthVecDestructor>(),
                "AzParentWithNodeDepthVecDestructor"
            ),
            (
                Layout::new::<AzParentWithNodeDepthVecDestructor>(),
                "AzParentWithNodeDepthVecDestructor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::NodeDataVecDestructor>(),
                "AzNodeDataVecDestructor"
            ),
            (
                Layout::new::<AzNodeDataVecDestructor>(),
                "AzNodeDataVecDestructor"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionI16>(), "AzOptionI16"),
            (Layout::new::<AzOptionI16>(), "AzOptionI16")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionU16>(), "AzOptionU16"),
            (Layout::new::<AzOptionU16>(), "AzOptionU16")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionU32>(), "AzOptionU32"),
            (Layout::new::<AzOptionU32>(), "AzOptionU32")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionHwndHandle>(),
                "AzOptionHwndHandle"
            ),
            (Layout::new::<AzOptionHwndHandle>(), "AzOptionHwndHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionX11Visual>(),
                "AzOptionX11Visual"
            ),
            (Layout::new::<AzOptionX11Visual>(), "AzOptionX11Visual")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionI32>(), "AzOptionI32"),
            (Layout::new::<AzOptionI32>(), "AzOptionI32")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionF32>(), "AzOptionF32"),
            (Layout::new::<AzOptionF32>(), "AzOptionF32")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionChar>(),
                "AzOptionChar"
            ),
            (Layout::new::<AzOptionChar>(), "AzOptionChar")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::OptionUsize>(), "AzOptionUsize"),
            (Layout::new::<AzOptionUsize>(), "AzOptionUsize")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::XmlTextPos>(),
                "AzSvgParseErrorPosition"
            ),
            (
                Layout::new::<AzSvgParseErrorPosition>(),
                "AzSvgParseErrorPosition"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ExternalSystemCallbacks>(),
                "AzSystemCallbacks"
            ),
            (Layout::new::<AzSystemCallbacks>(), "AzSystemCallbacks")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::RendererOptions>(),
                "AzRendererOptions"
            ),
            (Layout::new::<AzRendererOptions>(), "AzRendererOptions")
        );
        assert_eq!(
            (Layout::new::<azul_core::geom::LayoutRect>(), "AzLayoutRect"),
            (Layout::new::<AzLayoutRect>(), "AzLayoutRect")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::RawWindowHandle>(),
                "AzRawWindowHandle"
            ),
            (Layout::new::<AzRawWindowHandle>(), "AzRawWindowHandle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::geom::LogicalRect>(),
                "AzLogicalRect"
            ),
            (Layout::new::<AzLogicalRect>(), "AzLogicalRect")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::AcceleratorKey>(),
                "AzAcceleratorKey"
            ),
            (Layout::new::<AzAcceleratorKey>(), "AzAcceleratorKey")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowFlags>(),
                "AzWindowFlags"
            ),
            (Layout::new::<AzWindowFlags>(), "AzWindowFlags")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::CursorPosition>(),
                "AzCursorPosition"
            ),
            (Layout::new::<AzCursorPosition>(), "AzCursorPosition")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowPosition>(),
                "AzWindowPosition"
            ),
            (Layout::new::<AzWindowPosition>(), "AzWindowPosition")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::ImePosition>(),
                "AzImePosition"
            ),
            (Layout::new::<AzImePosition>(), "AzImePosition")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::VideoMode>(), "AzVideoMode"),
            (Layout::new::<AzVideoMode>(), "AzVideoMode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::DomNodeId>(),
                "AzDomNodeId"
            ),
            (Layout::new::<AzDomNodeId>(), "AzDomNodeId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::ui_solver::PositionInfo>(),
                "AzPositionInfo"
            ),
            (Layout::new::<AzPositionInfo>(), "AzPositionInfo")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::HidpiAdjustedBounds>(),
                "AzHidpiAdjustedBounds"
            ),
            (
                Layout::new::<AzHidpiAdjustedBounds>(),
                "AzHidpiAdjustedBounds"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineGlyph>(),
                "AzInlineGlyph"
            ),
            (Layout::new::<AzInlineGlyph>(), "AzInlineGlyph")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineTextHit>(),
                "AzInlineTextHit"
            ),
            (Layout::new::<AzInlineTextHit>(), "AzInlineTextHit")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::IFrameCallbackInfo>(),
                "AzIFrameCallbackInfo"
            ),
            (
                Layout::new::<AzIFrameCallbackInfo>(),
                "AzIFrameCallbackInfo"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::TimerCallbackReturn>(),
                "AzTimerCallbackReturn"
            ),
            (
                Layout::new::<AzTimerCallbackReturn>(),
                "AzTimerCallbackReturn"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::callbacks::RefAny>(), "AzRefAny"),
            (Layout::new::<AzRefAny>(), "AzRefAny")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::IFrameNode>(), "AzIFrameNode"),
            (Layout::new::<AzIFrameNode>(), "AzIFrameNode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::NotEventFilter>(),
                "AzNotEventFilter"
            ),
            (Layout::new::<AzNotEventFilter>(), "AzNotEventFilter")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MenuCallback>(),
                "AzMenuCallback"
            ),
            (Layout::new::<AzMenuCallback>(), "AzMenuCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MenuItemIcon>(),
                "AzMenuItemIcon"
            ),
            (Layout::new::<AzMenuItemIcon>(), "AzMenuItemIcon")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssNthChildSelector>(),
                "AzCssNthChildSelector"
            ),
            (
                Layout::new::<AzCssNthChildSelector>(),
                "AzCssNthChildSelector"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::PixelValue>(), "AzPixelValue"),
            (Layout::new::<AzPixelValue>(), "AzPixelValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::PixelValueNoPercent>(),
                "AzPixelValueNoPercent"
            ),
            (
                Layout::new::<AzPixelValueNoPercent>(),
                "AzPixelValueNoPercent"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBoxShadow>(),
                "AzStyleBoxShadow"
            ),
            (Layout::new::<AzStyleBoxShadow>(), "AzStyleBoxShadow")
        );
        assert_eq!(
            (Layout::new::<azul_css::StyleBlur>(), "AzStyleBlur"),
            (Layout::new::<AzStyleBlur>(), "AzStyleBlur")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleColorMatrix>(),
                "AzStyleColorMatrix"
            ),
            (Layout::new::<AzStyleColorMatrix>(), "AzStyleColorMatrix")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFilterOffset>(),
                "AzStyleFilterOffset"
            ),
            (Layout::new::<AzStyleFilterOffset>(), "AzStyleFilterOffset")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleCompositeFilter>(),
                "AzStyleCompositeFilter"
            ),
            (
                Layout::new::<AzStyleCompositeFilter>(),
                "AzStyleCompositeFilter"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutBottom>(), "AzLayoutBottom"),
            (Layout::new::<AzLayoutBottom>(), "AzLayoutBottom")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexGrow>(),
                "AzLayoutFlexGrow"
            ),
            (Layout::new::<AzLayoutFlexGrow>(), "AzLayoutFlexGrow")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexShrink>(),
                "AzLayoutFlexShrink"
            ),
            (Layout::new::<AzLayoutFlexShrink>(), "AzLayoutFlexShrink")
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutHeight>(), "AzLayoutHeight"),
            (Layout::new::<AzLayoutHeight>(), "AzLayoutHeight")
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutLeft>(), "AzLayoutLeft"),
            (Layout::new::<AzLayoutLeft>(), "AzLayoutLeft")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginBottom>(),
                "AzLayoutMarginBottom"
            ),
            (
                Layout::new::<AzLayoutMarginBottom>(),
                "AzLayoutMarginBottom"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginLeft>(),
                "AzLayoutMarginLeft"
            ),
            (Layout::new::<AzLayoutMarginLeft>(), "AzLayoutMarginLeft")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginRight>(),
                "AzLayoutMarginRight"
            ),
            (Layout::new::<AzLayoutMarginRight>(), "AzLayoutMarginRight")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginTop>(),
                "AzLayoutMarginTop"
            ),
            (Layout::new::<AzLayoutMarginTop>(), "AzLayoutMarginTop")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMaxHeight>(),
                "AzLayoutMaxHeight"
            ),
            (Layout::new::<AzLayoutMaxHeight>(), "AzLayoutMaxHeight")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMaxWidth>(),
                "AzLayoutMaxWidth"
            ),
            (Layout::new::<AzLayoutMaxWidth>(), "AzLayoutMaxWidth")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMinHeight>(),
                "AzLayoutMinHeight"
            ),
            (Layout::new::<AzLayoutMinHeight>(), "AzLayoutMinHeight")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMinWidth>(),
                "AzLayoutMinWidth"
            ),
            (Layout::new::<AzLayoutMinWidth>(), "AzLayoutMinWidth")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingBottom>(),
                "AzLayoutPaddingBottom"
            ),
            (
                Layout::new::<AzLayoutPaddingBottom>(),
                "AzLayoutPaddingBottom"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingLeft>(),
                "AzLayoutPaddingLeft"
            ),
            (Layout::new::<AzLayoutPaddingLeft>(), "AzLayoutPaddingLeft")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingRight>(),
                "AzLayoutPaddingRight"
            ),
            (
                Layout::new::<AzLayoutPaddingRight>(),
                "AzLayoutPaddingRight"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingTop>(),
                "AzLayoutPaddingTop"
            ),
            (Layout::new::<AzLayoutPaddingTop>(), "AzLayoutPaddingTop")
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutRight>(), "AzLayoutRight"),
            (Layout::new::<AzLayoutRight>(), "AzLayoutRight")
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutTop>(), "AzLayoutTop"),
            (Layout::new::<AzLayoutTop>(), "AzLayoutTop")
        );
        assert_eq!(
            (Layout::new::<azul_css::LayoutWidth>(), "AzLayoutWidth"),
            (Layout::new::<AzLayoutWidth>(), "AzLayoutWidth")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::PercentageValue>(),
                "AzPercentageValue"
            ),
            (Layout::new::<AzPercentageValue>(), "AzPercentageValue")
        );
        assert_eq!(
            (Layout::new::<azul_css::AngleValue>(), "AzAngleValue"),
            (Layout::new::<AzAngleValue>(), "AzAngleValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::NormalizedLinearColorStop>(),
                "AzNormalizedLinearColorStop"
            ),
            (
                Layout::new::<AzNormalizedLinearColorStop>(),
                "AzNormalizedLinearColorStop"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::NormalizedRadialColorStop>(),
                "AzNormalizedRadialColorStop"
            ),
            (
                Layout::new::<AzNormalizedRadialColorStop>(),
                "AzNormalizedRadialColorStop"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::DirectionCorners>(),
                "AzDirectionCorners"
            ),
            (Layout::new::<AzDirectionCorners>(), "AzDirectionCorners")
        );
        assert_eq!(
            (Layout::new::<azul_css::Direction>(), "AzDirection"),
            (Layout::new::<AzDirection>(), "AzDirection")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::BackgroundPositionHorizontal>(),
                "AzBackgroundPositionHorizontal"
            ),
            (
                Layout::new::<AzBackgroundPositionHorizontal>(),
                "AzBackgroundPositionHorizontal"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::BackgroundPositionVertical>(),
                "AzBackgroundPositionVertical"
            ),
            (
                Layout::new::<AzBackgroundPositionVertical>(),
                "AzBackgroundPositionVertical"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundPosition>(),
                "AzStyleBackgroundPosition"
            ),
            (
                Layout::new::<AzStyleBackgroundPosition>(),
                "AzStyleBackgroundPosition"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundSize>(),
                "AzStyleBackgroundSize"
            ),
            (
                Layout::new::<AzStyleBackgroundSize>(),
                "AzStyleBackgroundSize"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomColor>(),
                "AzStyleBorderBottomColor"
            ),
            (
                Layout::new::<AzStyleBorderBottomColor>(),
                "AzStyleBorderBottomColor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomLeftRadius>(),
                "AzStyleBorderBottomLeftRadius"
            ),
            (
                Layout::new::<AzStyleBorderBottomLeftRadius>(),
                "AzStyleBorderBottomLeftRadius"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomRightRadius>(),
                "AzStyleBorderBottomRightRadius"
            ),
            (
                Layout::new::<AzStyleBorderBottomRightRadius>(),
                "AzStyleBorderBottomRightRadius"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomStyle>(),
                "AzStyleBorderBottomStyle"
            ),
            (
                Layout::new::<AzStyleBorderBottomStyle>(),
                "AzStyleBorderBottomStyle"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderBottomWidth>(),
                "AzLayoutBorderBottomWidth"
            ),
            (
                Layout::new::<AzLayoutBorderBottomWidth>(),
                "AzLayoutBorderBottomWidth"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderLeftColor>(),
                "AzStyleBorderLeftColor"
            ),
            (
                Layout::new::<AzStyleBorderLeftColor>(),
                "AzStyleBorderLeftColor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderLeftStyle>(),
                "AzStyleBorderLeftStyle"
            ),
            (
                Layout::new::<AzStyleBorderLeftStyle>(),
                "AzStyleBorderLeftStyle"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderLeftWidth>(),
                "AzLayoutBorderLeftWidth"
            ),
            (
                Layout::new::<AzLayoutBorderLeftWidth>(),
                "AzLayoutBorderLeftWidth"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderRightColor>(),
                "AzStyleBorderRightColor"
            ),
            (
                Layout::new::<AzStyleBorderRightColor>(),
                "AzStyleBorderRightColor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderRightStyle>(),
                "AzStyleBorderRightStyle"
            ),
            (
                Layout::new::<AzStyleBorderRightStyle>(),
                "AzStyleBorderRightStyle"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderRightWidth>(),
                "AzLayoutBorderRightWidth"
            ),
            (
                Layout::new::<AzLayoutBorderRightWidth>(),
                "AzLayoutBorderRightWidth"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopColor>(),
                "AzStyleBorderTopColor"
            ),
            (
                Layout::new::<AzStyleBorderTopColor>(),
                "AzStyleBorderTopColor"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopLeftRadius>(),
                "AzStyleBorderTopLeftRadius"
            ),
            (
                Layout::new::<AzStyleBorderTopLeftRadius>(),
                "AzStyleBorderTopLeftRadius"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopRightRadius>(),
                "AzStyleBorderTopRightRadius"
            ),
            (
                Layout::new::<AzStyleBorderTopRightRadius>(),
                "AzStyleBorderTopRightRadius"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopStyle>(),
                "AzStyleBorderTopStyle"
            ),
            (
                Layout::new::<AzStyleBorderTopStyle>(),
                "AzStyleBorderTopStyle"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderTopWidth>(),
                "AzLayoutBorderTopWidth"
            ),
            (
                Layout::new::<AzLayoutBorderTopWidth>(),
                "AzLayoutBorderTopWidth"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::StyleFontSize>(), "AzStyleFontSize"),
            (Layout::new::<AzStyleFontSize>(), "AzStyleFontSize")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleLetterSpacing>(),
                "AzStyleLetterSpacing"
            ),
            (
                Layout::new::<AzStyleLetterSpacing>(),
                "AzStyleLetterSpacing"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleLineHeight>(),
                "AzStyleLineHeight"
            ),
            (Layout::new::<AzStyleLineHeight>(), "AzStyleLineHeight")
        );
        assert_eq!(
            (Layout::new::<azul_css::StyleTabWidth>(), "AzStyleTabWidth"),
            (Layout::new::<AzStyleTabWidth>(), "AzStyleTabWidth")
        );
        assert_eq!(
            (Layout::new::<azul_css::StyleOpacity>(), "AzStyleOpacity"),
            (Layout::new::<AzStyleOpacity>(), "AzStyleOpacity")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformOrigin>(),
                "AzStyleTransformOrigin"
            ),
            (
                Layout::new::<AzStyleTransformOrigin>(),
                "AzStyleTransformOrigin"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformOrigin>(),
                "AzStylePerspectiveOrigin"
            ),
            (
                Layout::new::<AzStylePerspectiveOrigin>(),
                "AzStylePerspectiveOrigin"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformMatrix2D>(),
                "AzStyleTransformMatrix2D"
            ),
            (
                Layout::new::<AzStyleTransformMatrix2D>(),
                "AzStyleTransformMatrix2D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformMatrix3D>(),
                "AzStyleTransformMatrix3D"
            ),
            (
                Layout::new::<AzStyleTransformMatrix3D>(),
                "AzStyleTransformMatrix3D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformTranslate2D>(),
                "AzStyleTransformTranslate2D"
            ),
            (
                Layout::new::<AzStyleTransformTranslate2D>(),
                "AzStyleTransformTranslate2D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformTranslate3D>(),
                "AzStyleTransformTranslate3D"
            ),
            (
                Layout::new::<AzStyleTransformTranslate3D>(),
                "AzStyleTransformTranslate3D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformRotate3D>(),
                "AzStyleTransformRotate3D"
            ),
            (
                Layout::new::<AzStyleTransformRotate3D>(),
                "AzStyleTransformRotate3D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformScale2D>(),
                "AzStyleTransformScale2D"
            ),
            (
                Layout::new::<AzStyleTransformScale2D>(),
                "AzStyleTransformScale2D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformScale3D>(),
                "AzStyleTransformScale3D"
            ),
            (
                Layout::new::<AzStyleTransformScale3D>(),
                "AzStyleTransformScale3D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformSkew2D>(),
                "AzStyleTransformSkew2D"
            ),
            (
                Layout::new::<AzStyleTransformSkew2D>(),
                "AzStyleTransformSkew2D"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTextColor>(),
                "AzStyleTextColor"
            ),
            (Layout::new::<AzStyleTextColor>(), "AzStyleTextColor")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleWordSpacing>(),
                "AzStyleWordSpacing"
            ),
            (Layout::new::<AzStyleWordSpacing>(), "AzStyleWordSpacing")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBoxShadowValue>(),
                "AzStyleBoxShadowValue"
            ),
            (
                Layout::new::<AzStyleBoxShadowValue>(),
                "AzStyleBoxShadowValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutAlignContentValue>(),
                "AzLayoutAlignContentValue"
            ),
            (
                Layout::new::<AzLayoutAlignContentValue>(),
                "AzLayoutAlignContentValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutAlignItemsValue>(),
                "AzLayoutAlignItemsValue"
            ),
            (
                Layout::new::<AzLayoutAlignItemsValue>(),
                "AzLayoutAlignItemsValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBottomValue>(),
                "AzLayoutBottomValue"
            ),
            (Layout::new::<AzLayoutBottomValue>(), "AzLayoutBottomValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBoxSizingValue>(),
                "AzLayoutBoxSizingValue"
            ),
            (
                Layout::new::<AzLayoutBoxSizingValue>(),
                "AzLayoutBoxSizingValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexDirectionValue>(),
                "AzLayoutFlexDirectionValue"
            ),
            (
                Layout::new::<AzLayoutFlexDirectionValue>(),
                "AzLayoutFlexDirectionValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutDisplayValue>(),
                "AzLayoutDisplayValue"
            ),
            (
                Layout::new::<AzLayoutDisplayValue>(),
                "AzLayoutDisplayValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexGrowValue>(),
                "AzLayoutFlexGrowValue"
            ),
            (
                Layout::new::<AzLayoutFlexGrowValue>(),
                "AzLayoutFlexGrowValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexShrinkValue>(),
                "AzLayoutFlexShrinkValue"
            ),
            (
                Layout::new::<AzLayoutFlexShrinkValue>(),
                "AzLayoutFlexShrinkValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFloatValue>(),
                "AzLayoutFloatValue"
            ),
            (Layout::new::<AzLayoutFloatValue>(), "AzLayoutFloatValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutHeightValue>(),
                "AzLayoutHeightValue"
            ),
            (Layout::new::<AzLayoutHeightValue>(), "AzLayoutHeightValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutJustifyContentValue>(),
                "AzLayoutJustifyContentValue"
            ),
            (
                Layout::new::<AzLayoutJustifyContentValue>(),
                "AzLayoutJustifyContentValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutLeftValue>(),
                "AzLayoutLeftValue"
            ),
            (Layout::new::<AzLayoutLeftValue>(), "AzLayoutLeftValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginBottomValue>(),
                "AzLayoutMarginBottomValue"
            ),
            (
                Layout::new::<AzLayoutMarginBottomValue>(),
                "AzLayoutMarginBottomValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginLeftValue>(),
                "AzLayoutMarginLeftValue"
            ),
            (
                Layout::new::<AzLayoutMarginLeftValue>(),
                "AzLayoutMarginLeftValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginRightValue>(),
                "AzLayoutMarginRightValue"
            ),
            (
                Layout::new::<AzLayoutMarginRightValue>(),
                "AzLayoutMarginRightValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMarginTopValue>(),
                "AzLayoutMarginTopValue"
            ),
            (
                Layout::new::<AzLayoutMarginTopValue>(),
                "AzLayoutMarginTopValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMaxHeightValue>(),
                "AzLayoutMaxHeightValue"
            ),
            (
                Layout::new::<AzLayoutMaxHeightValue>(),
                "AzLayoutMaxHeightValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMaxWidthValue>(),
                "AzLayoutMaxWidthValue"
            ),
            (
                Layout::new::<AzLayoutMaxWidthValue>(),
                "AzLayoutMaxWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMinHeightValue>(),
                "AzLayoutMinHeightValue"
            ),
            (
                Layout::new::<AzLayoutMinHeightValue>(),
                "AzLayoutMinHeightValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutMinWidthValue>(),
                "AzLayoutMinWidthValue"
            ),
            (
                Layout::new::<AzLayoutMinWidthValue>(),
                "AzLayoutMinWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingBottomValue>(),
                "AzLayoutPaddingBottomValue"
            ),
            (
                Layout::new::<AzLayoutPaddingBottomValue>(),
                "AzLayoutPaddingBottomValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingLeftValue>(),
                "AzLayoutPaddingLeftValue"
            ),
            (
                Layout::new::<AzLayoutPaddingLeftValue>(),
                "AzLayoutPaddingLeftValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingRightValue>(),
                "AzLayoutPaddingRightValue"
            ),
            (
                Layout::new::<AzLayoutPaddingRightValue>(),
                "AzLayoutPaddingRightValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPaddingTopValue>(),
                "AzLayoutPaddingTopValue"
            ),
            (
                Layout::new::<AzLayoutPaddingTopValue>(),
                "AzLayoutPaddingTopValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutPositionValue>(),
                "AzLayoutPositionValue"
            ),
            (
                Layout::new::<AzLayoutPositionValue>(),
                "AzLayoutPositionValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutRightValue>(),
                "AzLayoutRightValue"
            ),
            (Layout::new::<AzLayoutRightValue>(), "AzLayoutRightValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutTopValue>(),
                "AzLayoutTopValue"
            ),
            (Layout::new::<AzLayoutTopValue>(), "AzLayoutTopValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutWidthValue>(),
                "AzLayoutWidthValue"
            ),
            (Layout::new::<AzLayoutWidthValue>(), "AzLayoutWidthValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutFlexWrapValue>(),
                "AzLayoutFlexWrapValue"
            ),
            (
                Layout::new::<AzLayoutFlexWrapValue>(),
                "AzLayoutFlexWrapValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutOverflowValue>(),
                "AzLayoutOverflowValue"
            ),
            (
                Layout::new::<AzLayoutOverflowValue>(),
                "AzLayoutOverflowValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomColorValue>(),
                "AzStyleBorderBottomColorValue"
            ),
            (
                Layout::new::<AzStyleBorderBottomColorValue>(),
                "AzStyleBorderBottomColorValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomLeftRadiusValue>(),
                "AzStyleBorderBottomLeftRadiusValue"
            ),
            (
                Layout::new::<AzStyleBorderBottomLeftRadiusValue>(),
                "AzStyleBorderBottomLeftRadiusValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomRightRadiusValue>(),
                "AzStyleBorderBottomRightRadiusValue"
            ),
            (
                Layout::new::<AzStyleBorderBottomRightRadiusValue>(),
                "AzStyleBorderBottomRightRadiusValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderBottomStyleValue>(),
                "AzStyleBorderBottomStyleValue"
            ),
            (
                Layout::new::<AzStyleBorderBottomStyleValue>(),
                "AzStyleBorderBottomStyleValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderBottomWidthValue>(),
                "AzLayoutBorderBottomWidthValue"
            ),
            (
                Layout::new::<AzLayoutBorderBottomWidthValue>(),
                "AzLayoutBorderBottomWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderLeftColorValue>(),
                "AzStyleBorderLeftColorValue"
            ),
            (
                Layout::new::<AzStyleBorderLeftColorValue>(),
                "AzStyleBorderLeftColorValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderLeftStyleValue>(),
                "AzStyleBorderLeftStyleValue"
            ),
            (
                Layout::new::<AzStyleBorderLeftStyleValue>(),
                "AzStyleBorderLeftStyleValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderLeftWidthValue>(),
                "AzLayoutBorderLeftWidthValue"
            ),
            (
                Layout::new::<AzLayoutBorderLeftWidthValue>(),
                "AzLayoutBorderLeftWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderRightColorValue>(),
                "AzStyleBorderRightColorValue"
            ),
            (
                Layout::new::<AzStyleBorderRightColorValue>(),
                "AzStyleBorderRightColorValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderRightStyleValue>(),
                "AzStyleBorderRightStyleValue"
            ),
            (
                Layout::new::<AzStyleBorderRightStyleValue>(),
                "AzStyleBorderRightStyleValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderRightWidthValue>(),
                "AzLayoutBorderRightWidthValue"
            ),
            (
                Layout::new::<AzLayoutBorderRightWidthValue>(),
                "AzLayoutBorderRightWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopColorValue>(),
                "AzStyleBorderTopColorValue"
            ),
            (
                Layout::new::<AzStyleBorderTopColorValue>(),
                "AzStyleBorderTopColorValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopLeftRadiusValue>(),
                "AzStyleBorderTopLeftRadiusValue"
            ),
            (
                Layout::new::<AzStyleBorderTopLeftRadiusValue>(),
                "AzStyleBorderTopLeftRadiusValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopRightRadiusValue>(),
                "AzStyleBorderTopRightRadiusValue"
            ),
            (
                Layout::new::<AzStyleBorderTopRightRadiusValue>(),
                "AzStyleBorderTopRightRadiusValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBorderTopStyleValue>(),
                "AzStyleBorderTopStyleValue"
            ),
            (
                Layout::new::<AzStyleBorderTopStyleValue>(),
                "AzStyleBorderTopStyleValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LayoutBorderTopWidthValue>(),
                "AzLayoutBorderTopWidthValue"
            ),
            (
                Layout::new::<AzLayoutBorderTopWidthValue>(),
                "AzLayoutBorderTopWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleCursorValue>(),
                "AzStyleCursorValue"
            ),
            (Layout::new::<AzStyleCursorValue>(), "AzStyleCursorValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFontSizeValue>(),
                "AzStyleFontSizeValue"
            ),
            (
                Layout::new::<AzStyleFontSizeValue>(),
                "AzStyleFontSizeValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleLetterSpacingValue>(),
                "AzStyleLetterSpacingValue"
            ),
            (
                Layout::new::<AzStyleLetterSpacingValue>(),
                "AzStyleLetterSpacingValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleLineHeightValue>(),
                "AzStyleLineHeightValue"
            ),
            (
                Layout::new::<AzStyleLineHeightValue>(),
                "AzStyleLineHeightValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTabWidthValue>(),
                "AzStyleTabWidthValue"
            ),
            (
                Layout::new::<AzStyleTabWidthValue>(),
                "AzStyleTabWidthValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTextAlignValue>(),
                "AzStyleTextAlignValue"
            ),
            (
                Layout::new::<AzStyleTextAlignValue>(),
                "AzStyleTextAlignValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTextColorValue>(),
                "AzStyleTextColorValue"
            ),
            (
                Layout::new::<AzStyleTextColorValue>(),
                "AzStyleTextColorValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleWordSpacingValue>(),
                "AzStyleWordSpacingValue"
            ),
            (
                Layout::new::<AzStyleWordSpacingValue>(),
                "AzStyleWordSpacingValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleOpacityValue>(),
                "AzStyleOpacityValue"
            ),
            (Layout::new::<AzStyleOpacityValue>(), "AzStyleOpacityValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformOriginValue>(),
                "AzStyleTransformOriginValue"
            ),
            (
                Layout::new::<AzStyleTransformOriginValue>(),
                "AzStyleTransformOriginValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StylePerspectiveOriginValue>(),
                "AzStylePerspectiveOriginValue"
            ),
            (
                Layout::new::<AzStylePerspectiveOriginValue>(),
                "AzStylePerspectiveOriginValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackfaceVisibilityValue>(),
                "AzStyleBackfaceVisibilityValue"
            ),
            (
                Layout::new::<AzStyleBackfaceVisibilityValue>(),
                "AzStyleBackfaceVisibilityValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleMixBlendModeValue>(),
                "AzStyleMixBlendModeValue"
            ),
            (
                Layout::new::<AzStyleMixBlendModeValue>(),
                "AzStyleMixBlendModeValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::button::ButtonOnClick>(),
                "AzButtonOnClick"
            ),
            (Layout::new::<AzButtonOnClick>(), "AzButtonOnClick")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::file_input::FileInputOnPathChange>(),
                "AzFileInputOnPathChange"
            ),
            (
                Layout::new::<AzFileInputOnPathChange>(),
                "AzFileInputOnPathChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::check_box::CheckBoxOnToggle>(),
                "AzCheckBoxOnToggle"
            ),
            (Layout::new::<AzCheckBoxOnToggle>(), "AzCheckBoxOnToggle")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::color_input::ColorInputState>(),
                "AzColorInputState"
            ),
            (Layout::new::<AzColorInputState>(), "AzColorInputState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::color_input::ColorInputOnValueChange>(),
                "AzColorInputOnValueChange"
            ),
            (
                Layout::new::<AzColorInputOnValueChange>(),
                "AzColorInputOnValueChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputSelection>(),
                "AzTextInputSelection"
            ),
            (
                Layout::new::<AzTextInputSelection>(),
                "AzTextInputSelection"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputOnTextInput>(),
                "AzTextInputOnTextInput"
            ),
            (
                Layout::new::<AzTextInputOnTextInput>(),
                "AzTextInputOnTextInput"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputOnVirtualKeyDown>(),
                "AzTextInputOnVirtualKeyDown"
            ),
            (
                Layout::new::<AzTextInputOnVirtualKeyDown>(),
                "AzTextInputOnVirtualKeyDown"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputOnFocusLost>(),
                "AzTextInputOnFocusLost"
            ),
            (
                Layout::new::<AzTextInputOnFocusLost>(),
                "AzTextInputOnFocusLost"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::OnTextInputReturn>(),
                "AzOnTextInputReturn"
            ),
            (Layout::new::<AzOnTextInputReturn>(), "AzOnTextInputReturn")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInputOnValueChange>(),
                "AzNumberInputOnValueChange"
            ),
            (
                Layout::new::<AzNumberInputOnValueChange>(),
                "AzNumberInputOnValueChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInputOnFocusLost>(),
                "AzNumberInputOnFocusLost"
            ),
            (
                Layout::new::<AzNumberInputOnFocusLost>(),
                "AzNumberInputOnFocusLost"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tabs::TabOnClick>(),
                "AzTabOnClick"
            ),
            (Layout::new::<AzTabOnClick>(), "AzTabOnClick")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeAdded>(),
                "AzNodeGraphOnNodeAdded"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeAdded>(),
                "AzNodeGraphOnNodeAdded"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeRemoved>(),
                "AzNodeGraphOnNodeRemoved"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeRemoved>(),
                "AzNodeGraphOnNodeRemoved"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeGraphDragged>(),
                "AzNodeGraphOnNodeGraphDragged"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeGraphDragged>(),
                "AzNodeGraphOnNodeGraphDragged"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeDragged>(),
                "AzNodeGraphOnNodeDragged"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeDragged>(),
                "AzNodeGraphOnNodeDragged"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeConnected>(),
                "AzNodeGraphOnNodeConnected"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeConnected>(),
                "AzNodeGraphOnNodeConnected"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeInputDisconnected>(),
                "AzNodeGraphOnNodeInputDisconnected"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeInputDisconnected>(),
                "AzNodeGraphOnNodeInputDisconnected"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeOutputDisconnected>(),
                "AzNodeGraphOnNodeOutputDisconnected"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeOutputDisconnected>(),
                "AzNodeGraphOnNodeOutputDisconnected"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OnNodeFieldEdited>(),
                "AzNodeGraphOnNodeFieldEdited"
            ),
            (
                Layout::new::<AzNodeGraphOnNodeFieldEdited>(),
                "AzNodeGraphOnNodeFieldEdited"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OutputNodeAndIndex>(),
                "AzOutputNodeAndIndex"
            ),
            (
                Layout::new::<AzOutputNodeAndIndex>(),
                "AzOutputNodeAndIndex"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputNodeAndIndex>(),
                "AzInputNodeAndIndex"
            ),
            (Layout::new::<AzInputNodeAndIndex>(), "AzInputNodeAndIndex")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewOnLazyLoadScroll>(),
                "AzListViewOnLazyLoadScroll"
            ),
            (
                Layout::new::<AzListViewOnLazyLoadScroll>(),
                "AzListViewOnLazyLoadScroll"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewOnColumnClick>(),
                "AzListViewOnColumnClick"
            ),
            (
                Layout::new::<AzListViewOnColumnClick>(),
                "AzListViewOnColumnClick"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewOnRowClick>(),
                "AzListViewOnRowClick"
            ),
            (
                Layout::new::<AzListViewOnRowClick>(),
                "AzListViewOnRowClick"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::drop_down::DropDownOnChoiceChange>(),
                "AzDropDownOnChoiceChange"
            ),
            (
                Layout::new::<AzDropDownOnChoiceChange>(),
                "AzDropDownOnChoiceChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::ParentWithNodeDepth>(),
                "AzParentWithNodeDepth"
            ),
            (
                Layout::new::<AzParentWithNodeDepth>(),
                "AzParentWithNodeDepth"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::GlContextPtr>(), "AzGl"),
            (Layout::new::<AzGl>(), "AzGl")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::RefstrVecRef>(),
                "AzRefstrVecRef"
            ),
            (Layout::new::<AzRefstrVecRef>(), "AzRefstrVecRef")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::ImageMask>(),
                "AzImageMask"
            ),
            (Layout::new::<AzImageMask>(), "AzImageMask")
        );
        assert_eq!(
            (Layout::new::<azul_css::FontMetrics>(), "AzFontMetrics"),
            (Layout::new::<AzFontMetrics>(), "AzFontMetrics")
        );
        assert_eq!(
            (Layout::new::<azul_layout::xml::svg::SvgLine>(), "AzSvgLine"),
            (Layout::new::<AzSvgLine>(), "AzSvgLine")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgQuadraticCurve>(),
                "AzSvgQuadraticCurve"
            ),
            (Layout::new::<AzSvgQuadraticCurve>(), "AzSvgQuadraticCurve")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgCubicCurve>(),
                "AzSvgCubicCurve"
            ),
            (Layout::new::<AzSvgCubicCurve>(), "AzSvgCubicCurve")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgXmlOptions>(),
                "AzSvgStringFormatOptions"
            ),
            (
                Layout::new::<AzSvgStringFormatOptions>(),
                "AzSvgStringFormatOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgFillStyle>(),
                "AzSvgFillStyle"
            ),
            (Layout::new::<AzSvgFillStyle>(), "AzSvgFillStyle")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::AzInstantPtr>(),
                "AzInstantPtr"
            ),
            (Layout::new::<AzInstantPtr>(), "AzInstantPtr")
        );
        assert_eq!(
            (Layout::new::<azul_core::task::Duration>(), "AzDuration"),
            (Layout::new::<AzDuration>(), "AzDuration")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadSendMsg>(),
                "AzThreadSendMsg"
            ),
            (Layout::new::<AzThreadSendMsg>(), "AzThreadSendMsg")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadWriteBackMsg>(),
                "AzThreadWriteBackMsg"
            ),
            (
                Layout::new::<AzThreadWriteBackMsg>(),
                "AzThreadWriteBackMsg"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::geom::LogicalRectVec>(),
                "AzLogicalRectVec"
            ),
            (Layout::new::<AzLogicalRectVec>(), "AzLogicalRectVec")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputTypeIdVec>(),
                "AzInputOutputTypeIdVec"
            ),
            (
                Layout::new::<AzInputOutputTypeIdVec>(),
                "AzInputOutputTypeIdVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OutputNodeAndIndexVec>(),
                "AzOutputNodeAndIndexVec"
            ),
            (
                Layout::new::<AzOutputNodeAndIndexVec>(),
                "AzOutputNodeAndIndexVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputNodeAndIndexVec>(),
                "AzInputNodeAndIndexVec"
            ),
            (
                Layout::new::<AzInputNodeAndIndexVec>(),
                "AzInputNodeAndIndexVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::AccessibilityStateVec>(),
                "AzAccessibilityStateVec"
            ),
            (
                Layout::new::<AzAccessibilityStateVec>(),
                "AzAccessibilityStateVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MenuItemVec>(),
                "AzMenuItemVec"
            ),
            (Layout::new::<AzMenuItemVec>(), "AzMenuItemVec")
        );
        assert_eq!(
            (Layout::new::<azul_core::xml::XmlNodeVec>(), "AzXmlNodeVec"),
            (Layout::new::<AzXmlNodeVec>(), "AzXmlNodeVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineGlyphVec>(),
                "AzInlineGlyphVec"
            ),
            (Layout::new::<AzInlineGlyphVec>(), "AzInlineGlyphVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineTextHitVec>(),
                "AzInlineTextHitVec"
            ),
            (Layout::new::<AzInlineTextHitVec>(), "AzInlineTextHitVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::VideoModeVec>(),
                "AzVideoModeVec"
            ),
            (Layout::new::<AzVideoModeVec>(), "AzVideoModeVec")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::DomVec>(), "AzDomVec"),
            (Layout::new::<AzDomVec>(), "AzDomVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundPositionVec>(),
                "AzStyleBackgroundPositionVec"
            ),
            (
                Layout::new::<AzStyleBackgroundPositionVec>(),
                "AzStyleBackgroundPositionVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundRepeatVec>(),
                "AzStyleBackgroundRepeatVec"
            ),
            (
                Layout::new::<AzStyleBackgroundRepeatVec>(),
                "AzStyleBackgroundRepeatVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundSizeVec>(),
                "AzStyleBackgroundSizeVec"
            ),
            (
                Layout::new::<AzStyleBackgroundSizeVec>(),
                "AzStyleBackgroundSizeVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgVertexVec>(),
                "AzSvgVertexVec"
            ),
            (Layout::new::<AzSvgVertexVec>(), "AzSvgVertexVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgColoredVertexVec>(),
                "AzSvgColoredVertexVec"
            ),
            (
                Layout::new::<AzSvgColoredVertexVec>(),
                "AzSvgColoredVertexVec"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::U32Vec>(), "AzU32Vec"),
            (Layout::new::<AzU32Vec>(), "AzU32Vec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::XWindowTypeVec>(),
                "AzXWindowTypeVec"
            ),
            (Layout::new::<AzXWindowTypeVec>(), "AzXWindowTypeVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::VirtualKeyCodeVec>(),
                "AzVirtualKeyCodeVec"
            ),
            (Layout::new::<AzVirtualKeyCodeVec>(), "AzVirtualKeyCodeVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::style::CascadeInfoVec>(),
                "AzCascadeInfoVec"
            ),
            (Layout::new::<AzCascadeInfoVec>(), "AzCascadeInfoVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::ScanCodeVec>(),
                "AzScanCodeVec"
            ),
            (Layout::new::<AzScanCodeVec>(), "AzScanCodeVec")
        );
        assert_eq!(
            (Layout::new::<azul_css::U16Vec>(), "AzU16Vec"),
            (Layout::new::<AzU16Vec>(), "AzU16Vec")
        );
        assert_eq!(
            (Layout::new::<azul_css::F32Vec>(), "AzF32Vec"),
            (Layout::new::<AzF32Vec>(), "AzF32Vec")
        );
        assert_eq!(
            (Layout::new::<azul_css::U8Vec>(), "AzU8Vec"),
            (Layout::new::<AzU8Vec>(), "AzU8Vec")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::GLuintVec>(), "AzGLuintVec"),
            (Layout::new::<AzGLuintVec>(), "AzGLuintVec")
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::GLintVec>(), "AzGLintVec"),
            (Layout::new::<AzGLintVec>(), "AzGLintVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::NormalizedLinearColorStopVec>(),
                "AzNormalizedLinearColorStopVec"
            ),
            (
                Layout::new::<AzNormalizedLinearColorStopVec>(),
                "AzNormalizedLinearColorStopVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::NormalizedRadialColorStopVec>(),
                "AzNormalizedRadialColorStopVec"
            ),
            (
                Layout::new::<AzNormalizedRadialColorStopVec>(),
                "AzNormalizedRadialColorStopVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::NodeIdVec>(),
                "AzNodeIdVec"
            ),
            (Layout::new::<AzNodeIdVec>(), "AzNodeIdVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::NodeHierarchyItemVec>(),
                "AzNodeHierarchyItemVec"
            ),
            (
                Layout::new::<AzNodeHierarchyItemVec>(),
                "AzNodeHierarchyItemVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::ParentWithNodeDepthVec>(),
                "AzParentWithNodeDepthVec"
            ),
            (
                Layout::new::<AzParentWithNodeDepthVec>(),
                "AzParentWithNodeDepthVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionSvgPoint>(),
                "AzOptionSvgPoint"
            ),
            (Layout::new::<AzOptionSvgPoint>(), "AzOptionSvgPoint")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionStyleTextAlign>(),
                "AzOptionStyleTextAlign"
            ),
            (
                Layout::new::<AzOptionStyleTextAlign>(),
                "AzOptionStyleTextAlign"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::OptionListViewOnRowClick>(),
                "AzOptionListViewOnRowClick"
            ),
            (
                Layout::new::<AzOptionListViewOnRowClick>(),
                "AzOptionListViewOnRowClick"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::OptionListViewOnColumnClick>(),
                "AzOptionListViewOnColumnClick"
            ),
            (
                Layout::new::<AzOptionListViewOnColumnClick>(),
                "AzOptionListViewOnColumnClick"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::OptionListViewOnLazyLoadScroll>(),
                "AzOptionListViewOnLazyLoadScroll"
            ),
            (
                Layout::new::<AzOptionListViewOnLazyLoadScroll>(),
                "AzOptionListViewOnLazyLoadScroll"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionPixelValueNoPercent>(),
                "AzOptionPixelValueNoPercent"
            ),
            (
                Layout::new::<AzOptionPixelValueNoPercent>(),
                "AzOptionPixelValueNoPercent"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::drop_down::OptionDropDownOnChoiceChange>(),
                "AzOptionDropDownOnChoiceChange"
            ),
            (
                Layout::new::<AzOptionDropDownOnChoiceChange>(),
                "AzOptionDropDownOnChoiceChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeAdded>(),
                "AzOptionNodeGraphOnNodeAdded"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeAdded>(),
                "AzOptionNodeGraphOnNodeAdded"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeRemoved>(),
                "AzOptionNodeGraphOnNodeRemoved"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeRemoved>(),
                "AzOptionNodeGraphOnNodeRemoved"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeGraphDragged>(),
                "AzOptionNodeGraphOnNodeGraphDragged"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeGraphDragged>(),
                "AzOptionNodeGraphOnNodeGraphDragged"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeDragged>(),
                "AzOptionNodeGraphOnNodeDragged"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeDragged>(),
                "AzOptionNodeGraphOnNodeDragged"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeConnected>(),
                "AzOptionNodeGraphOnNodeConnected"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeConnected>(),
                "AzOptionNodeGraphOnNodeConnected"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeInputDisconnected>(),
                "AzOptionNodeGraphOnNodeInputDisconnected"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeInputDisconnected>(),
                "AzOptionNodeGraphOnNodeInputDisconnected"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeOutputDisconnected>(),
                "AzOptionNodeGraphOnNodeOutputDisconnected"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeOutputDisconnected>(),
                "AzOptionNodeGraphOnNodeOutputDisconnected"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OptionOnNodeFieldEdited>(),
                "AzOptionNodeGraphOnNodeFieldEdited"
            ),
            (
                Layout::new::<AzOptionNodeGraphOnNodeFieldEdited>(),
                "AzOptionNodeGraphOnNodeFieldEdited"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::color_input::OptionColorInputOnValueChange>(),
                "AzOptionColorInputOnValueChange"
            ),
            (
                Layout::new::<AzOptionColorInputOnValueChange>(),
                "AzOptionColorInputOnValueChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::button::OptionButtonOnClick>(),
                "AzOptionButtonOnClick"
            ),
            (
                Layout::new::<AzOptionButtonOnClick>(),
                "AzOptionButtonOnClick"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tabs::OptionTabOnClick>(),
                "AzOptionTabOnClick"
            ),
            (Layout::new::<AzOptionTabOnClick>(), "AzOptionTabOnClick")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::file_input::OptionFileInputOnPathChange>(),
                "AzOptionFileInputOnPathChange"
            ),
            (
                Layout::new::<AzOptionFileInputOnPathChange>(),
                "AzOptionFileInputOnPathChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::check_box::OptionCheckBoxOnToggle>(),
                "AzOptionCheckBoxOnToggle"
            ),
            (
                Layout::new::<AzOptionCheckBoxOnToggle>(),
                "AzOptionCheckBoxOnToggle"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::OptionTextInputOnTextInput>(),
                "AzOptionTextInputOnTextInput"
            ),
            (
                Layout::new::<AzOptionTextInputOnTextInput>(),
                "AzOptionTextInputOnTextInput"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::OptionTextInputOnVirtualKeyDown>(),
                "AzOptionTextInputOnVirtualKeyDown"
            ),
            (
                Layout::new::<AzOptionTextInputOnVirtualKeyDown>(),
                "AzOptionTextInputOnVirtualKeyDown"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::OptionTextInputOnFocusLost>(),
                "AzOptionTextInputOnFocusLost"
            ),
            (
                Layout::new::<AzOptionTextInputOnFocusLost>(),
                "AzOptionTextInputOnFocusLost"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::OptionTextInputSelection>(),
                "AzOptionTextInputSelection"
            ),
            (
                Layout::new::<AzOptionTextInputSelection>(),
                "AzOptionTextInputSelection"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::OptionNumberInputOnFocusLost>(),
                "AzOptionNumberInputOnFocusLost"
            ),
            (
                Layout::new::<AzOptionNumberInputOnFocusLost>(),
                "AzOptionNumberInputOnFocusLost"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::OptionNumberInputOnValueChange>(),
                "AzOptionNumberInputOnValueChange"
            ),
            (
                Layout::new::<AzOptionNumberInputOnValueChange>(),
                "AzOptionNumberInputOnValueChange"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionMenuItemIcon>(),
                "AzOptionMenuItemIcon"
            ),
            (
                Layout::new::<AzOptionMenuItemIcon>(),
                "AzOptionMenuItemIcon"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionMenuCallback>(),
                "AzOptionMenuCallback"
            ),
            (
                Layout::new::<AzOptionMenuCallback>(),
                "AzOptionMenuCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::ui_solver::OptionPositionInfo>(),
                "AzOptionPositionInfo"
            ),
            (
                Layout::new::<AzOptionPositionInfo>(),
                "AzOptionPositionInfo"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::OptionTimerId>(),
                "AzOptionTimerId"
            ),
            (Layout::new::<AzOptionTimerId>(), "AzOptionTimerId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::OptionThreadId>(),
                "AzOptionThreadId"
            ),
            (Layout::new::<AzOptionThreadId>(), "AzOptionThreadId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::OptionImageRef>(),
                "AzOptionImageRef"
            ),
            (Layout::new::<AzOptionImageRef>(), "AzOptionImageRef")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionFontRef>(), "AzOptionFontRef"),
            (Layout::new::<AzOptionFontRef>(), "AzOptionFontRef")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::app::OptionClipboard>(),
                "AzOptionSystemClipboard"
            ),
            (
                Layout::new::<AzOptionSystemClipboard>(),
                "AzOptionSystemClipboard"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::OptionGlContextPtr>(),
                "AzOptionGl"
            ),
            (Layout::new::<AzOptionGl>(), "AzOptionGl")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionPercentageValue>(),
                "AzOptionPercentageValue"
            ),
            (
                Layout::new::<AzOptionPercentageValue>(),
                "AzOptionPercentageValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionAngleValue>(),
                "AzOptionAngleValue"
            ),
            (Layout::new::<AzOptionAngleValue>(), "AzOptionAngleValue")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionRendererOptions>(),
                "AzOptionRendererOptions"
            ),
            (
                Layout::new::<AzOptionRendererOptions>(),
                "AzOptionRendererOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::OptionCallback>(),
                "AzOptionCallback"
            ),
            (Layout::new::<AzOptionCallback>(), "AzOptionCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::OptionThreadSendMsg>(),
                "AzOptionThreadSendMsg"
            ),
            (
                Layout::new::<AzOptionThreadSendMsg>(),
                "AzOptionThreadSendMsg"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionLayoutRect>(),
                "AzOptionLayoutRect"
            ),
            (Layout::new::<AzOptionLayoutRect>(), "AzOptionLayoutRect")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::OptionRefAny>(),
                "AzOptionRefAny"
            ),
            (Layout::new::<AzOptionRefAny>(), "AzOptionRefAny")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionLayoutPoint>(),
                "AzOptionLayoutPoint"
            ),
            (Layout::new::<AzOptionLayoutPoint>(), "AzOptionLayoutPoint")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionLayoutSize>(),
                "AzOptionLayoutSize"
            ),
            (Layout::new::<AzOptionLayoutSize>(), "AzOptionLayoutSize")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionWindowTheme>(),
                "AzOptionWindowTheme"
            ),
            (Layout::new::<AzOptionWindowTheme>(), "AzOptionWindowTheme")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::OptionNodeId>(),
                "AzOptionNodeId"
            ),
            (Layout::new::<AzOptionNodeId>(), "AzOptionNodeId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::OptionDomNodeId>(),
                "AzOptionDomNodeId"
            ),
            (Layout::new::<AzOptionDomNodeId>(), "AzOptionDomNodeId")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionColorU>(), "AzOptionColorU"),
            (Layout::new::<AzOptionColorU>(), "AzOptionColorU")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::OptionSvgDashPattern>(),
                "AzOptionSvgDashPattern"
            ),
            (
                Layout::new::<AzOptionSvgDashPattern>(),
                "AzOptionSvgDashPattern"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionLogicalPosition>(),
                "AzOptionLogicalPosition"
            ),
            (
                Layout::new::<AzOptionLogicalPosition>(),
                "AzOptionLogicalPosition"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionPhysicalPositionI32>(),
                "AzOptionPhysicalPositionI32"
            ),
            (
                Layout::new::<AzOptionPhysicalPositionI32>(),
                "AzOptionPhysicalPositionI32"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionMouseCursorType>(),
                "AzOptionMouseCursorType"
            ),
            (
                Layout::new::<AzOptionMouseCursorType>(),
                "AzOptionMouseCursorType"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionLogicalSize>(),
                "AzOptionLogicalSize"
            ),
            (Layout::new::<AzOptionLogicalSize>(), "AzOptionLogicalSize")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionVirtualKeyCode>(),
                "AzOptionVirtualKeyCode"
            ),
            (
                Layout::new::<AzOptionVirtualKeyCode>(),
                "AzOptionVirtualKeyCode"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::OptionImageMask>(),
                "AzOptionImageMask"
            ),
            (Layout::new::<AzOptionImageMask>(), "AzOptionImageMask")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::OptionTabIndex>(),
                "AzOptionTabIndex"
            ),
            (Layout::new::<AzOptionTabIndex>(), "AzOptionTabIndex")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::OptionTagId>(),
                "AzOptionTagId"
            ),
            (Layout::new::<AzOptionTagId>(), "AzOptionTagId")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::OptionDuration>(),
                "AzOptionDuration"
            ),
            (Layout::new::<AzOptionDuration>(), "AzOptionDuration")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionU8Vec>(), "AzOptionU8Vec"),
            (Layout::new::<AzOptionU8Vec>(), "AzOptionU8Vec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::OptionU8VecRef>(),
                "AzOptionU8VecRef"
            ),
            (Layout::new::<AzOptionU8VecRef>(), "AzOptionU8VecRef")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::image::encode::ResultU8VecEncodeImageError>(),
                "AzResultU8VecEncodeImageError"
            ),
            (
                Layout::new::<AzResultU8VecEncodeImageError>(),
                "AzResultU8VecEncodeImageError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::NonXmlCharError>(),
                "AzNonXmlCharError"
            ),
            (Layout::new::<AzNonXmlCharError>(), "AzNonXmlCharError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::InvalidCharError>(),
                "AzInvalidCharError"
            ),
            (Layout::new::<AzInvalidCharError>(), "AzInvalidCharError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::InvalidCharMultipleError>(),
                "AzInvalidCharMultipleError"
            ),
            (
                Layout::new::<AzInvalidCharMultipleError>(),
                "AzInvalidCharMultipleError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::InvalidQuoteError>(),
                "AzInvalidQuoteError"
            ),
            (Layout::new::<AzInvalidQuoteError>(), "AzInvalidQuoteError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::InvalidSpaceError>(),
                "AzInvalidSpaceError"
            ),
            (Layout::new::<AzInvalidSpaceError>(), "AzInvalidSpaceError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::AppConfig>(),
                "AzAppConfig"
            ),
            (Layout::new::<AzAppConfig>(), "AzAppConfig")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::SmallWindowIconBytes>(),
                "AzSmallWindowIconBytes"
            ),
            (
                Layout::new::<AzSmallWindowIconBytes>(),
                "AzSmallWindowIconBytes"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::LargeWindowIconBytes>(),
                "AzLargeWindowIconBytes"
            ),
            (
                Layout::new::<AzLargeWindowIconBytes>(),
                "AzLargeWindowIconBytes"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowIcon>(),
                "AzWindowIcon"
            ),
            (Layout::new::<AzWindowIcon>(), "AzWindowIcon")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::TaskBarIcon>(),
                "AzTaskBarIcon"
            ),
            (Layout::new::<AzTaskBarIcon>(), "AzTaskBarIcon")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowSize>(),
                "AzWindowSize"
            ),
            (Layout::new::<AzWindowSize>(), "AzWindowSize")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::KeyboardState>(),
                "AzKeyboardState"
            ),
            (Layout::new::<AzKeyboardState>(), "AzKeyboardState")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MouseState>(),
                "AzMouseState"
            ),
            (Layout::new::<AzMouseState>(), "AzMouseState")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::MarshaledLayoutCallback>(),
                "AzMarshaledLayoutCallback"
            ),
            (
                Layout::new::<AzMarshaledLayoutCallback>(),
                "AzMarshaledLayoutCallback"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineTextContents>(),
                "AzInlineTextContents"
            ),
            (
                Layout::new::<AzInlineTextContents>(),
                "AzInlineTextContents"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::ui_solver::ResolvedTextLayoutOptions>(),
                "AzResolvedTextLayoutOptions"
            ),
            (
                Layout::new::<AzResolvedTextLayoutOptions>(),
                "AzResolvedTextLayoutOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::AnimationInterpolationFunction>(),
                "AzAnimationEasing"
            ),
            (Layout::new::<AzAnimationEasing>(), "AzAnimationEasing")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::RenderImageCallbackInfo>(),
                "AzRenderImageCallbackInfo"
            ),
            (
                Layout::new::<AzRenderImageCallbackInfo>(),
                "AzRenderImageCallbackInfo"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::LayoutCallbackInfo>(),
                "AzLayoutCallbackInfo"
            ),
            (
                Layout::new::<AzLayoutCallbackInfo>(),
                "AzLayoutCallbackInfo"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::EventFilter>(),
                "AzEventFilter"
            ),
            (Layout::new::<AzEventFilter>(), "AzEventFilter")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::Menu>(), "AzMenu"),
            (Layout::new::<AzMenu>(), "AzMenu")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::VirtualKeyCodeCombo>(),
                "AzVirtualKeyCodeCombo"
            ),
            (
                Layout::new::<AzVirtualKeyCodeCombo>(),
                "AzVirtualKeyCodeCombo"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPathPseudoSelector>(),
                "AzCssPathPseudoSelector"
            ),
            (
                Layout::new::<AzCssPathPseudoSelector>(),
                "AzCssPathPseudoSelector"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::AnimationInterpolationFunction>(),
                "AzAnimationInterpolationFunction"
            ),
            (
                Layout::new::<AzAnimationInterpolationFunction>(),
                "AzAnimationInterpolationFunction"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::InterpolateResolver>(),
                "AzInterpolateContext"
            ),
            (
                Layout::new::<AzInterpolateContext>(),
                "AzInterpolateContext"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::StyleFilter>(), "AzStyleFilter"),
            (Layout::new::<AzStyleFilter>(), "AzStyleFilter")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::LinearGradient>(),
                "AzLinearGradient"
            ),
            (Layout::new::<AzLinearGradient>(), "AzLinearGradient")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::RadialGradient>(),
                "AzRadialGradient"
            ),
            (Layout::new::<AzRadialGradient>(), "AzRadialGradient")
        );
        assert_eq!(
            (Layout::new::<azul_css::ConicGradient>(), "AzConicGradient"),
            (Layout::new::<AzConicGradient>(), "AzConicGradient")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransform>(),
                "AzStyleTransform"
            ),
            (Layout::new::<AzStyleTransform>(), "AzStyleTransform")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundPositionVecValue>(),
                "AzStyleBackgroundPositionVecValue"
            ),
            (
                Layout::new::<AzStyleBackgroundPositionVecValue>(),
                "AzStyleBackgroundPositionVecValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundRepeatVecValue>(),
                "AzStyleBackgroundRepeatVecValue"
            ),
            (
                Layout::new::<AzStyleBackgroundRepeatVecValue>(),
                "AzStyleBackgroundRepeatVecValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundSizeVecValue>(),
                "AzStyleBackgroundSizeVecValue"
            ),
            (
                Layout::new::<AzStyleBackgroundSizeVecValue>(),
                "AzStyleBackgroundSizeVecValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::check_box::CheckBoxStateWrapper>(),
                "AzCheckBoxStateWrapper"
            ),
            (
                Layout::new::<AzCheckBoxStateWrapper>(),
                "AzCheckBoxStateWrapper"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInputStateWrapper>(),
                "AzNumberInputStateWrapper"
            ),
            (
                Layout::new::<AzNumberInputStateWrapper>(),
                "AzNumberInputStateWrapper"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeGraphCallbacks>(),
                "AzNodeGraphCallbacks"
            ),
            (
                Layout::new::<AzNodeGraphCallbacks>(),
                "AzNodeGraphCallbacks"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputConnection>(),
                "AzInputConnection"
            ),
            (Layout::new::<AzInputConnection>(), "AzInputConnection")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OutputConnection>(),
                "AzOutputConnection"
            ),
            (Layout::new::<AzOutputConnection>(), "AzOutputConnection")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewRow>(),
                "AzListViewRow"
            ),
            (Layout::new::<AzListViewRow>(), "AzListViewRow")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::StyledNode>(),
                "AzStyledNode"
            ),
            (Layout::new::<AzStyledNode>(), "AzStyledNode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::TagIdToNodeIdMapping>(),
                "AzTagIdToNodeIdMapping"
            ),
            (
                Layout::new::<AzTagIdToNodeIdMapping>(),
                "AzTagIdToNodeIdMapping"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::gl::Texture>(), "AzTexture"),
            (Layout::new::<AzTexture>(), "AzTexture")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GetProgramBinaryReturn>(),
                "AzGetProgramBinaryReturn"
            ),
            (
                Layout::new::<AzGetProgramBinaryReturn>(),
                "AzGetProgramBinaryReturn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::RawImageData>(),
                "AzRawImageData"
            ),
            (Layout::new::<AzRawImageData>(), "AzRawImageData")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::LoadedFontSource>(),
                "AzFontSource"
            ),
            (Layout::new::<AzFontSource>(), "AzFontSource")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgPathElement>(),
                "AzSvgPathElement"
            ),
            (Layout::new::<AzSvgPathElement>(), "AzSvgPathElement")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedColoredSvgNode>(),
                "AzTessellatedColoredSvgNode"
            ),
            (
                Layout::new::<AzTessellatedColoredSvgNode>(),
                "AzTessellatedColoredSvgNode"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedColoredSvgNodeVecRef>(),
                "AzTessellatedColoredSvgNodeVecRef"
            ),
            (
                Layout::new::<AzTessellatedColoredSvgNodeVecRef>(),
                "AzTessellatedColoredSvgNodeVecRef"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedSvgNode>(),
                "AzTessellatedSvgNode"
            ),
            (
                Layout::new::<AzTessellatedSvgNode>(),
                "AzTessellatedSvgNode"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedSvgNodeVecRef>(),
                "AzTessellatedSvgNodeVecRef"
            ),
            (
                Layout::new::<AzTessellatedSvgNodeVecRef>(),
                "AzTessellatedSvgNodeVecRef"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgRenderOptions>(),
                "AzSvgRenderOptions"
            ),
            (Layout::new::<AzSvgRenderOptions>(), "AzSvgRenderOptions")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgStrokeStyle>(),
                "AzSvgStrokeStyle"
            ),
            (Layout::new::<AzSvgStrokeStyle>(), "AzSvgStrokeStyle")
        );
        assert_eq!(
            (Layout::new::<azul_core::xml::Xml>(), "AzXml"),
            (Layout::new::<AzXml>(), "AzXml")
        );
        assert_eq!(
            (Layout::new::<azul_core::task::Instant>(), "AzInstant"),
            (Layout::new::<AzInstant>(), "AzInstant")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::ThreadReceiveMsg>(),
                "AzThreadReceiveMsg"
            ),
            (Layout::new::<AzThreadReceiveMsg>(), "AzThreadReceiveMsg")
        );
        assert_eq!(
            (Layout::new::<azul_css::AzString>(), "AzString"),
            (Layout::new::<AzString>(), "AzString")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewRowVec>(),
                "AzListViewRowVec"
            ),
            (Layout::new::<AzListViewRowVec>(), "AzListViewRowVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFilterVec>(),
                "AzStyleFilterVec"
            ),
            (Layout::new::<AzStyleFilterVec>(), "AzStyleFilterVec")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputConnectionVec>(),
                "AzInputConnectionVec"
            ),
            (
                Layout::new::<AzInputConnectionVec>(),
                "AzInputConnectionVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::OutputConnectionVec>(),
                "AzOutputConnectionVec"
            ),
            (
                Layout::new::<AzOutputConnectionVec>(),
                "AzOutputConnectionVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedSvgNodeVec>(),
                "AzTessellatedSvgNodeVec"
            ),
            (
                Layout::new::<AzTessellatedSvgNodeVec>(),
                "AzTessellatedSvgNodeVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedColoredSvgNodeVec>(),
                "AzTessellatedColoredSvgNodeVec"
            ),
            (
                Layout::new::<AzTessellatedColoredSvgNodeVec>(),
                "AzTessellatedColoredSvgNodeVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformVec>(),
                "AzStyleTransformVec"
            ),
            (Layout::new::<AzStyleTransformVec>(), "AzStyleTransformVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgPathElementVec>(),
                "AzSvgPathElementVec"
            ),
            (Layout::new::<AzSvgPathElementVec>(), "AzSvgPathElementVec")
        );
        assert_eq!(
            (Layout::new::<azul_css::StringVec>(), "AzStringVec"),
            (Layout::new::<AzStringVec>(), "AzStringVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::StyledNodeVec>(),
                "AzStyledNodeVec"
            ),
            (Layout::new::<AzStyledNodeVec>(), "AzStyledNodeVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::TagIdToNodeIdMappingVec>(),
                "AzTagIdToNodeIdMappingVec"
            ),
            (
                Layout::new::<AzTagIdToNodeIdMappingVec>(),
                "AzTagIdToNodeIdMappingVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionMenu>(),
                "AzOptionMenu"
            ),
            (Layout::new::<AzOptionMenu>(), "AzOptionMenu")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::ui_solver::OptionResolvedTextLayoutOptions>(),
                "AzOptionResolvedTextLayoutOptions"
            ),
            (
                Layout::new::<AzOptionResolvedTextLayoutOptions>(),
                "AzOptionResolvedTextLayoutOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionVirtualKeyCodeCombo>(),
                "AzOptionVirtualKeyCodeCombo"
            ),
            (
                Layout::new::<AzOptionVirtualKeyCodeCombo>(),
                "AzOptionVirtualKeyCodeCombo"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionMouseState>(),
                "AzOptionMouseState"
            ),
            (Layout::new::<AzOptionMouseState>(), "AzOptionMouseState")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionKeyboardState>(),
                "AzOptionKeyboardState"
            ),
            (
                Layout::new::<AzOptionKeyboardState>(),
                "AzOptionKeyboardState"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionStringVec>(),
                "AzOptionStringVec"
            ),
            (Layout::new::<AzOptionStringVec>(), "AzOptionStringVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::OptionThreadReceiveMsg>(),
                "AzOptionThreadReceiveMsg"
            ),
            (
                Layout::new::<AzOptionThreadReceiveMsg>(),
                "AzOptionThreadReceiveMsg"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionTaskBarIcon>(),
                "AzOptionTaskBarIcon"
            ),
            (Layout::new::<AzOptionTaskBarIcon>(), "AzOptionTaskBarIcon")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionWindowIcon>(),
                "AzOptionWindowIcon"
            ),
            (Layout::new::<AzOptionWindowIcon>(), "AzOptionWindowIcon")
        );
        assert_eq!(
            (Layout::new::<azul_css::OptionAzString>(), "AzOptionString"),
            (Layout::new::<AzOptionString>(), "AzOptionString")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::OptionTexture>(),
                "AzOptionTexture"
            ),
            (Layout::new::<AzOptionTexture>(), "AzOptionTexture")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::task::OptionInstant>(),
                "AzOptionInstant"
            ),
            (Layout::new::<AzOptionInstant>(), "AzOptionInstant")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::DuplicatedNamespaceError>(),
                "AzDuplicatedNamespaceError"
            ),
            (
                Layout::new::<AzDuplicatedNamespaceError>(),
                "AzDuplicatedNamespaceError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::UnknownNamespaceError>(),
                "AzUnknownNamespaceError"
            ),
            (
                Layout::new::<AzUnknownNamespaceError>(),
                "AzUnknownNamespaceError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::UnexpectedCloseTagError>(),
                "AzUnexpectedCloseTagError"
            ),
            (
                Layout::new::<AzUnexpectedCloseTagError>(),
                "AzUnexpectedCloseTagError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::UnknownEntityReferenceError>(),
                "AzUnknownEntityReferenceError"
            ),
            (
                Layout::new::<AzUnknownEntityReferenceError>(),
                "AzUnknownEntityReferenceError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::DuplicatedAttributeError>(),
                "AzDuplicatedAttributeError"
            ),
            (
                Layout::new::<AzDuplicatedAttributeError>(),
                "AzDuplicatedAttributeError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::InvalidStringError>(),
                "AzInvalidStringError"
            ),
            (
                Layout::new::<AzInvalidStringError>(),
                "AzInvalidStringError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowsWindowOptions>(),
                "AzWindowsWindowOptions"
            ),
            (
                Layout::new::<AzWindowsWindowOptions>(),
                "AzWindowsWindowOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WaylandTheme>(),
                "AzWaylandTheme"
            ),
            (Layout::new::<AzWaylandTheme>(), "AzWaylandTheme")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::AzStringPair>(),
                "AzStringPair"
            ),
            (Layout::new::<AzStringPair>(), "AzStringPair")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::Monitor>(), "AzMonitor"),
            (Layout::new::<AzMonitor>(), "AzMonitor")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::LayoutCallback>(),
                "AzLayoutCallback"
            ),
            (Layout::new::<AzLayoutCallback>(), "AzLayoutCallback")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineWord>(),
                "AzInlineWord"
            ),
            (Layout::new::<AzInlineWord>(), "AzInlineWord")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::CallbackData>(),
                "AzCallbackData"
            ),
            (Layout::new::<AzCallbackData>(), "AzCallbackData")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::NodeType>(), "AzNodeType"),
            (Layout::new::<AzNodeType>(), "AzNodeType")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::AccessibilityInfo>(),
                "AzAccessibilityInfo"
            ),
            (Layout::new::<AzAccessibilityInfo>(), "AzAccessibilityInfo")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::IdOrClass>(), "AzIdOrClass"),
            (Layout::new::<AzIdOrClass>(), "AzIdOrClass")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::StringMenuItem>(),
                "AzStringMenuItem"
            ),
            (Layout::new::<AzStringMenuItem>(), "AzStringMenuItem")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPathSelector>(),
                "AzCssPathSelector"
            ),
            (Layout::new::<AzCssPathSelector>(), "AzCssPathSelector")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundContent>(),
                "AzStyleBackgroundContent"
            ),
            (
                Layout::new::<AzStyleBackgroundContent>(),
                "AzStyleBackgroundContent"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::ScrollbarInfo>(), "AzScrollbarInfo"),
            (Layout::new::<AzScrollbarInfo>(), "AzScrollbarInfo")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::ScrollbarStyle>(),
                "AzScrollbarStyle"
            ),
            (Layout::new::<AzScrollbarStyle>(), "AzScrollbarStyle")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFontFamily>(),
                "AzStyleFontFamily"
            ),
            (Layout::new::<AzStyleFontFamily>(), "AzStyleFontFamily")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::ScrollbarStyleValue>(),
                "AzScrollbarStyleValue"
            ),
            (
                Layout::new::<AzScrollbarStyleValue>(),
                "AzScrollbarStyleValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleTransformVecValue>(),
                "AzStyleTransformVecValue"
            ),
            (
                Layout::new::<AzStyleTransformVecValue>(),
                "AzStyleTransformVecValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFilterVecValue>(),
                "AzStyleFilterVecValue"
            ),
            (
                Layout::new::<AzStyleFilterVecValue>(),
                "AzStyleFilterVecValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::file_input::FileInputState>(),
                "AzFileInputState"
            ),
            (Layout::new::<AzFileInputState>(), "AzFileInputState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::color_input::ColorInputStateWrapper>(),
                "AzColorInputStateWrapper"
            ),
            (
                Layout::new::<AzColorInputStateWrapper>(),
                "AzColorInputStateWrapper"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputState>(),
                "AzTextInputState"
            ),
            (Layout::new::<AzTextInputState>(), "AzTextInputState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tabs::TabHeader>(),
                "AzTabHeader"
            ),
            (Layout::new::<AzTabHeader>(), "AzTabHeader")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeFieldValue>(),
                "AzNodeTypeFieldValue"
            ),
            (
                Layout::new::<AzNodeTypeFieldValue>(),
                "AzNodeTypeFieldValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeInfo>(),
                "AzNodeTypeInfo"
            ),
            (Layout::new::<AzNodeTypeInfo>(), "AzNodeTypeInfo")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputInfo>(),
                "AzInputOutputInfo"
            ),
            (Layout::new::<AzInputOutputInfo>(), "AzInputOutputInfo")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListView>(),
                "AzListView"
            ),
            (Layout::new::<AzListView>(), "AzListView")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::list_view::ListViewState>(),
                "AzListViewState"
            ),
            (Layout::new::<AzListViewState>(), "AzListViewState")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tree_view::TreeView>(),
                "AzTreeView"
            ),
            (Layout::new::<AzTreeView>(), "AzTreeView")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::drop_down::DropDown>(),
                "AzDropDown"
            ),
            (Layout::new::<AzDropDown>(), "AzDropDown")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexAttribute>(),
                "AzVertexAttribute"
            ),
            (Layout::new::<AzVertexAttribute>(), "AzVertexAttribute")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::AzDebugMessage>(),
                "AzDebugMessage"
            ),
            (Layout::new::<AzDebugMessage>(), "AzDebugMessage")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GetActiveAttribReturn>(),
                "AzGetActiveAttribReturn"
            ),
            (
                Layout::new::<AzGetActiveAttribReturn>(),
                "AzGetActiveAttribReturn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::GetActiveUniformReturn>(),
                "AzGetActiveUniformReturn"
            ),
            (
                Layout::new::<AzGetActiveUniformReturn>(),
                "AzGetActiveUniformReturn"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::RawImage>(),
                "AzRawImage"
            ),
            (Layout::new::<AzRawImage>(), "AzRawImage")
        );
        assert_eq!(
            (Layout::new::<azul_layout::xml::svg::SvgPath>(), "AzSvgPath"),
            (Layout::new::<AzSvgPath>(), "AzSvgPath")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgParseOptions>(),
                "AzSvgParseOptions"
            ),
            (Layout::new::<AzSvgParseOptions>(), "AzSvgParseOptions")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgStyle>(),
                "AzSvgStyle"
            ),
            (Layout::new::<AzSvgStyle>(), "AzSvgStyle")
        );
        assert_eq!(
            (Layout::new::<crate::azul_impl::file::File>(), "AzFile"),
            (Layout::new::<AzFile>(), "AzFile")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::FileTypeList>(),
                "AzFileTypeList"
            ),
            (Layout::new::<AzFileTypeList>(), "AzFileTypeList")
        );
        assert_eq!(
            (Layout::new::<azul_core::task::Timer>(), "AzTimer"),
            (Layout::new::<AzTimer>(), "AzTimer")
        );
        assert_eq!(
            (Layout::new::<crate::str::FmtValue>(), "AzFmtValue"),
            (Layout::new::<AzFmtValue>(), "AzFmtValue")
        );
        assert_eq!(
            (Layout::new::<crate::str::FmtArg>(), "AzFmtArg"),
            (Layout::new::<AzFmtArg>(), "AzFmtArg")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFontFamilyVec>(),
                "AzStyleFontFamilyVec"
            ),
            (
                Layout::new::<AzStyleFontFamilyVec>(),
                "AzStyleFontFamilyVec"
            )
        );
        assert_eq!(
            (Layout::new::<crate::str::FmtArgVec>(), "AzFmtArgVec"),
            (Layout::new::<AzFmtArgVec>(), "AzFmtArgVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineWordVec>(),
                "AzInlineWordVec"
            ),
            (Layout::new::<AzInlineWordVec>(), "AzInlineWordVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::MonitorVec>(),
                "AzMonitorVec"
            ),
            (Layout::new::<AzMonitorVec>(), "AzMonitorVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::IdOrClassVec>(),
                "AzIdOrClassVec"
            ),
            (Layout::new::<AzIdOrClassVec>(), "AzIdOrClassVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundContentVec>(),
                "AzStyleBackgroundContentVec"
            ),
            (
                Layout::new::<AzStyleBackgroundContentVec>(),
                "AzStyleBackgroundContentVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgPathVec>(),
                "AzSvgPathVec"
            ),
            (Layout::new::<AzSvgPathVec>(), "AzSvgPathVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexAttributeVec>(),
                "AzVertexAttributeVec"
            ),
            (
                Layout::new::<AzVertexAttributeVec>(),
                "AzVertexAttributeVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPathSelectorVec>(),
                "AzCssPathSelectorVec"
            ),
            (
                Layout::new::<AzCssPathSelectorVec>(),
                "AzCssPathSelectorVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::CallbackDataVec>(),
                "AzCallbackDataVec"
            ),
            (Layout::new::<AzCallbackDataVec>(), "AzCallbackDataVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::AzDebugMessageVec>(),
                "AzDebugMessageVec"
            ),
            (Layout::new::<AzDebugMessageVec>(), "AzDebugMessageVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::StringPairVec>(),
                "AzStringPairVec"
            ),
            (Layout::new::<AzStringPairVec>(), "AzStringPairVec")
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::dialogs::OptionFileTypeList>(),
                "AzOptionFileTypeList"
            ),
            (
                Layout::new::<AzOptionFileTypeList>(),
                "AzOptionFileTypeList"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::azul_impl::file::OptionFile>(),
                "AzOptionFile"
            ),
            (Layout::new::<AzOptionFile>(), "AzOptionFile")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::resources::OptionRawImage>(),
                "AzOptionRawImage"
            ),
            (Layout::new::<AzOptionRawImage>(), "AzOptionRawImage")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionWaylandTheme>(),
                "AzOptionWaylandTheme"
            ),
            (
                Layout::new::<AzOptionWaylandTheme>(),
                "AzOptionWaylandTheme"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::image::decode::ResultRawImageDecodeImageError>(),
                "AzResultRawImageDecodeImageError"
            ),
            (
                Layout::new::<AzResultRawImageDecodeImageError>(),
                "AzResultRawImageDecodeImageError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::XmlStreamError>(),
                "AzXmlStreamError"
            ),
            (Layout::new::<AzXmlStreamError>(), "AzXmlStreamError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::LinuxWindowOptions>(),
                "AzLinuxWindowOptions"
            ),
            (
                Layout::new::<AzLinuxWindowOptions>(),
                "AzLinuxWindowOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineLine>(),
                "AzInlineLine"
            ),
            (Layout::new::<AzInlineLine>(), "AzInlineLine")
        );
        assert_eq!(
            (Layout::new::<azul_core::window::MenuItem>(), "AzMenuItem"),
            (Layout::new::<AzMenuItem>(), "AzMenuItem")
        );
        assert_eq!(
            (Layout::new::<azul_css::CssPath>(), "AzCssPath"),
            (Layout::new::<AzCssPath>(), "AzCssPath")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleBackgroundContentVecValue>(),
                "AzStyleBackgroundContentVecValue"
            ),
            (
                Layout::new::<AzStyleBackgroundContentVecValue>(),
                "AzStyleBackgroundContentVecValue"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::StyleFontFamilyVecValue>(),
                "AzStyleFontFamilyVecValue"
            ),
            (
                Layout::new::<AzStyleFontFamilyVecValue>(),
                "AzStyleFontFamilyVecValue"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::CssProperty>(), "AzCssProperty"),
            (Layout::new::<AzCssProperty>(), "AzCssProperty")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::file_input::FileInputStateWrapper>(),
                "AzFileInputStateWrapper"
            ),
            (
                Layout::new::<AzFileInputStateWrapper>(),
                "AzFileInputStateWrapper"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInputStateWrapper>(),
                "AzTextInputStateWrapper"
            ),
            (
                Layout::new::<AzTextInputStateWrapper>(),
                "AzTextInputStateWrapper"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::progressbar::ProgressBar>(),
                "AzProgressBar"
            ),
            (Layout::new::<AzProgressBar>(), "AzProgressBar")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeIdInfoMap>(),
                "AzNodeTypeIdInfoMap"
            ),
            (Layout::new::<AzNodeTypeIdInfoMap>(), "AzNodeTypeIdInfoMap")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputTypeIdInfoMap>(),
                "AzInputOutputTypeIdInfoMap"
            ),
            (
                Layout::new::<AzInputOutputTypeIdInfoMap>(),
                "AzInputOutputTypeIdInfoMap"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeField>(),
                "AzNodeTypeField"
            ),
            (Layout::new::<AzNodeTypeField>(), "AzNodeTypeField")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::CssPropertySource>(),
                "AzCssPropertySource"
            ),
            (Layout::new::<AzCssPropertySource>(), "AzCssPropertySource")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexLayout>(),
                "AzVertexLayout"
            ),
            (Layout::new::<AzVertexLayout>(), "AzVertexLayout")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexArrayObject>(),
                "AzVertexArrayObject"
            ),
            (Layout::new::<AzVertexArrayObject>(), "AzVertexArrayObject")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::gl::VertexBuffer>(),
                "AzVertexBuffer"
            ),
            (Layout::new::<AzVertexBuffer>(), "AzVertexBuffer")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgMultiPolygon>(),
                "AzSvgMultiPolygon"
            ),
            (Layout::new::<AzSvgMultiPolygon>(), "AzSvgMultiPolygon")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgSimpleNode>(),
                "AzSvgSimpleNode"
            ),
            (Layout::new::<AzSvgSimpleNode>(), "AzSvgSimpleNode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedColoredGPUSvgNode>(),
                "AzTessellatedColoredGPUSvgNode"
            ),
            (
                Layout::new::<AzTessellatedColoredGPUSvgNode>(),
                "AzTessellatedColoredGPUSvgNode"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::TessellatedGPUSvgNode>(),
                "AzTessellatedGPUSvgNode"
            ),
            (
                Layout::new::<AzTessellatedGPUSvgNode>(),
                "AzTessellatedGPUSvgNode"
            )
        );
        assert_eq!(
            (Layout::new::<azul_core::xml::XmlNode>(), "AzXmlNode"),
            (Layout::new::<AzXmlNode>(), "AzXmlNode")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeIdInfoMapVec>(),
                "AzNodeTypeIdInfoMapVec"
            ),
            (
                Layout::new::<AzNodeTypeIdInfoMapVec>(),
                "AzNodeTypeIdInfoMapVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::InputOutputTypeIdInfoMapVec>(),
                "AzInputOutputTypeIdInfoMapVec"
            ),
            (
                Layout::new::<AzInputOutputTypeIdInfoMapVec>(),
                "AzInputOutputTypeIdInfoMapVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeTypeFieldVec>(),
                "AzNodeTypeFieldVec"
            ),
            (Layout::new::<AzNodeTypeFieldVec>(), "AzNodeTypeFieldVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineLineVec>(),
                "AzInlineLineVec"
            ),
            (Layout::new::<AzInlineLineVec>(), "AzInlineLineVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssPropertyVec>(),
                "AzCssPropertyVec"
            ),
            (Layout::new::<AzCssPropertyVec>(), "AzCssPropertyVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgMultiPolygonVec>(),
                "AzSvgMultiPolygonVec"
            ),
            (
                Layout::new::<AzSvgMultiPolygonVec>(),
                "AzSvgMultiPolygonVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgSimpleNodeVec>(),
                "AzSvgSimpleNodeVec"
            ),
            (Layout::new::<AzSvgSimpleNodeVec>(), "AzSvgSimpleNodeVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::OptionCssProperty>(),
                "AzOptionCssProperty"
            ),
            (Layout::new::<AzOptionCssProperty>(), "AzOptionCssProperty")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::XmlTextError>(),
                "AzXmlTextError"
            ),
            (Layout::new::<AzXmlTextError>(), "AzXmlTextError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::PlatformSpecificOptions>(),
                "AzPlatformSpecificOptions"
            ),
            (
                Layout::new::<AzPlatformSpecificOptions>(),
                "AzPlatformSpecificOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::WindowState>(),
                "AzWindowState"
            ),
            (Layout::new::<AzWindowState>(), "AzWindowState")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::callbacks::CallbackInfo>(),
                "AzCallbackInfo"
            ),
            (Layout::new::<AzCallbackInfo>(), "AzCallbackInfo")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::InlineText>(),
                "AzInlineText"
            ),
            (Layout::new::<AzInlineText>(), "AzInlineText")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::FocusTargetPath>(),
                "AzFocusTargetPath"
            ),
            (Layout::new::<AzFocusTargetPath>(), "AzFocusTargetPath")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::Animation>(),
                "AzAnimation"
            ),
            (Layout::new::<AzAnimation>(), "AzAnimation")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::TimerCallbackInfo>(),
                "AzTimerCallbackInfo"
            ),
            (Layout::new::<AzTimerCallbackInfo>(), "AzTimerCallbackInfo")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::NodeDataInlineCssProperty>(),
                "AzNodeDataInlineCssProperty"
            ),
            (
                Layout::new::<AzNodeDataInlineCssProperty>(),
                "AzNodeDataInlineCssProperty"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_css::DynamicCssProperty>(),
                "AzDynamicCssProperty"
            ),
            (
                Layout::new::<AzDynamicCssProperty>(),
                "AzDynamicCssProperty"
            )
        );
        assert_eq!(
            (Layout::new::<crate::widgets::node_graph::Node>(), "AzNode"),
            (Layout::new::<AzNode>(), "AzNode")
        );
        assert_eq!(
            (Layout::new::<azul_layout::xml::svg::SvgNode>(), "AzSvgNode"),
            (Layout::new::<AzSvgNode>(), "AzSvgNode")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgStyledNode>(),
                "AzSvgStyledNode"
            ),
            (Layout::new::<AzSvgStyledNode>(), "AzSvgStyledNode")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::NodeDataInlineCssPropertyVec>(),
                "AzNodeDataInlineCssPropertyVec"
            ),
            (
                Layout::new::<AzNodeDataInlineCssPropertyVec>(),
                "AzNodeDataInlineCssPropertyVec"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::window::OptionWindowState>(),
                "AzOptionWindowState"
            ),
            (Layout::new::<AzOptionWindowState>(), "AzOptionWindowState")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::OptionInlineText>(),
                "AzOptionInlineText"
            ),
            (Layout::new::<AzOptionInlineText>(), "AzOptionInlineText")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::XmlParseError>(),
                "AzXmlParseError"
            ),
            (Layout::new::<AzXmlParseError>(), "AzXmlParseError")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::window::WindowCreateOptions>(),
                "AzWindowCreateOptions"
            ),
            (
                Layout::new::<AzWindowCreateOptions>(),
                "AzWindowCreateOptions"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::FocusTarget>(),
                "AzFocusTarget"
            ),
            (Layout::new::<AzFocusTarget>(), "AzFocusTarget")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::NodeData>(), "AzNodeData"),
            (Layout::new::<AzNodeData>(), "AzNodeData")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssDeclaration>(),
                "AzCssDeclaration"
            ),
            (Layout::new::<AzCssDeclaration>(), "AzCssDeclaration")
        );
        assert_eq!(
            (Layout::new::<crate::widgets::button::Button>(), "AzButton"),
            (Layout::new::<AzButton>(), "AzButton")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::file_input::FileInput>(),
                "AzFileInput"
            ),
            (Layout::new::<AzFileInput>(), "AzFileInput")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::check_box::CheckBox>(),
                "AzCheckBox"
            ),
            (Layout::new::<AzCheckBox>(), "AzCheckBox")
        );
        assert_eq!(
            (Layout::new::<crate::widgets::label::Label>(), "AzLabel"),
            (Layout::new::<AzLabel>(), "AzLabel")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::color_input::ColorInput>(),
                "AzColorInput"
            ),
            (Layout::new::<AzColorInput>(), "AzColorInput")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::text_input::TextInput>(),
                "AzTextInput"
            ),
            (Layout::new::<AzTextInput>(), "AzTextInput")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::number_input::NumberInput>(),
                "AzNumberInput"
            ),
            (Layout::new::<AzNumberInput>(), "AzNumberInput")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeIdNodeMap>(),
                "AzNodeIdNodeMap"
            ),
            (Layout::new::<AzNodeIdNodeMap>(), "AzNodeIdNodeMap")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeIdNodeMapVec>(),
                "AzNodeIdNodeMapVec"
            ),
            (Layout::new::<AzNodeIdNodeMapVec>(), "AzNodeIdNodeMapVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssDeclarationVec>(),
                "AzCssDeclarationVec"
            ),
            (Layout::new::<AzCssDeclarationVec>(), "AzCssDeclarationVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::dom::NodeDataVec>(),
                "AzNodeDataVec"
            ),
            (Layout::new::<AzNodeDataVec>(), "AzNodeDataVec")
        );
        assert_eq!(
            (Layout::new::<azul_core::xml::XmlError>(), "AzXmlError"),
            (Layout::new::<AzXmlError>(), "AzXmlError")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::Dom>(), "AzDom"),
            (Layout::new::<AzDom>(), "AzDom")
        );
        assert_eq!(
            (Layout::new::<azul_css::CssRuleBlock>(), "AzCssRuleBlock"),
            (Layout::new::<AzCssRuleBlock>(), "AzCssRuleBlock")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::tabs::TabContent>(),
                "AzTabContent"
            ),
            (Layout::new::<AzTabContent>(), "AzTabContent")
        );
        assert_eq!(
            (Layout::new::<crate::widgets::frame::Frame>(), "AzFrame"),
            (Layout::new::<AzFrame>(), "AzFrame")
        );
        assert_eq!(
            (
                Layout::new::<crate::widgets::node_graph::NodeGraph>(),
                "AzNodeGraph"
            ),
            (Layout::new::<AzNodeGraph>(), "AzNodeGraph")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::styled_dom::StyledDom>(),
                "AzStyledDom"
            ),
            (Layout::new::<AzStyledDom>(), "AzStyledDom")
        );
        assert_eq!(
            (
                Layout::new::<azul_css::CssRuleBlockVec>(),
                "AzCssRuleBlockVec"
            ),
            (Layout::new::<AzCssRuleBlockVec>(), "AzCssRuleBlockVec")
        );
        assert_eq!(
            (Layout::new::<azul_core::dom::OptionDom>(), "AzOptionDom"),
            (Layout::new::<AzOptionDom>(), "AzOptionDom")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::xml::ResultXmlXmlError>(),
                "AzResultXmlXmlError"
            ),
            (Layout::new::<AzResultXmlXmlError>(), "AzResultXmlXmlError")
        );
        assert_eq!(
            (
                Layout::new::<azul_layout::xml::svg::SvgParseError>(),
                "AzSvgParseError"
            ),
            (Layout::new::<AzSvgParseError>(), "AzSvgParseError")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::callbacks::IFrameCallbackReturn>(),
                "AzIFrameCallbackReturn"
            ),
            (
                Layout::new::<AzIFrameCallbackReturn>(),
                "AzIFrameCallbackReturn"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::Stylesheet>(), "AzStylesheet"),
            (Layout::new::<AzStylesheet>(), "AzStylesheet")
        );
        assert_eq!(
            (Layout::new::<azul_css::StylesheetVec>(), "AzStylesheetVec"),
            (Layout::new::<AzStylesheetVec>(), "AzStylesheetVec")
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::ResultSvgXmlNodeSvgParseError>(),
                "AzResultSvgXmlNodeSvgParseError"
            ),
            (
                Layout::new::<AzResultSvgXmlNodeSvgParseError>(),
                "AzResultSvgXmlNodeSvgParseError"
            )
        );
        assert_eq!(
            (
                Layout::new::<azul_core::svg::ResultSvgSvgParseError>(),
                "AzResultSvgSvgParseError"
            ),
            (
                Layout::new::<AzResultSvgSvgParseError>(),
                "AzResultSvgSvgParseError"
            )
        );
        assert_eq!(
            (Layout::new::<azul_css::Css>(), "AzCss"),
            (Layout::new::<AzCss>(), "AzCss")
        );
    }
}
