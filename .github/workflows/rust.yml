name: Build

on:
  push:
    branches:
      - 'master'
    tags:
      # this is _not_ a regex, see: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:
  workflow_dispatch:
    inputs:
      release:
          description: 'Make release'

jobs:
  setup:
    name: Set up
    runs-on: ubuntu-22.04
    outputs:
      VERSION: ${{ steps.setup.outputs.VERSION }}
      DOING_RELEASE: ${{ steps.setup.outputs.DOING_RELEASE }}
    steps:
      - name: Set up env vars
        id: setup
        shell: bash
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          DOING_RELEASE=$(echo $VERSION | grep -c '^[0-9]\+\.[0-9]\+\.[0-9]\+\(-\([a-zA-Z]\+\)\?[0-9]*\)\?$' || true)
          echo "DOING_RELEASE=${DOING_RELEASE}" >> $GITHUB_OUTPUT
          echo $VERSION
          echo $DOING_RELEASE

  build:
    name: Build on ${{ matrix.build }}
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: macos-x64
            os: macos-11
          - build: windows-x64
            os: windows-2019
          - build: linux-x64
            os: ubuntu-22.04
    steps:

      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85
  
      - name: Install clang (Linux)
        if: matrix.build == 'linux-x64'
        run: sudo apt install clang

      # Run checks and tests here!

      - name: Check azul-css
        run: cargo check -p azul-css

      - name: Check azul-core
        run: cargo check -p azul-core

      - name: Check azul-layout
        run: cargo check -p azul-layout

      - name: Check azul-dll
        run: cargo check -p azul-dll

      - name: Run autofix
        run: cargo run -r -p azul-doc autofix 

      - name: Explain autofix
        run: cargo run -r -p azul-doc autofix explain

      - name: Apply "safe" autofix patches
        run: cargo run -r -p azul-doc patch safe target/autofix/patches

      - name: Apply "dangerous" autofix patches
        run: cargo run -r -p azul-doc patch target/autofix/patches

      - name: Normalize api.json
        run: cargo run -r -p azul-doc normalize

      - name: Check for uncommitted changes after autofix
        shell: bash
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "There are uncommitted changes after running autofix:";
            git status --porcelain;
            exit 1;
          else
            echo "No uncommitted changes after autofix.";
          fi

      - name: Run memtest
        run: cargo run -r -p azul-doc memtest run

      - name: Run reftest
        run: cargo run -r -p azul-doc reftest run

      - name: Install Miri (Linux)
        if: matrix.build == 'linux-x64'
        run: |
          rustup toolchain install nightly --component miri
          cargo +nightly miri setup
  
      - name: Run Miri tests on RefAny (Linux)
        if: matrix.build == 'linux-x64'
        run: cargo +nightly miri test --lib -p azul-core
        continue-on-error: false

      # Main DLL BUILD function here!

      - name: Check azul.h (Linux)
        if: matrix.build == 'linux-x64'
        run: clang api/c/azul.h -ferror-limit=0

      - name: Build DLL
        run: cargo build --release -p azul-dll --features="link-dynamic"

      - name: Build Python extension
        run: cargo build --release -p azul-dll --features="link-dynamic, python-extension"

      - name: Build Rust examples
        run: cargo check --verbose --examples --all-features
  
      - name: Build C examples (TODO)
        run: exit 0; # TODO
  
      - name: Build C++ examples (TODO)
        run: exit 0; # TODO
  
      - name: Build Python examples
        if: matrix.build == 'windows-x64'
        shell: bash
        run: |
          cp `pwd`/target/release/azul.dll `pwd`/target/release/azul.pyd
          export PATH=`pwd`/target/release:$PATH
          python3 examples/python/hello-world.py
          exit 0; # TODO
  
      - name: Build azul-workbench
        run: cargo build --release --bin azulc --manifest-path azulc/Cargo.toml --features="xml, std, font_loading, image_loading, gif, jpeg, png, tiff, bmp, text_layout"
      
      # Building & testing done, bundle artifacts

      - name: Upload Artifacts (Linux)
        uses: actions/upload-artifact@v4
        if: matrix.build == 'linux-x64'
        with:
          name: 'azul-linux-amd64'
          path: |
            target/release/awb
            target/release/libazul.so
            target/release/libazul.a
          retention-days: 2
          if-no-files-found: error

      - name: Upload Artifacts (Windows)
        uses: actions/upload-artifact@v4
        if: matrix.build == 'windows-x64'
        with:
          name: 'azul-windows-amd64'
          path: |
            target/release/awb
            target/release/azul.dll
            target/release/libazul.a
            target/release/azul.dll.lib
          retention-days: 2
          if-no-files-found: error

      - name: Upload Artifacts (Mac)
        uses: actions/upload-artifact@v4
        if: matrix.build == 'macos-x64'
        with:
          name: 'azul-macos-amd64'
          path: |
            target/release/awb
            target/release/azul.dylib
            target/release/libazul.a
          retention-days: 2
          if-no-files-found: error

      - name: Done
        shell: bash
        run: echo "Build job done."
