# .github/workflows/ci-deploy.yml

name: Combined CI and Deploy Workflow

on:
  # Run the 'ci' workflow on push and pull request
  push:
    branches:
      - 'master'
    tags:
      - '[0-9]+.[0-9]+.[0-9]+*'
  pull_request:

  # Allow manual runs with a choice of which workflow to execute
  workflow_dispatch:
    inputs:
      run_mode:
        description: 'Select the workflow to run'
        type: choice
        options:
          - ci
          - deploy
        required: true
        default: 'ci'

# Permissions for deploying to GitHub Pages (only needed for 'deploy' mode)
permissions:
  contents: read
  pages: write
  id-token: write

# Concurrency setting to prevent multiple simultaneous deployments to Pages
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # ===================================================================
  # ==                  CI WORKFLOW ('ci' mode)                      ==
  # ===================================================================

  lint_and_check:
    name: Lint & Static Checks
    # Run this job for push, pull_request, or if 'ci' mode is manually selected
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_mode == 'ci'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.86.0 # Pinning version for consistency

      - name: Check crates
        run: |
          cargo check -p azul-css
          cargo check -p azul-core
          cargo check -p azul-layout
          cargo check -p azul-dll

      - name: Run autofix and normalize
        run: |
          cargo run -r -p azul-doc autofix
          cargo run -r -p azul-doc autofix explain
          cargo run -r -p azul-doc patch safe target/autofix/patches
          cargo run -r -p azul-doc patch target/autofix/patches
          cargo run -r -p azul-doc normalize

      - name: Check for uncommitted changes after autofix
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "There are uncommitted changes after running autofix:"
            git status --porcelain
            exit 1
          else
            echo "No uncommitted changes after autofix."
          fi

  test_heavy:
    name: Run Heavy Tests
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_mode == 'ci'
    runs-on: ubuntu-latest
    needs: lint_and_check # Run after linting passes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.86.0

      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          cargo +nightly miri setup

      - name: Run Miri tests on RefAny
        run: cargo +nightly miri test --lib -p azul-core

      - name: Run memtest
        run: cargo run -r -p azul-doc memtest run

      - name: Run reftest
        run: cargo run -r -p azul-doc reftest run

  build_binaries:
    name: Build Binaries on ${{ matrix.os }}
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.run_mode == 'ci'
    needs: lint_and_check # Run after linting passes
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            artifact_name: azul-macos-amd64
            artifact_path: |
              target/release/awb
              target/release/libazul.dylib
              target/release/libazul.a
          - os: windows-latest
            artifact_name: azul-windows-amd64
            artifact_path: |
              target/release/awb.exe
              target/release/azul.dll
              target/release/libazul.a
              target/release/azul.dll.lib
          - os: ubuntu-latest
            artifact_name: azul-linux-amd64
            artifact_path: |
              target/release/awb
              target/release/libazul.so
              target/release/libazul.a

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.80.0

      - name: Install clang (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y clang

      - name: Check azul.h (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: clang api/c/azul.h -ferror-limit=0

      - name: Build DLL and Python extension
        run: |
          cargo build --release -p azul-dll --features="link-dynamic"
          cargo build --release -p azul-dll --features="link-dynamic, python-extension"

      - name: Build Rust examples
        run: cargo check --verbose --examples --all-features

      - name: Build azul-workbench
        run: cargo build --release --bin azulc --manifest-path azulc/Cargo.toml --features="xml, std, font_loading, image_loading, gif, jpeg, png, tiff, bmp, text_layout"

      - name: Test Python example (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          cp target/release/azul.dll target/release/azul.pyd
          export PATH=$PATH:$(pwd)/target/release
          python examples/python/hello-world.py

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_path }}
          retention-days: 7
          if-no-files-found: error

  # ===================================================================
  # ==               PAGES DEPLOYMENT ('deploy' mode)                ==
  # ===================================================================

  build_pages:
    name: Build Pages on ${{ matrix.os }}
    if: github.event.inputs.run_mode == 'deploy'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Chrome (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: browser-actions/setup-chrome@v1

      - name: Run Reftests (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: cargo run --manifest-path doc/Cargo.toml --release -- --reftest

      - name: Build for ${{ matrix.platform }}
        run: cargo run --manifest-path doc/Cargo.toml --release -- --build=${{ matrix.platform }}

      - name: Upload ${{ matrix.platform }} page artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pages-artifact-${{ matrix.platform }}
          path: 'doc/target/deploy'

  merge_and_prepare_pages:
    name: Merge & Prepare Pages Artifacts
    if: github.event.inputs.run_mode == 'deploy'
    runs-on: ubuntu-latest
    needs: build_pages
    steps:
      - name: Create merged directory
        run: mkdir -p merged-artifacts

      - name: Download all platform artifacts
        uses: actions/download-artifact@v4
        with:
          path: temp-artifacts/
          pattern: pages-artifact-* # Download all artifacts starting with 'pages-artifact-'
          merge-multiple: true # Merge them into a single directory

      - name: Merge artifacts into final directory
        run: |
          echo "Merging downloaded artifacts..."
          cp -r temp-artifacts/* merged-artifacts/
          echo "Merged artifact contents:"
          ls -R merged-artifacts

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload merged artifacts for Pages deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'merged-artifacts'

  deploy_pages:
    name: Deploy to GitHub Pages
    if: github.event.inputs.run_mode == 'deploy'
    runs-on: ubuntu-latest
    needs: merge_and_prepare_pages
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4