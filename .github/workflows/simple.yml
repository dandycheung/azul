name: Run Reftests and Deploy to Pages

on:
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job that runs on different platforms
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-latest
            platform: windows
      # Allow builds to continue even if one platform fails
      fail-fast: false
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
    
      # Run reftests only on Linux
      - name: Setup Chrome (Linux only)
        if: matrix.os == 'ubuntu-latest'
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: 120
          install-dependencies: true
        continue-on-error: true

      - name: Check Chrome Installation (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: chrome --version
        continue-on-error: true

      - name: Run Reftests (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: cargo run --manifest-path doc/Cargo.toml --release -- --reftest
        continue-on-error: true

      # Build for each platform
      - name: Build for ${{ matrix.platform }}
        run: cargo run --manifest-path doc/Cargo.toml --release -- --build=${{ matrix.platform }}
        continue-on-error: true

      # Upload platform-specific artifacts
      - name: Upload ${{ matrix.platform }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploy-${{ matrix.platform }}
          path: 'doc/target/deploy'
        continue-on-error: true

  # Merge artifacts from all platforms
  merge-artifacts:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Create merged directory
        run: mkdir -p merged-artifacts

      # Download all platform artifacts with error handling
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy-linux
          path: temp-linux
        continue-on-error: true

      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy-macos
          path: temp-macos
        continue-on-error: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: deploy-windows
          path: temp-windows
        continue-on-error: true

      # Merge artifacts, preserving platform-specific binaries with error handling
      - name: Merge artifacts
        run: |
          # Create destination directory if it doesn't exist
          mkdir -p merged-artifacts
          
          # Copy Linux files if available
          if [ -d "temp-linux" ] && [ "$(ls -A temp-linux 2>/dev/null)" ]; then
            echo "Merging Linux artifacts..."
            cp -r temp-linux/* merged-artifacts/ || true
          else
            echo "No Linux artifacts available to merge"
          fi
          
          # Copy MacOS files if available
          if [ -d "temp-macos" ] && [ "$(ls -A temp-macos 2>/dev/null)" ]; then
            echo "Merging MacOS artifacts..."
            cp -r temp-macos/* merged-artifacts/ || true
          else
            echo "No MacOS artifacts available to merge"
          fi
          
          # Copy Windows files if available
          if [ -d "temp-windows" ] && [ "$(ls -A temp-windows 2>/dev/null)" ]; then
            echo "Merging Windows artifacts..."
            cp -r temp-windows/* merged-artifacts/ || true
          else
            echo "No Windows artifacts available to merge"
          fi
          
          # Check if we have anything to deploy
          if [ "$(ls -A merged-artifacts 2>/dev/null)" ]; then
            echo "Successfully merged available artifacts"
            echo "Merged artifact contents:"
            find merged-artifacts -type f | sort
          else
            echo "No artifacts were available to merge"
            # Create a minimal file so deployment doesn't fail
            mkdir -p merged-artifacts
            echo "# Build artifacts were not available" > merged-artifacts/README.md
          fi

      # Prepare for GitHub Pages deployment
      - name: Setup Pages
        uses: actions/configure-pages@v4
        continue-on-error: false

      - name: Upload merged artifacts for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'merged-artifacts'
        continue-on-error: false

  # Deploy merged artifacts to GitHub Pages
  deploy:
    environment:
      name: github-pages
    runs-on: ubuntu-latest
    needs: merge-artifacts
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4