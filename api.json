{
  "1.0.0-alpha1": {
    "apiversion": 1,
    "git": "0ad5f6d3",
    "date": "2025-04-03",
    "examples": [
      {
        "name": "hello-world",
        "alt": "Hello World application",
        "code": {
          "c": "c/hello-world.c",
          "cpp": "cpp/hello-world.cpp",
          "rust": "rust/hello-world.rs",
          "python": "python/hello-world.py"
        },
        "screenshot": {
          "windows": "helloworld.png",
          "linux": "helloworld.png",
          "mac": "helloworld.png"
        },
        "description": [
          "Azul composes objects in a DOM hierarchy with function pointer callbacks attached to nodes.",
          "The DOM tree only gets re-rendered when any callback returns `RefreshDom`: in difference to IMGUI, this",
          "does not happen on every frame. The DOM tree represents valid XHTML and can be styled with CSS."
        ]
      },
      {
        "name": "calculator",
        "alt": "Calculator rendered with Azul",
        "code": {
          "c": "c/calculator.c",
          "cpp": "cpp/calculator.cpp",
          "rust": "rust/calculator.rs",
          "python": "python/calculator.py"
        },
        "screenshot": {
          "windows": "calculator.png",
          "linux": "calculator.png",
          "mac": "calculator.png"
        },
        "description": [
          "The UI can be constructed in various ways: serialized to / from a HTML file or composed via functions.",
          "Your application data never has to hold any references to UI objects, making Azul very non-intrusive."
        ]
      },
      {
        "name": "xhtml",
        "alt": "XHTML site rendered with Azul",
        "code": {
          "c": "c/xhtml.c",
          "cpp": "cpp/xhtml.cpp",
          "rust": "rust/xhtml.rs",
          "python": "python/xhtml.py"
        },
        "screenshot": {
          "windows": "xhtml.png",
          "linux": "xhtml.png",
          "mac": "xhtml.png"
        },
        "description": [
          "The layout solver (azul-layout) is a CSS2.1 / XHTML4 compliant solver, which is completely detached from a renderer.",
          "Thanks to the MIT license, you can embed a full HTML layout solver in your custom application, which handles font shaping and layout for you."
        ]
      },
      {
        "name": "table",
        "alt": "Large table dataset rendered with Azul",
        "code": {
          "c": "c/table.c",
          "cpp": "cpp/table.cpp",
          "rust": "rust/table.rs",
          "python": "python/table.py"
        },
        "screenshot": {
          "windows": "table.png",
          "linux": "table.png",
          "mac": "table.png"
        },
        "description": [
          "For extremely large or sparse datasets, Azul can render only parts",
          "of a DOM and automatically trigger re-rendering when the user scrolls."
        ]
      },
      {
        "name": "svg",
        "alt": "SVG file rendered with Azul",
        "code": {
          "c": "c/svg.c",
          "cpp": "cpp/svg.cpp",
          "rust": "rust/svg.rs",
          "python": "python/svg.py"
        },
        "screenshot": {
          "windows": "svg.png",
          "linux": "svg.png",
          "mac": "svg.png"
        },
        "description": [
          "Azul exposes Rust utilities for image decoding and encoding, SVG rendering and parsing as well as font loading to C, C++ and Python applications."
        ]
      }
    ],
    "notes": [
      "This release is not functional yet, this page only exists to test that the automated DLL building works.",
      "",
      "There has been only [one release on GitHub so far](https://github.com/fschutt/azul/releases) and the current API does not match the release."
    ],
    "api": {
      "app": {
        "doc": "`App` construction and configuration",
        "classes": {
          "LayoutSolverVersion": {
            "doc": "Version of the layout solver to use - future binary versions of azul may have more fields here, necessary so that old compiled applications don't break with newer releases of azul. Newer layout versions are opt-in only.",
            "external": "azul_core::app_resources::LayoutSolverVersion",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Default": {
                  "doc": "Default, current layout solver version"
                }
              }
            ]
          },
          "AppConfig": {
            "doc": "Configuration for optional features, such as whether to enable logging or panic hooks",
            "external": "azul_core::app_resources::AppConfig",
            "struct_fields": [
              {
                "log_level": {
                  "type": "AppLogLevel",
                  "doc": "If enabled, logs error and info messages. Default is `LevelFilter::Error` to log all errors by default"
                },
                "enable_visual_panic_hook": {
                  "type": "bool",
                  "doc": "If the app crashes / panics, a window with a message box pops up. Setting this to `false` disables the popup box."
                },
                "enable_logging_on_panic": {
                  "type": "bool",
                  "doc": "If this is set to `true` (the default), a backtrace + error information gets logged to stdout and the logging file (only if logging is enabled)."
                },
                "enable_tab_navigation": {
                  "type": "bool",
                  "doc": "(STUB) Whether keyboard navigation should be enabled (default: true). Currently not implemented."
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Constructs a default `AppConfig`, uses the layout solver currently available",
                "fn_args": [
                  {
                    "layout_solver": "LayoutSolverVersion"
                  }
                ],
                "fn_body": "AzAppConfig::new(layout_solver)"
              }
            }
          },
          "AppLogLevel": {
            "doc": "Configuration to set which messages should be logged.",
            "external": "azul_core::app_resources::AppLogLevel",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Off": {},
                "Error": {},
                "Warn": {},
                "Info": {},
                "Debug": {},
                "Trace": {}
              }
            ]
          },
          "AzAppPtr": {
            "doc": "Main application class",
            "external": "crate::azul_impl::app::AzAppPtr",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "BoxArc<Mutex<App>>"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new App instance from the given `AppConfig`",
                "fn_args": [
                  {
                    "data": "RefAny",
                    "doc": "The initialized data model of the application, will be passed to the `LayoutCallback` of the active windows"
                  },
                  {
                    "config": "AppConfig",
                    "doc": "Additional configuration on how the global application should behave"
                  }
                ],
                "fn_body": "crate::azul_impl::app::AzAppPtr::new(data, config)"
              }
            },
            "functions": {
              "add_window": {
                "doc": "Spawn a new window on the screen when the app is run.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "window": "WindowCreateOptions",
                    "doc": "New window, note that this will **not** be spawned as the root window"
                  }
                ],
                "fn_body": "app.add_window(window)"
              },
              "add_image": {
                "doc": "Adds a new image identified by an ID to the image cache",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "id": "AzString"
                  },
                  {
                    "image": "ImageRef"
                  }
                ],
                "fn_body": "app.add_image(id, image)"
              },
              "get_monitors": {
                "doc": "Returns a list of monitors - useful for setting the monitor that a window should spawn on.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "MonitorVec",
                  "doc": "List of currently attached monitors, note that this `Vec` will be empty on wasm32"
                },
                "fn_body": "app.get_monitors()"
              },
              "run": {
                "doc": "Runs the application. Due to platform restrictions (specifically `WinMain` on Windows), this function never returns.",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "window": "WindowCreateOptions",
                    "doc": "Initial state of the root (main) window of the application"
                  }
                ],
                "fn_body": "app.run(window)"
              }
            }
          },
          "ExternalSystemCallbacks": {
            "doc": "External system callbacks to get the system time or create / manage threads",
            "external": "azul_core::task::ExternalSystemCallbacks",
            "struct_fields": [
              {
                "create_thread_fn": {
                  "type": "CreateThreadCallback"
                },
                "get_system_time_fn": {
                  "type": "GetSystemTimeCallback"
                }
              }
            ],
            "constructors": {
              "library_internal": {
                "doc": "Use the default, library-internal callbacks instead of providing your own",
                "fn_args": [],
                "fn_body": "AzSystemCallbacks::rust_internal()"
              }
            }
          }
        }
      },
      "window": {
        "doc": "Window creation / startup configuration",
        "classes": {
          "WindowCreateOptions": {
            "doc": "Options on how to initially create the window",
            "external": "azul_core::window::WindowCreateOptions",
            "struct_fields": [
              {
                "state": {
                  "type": "WindowState"
                },
                "size_to_content": {
                  "type": "bool"
                },
                "renderer": {
                  "type": "OptionRendererOptions"
                },
                "theme": {
                  "type": "OptionWindowTheme"
                },
                "create_callback": {
                  "type": "OptionCallback"
                },
                "hot_reload": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new window configuration with a custom layout callback",
                "fn_args": [
                  {
                    "layout_callback": "LayoutCallbackType",
                    "doc": "The callback to call when the UI of the window should be rendered"
                  }
                ],
                "fn_body": "AzWindowCreateOptions::new(layout_callback)"
              }
            }
          },
          "RendererOptions": {
            "doc": "Force a specific renderer: note that azul will **crash** on startup if the `RendererOptions` are not satisfied.",
            "external": "azul_core::window::RendererOptions",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "vsync": {
                  "type": "Vsync"
                },
                "srgb": {
                  "type": "Srgb"
                },
                "hw_accel": {
                  "type": "HwAcceleration"
                }
              }
            ]
          },
          "Vsync": {
            "doc": "Whether the renderer has VSync enabled",
            "external": "azul_core::window::Vsync",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Enabled": {},
                "Disabled": {},
                "DontCare": {}
              }
            ]
          },
          "Srgb": {
            "doc": "Does the renderer render in SRGB color space? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly",
            "external": "azul_core::window::Srgb",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Enabled": {},
                "Disabled": {},
                "DontCare": {}
              }
            ]
          },
          "HwAcceleration": {
            "doc": "Does the renderer render using hardware acceleration? By default, azul tries to set it to `Enabled` and falls back to `Disabled` if the OpenGL context can't be initialized properly",
            "external": "azul_core::window::HwAcceleration",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Enabled": {},
                "Disabled": {},
                "DontCare": {}
              }
            ]
          },
          "LayoutPoint": {
            "doc": "Offset in physical pixels (integer units)",
            "external": "azul_css::LayoutPoint",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "isize"
                },
                "y": {
                  "type": "isize"
                }
              }
            ]
          },
          "LayoutSize": {
            "doc": "Size in physical pixels (integer units)",
            "external": "azul_css::LayoutSize",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "width": {
                  "type": "isize"
                },
                "height": {
                  "type": "isize"
                }
              }
            ]
          },
          "LayoutRect": {
            "doc": "Represents a rectangle in physical pixels (integer units)",
            "external": "azul_css::LayoutRect",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "origin": {
                  "type": "LayoutPoint"
                },
                "size": {
                  "type": "LayoutSize"
                }
              }
            ]
          },
          "RawWindowHandle": {
            "doc": "Raw platform handle, for integration in / with other toolkits and custom non-azul window extensions",
            "external": "azul_core::window::RawWindowHandle",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "IOS": {
                  "type": "IOSHandle"
                },
                "MacOS": {
                  "type": "MacOSHandle"
                },
                "Xlib": {
                  "type": "XlibHandle"
                },
                "Xcb": {
                  "type": "XcbHandle"
                },
                "Wayland": {
                  "type": "WaylandHandle"
                },
                "Windows": {
                  "type": "WindowsHandle"
                },
                "Web": {
                  "type": "WebHandle"
                },
                "Android": {
                  "type": "AndroidHandle"
                },
                "Unsupported": {}
              }
            ]
          },
          "IOSHandle": {
            "external": "azul_core::window::IOSHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "ui_window": {
                  "type": "*mut c_void"
                },
                "ui_view": {
                  "type": "*mut c_void"
                },
                "ui_view_controller": {
                  "type": "*mut c_void"
                }
              }
            ]
          },
          "MacOSHandle": {
            "external": "azul_core::window::MacOSHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "ns_window": {
                  "type": "*mut c_void"
                },
                "ns_view": {
                  "type": "*mut c_void"
                }
              }
            ]
          },
          "XlibHandle": {
            "external": "azul_core::window::XlibHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "window": {
                  "type": "u64",
                  "doc": "An Xlib Window"
                },
                "display": {
                  "type": "*mut c_void"
                }
              }
            ]
          },
          "XcbHandle": {
            "external": "azul_core::window::XcbHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "window": {
                  "type": "u32",
                  "doc": "An X11 xcb_window_t."
                },
                "connection": {
                  "type": "*mut c_void",
                  "doc": "A pointer to an X server xcb_connection_t."
                }
              }
            ]
          },
          "WaylandHandle": {
            "external": "azul_core::window::WaylandHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "surface": {
                  "type": "*mut c_void",
                  "doc": "A pointer to a wl_surface"
                },
                "display": {
                  "type": "*mut c_void",
                  "doc": "A pointer to a wl_display."
                }
              }
            ]
          },
          "WindowsHandle": {
            "external": "azul_core::window::WindowsHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "hwnd": {
                  "type": "*mut c_void",
                  "doc": "A Win32 HWND handle."
                },
                "hinstance": {
                  "type": "*mut c_void",
                  "doc": "The HINSTANCE associated with this type's HWND."
                }
              }
            ]
          },
          "WebHandle": {
            "external": "azul_core::window::WebHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "id": {
                  "type": "u32",
                  "doc": "An ID value inserted into the data attributes of the canvas element as 'raw-handle' When accessing from JS, the attribute will automatically be called rawHandle. Each canvas created by the windowing system should be assigned their own unique ID. 0 should be reserved for invalid / null IDs."
                }
              }
            ]
          },
          "AndroidHandle": {
            "external": "azul_core::window::AndroidHandle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "a_native_window": {
                  "type": "*mut c_void",
                  "doc": "A pointer to an ANativeWindow."
                }
              }
            ]
          },
          "XWindowType": {
            "doc": "X11 window hint: Type of window",
            "external": "azul_core::window::XWindowType",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Desktop": {
                  "doc": "A desktop feature. This can include a single window containing desktop icons with the same dimensions as the screen, allowing the desktop environment to have full control of the desktop, without the need for proxying root window clicks."
                },
                "Dock": {
                  "doc": "A dock or panel feature. Typically a Window Manager would keep such windows on top of all other windows."
                },
                "Toolbar": {
                  "doc": "Toolbar windows. \"Torn off\" from the main application."
                },
                "Menu": {
                  "doc": "Pinnable menu windows. \"Torn off\" from the main application."
                },
                "Utility": {
                  "doc": "A small persistent utility window, such as a palette or toolbox."
                },
                "Splash": {
                  "doc": "The window is a splash screen displayed as an application is starting up."
                },
                "Dialog": {
                  "doc": "This is a dialog window."
                },
                "DropdownMenu": {
                  "doc": "A dropdown menu that usually appears when the user clicks on an item in a menu bar. This property is typically used on override-redirect windows."
                },
                "PopupMenu": {
                  "doc": "A popup menu that usually appears when the user right clicks on an object. This property is typically used on override-redirect windows."
                },
                "Tooltip": {
                  "doc": "A tooltip window. Usually used to show additional information when hovering over an object with the cursor. This property is typically used on override-redirect windows."
                },
                "Notification": {
                  "doc": "The window is a notification. This property is typically used on override-redirect windows."
                },
                "Combo": {
                  "doc": "This should be used on the windows that are popped up by combo boxes. This property is typically used on override-redirect windows."
                },
                "Dnd": {
                  "doc": "This indicates the the window is being dragged. This property is typically used on override-redirect windows."
                },
                "Normal": {
                  "doc": "This is a normal, top-level window."
                }
              }
            ]
          },
          "PhysicalPositionI32": {
            "doc": "Same as `LayoutPoint`, but uses `i32` instead of `isize`",
            "external": "azul_core::window::PhysicalPositionI32",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "i32"
                }
              },
              {
                "y": {
                  "type": "i32"
                }
              }
            ]
          },
          "PhysicalSizeU32": {
            "doc": "Same as `LayoutPoint`, but uses `u32` instead of `isize`",
            "external": "azul_core::window::PhysicalSizeU32",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "width": {
                  "type": "u32"
                }
              },
              {
                "height": {
                  "type": "u32"
                }
              }
            ]
          },
          "LogicalRect": {
            "doc": "Logical rectangle area (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.",
            "external": "azul_core::window::LogicalRect",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "origin": {
                  "type": "LogicalPosition"
                },
                "size": {
                  "type": "LogicalSize"
                }
              }
            ]
          },
          "LogicalPosition": {
            "doc": "Logical position (can differ based on HiDPI settings). Usually this is what you'd want for hit-testing and positioning elements.",
            "external": "azul_core::window::LogicalPosition",
            "derive": [
              "Default",
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "x": "f32"
                  },
                  {
                    "y": "f32"
                  }
                ],
                "fn_body": "AzLogicalPosition::new(x, y)"
              },
              "zero": {
                "fn_args": [],
                "fn_body": "AzLogicalPosition::zero()"
              }
            }
          },
          "LogicalSize": {
            "doc": "A size in \"logical\" (non-HiDPI-adjusted) pixels in floating-point units",
            "external": "azul_core::window::LogicalSize",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "width": {
                  "type": "f32"
                },
                "height": {
                  "type": "f32"
                }
              }
            ],
            "functions": {
              "to_physical": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "hidpi_factor": "f32"
                  }
                ],
                "returns": {
                  "type": "PhysicalSizeU32"
                },
                "fn_body": "logicalsize.to_physical(hidpi_factor)"
              }
            }
          },
          "IconKey": {
            "doc": "Unique hash of a window icon, so that azul does not have to compare the actual bytes to see wether the window icon has changed.",
            "external": "azul_core::window::IconKey",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "id": {
                  "type": "usize"
                }
              }
            ]
          },
          "SmallWindowIconBytes": {
            "doc": "Small (16x16x4) window icon, usually shown in the window titlebar",
            "external": "azul_core::window::SmallWindowIconBytes",
            "struct_fields": [
              {
                "key": {
                  "type": "IconKey"
                },
                "rgba_bytes": {
                  "type": "U8Vec"
                }
              }
            ]
          },
          "LargeWindowIconBytes": {
            "doc": "Large (32x32x4) window icon, usually used on high-resolution displays (instead of `SmallWindowIcon`)",
            "external": "azul_core::window::LargeWindowIconBytes",
            "struct_fields": [
              {
                "key": {
                  "type": "IconKey"
                },
                "rgba_bytes": {
                  "type": "U8Vec"
                }
              }
            ]
          },
          "WindowIcon": {
            "doc": "Window \"favicon\", usually shown in the top left of the window on Windows",
            "external": "azul_core::window::WindowIcon",
            "enum_fields": [
              {
                "Small": {
                  "type": "SmallWindowIconBytes"
                },
                "Large": {
                  "type": "LargeWindowIconBytes",
                  "doc": "32x32x4 bytes icon"
                }
              }
            ]
          },
          "TaskBarIcon": {
            "doc": "Application taskbar icon, 256x256x4 bytes in size",
            "external": "azul_core::window::TaskBarIcon",
            "struct_fields": [
              {
                "key": {
                  "type": "IconKey"
                },
                "rgba_bytes": {
                  "type": "U8Vec"
                }
              }
            ]
          },
          "VirtualKeyCode": {
            "doc": "Symbolic name for a keyboard key, does **not** take the keyboard locale into account",
            "external": "azul_core::window::VirtualKeyCode",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Key1": {},
                "Key2": {},
                "Key3": {},
                "Key4": {},
                "Key5": {},
                "Key6": {},
                "Key7": {},
                "Key8": {},
                "Key9": {},
                "Key0": {},
                "A": {},
                "B": {},
                "C": {},
                "D": {},
                "E": {},
                "F": {},
                "G": {},
                "H": {},
                "I": {},
                "J": {},
                "K": {},
                "L": {},
                "M": {},
                "N": {},
                "O": {},
                "P": {},
                "Q": {},
                "R": {},
                "S": {},
                "T": {},
                "U": {},
                "V": {},
                "W": {},
                "X": {},
                "Y": {},
                "Z": {},
                "Escape": {},
                "F1": {},
                "F2": {},
                "F3": {},
                "F4": {},
                "F5": {},
                "F6": {},
                "F7": {},
                "F8": {},
                "F9": {},
                "F10": {},
                "F11": {},
                "F12": {},
                "F13": {},
                "F14": {},
                "F15": {},
                "F16": {},
                "F17": {},
                "F18": {},
                "F19": {},
                "F20": {},
                "F21": {},
                "F22": {},
                "F23": {},
                "F24": {},
                "Snapshot": {},
                "Scroll": {},
                "Pause": {},
                "Insert": {},
                "Home": {},
                "Delete": {},
                "End": {},
                "PageDown": {},
                "PageUp": {},
                "Left": {},
                "Up": {},
                "Right": {},
                "Down": {},
                "Back": {},
                "Return": {},
                "Space": {},
                "Compose": {},
                "Caret": {},
                "Numlock": {},
                "Numpad0": {},
                "Numpad1": {},
                "Numpad2": {},
                "Numpad3": {},
                "Numpad4": {},
                "Numpad5": {},
                "Numpad6": {},
                "Numpad7": {},
                "Numpad8": {},
                "Numpad9": {},
                "NumpadAdd": {},
                "NumpadDivide": {},
                "NumpadDecimal": {},
                "NumpadComma": {},
                "NumpadEnter": {},
                "NumpadEquals": {},
                "NumpadMultiply": {},
                "NumpadSubtract": {},
                "AbntC1": {},
                "AbntC2": {},
                "Apostrophe": {},
                "Apps": {},
                "Asterisk": {},
                "At": {},
                "Ax": {},
                "Backslash": {},
                "Calculator": {},
                "Capital": {},
                "Colon": {},
                "Comma": {},
                "Convert": {},
                "Equals": {},
                "Grave": {},
                "Kana": {},
                "Kanji": {},
                "LAlt": {},
                "LBracket": {},
                "LControl": {},
                "LShift": {},
                "LWin": {},
                "Mail": {},
                "MediaSelect": {},
                "MediaStop": {},
                "Minus": {},
                "Mute": {},
                "MyComputer": {},
                "NavigateForward": {},
                "NavigateBackward": {},
                "NextTrack": {},
                "NoConvert": {},
                "OEM102": {},
                "Period": {},
                "PlayPause": {},
                "Plus": {},
                "Power": {},
                "PrevTrack": {},
                "RAlt": {},
                "RBracket": {},
                "RControl": {},
                "RShift": {},
                "RWin": {},
                "Semicolon": {},
                "Slash": {},
                "Sleep": {},
                "Stop": {},
                "Sysrq": {},
                "Tab": {},
                "Underline": {},
                "Unlabeled": {},
                "VolumeDown": {},
                "VolumeUp": {},
                "Wake": {},
                "WebBack": {},
                "WebFavorites": {},
                "WebForward": {},
                "WebHome": {},
                "WebRefresh": {},
                "WebSearch": {},
                "WebStop": {},
                "Yen": {},
                "Copy": {},
                "Paste": {},
                "Cut": {}
              }
            ]
          },
          "AcceleratorKey": {
            "doc": "Symbolic accelerator key (ctrl, alt, shift)",
            "external": "azul_core::window::AcceleratorKey",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Ctrl": {},
                "Alt": {},
                "Shift": {},
                "Key": {
                  "type": "VirtualKeyCode"
                }
              }
            ]
          },
          "WindowSize": {
            "doc": "Minimum / maximum / current size of the window in logical dimensions",
            "external": "azul_core::window::WindowSize",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "dimensions": {
                  "type": "LogicalSize",
                  "doc": "Width and height of the window, in logical units (may not correspond to the physical on-screen size)"
                },
                "dpi": {
                  "type": "u32",
                  "doc": "Actual DPI value (default: 96)"
                },
                "min_dimensions": {
                  "type": "OptionLogicalSize",
                  "doc": "Minimum dimensions of the window"
                },
                "max_dimensions": {
                  "type": "OptionLogicalSize",
                  "doc": "Maximum dimensions of the window"
                }
              }
            ],
            "functions": {
              "get_hidpi_factor": {
                "doc": "Returns the hidpi factor of the bounds",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "windowsize.get_hidpi_factor()"
              }
            }
          },
          "WindowFlags": {
            "doc": "Boolean flags relating to the current window state",
            "external": "azul_core::window::WindowFlags",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "frame": {
                  "type": "WindowFrame",
                  "doc": "Is the window currently maximized, minimized or fullscreen"
                },
                "is_about_to_close": {
                  "type": "bool",
                  "doc": "Is the window about to close on the next frame?"
                },
                "has_decorations": {
                  "type": "bool",
                  "doc": "Does the window have decorations (close, minimize, maximize, title bar)?"
                },
                "is_visible": {
                  "type": "bool",
                  "doc": "Is the window currently visible?"
                },
                "is_always_on_top": {
                  "type": "bool",
                  "doc": "Is the window always on top?"
                },
                "is_resizable": {
                  "type": "bool",
                  "doc": "Whether the window is resizable"
                },
                "has_focus": {
                  "type": "bool",
                  "doc": "Whether the window has focus or not (mutating this will request user attention)"
                },
                "has_extended_window_frame": {
                  "type": "bool",
                  "doc": "Whether the window has an \"extended frame\", i.e. the title bar is not rendered and the maximize / minimize / close buttons bleed into the window content"
                },
                "has_blur_behind_window": {
                  "type": "bool",
                  "doc": "Whether or not the compositor should blur the application background"
                },
                "smooth_scroll_enabled": {
                  "type": "bool",
                  "doc": "Is smooth scrolling enabled for this window?"
                },
                "autotab_enabled": {
                  "type": "bool",
                  "doc": "Is automatic TAB switching supported?"
                }
              }
            ]
          },
          "WindowFrame": {
            "doc": "State of the window frame (minimized, maximized, fullscreen or normal window)",
            "external": "azul_core::window::WindowFrame",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Normal": {},
                "Minimized": {},
                "Maximized": {},
                "Fullscreen": {}
              }
            ]
          },
          "DebugState": {
            "doc": "Debugging information, will be rendered as an overlay on top of the UI",
            "external": "azul_core::window::DebugState",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "profiler_dbg": {
                  "type": "bool"
                },
                "render_target_dbg": {
                  "type": "bool"
                },
                "texture_cache_dbg": {
                  "type": "bool"
                },
                "gpu_time_queries": {
                  "type": "bool"
                },
                "gpu_sample_queries": {
                  "type": "bool"
                },
                "disable_batching": {
                  "type": "bool"
                },
                "epochs": {
                  "type": "bool"
                },
                "echo_driver_messages": {
                  "type": "bool"
                },
                "show_overdraw": {
                  "type": "bool"
                },
                "gpu_cache_dbg": {
                  "type": "bool"
                },
                "texture_cache_dbg_clear_evicted": {
                  "type": "bool"
                },
                "picture_caching_dbg": {
                  "type": "bool"
                },
                "primitive_dbg": {
                  "type": "bool"
                },
                "zoom_dbg": {
                  "type": "bool"
                },
                "small_screen": {
                  "type": "bool"
                },
                "disable_opaque_pass": {
                  "type": "bool"
                },
                "disable_alpha_pass": {
                  "type": "bool"
                },
                "disable_clip_masks": {
                  "type": "bool"
                },
                "disable_text_prims": {
                  "type": "bool"
                },
                "disable_gradient_prims": {
                  "type": "bool"
                },
                "obscure_images": {
                  "type": "bool"
                },
                "glyph_flashing": {
                  "type": "bool"
                },
                "smart_profiler": {
                  "type": "bool"
                },
                "invalidation_dbg": {
                  "type": "bool"
                },
                "tile_cache_logging_dbg": {
                  "type": "bool"
                },
                "profiler_capture": {
                  "type": "bool"
                },
                "force_picture_invalidation": {
                  "type": "bool"
                }
              }
            ]
          },
          "KeyboardState": {
            "doc": "Current keyboard state, stores what keys / characters have been pressed",
            "external": "azul_core::window::KeyboardState",
            "struct_fields": [
              {
                "current_char": {
                  "type": "OptionChar",
                  "doc": "Currently pressed key, already converted to a `char` - (READONLY)"
                },
                "current_virtual_keycode": {
                  "type": "OptionVirtualKeyCode",
                  "doc": "Same as `current_char`, but . **DO NOT USE THIS FOR TEXT INPUT, USE `current_char` and `On::TextInput` instead.** For example entering `à` will fire a `VirtualKeyCode::Grave`, then `VirtualKeyCode::A`, so to correctly combine characters, use the `current_char` field."
                },
                "pressed_virtual_keycodes": {
                  "type": "VirtualKeyCodeVec",
                  "doc": "Currently pressed virtual keycodes (READONLY) - it can happen that more t This is essentially an \"extension\" of `current_scancodes` - `current_keys` stores the characters, but what if the pressed key is not a character (such as `ArrowRight` or `PgUp`)? Note that this can have an overlap, so pressing \"a\" on the keyboard will insert both a `VirtualKeyCode::A` into `current_virtual_keycodes` and an `\"a\"` as a char into `current_keys`."
                },
                "pressed_scancodes": {
                  "type": "ScanCodeVec",
                  "doc": "Same as `current_virtual_keycodes`, but the scancode identifies the physical key pressed, independent of the keyboard layout. The scancode does not change if the user adjusts the host's keyboard map. Use when the physical location of the key is more important than the key's host GUI semantics, such as for movement controls in a first-person game (German keyboard: Z key, UK keyboard: Y key, etc.)"
                }
              }
            ],
            "functions": {
              "shift_down": {
                "doc": "Returns if the `SHIFT` key is held down (left OR right shift)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "keyboardstate.shift_down()"
              },
              "ctrl_down": {
                "doc": "Returns if the `CTRL` key is held down",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "keyboardstate.ctrl_down()"
              },
              "alt_down": {
                "doc": "Returns if the `ALT` key is held down",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "keyboardstate.alt_down()"
              },
              "super_down": {
                "doc": "Returns if the `SUPER` (\"Windows\") key is held down",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "keyboardstate.super_down()"
              },
              "is_key_down": {
                "doc": "Returns if a key is held down",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "key": "VirtualKeyCode"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "keyboardstate.is_key_down(key)"
              }
            }
          },
          "MouseCursorType": {
            "doc": "Current icon of the mouse cursor",
            "external": "azul_core::window::MouseCursorType",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Default": {},
                "Crosshair": {},
                "Hand": {},
                "Arrow": {},
                "Move": {},
                "Text": {},
                "Wait": {},
                "Help": {},
                "Progress": {},
                "NotAllowed": {},
                "ContextMenu": {},
                "Cell": {},
                "VerticalText": {},
                "Alias": {},
                "Copy": {},
                "NoDrop": {},
                "Grab": {},
                "Grabbing": {},
                "AllScroll": {},
                "ZoomIn": {},
                "ZoomOut": {},
                "EResize": {},
                "NResize": {},
                "NeResize": {},
                "NwResize": {},
                "SResize": {},
                "SeResize": {},
                "SwResize": {},
                "WResize": {},
                "EwResize": {},
                "NsResize": {},
                "NeswResize": {},
                "NwseResize": {},
                "ColResize": {},
                "RowResize": {}
              }
            ]
          },
          "CursorPosition": {
            "doc": "Current position of the mouse cursor, relative to the window. Set to `Uninitialized` on startup (gets initialized on the first frame).",
            "external": "azul_core::window::CursorPosition",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "OutOfWindow": {
                  "type": "LogicalPosition"
                },
                "Uninitialized": {},
                "InWindow": {
                  "type": "LogicalPosition"
                }
              }
            ],
            "functions": {
              "get_position": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionLogicalPosition"
                },
                "fn_body": "cursorposition.get_position().into()"
              }
            }
          },
          "MouseState": {
            "doc": "Current mouse / cursor state",
            "external": "azul_core::window::MouseState",
            "struct_fields": [
              {
                "mouse_cursor_type": {
                  "type": "OptionMouseCursorType",
                  "doc": "Current mouse cursor type, set to `None` if the cursor is hidden. (READWRITE)"
                },
                "cursor_position": {
                  "type": "CursorPosition",
                  "doc": "Where is the mouse cursor currently? Set to `None` if the window is not focused. (READWRITE)"
                },
                "is_cursor_locked": {
                  "type": "bool",
                  "doc": "Is the mouse cursor locked to the current window (important for applications like games)? (READWRITE)"
                },
                "left_down": {
                  "type": "bool",
                  "doc": "Is the left mouse button down? (READONLY)"
                },
                "right_down": {
                  "type": "bool",
                  "doc": "Is the right mouse button down? (READONLY)"
                },
                "middle_down": {
                  "type": "bool",
                  "doc": "Is the middle mouse button down? (READONLY)"
                },
                "scroll_x": {
                  "type": "OptionF32",
                  "doc": "Scroll amount in pixels in the horizontal direction. Gets reset to 0 after every frame (READONLY)"
                },
                "scroll_y": {
                  "type": "OptionF32",
                  "doc": "Scroll amount in pixels in the vertical direction. Gets reset to 0 after every frame (READONLY)"
                }
              }
            ]
          },
          "PlatformSpecificOptions": {
            "doc": "Platform-specific window configuration, i.e. WM options that are not cross-platform",
            "external": "azul_core::window::PlatformSpecificOptions",
            "struct_fields": [
              {
                "windows_options": {
                  "type": "WindowsWindowOptions"
                },
                "linux_options": {
                  "type": "LinuxWindowOptions"
                },
                "mac_options": {
                  "type": "MacWindowOptions"
                },
                "wasm_options": {
                  "type": "WasmWindowOptions"
                }
              }
            ]
          },
          "WindowsWindowOptions": {
            "doc": "Window configuration specific to Win32",
            "external": "azul_core::window::WindowsWindowOptions",
            "struct_fields": [
              {
                "allow_drag_and_drop": {
                  "type": "bool",
                  "doc": "STARTUP ONLY: Whether the window should allow drag + drop operations (default: true)"
                },
                "no_redirection_bitmap": {
                  "type": "bool",
                  "doc": "STARTUP ONLY: Sets `WS_EX_NOREDIRECTIONBITMAP`"
                },
                "window_icon": {
                  "type": "OptionWindowIcon",
                  "doc": "STARTUP ONLY: Window icon (decoded bytes), appears at the top right corner of the window"
                },
                "taskbar_icon": {
                  "type": "OptionTaskBarIcon",
                  "doc": "READWRITE: Taskbar icon (decoded bytes), usually 256x256x4 bytes large (`ICON_BIG`). Can be changed in callbacks / at runtime."
                },
                "parent_window": {
                  "type": "OptionHwndHandle",
                  "doc": "STARTUP ONLY: Pointer (casted to void pointer) to a HWND handle"
                }
              }
            ]
          },
          "WaylandTheme": {
            "doc": "CSD theme of the window title / button controls",
            "external": "azul_core::window::WaylandTheme",
            "struct_fields": [
              {
                "title_bar_active_background_color": {
                  "type": "[u8;4]"
                },
                "title_bar_active_separator_color": {
                  "type": "[u8;4]"
                },
                "title_bar_active_text_color": {
                  "type": "[u8;4]"
                },
                "title_bar_inactive_background_color": {
                  "type": "[u8;4]"
                },
                "title_bar_inactive_separator_color": {
                  "type": "[u8;4]"
                },
                "title_bar_inactive_text_color": {
                  "type": "[u8;4]"
                },
                "maximize_idle_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "minimize_idle_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "close_idle_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "maximize_hovered_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "minimize_hovered_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "close_hovered_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "maximize_disabled_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "minimize_disabled_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "close_disabled_foreground_inactive_color": {
                  "type": "[u8;4]"
                },
                "maximize_idle_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "minimize_idle_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "close_idle_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "maximize_hovered_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "minimize_hovered_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "close_hovered_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "maximize_disabled_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "minimize_disabled_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "close_disabled_background_inactive_color": {
                  "type": "[u8;4]"
                },
                "maximize_idle_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "minimize_idle_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "close_idle_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "maximize_hovered_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "minimize_hovered_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "close_hovered_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "maximize_disabled_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "minimize_disabled_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "close_disabled_foreground_active_color": {
                  "type": "[u8;4]"
                },
                "maximize_idle_background_active_color": {
                  "type": "[u8;4]"
                },
                "minimize_idle_background_active_color": {
                  "type": "[u8;4]"
                },
                "close_idle_background_active_color": {
                  "type": "[u8;4]"
                },
                "maximize_hovered_background_active_color": {
                  "type": "[u8;4]"
                },
                "minimize_hovered_background_active_color": {
                  "type": "[u8;4]"
                },
                "close_hovered_background_active_color": {
                  "type": "[u8;4]"
                },
                "maximize_disabled_background_active_color": {
                  "type": "[u8;4]"
                },
                "minimize_disabled_background_active_color": {
                  "type": "[u8;4]"
                },
                "close_disabled_background_active_color": {
                  "type": "[u8;4]"
                },
                "title_bar_font": {
                  "type": "AzString"
                },
                "title_bar_font_size": {
                  "type": "f32"
                }
              }
            ]
          },
          "RendererType": {
            "doc": "Renderer type of the current windows OpenGL context",
            "external": "azul_core::window::RendererType",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Hardware": {
                  "doc": "Force hardware rendering"
                },
                "Software": {
                  "doc": "Force software rendering"
                }
              }
            ]
          },
          "WindowState": {
            "external": "azul_core::window::WindowState",
            "struct_fields": [
              {
                "title": {
                  "type": "AzString"
                },
                "theme": {
                  "type": "WindowTheme"
                },
                "size": {
                  "type": "WindowSize"
                },
                "position": {
                  "type": "WindowPosition"
                },
                "flags": {
                  "type": "WindowFlags"
                },
                "debug_state": {
                  "type": "DebugState"
                },
                "keyboard_state": {
                  "type": "KeyboardState"
                },
                "mouse_state": {
                  "type": "MouseState"
                },
                "touch_state": {
                  "type": "TouchState"
                },
                "ime_position": {
                  "type": "ImePosition"
                },
                "monitor": {
                  "type": "Monitor"
                },
                "platform_specific_options": {
                  "type": "PlatformSpecificOptions"
                },
                "renderer_options": {
                  "type": "RendererOptions"
                },
                "background_color": {
                  "type": "ColorU"
                },
                "layout_callback": {
                  "type": "LayoutCallback"
                },
                "close_callback": {
                  "type": "OptionCallback"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new WindowState with default settings and a custom layout callback",
                "fn_args": [
                  {
                    "layout_callback": "LayoutCallbackType"
                  }
                ],
                "fn_body": "AzWindowState::new(layout_callback)"
              },
              "default": {
                "doc": "Creates a default WindowState with an empty layout callback - useful only if you use the Rust `WindowState { .. WindowState::default() }` intialization syntax.",
                "fn_args": [],
                "fn_body": "AzWindowState::default()"
              }
            }
          },
          "LinuxWindowOptions": {
            "external": "azul_core::window::LinuxWindowOptions",
            "struct_fields": [
              {
                "x11_visual": {
                  "type": "OptionX11Visual",
                  "doc": "(Unimplemented) - Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_screen": {
                  "type": "OptionI32",
                  "doc": "(Unimplemented) - Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_wm_classes": {
                  "type": "StringPairVec",
                  "doc": "Build window with `WM_CLASS` hint; defaults to the name of the binary. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_override_redirect": {
                  "type": "bool",
                  "doc": "Build window with override-redirect flag; defaults to false. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_window_types": {
                  "type": "XWindowTypeVec",
                  "doc": "Build window with `_NET_WM_WINDOW_TYPE` hint; defaults to `Normal`. Only relevant on X11. Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_gtk_theme_variant": {
                  "type": "OptionAzString",
                  "doc": "Build window with `_GTK_THEME_VARIANT` hint set to the specified value. Currently only relevant on X11. Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_resize_increments": {
                  "type": "OptionLogicalSize",
                  "doc": "Build window with resize increment hint. Only implemented on X11. Can only be set at window creation, can't be changed in callbacks."
                },
                "x11_base_size": {
                  "type": "OptionLogicalSize",
                  "doc": "Build window with base size hint. Only implemented on X11. Can only be set at window creation, can't be changed in callbacks."
                },
                "wayland_app_id": {
                  "type": "OptionAzString",
                  "doc": "Build window with a given application ID. It should match the `.desktop` file distributed with your program. Only relevant on Wayland. Can only be set at window creation, can't be changed in callbacks. For details about application ID conventions, see the [Desktop Entry Spec](https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#desktop-file-id)"
                },
                "wayland_theme": {
                  "type": "OptionWaylandTheme"
                },
                "request_user_attention": {
                  "type": "UserAttentionType"
                },
                "window_icon": {
                  "type": "OptionWindowIcon"
                }
              }
            ]
          },
          "MacWindowOptions": {
            "external": "azul_core::window::MacWindowOptions",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "reserved": {
                  "type": "u8"
                }
              }
            ]
          },
          "WasmWindowOptions": {
            "external": "azul_core::window::WasmWindowOptions",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "_reserved": {
                  "type": "u8"
                }
              }
            ]
          },
          "FullScreenMode": {
            "external": "azul_core::window::FullScreenMode",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "SlowFullScreen": {
                  "doc": "- macOS: If the window is in windowed mode, transitions it slowly to fullscreen mode - other: Does the same as `FastFullScreen`."
                },
                "FastFullScreen": {
                  "doc": "Window should immediately go into fullscreen mode (on macOS this is not the default behaviour)."
                },
                "SlowWindowed": {
                  "doc": "- macOS: If the window is in fullscreen mode, transitions slowly back to windowed state. - other: Does the same as `FastWindowed`."
                },
                "FastWindowed": {
                  "doc": "If the window is in fullscreen mode, will immediately go back to windowed mode (on macOS this is not the default behaviour)."
                }
              }
            ]
          },
          "WindowTheme": {
            "doc": "Window theme, set by the operating system or `WindowCreateOptions.theme` on startup",
            "external": "azul_core::window::WindowTheme",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "DarkMode": {},
                "LightMode": {}
              }
            ]
          },
          "WindowPosition": {
            "doc": "Position of the top left corner of the window relative to the top left of the monitor",
            "external": "azul_core::window::WindowPosition",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Uninitialized": {},
                "Initialized": {
                  "type": "PhysicalPositionI32"
                }
              }
            ]
          },
          "ImePosition": {
            "doc": "Position of the virtual keyboard necessary to insert CJK characters",
            "external": "azul_core::window::ImePosition",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Uninitialized": {},
                "Initialized": {
                  "type": "LogicalPosition"
                }
              }
            ]
          },
          "TouchState": {
            "doc": "Current state of touch devices / touch inputs",
            "external": "azul_core::window::TouchState",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "unimplemented": {
                  "type": "u8",
                  "doc": "TODO: not yet implemented"
                }
              }
            ]
          },
          "Monitor": {
            "doc": "Information about a single (or many) monitors, useful for dock widgets",
            "external": "azul_core::window::Monitor",
            "struct_fields": [
              {
                "id": {
                  "type": "usize"
                },
                "name": {
                  "type": "OptionAzString"
                },
                "size": {
                  "type": "LayoutSize"
                },
                "position": {
                  "type": "LayoutPoint"
                },
                "scale_factor": {
                  "type": "f64"
                },
                "video_modes": {
                  "type": "VideoModeVec"
                },
                "is_primary_monitor": {
                  "type": "bool"
                }
              }
            ]
          },
          "VideoMode": {
            "doc": "Describes a rendering configuration for a monitor",
            "external": "azul_core::window::VideoMode",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "size": {
                  "type": "LayoutSize"
                },
                "bit_depth": {
                  "type": "u16"
                },
                "refresh_rate": {
                  "type": "u16"
                }
              }
            ]
          },
          "AzStringPair": {
            "external": "azul_core::window::AzStringPair",
            "struct_fields": [
              {
                "key": {
                  "type": "AzString"
                },
                "value": {
                  "type": "AzString"
                }
              }
            ]
          },
          "SystemCallbacks": {
            "external": "azul_layout::window::SystemCallbacks",
            "struct_fields": [
              {
                "create_thread": {
                  "type": "*const c_void"
                }
              },
              {
                "get_system_time": {
                  "type": "*const c_void"
                }
              }
            ]
          },
          "UserAttentionType": {
            "external": "azul_core::window::UserAttentionType",
            "enum_fields": [
              {
                "None": {},
                "Critical": {},
                "Informational": {}
              }
            ]
          }
        }
      },
      "callbacks": {
        "doc": "Callback type definitions + struct definitions of `CallbackInfo`s",
        "classes": {
          "LayoutCallback": {
            "external": "azul_core::callbacks::LayoutCallback",
            "enum_fields": [
              {
                "Raw": {
                  "type": "LayoutCallbackInner"
                },
                "Marshaled": {
                  "type": "MarshaledLayoutCallback"
                }
              }
            ]
          },
          "MarshaledLayoutCallback": {
            "doc": "C-ABI stable wrapper over a `MarshaledLayoutCallback`",
            "external": "azul_core::callbacks::MarshaledLayoutCallback",
            "struct_fields": [
              {
                "marshal_data": {
                  "type": "RefAny"
                },
                "cb": {
                  "type": "MarshaledLayoutCallbackInner"
                }
              }
            ]
          },
          "MarshaledLayoutCallbackInner": {
            "doc": "C-ABI stable wrapper over a `MarshaledLayoutCallbackInner`",
            "external": "azul_core::callbacks::MarshaledLayoutCallbackInner",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "MarshaledLayoutCallbackType"
                }
              }
            ]
          },
          "MarshaledLayoutCallbackType": {
            "doc": "In order to interact with external VMs (Java, Python, etc.) the callback is often stored as a \"function object\" In order to callback into external languages, the layout callback has to be able to carry some extra data (the first argument), which usually contains the function object i.e. in the Python VM a PyCallable / PyAny",
            "external": "azul_core::callbacks::MarshaledLayoutCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": "Marshal-local data (the `marshal_data` of the `MarshaledLayoutCallback` struct)"
                },
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": "Application state of the `App`"
                },
                {
                  "type": "LayoutCallbackInfo",
                  "ref": "value",
                  "doc": "Useful information to contitionally return the structure of the DOM based on the width / height of the window"
                }
              ],
              "returns": {
                "type": "StyledDom",
                "doc": "The styled DOM rendered from the application state"
              }
            }
          },
          "LayoutCallbackInner": {
            "doc": "C-ABI stable wrapper over a `LayoutCallbackType`",
            "external": "azul_core::callbacks::LayoutCallbackInner",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "LayoutCallbackType"
                }
              }
            ]
          },
          "LayoutCallbackType": {
            "doc": "Callback function pointer (has to be a function pointer in order to be compatible with C APIs later on). IMPORTANT: The callback needs to deallocate the `RefAnyPtr` and `LayoutCallbackInfoPtr`, otherwise that memory is leaked. If you use the official auto-generated bindings, this is already done for you. NOTE: The original callback was `fn(&self, LayoutCallbackInfo) -> Dom` which then evolved to `fn(&RefAny, LayoutCallbackInfo) -> Dom`. The indirection is necessary because of the memory management around the C API See azul-core/ui_state.rs:298 for how the memory is managed across the callback boundary.",
            "external": "azul_core::callbacks::LayoutCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": "Application state of the `App`"
                },
                {
                  "type": "LayoutCallbackInfo",
                  "ref": "refmut",
                  "doc": "Useful information to contitionally return the structure of the DOM based on the width / height of the window"
                }
              ],
              "returns": {
                "type": "StyledDom",
                "doc": "The styled DOM rendered from the application state"
              }
            }
          },
          "Callback": {
            "doc": "Stores a function pointer that is executed when the given UI element is hit Must return an `Update` that denotes if the screen should be redrawn.",
            "external": "azul_layout::callbacks::Callback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "CallbackType"
                }
              }
            ]
          },
          "CallbackType": {
            "doc": "Main callback type for UI event handling",
            "external": "azul_layout::callbacks::CallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": "Reference counted opaque pointer to the data set in the `CallbackData` for the hit DOM node"
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": "Context struct to allow the callback to manipulate UI structures"
                }
              ],
              "returns": {
                "type": "Update",
                "doc": "Whether this callback has modified the application state in such a way that a full UI redraw is unavoidable. If any callback returns true, the `LayoutCallback` of the window will be called again to render the next frame."
              }
            }
          },
          "CallbackInfo": {
            "doc": "Information about the callback that is passed to the callback whenever a callback is invoked",
            "external": "azul_layout::callbacks::CallbackInfo",
            "struct_fields": [
              {
                "layout_window": {
                  "type": "*mut c_void",
                  "doc": "Pointer to the LayoutWindow containing all layout results (MUTABLE for timer/thread/GPU access)"
                },
                "renderer_resources": {
                  "type": "*const c_void",
                  "doc": "Necessary to query FontRefs from callbacks"
                },
                "previous_window_state": {
                  "type": "*const c_void",
                  "doc": "Previous window state"
                },
                "current_window_state": {
                  "type": "*const c_void",
                  "doc": "State of the current window that the callback was called on (read only!)"
                },
                "modifiable_window_state": {
                  "type": "*mut c_void",
                  "doc": "User-modifiable state of the window that the callback was called on"
                },
                "gl_context": {
                  "type": "*const c_void",
                  "doc": "An Rc to the OpenGL context, in order to be able to render to OpenGL textures"
                },
                "image_cache": {
                  "type": "*mut c_void",
                  "doc": "Cache to add / remove / query image RefAnys from / to CSS ids"
                },
                "system_fonts": {
                  "type": "*mut c_void",
                  "doc": "System font cache (can be regenerated / refreshed in callbacks)"
                },
                "timers": {
                  "type": "*mut c_void",
                  "doc": "Currently running timers (polling functions, run on the main thread)"
                },
                "threads": {
                  "type": "*mut c_void",
                  "doc": "Currently running threads (asynchronous functions running each on a different thread)"
                },
                "timers_removed": {
                  "type": "*mut c_void",
                  "doc": "Timers removed by the callback"
                },
                "threads_removed": {
                  "type": "*mut c_void",
                  "doc": "Threads removed by the callback"
                },
                "current_window_handle": {
                  "type": "*const c_void",
                  "doc": "Handle of the current window"
                },
                "new_windows": {
                  "type": "*mut c_void",
                  "doc": "Used to spawn new windows from callbacks. You can use `get_current_window_handle()` to spawn child windows."
                },
                "system_callbacks": {
                  "type": "*const c_void",
                  "doc": "Callbacks for creating threads and getting the system time (since this crate uses no_std)"
                },
                "stop_propagation": {
                  "type": "*mut c_void",
                  "doc": "Sets whether the event should be propagated to the parent hit node or not"
                },
                "focus_target": {
                  "type": "*mut c_void",
                  "doc": "The callback can change the focus_target - note that the focus_target is set before the next frames' layout() function is invoked, but the current frames callbacks are not affected."
                },
                "words_changed_in_callbacks": {
                  "type": "*mut c_void",
                  "doc": "Mutable reference to a list of words / text items that were changed in the callback"
                },
                "images_changed_in_callbacks": {
                  "type": "*mut c_void",
                  "doc": "Mutable reference to a list of images that were changed in the callback"
                },
                "image_masks_changed_in_callbacks": {
                  "type": "*mut c_void",
                  "doc": "Mutable reference to a list of image clip masks that were changed in the callback"
                },
                "css_properties_changed_in_callbacks": {
                  "type": "*mut c_void",
                  "doc": "Mutable reference to a list of CSS property changes, so that the callbacks can change CSS properties"
                },
                "current_scroll_states": {
                  "type": "*const c_void",
                  "doc": "Immutable (!) reference to where the nodes are currently scrolled (current position)"
                },
                "nodes_scrolled_in_callback": {
                  "type": "*mut c_void",
                  "doc": "Mutable map where a user can set where he wants the nodes to be scrolled to (for the next frame)"
                },
                "hit_dom_node": {
                  "type": "DomNodeId",
                  "doc": "The ID of the DOM + the node that was hit. You can use this to query information about the node, but please don't hard-code any if / else statements based on the `NodeId`"
                },
                "cursor_relative_to_item": {
                  "type": "OptionLogicalPosition",
                  "doc": "The (x, y) position of the mouse cursor, **relative to top left of the element that was hit**."
                },
                "cursor_in_viewport": {
                  "type": "OptionLogicalPosition",
                  "doc": "The (x, y) position of the mouse cursor, **relative to top left of the window**."
                }
              }
            ],
            "functions": {
              "get_hit_node": {
                "doc": "Returns the `DomNodeId` of the element that the callback was attached to.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "DomNodeId"
                },
                "fn_body": "callbackinfo.get_hit_node()"
              },
              "get_system_time_fn": {
                "doc": "Returns the function pointer necessary to query the current time.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "GetSystemTimeCallback"
                },
                "fn_body": "callbackinfo.get_system_time_fn()"
              },
              "get_cursor_relative_to_viewport": {
                "doc": "Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not in the current window.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionLogicalPosition"
                },
                "fn_body": "callbackinfo.get_cursor_relative_to_viewport()"
              },
              "get_cursor_relative_to_node": {
                "doc": "Returns the `LayoutPoint` of the cursor in the viewport (relative to the origin of the `Dom`). Set to `None` if the cursor is not hovering over the current node.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionLogicalPosition"
                },
                "fn_body": "callbackinfo.get_cursor_relative_to_node()"
              },
              "get_current_window_state": {
                "doc": "Returns a copy of the current windows `WindowState`.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "WindowState"
                },
                "fn_body": "callbackinfo.get_current_window_state()"
              },
              "get_current_keyboard_state": {
                "doc": "Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "KeyboardState"
                },
                "fn_body": "callbackinfo.get_current_keyboard_state()"
              },
              "get_current_mouse_state": {
                "doc": "Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "MouseState"
                },
                "fn_body": "callbackinfo.get_current_mouse_state()"
              },
              "get_previous_window_state": {
                "doc": "Returns a copy of the current windows `WindowState`.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionWindowState"
                },
                "fn_body": "callbackinfo.get_previous_window_state().into()"
              },
              "get_previous_keyboard_state": {
                "doc": "Returns a copy of the internal `KeyboardState`. Same as `self.get_window_state().keyboard_state`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionKeyboardState"
                },
                "fn_body": "callbackinfo.get_previous_keyboard_state().into()"
              },
              "get_previous_mouse_state": {
                "doc": "Returns a copy of the internal `MouseState`. Same as `self.get_window_state().mouse_state`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionMouseState"
                },
                "fn_body": "callbackinfo.get_previous_mouse_state().into()"
              },
              "get_current_window_handle": {
                "doc": "Returns a copy of the current windows `RawWindowHandle`.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "RawWindowHandle"
                },
                "fn_body": "callbackinfo.get_current_window_handle()"
              },
              "get_gl_context": {
                "doc": "Returns a **reference-counted copy** of the current windows' `Gl` (context). You can use this to render OpenGL textures.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionGlContextPtr"
                },
                "fn_body": "callbackinfo.get_gl_context()"
              },
              "get_scroll_position": {
                "doc": "Returns the x / y offset that this node has been scrolled to by the user or `None` if the node has not been scrolled.",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionLogicalPosition"
                },
                "fn_body": "callbackinfo.get_scroll_position(node_id).into()"
              },
              "get_dataset": {
                "doc": "Returns the `dataset` property of the given Node or `None` if the node doesn't have a `dataset` property.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionRefAny"
                },
                "fn_body": "callbackinfo.get_dataset(node_id).into()"
              },
              "get_node_id_of_root_dataset": {
                "doc": "Given a dataset, returns the node ID of the \"root\" `RefAny`, i.e. the `RefAny` with the lowest `instance` count that is set as a `dataset` on any node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dataset": "RefAny"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "callbackinfo.get_node_id_of_root_dataset(dataset).into()"
              },
              "get_string_contents": {
                "doc": "If the node is a `Text` node, returns a copy of the internal string contents.",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionAzString"
                },
                "fn_body": "callbackinfo.get_string_contents(node_id).into()"
              },
              "get_inline_text": {
                "doc": "If the node is a `Text` node, returns the layouted inline glyphs of the text currently rendered on the screen",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionInlineText"
                },
                "fn_body": "callbackinfo.get_inline_text(node_id).into()"
              },
              "get_font_ref": {
                "doc": "If the node is a `Text` node, returns the `FontRef` that was used to render this node. Useful for getting font metrics for a text string",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionFontRef"
                },
                "fn_body": "callbackinfo.get_font_ref(node_id).into()"
              },
              "get_text_layout_options": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionResolvedTextLayoutOptions"
                },
                "fn_body": "callbackinfo.get_text_layout_options(node_id).into()"
              },
              "shape_text": {
                "doc": "Similar to `get_inline_text()`: If the node is a `Text` node, shape the `text` string with the same parameters as the current text and return the calculated InlineTextLayout. Necessary to calculate text cursor offsets and to detect when a line overflows content.",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "text": "AzString"
                  }
                ],
                "returns": {
                  "type": "OptionInlineText"
                },
                "fn_body": "azul_layout::callback_info_shape_text(callbackinfo, node_id, text).into()"
              },
              "get_index_in_parent": {
                "doc": "Returns the index of the node relative to the parent node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "usize"
                },
                "fn_body": "let mut t = 0; let mut n = node_id; while let Some(prev) = callbackinfo.get_previous_sibling(n) { n = prev; t += 1; } t"
              },
              "get_parent": {
                "doc": "Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "callbackinfo.get_parent(node_id).into()"
              },
              "get_previous_sibling": {
                "doc": "Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "callbackinfo.get_previous_sibling(node_id).into()"
              },
              "get_next_sibling": {
                "doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "callbackinfo.get_next_sibling(node_id).into()"
              },
              "get_first_child": {
                "doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "callbackinfo.get_first_child(node_id).into()"
              },
              "get_last_child": {
                "doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "callbackinfo.get_last_child(node_id).into()"
              },
              "get_node_position": {
                "doc": "Returns the position of a given DOM node in the UI",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionPositionInfo"
                },
                "fn_body": "callbackinfo.get_node_position(node_id).into()"
              },
              "get_node_size": {
                "doc": "Returns the size of a given DOM node in the UI",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionLogicalSize"
                },
                "fn_body": "callbackinfo.get_node_size(node_id).into()"
              },
              "get_computed_css_property": {
                "doc": "Returns the current computed CSS property of a given DOM node in the UI",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "property_type": "CssPropertyType"
                  }
                ],
                "returns": {
                  "type": "OptionCssProperty"
                },
                "fn_body": "callbackinfo.get_computed_css_property(node_id, property_type).into()"
              },
              "set_window_state": {
                "doc": "Sets the new `WindowState` for the next frame. The window is updated after all callbacks are run.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "new_state": "WindowState"
                  }
                ],
                "fn_body": "callbackinfo.set_window_state(new_state);"
              },
              "set_focus": {
                "doc": "Sets the new `FocusTarget` for the next frame. Note that this will emit a `On::FocusLost` and `On::FocusReceived` event, if the focused node has changed.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "target": "FocusTarget"
                  }
                ],
                "fn_body": "callbackinfo.set_focus(target);"
              },
              "set_css_property": {
                "doc": "Sets a `CssProperty` on a given node to its new value. If this property change affects the layout, this will automatically trigger a relayout and redraw of the screen.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "new_property": "CssProperty"
                  }
                ],
                "fn_body": "callbackinfo.set_css_property(node_id, new_property); "
              },
              "set_scroll_position": {
                "doc": "Sets the scroll position of the node",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "scroll_position": "LogicalPosition"
                  }
                ],
                "fn_body": "callbackinfo.set_scroll_position(node_id, scroll_position)"
              },
              "set_string_contents": {
                "doc": "If the node is a `Text` node, overwrites the `Text` content with the new string, without requiring the entire UI to be rebuilt.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "string": "AzString"
                  }
                ],
                "fn_body": "callbackinfo.set_string_contents(node_id, string)"
              },
              "add_image": {
                "doc": "Adds a new image identified by an ID to the image cache",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "id": "AzString"
                  },
                  {
                    "image": "ImageRef"
                  }
                ],
                "fn_body": "callbackinfo.add_image(id, image)"
              },
              "has_image": {
                "doc": "Returns whether an image with a given CSS ID already exists",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "callbackinfo.has_image(&id)"
              },
              "get_image": {
                "doc": "Returns the image with a given CSS ID",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "AzString"
                  }
                ],
                "returns": {
                  "type": "OptionImageRef"
                },
                "fn_body": "callbackinfo.get_image(&id).into()"
              },
              "update_image": {
                "doc": "If the node is an `Image`, exchanges the current image with a new source",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "new_image": "ImageRef"
                  },
                  {
                    "image_type": "UpdateImageType"
                  }
                ],
                "fn_body": "callbackinfo.update_image(node_id, new_image, image_type)"
              },
              "delete_image": {
                "doc": "Deletes an image identified by a CSS ID from the image cache",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "id": "AzString"
                  }
                ],
                "fn_body": "callbackinfo.delete_image(&id)"
              },
              "update_image_mask": {
                "doc": "If the node has an `ImageMask`, exchanges the current mask for the new mask",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  },
                  {
                    "new_mask": "ImageMask"
                  }
                ],
                "fn_body": "callbackinfo.update_image_mask(node_id, new_mask)"
              },
              "stop_propagation": {
                "doc": "Stops the propagation of the current callback event type to the parent. Events are bubbled from the inside out (children first, then parents), this event stops the propagation of the event to the parent.",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "callbackinfo.stop_propagation();"
              },
              "create_window": {
                "doc": "Spawns a new window with the given `WindowCreateOptions`.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "new_window": "WindowCreateOptions"
                  }
                ],
                "fn_body": "callbackinfo.create_window(new_window);"
              },
              "start_timer": {
                "doc": "Adds a new `Timer` to the runtime. See the documentation for `Timer` for more information.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "timer": "Timer"
                  }
                ],
                "returns": {
                  "type": "TimerId"
                },
                "fn_body": "callbackinfo.start_timer(timer)"
              },
              "start_animation": {
                "doc": "Starts an animation timer on a give NodeId - same as a `Timer`, but uses a pre-configured interpolation function to drive the animation timer",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node": "DomNodeId"
                  },
                  {
                    "animation": "Animation"
                  }
                ],
                "returns": {
                  "type": "OptionTimerId"
                },
                "fn_body": "callbackinfo.start_animation(node, animation).into()"
              },
              "stop_timer": {
                "doc": "Stops / cancels a `Timer`. See the documentation for `Timer` for more information.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "timer_id": "TimerId"
                  }
                ],
                "returns": {
                  "type": "bool",
                  "doc": "Returns true if the timer was successfully stopped / removed."
                },
                "fn_body": "callbackinfo.stop_timer(timer_id)"
              },
              "start_thread": {
                "doc": "Starts a new `Thread` to the runtime. See the documentation for `Thread` for more information.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "thread_initialize_data": "RefAny"
                  },
                  {
                    "writeback_data": "RefAny"
                  },
                  {
                    "callback": "ThreadCallbackType"
                  }
                ],
                "returns": {
                  "type": "OptionThreadId"
                },
                "fn_body": "callbackinfo.start_thread(thread_initialize_data, writeback_data, callback).into()"
              },
              "send_thread_msg": {
                "doc": "Sends a message to a background thread",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "thread_id": "ThreadId"
                  },
                  {
                    "msg": "ThreadSendMsg"
                  }
                ],
                "returns": {
                  "type": "bool",
                  "doc": "Returns `true` if the ThreadId is valid and the message could be sent, false otherwise"
                },
                "fn_body": "callbackinfo.send_thread_msg(thread_id, msg)"
              },
              "stop_thread": {
                "doc": "Stops a thread at the nearest possible opportunity. Sends a `ThreadSendMsg::TerminateThread` message to the thread and joins the thread.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "thread_id": "ThreadId"
                  }
                ],
                "returns": {
                  "type": "bool",
                  "doc": "Returns `true` if the ThreadId is valid, false otherwise"
                },
                "fn_body": "callbackinfo.stop_thread(thread_id)"
              }
            }
          },
          "UpdateImageType": {
            "doc": "Which type of image should be updated: background image (the CSS background) or content image (the <img src=\"\"> content)",
            "external": "azul_core::callbacks::UpdateImageType",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Background": {},
                "Content": {}
              }
            ]
          },
          "Update": {
            "doc": "Specifies if the screen should be updated after the callback function has returned",
            "external": "azul_core::callbacks::Update",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "DoNothing": {
                  "doc": "The screen does not need to redraw after the callback has been called"
                },
                "RefreshDom": {
                  "doc": "After the callback is called, the screen needs to redraw (layout() function being called again)"
                },
                "RefreshDomAllWindows": {
                  "doc": "The layout has to be re-calculated for all windows"
                }
              }
            ]
          },
          "LayoutCallbackInfo": {
            "external": "azul_core::callbacks::LayoutCallbackInfo",
            "struct_fields": [
              {
                "window_size": {
                  "type": "WindowSize",
                  "doc": "Window size (so that apps can return a different UI depending on the window size - mobile / desktop view). Should be later removed in favor of \"resize\" handlers and @media queries."
                },
                "theme": {
                  "type": "WindowTheme",
                  "doc": "Registers whether the UI is dependent on the window theme"
                },
                "image_cache": {
                  "type": "*const ImageCache",
                  "doc": "Allows the layout() function to reference image IDs"
                },
                "gl_context": {
                  "type": "*const OptionGlContextPtr",
                  "doc": "OpenGL context so that the layout() function can render textures"
                },
                "system_fonts": {
                  "type": "*const FcFontCache",
                  "doc": "Reference to the system font cache"
                },
                "_abi_ref": {
                  "type": "*const c_void",
                  "doc": "Extension for future ABI stability (referenced data)"
                },
                "_abi_mut": {
                  "type": "*mut c_void",
                  "doc": "Extension for future ABI stability (mutable data)"
                }
              }
            ],
            "functions": {
              "get_gl_context": {
                "doc": "Returns a copy of the OpenGL context",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionGlContextPtr"
                },
                "fn_body": "layoutcallbackinfo.get_gl_context()"
              },
              "get_system_fonts": {
                "doc": "Returns all system-native fonts with their respective file paths as values",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "StringPairVec"
                },
                "fn_body": "layoutcallbackinfo.get_system_fonts().into()"
              },
              "get_image": {
                "doc": "Returns an `ImageRef` referenced by a CSS ID",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "AzString"
                  }
                ],
                "returns": {
                  "type": "OptionImageRef"
                },
                "fn_body": "layoutcallbackinfo.get_image(&id).into()"
              }
            }
          },
          "DomId": {
            "doc": "ID of a DOM - one window can contain multiple, nested DOMs (such as iframes)",
            "external": "azul_core::styled_dom::DomId",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "usize"
                }
              }
            ]
          },
          "DomNodeId": {
            "doc": "Combination of node ID + DOM ID, both together can identify a node",
            "external": "azul_core::callbacks::DomNodeId",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "dom": {
                  "type": "DomId"
                },
                "node": {
                  "type": "NodeHierarchyItemId"
                }
              }
            ]
          },
          "PositionInfo": {
            "external": "azul_core::ui_solver::PositionInfo",
            "enum_fields": [
              {
                "Static": {
                  "type": "PositionInfoInner"
                },
                "Fixed": {
                  "type": "PositionInfoInner"
                },
                "Absolute": {
                  "type": "PositionInfoInner"
                },
                "Relative": {
                  "type": "PositionInfoInner"
                }
              }
            ],
            "functions": {
              "is_positioned": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "positioninfo.is_positioned()"
              },
              "get_static_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "LogicalPosition"
                },
                "fn_body": "positioninfo.get_static_offset()"
              },
              "get_relative_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "LogicalPosition"
                },
                "fn_body": "positioninfo.get_relative_offset()"
              }
            }
          },
          "PositionInfoInner": {
            "external": "azul_core::ui_solver::PositionInfoInner",
            "struct_fields": [
              {
                "x_offset": {
                  "type": "f32"
                },
                "y_offset": {
                  "type": "f32"
                },
                "static_x_offset": {
                  "type": "f32"
                },
                "static_y_offset": {
                  "type": "f32"
                }
              }
            ]
          },
          "HidpiAdjustedBounds": {
            "external": "azul_core::callbacks::HidpiAdjustedBounds",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "logical_size": {
                  "type": "LogicalSize"
                },
                "hidpi_factor": {
                  "type": "f32"
                }
              }
            ],
            "functions": {
              "get_logical_size": {
                "doc": "Returns the size of the bounds in logical units",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "LogicalSize"
                },
                "fn_body": "hidpiadjustedbounds.get_logical_size()"
              },
              "get_physical_size": {
                "doc": "Returns the size of the bounds in physical units",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "PhysicalSizeU32"
                },
                "fn_body": "hidpiadjustedbounds.get_physical_size()"
              },
              "get_hidpi_factor": {
                "doc": "Returns the hidpi factor of the bounds",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "hidpiadjustedbounds.get_hidpi_factor()"
              }
            }
          },
          "InlineText": {
            "external": "azul_core::callbacks::InlineText",
            "struct_fields": [
              {
                "lines": {
                  "type": "InlineLineVec",
                  "doc": "List of lines in this text, relative to the text origin"
                }
              },
              {
                "content_size": {
                  "type": "LogicalSize",
                  "doc": "Content size of all text lines"
                }
              },
              {
                "font_size_px": {
                  "type": "f32",
                  "doc": "Font size in pixels used for layouting this text"
                }
              },
              {
                "last_word_index": {
                  "type": "usize",
                  "doc": "Index of the last `Word` in this text (- note that a `Word` can also be a `Space`, `Return` or `Tab`)."
                }
              },
              {
                "baseline_descender_px": {
                  "type": "f32",
                  "doc": "**NEGATIVE** descender of the text baseline (distance from baseline of the text to the bottom of the line)"
                }
              }
            ],
            "functions": {
              "hit_test": {
                "doc": "Hit-tests the inline text, returns detailed information about which glyph / word / line, etc. the position (usually the mouse cursor) is currently over. Result may be empty (no hits) or contain more than one result (cursor is hovering over multiple overlapping glyphs at once).",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "position": "LogicalPosition"
                  }
                ],
                "returns": {
                  "type": "InlineTextHitVec"
                },
                "fn_body": "inlinetext.hit_test(position).into()"
              }
            }
          },
          "InlineLine": {
            "external": "azul_core::callbacks::InlineLine",
            "struct_fields": [
              {
                "words": {
                  "type": "InlineWordVec",
                  "doc": "List of words in this line (includes tabs, return and spaces)"
                }
              },
              {
                "bounds": {
                  "type": "LogicalRect",
                  "doc": "Size and origin of the line, relative to the inline text origin (top left corner)"
                }
              }
            ]
          },
          "InlineWord": {
            "external": "azul_core::callbacks::InlineWord",
            "enum_fields": [
              {
                "Tab": {
                  "doc": "Tab character, width depends on `TextLayoutOptions.tab_width`"
                }
              },
              {
                "Return": {
                  "doc": "Return character"
                }
              },
              {
                "Space": {
                  "doc": "Space character"
                }
              },
              {
                "Word": {
                  "type": "InlineTextContents",
                  "doc": "Actual word containing renderable glyphs"
                }
              }
            ]
          },
          "InlineTextContents": {
            "external": "azul_core::callbacks::InlineTextContents",
            "struct_fields": [
              {
                "glyphs": {
                  "type": "InlineGlyphVec",
                  "doc": "List of glyphs in this word"
                }
              },
              {
                "bounds": {
                  "type": "LogicalRect",
                  "doc": "origin and size of the word relative to the line origin (top left corner of the line)"
                }
              }
            ]
          },
          "InlineGlyph": {
            "external": "azul_core::callbacks::InlineGlyph",
            "struct_fields": [
              {
                "bounds": {
                  "type": "LogicalRect"
                },
                "unicode_codepoint": {
                  "type": "OptionChar"
                },
                "glyph_index": {
                  "type": "u32"
                }
              }
            ]
          },
          "InlineTextHit": {
            "external": "azul_core::callbacks::InlineTextHit",
            "struct_fields": [
              {
                "unicode_codepoint": {
                  "type": "OptionChar",
                  "doc": "`Option<char>`, if the glyph was a character (as opposed to a diacritic mark), contains the unicode codepoint of the character"
                }
              },
              {
                "hit_relative_to_inline_text": {
                  "type": "LogicalPosition",
                  "doc": "Position of the hit relative to the top left corner of the inline text"
                }
              },
              {
                "hit_relative_to_line": {
                  "type": "LogicalPosition",
                  "doc": "Position of the hit relative to the top left corner of the line"
                }
              },
              {
                "hit_relative_to_text_content": {
                  "type": "LogicalPosition",
                  "doc": "Position of the hit relative to the top left corner of the word"
                }
              },
              {
                "hit_relative_to_glyph": {
                  "type": "LogicalPosition",
                  "doc": "Position of the hit relative to the top left corner of the glyph"
                }
              },
              {
                "line_index_relative_to_text": {
                  "type": "usize",
                  "doc": "Index of the line in the text"
                }
              },
              {
                "word_index_relative_to_text": {
                  "type": "usize",
                  "doc": "Index of the word in the text (note: words include `Space`, `Tab` and `Return`)"
                }
              },
              {
                "text_content_index_relative_to_text": {
                  "type": "usize",
                  "doc": "Index of the text content in the text"
                }
              },
              {
                "glyph_index_relative_to_text": {
                  "type": "usize",
                  "doc": "Index of the hit glyph in the text (note: one glyph is not one character, glyphs include diacritic marks)"
                }
              },
              {
                "char_index_relative_to_text": {
                  "type": "usize",
                  "doc": "Index of the hit character (unicode codepoint) in the text."
                }
              },
              {
                "word_index_relative_to_line": {
                  "type": "usize",
                  "doc": "Index of the hit word (note: includes `Tab`, `Space`, `Return`) in the hit line"
                }
              },
              {
                "text_content_index_relative_to_line": {
                  "type": "usize",
                  "doc": "Index of the hit text content (\"word\") in the hit line"
                }
              },
              {
                "glyph_index_relative_to_line": {
                  "type": "usize",
                  "doc": "Index of the hit glyph in the line (includes diacritic marks)"
                }
              },
              {
                "char_index_relative_to_line": {
                  "type": "usize",
                  "doc": "Index of the hit character (unicode codepoint) in the line"
                }
              },
              {
                "glyph_index_relative_to_word": {
                  "type": "usize",
                  "doc": "Index of the hit glyph in the word (includes diacritic marks)"
                }
              },
              {
                "char_index_relative_to_word": {
                  "type": "usize",
                  "doc": "Index of the hit character (unicode codepoint) in the word"
                }
              }
            ]
          },
          "FocusTarget": {
            "doc": "Defines the keyboard input focus target",
            "external": "azul_core::callbacks::FocusTarget",
            "enum_fields": [
              {
                "Id": {
                  "type": "DomNodeId"
                },
                "Path": {
                  "type": "FocusTargetPath"
                },
                "Previous": {},
                "Next": {},
                "First": {},
                "Last": {},
                "NoFocus": {}
              }
            ]
          },
          "FocusTargetPath": {
            "doc": "CSS path to set the keyboard input focus",
            "external": "azul_core::callbacks::FocusTargetPath",
            "struct_fields": [
              {
                "dom": {
                  "type": "DomId"
                },
                "css_path": {
                  "type": "CssPath"
                }
              }
            ]
          },
          "ScriptType": {
            "external": "azul_core::ui_solver::ScriptType",
            "enum_fields": [
              {
                "Mixed": {
                  "doc": "Auto-determine script type based on text content"
                }
              },
              {
                "LTR": {
                  "doc": "Force left-to-right layout"
                }
              },
              {
                "RTL": {
                  "doc": "Force right-to-left layout"
                }
              }
            ]
          },
          "ResolvedTextLayoutOptions": {
            "external": "azul_core::ui_solver::ResolvedTextLayoutOptions",
            "struct_fields": [
              {
                "font_size_px": {
                  "type": "f32",
                  "doc": "Font size (in pixels) that this text has been laid out with"
                }
              },
              {
                "line_height": {
                  "type": "OptionF32",
                  "doc": "Multiplier for the line height, default to 1.0"
                }
              },
              {
                "letter_spacing": {
                  "type": "OptionF32",
                  "doc": "Additional spacing between glyphs (in pixels)"
                }
              },
              {
                "word_spacing": {
                  "type": "OptionF32",
                  "doc": "Additional spacing between words (in pixels)"
                }
              },
              {
                "tab_width": {
                  "type": "OptionF32",
                  "doc": "How many spaces should a tab character emulate (multiplying value, i.e. `4.0` = one tab = 4 spaces)"
                }
              },
              {
                "max_horizontal_width": {
                  "type": "OptionF32",
                  "doc": " Maximum width of the text (in pixels) - if the text is set to `overflow:visible`, set this to None"
                }
              },
              {
                "leading": {
                  "type": "OptionF32",
                  "doc": "How many pixels of leading does the first line have? Note that this added onto to the holes, so for effects like `:first-letter`, use a hole instead of a leading"
                }
              },
              {
                "holes": {
                  "type": "LogicalRectVec",
                  "doc": "This is more important for inline text layout where items can punch 'holes' into the text flow, for example text that flows around an image"
                }
              },
              {
                "max_vertical_height": {
                  "type": "OptionF32",
                  "doc": "Stop layouting text after y coordinate is reached, useful for limiting long text blocks"
                }
              },
              {
                "can_break": {
                  "type": "bool",
                  "doc": "Whether text can break lines (white-space: wrap | pre | nowrap), default: true (wrap)"
                }
              },
              {
                "can_hyphenate": {
                  "type": "bool",
                  "doc": "Whether text is hyphenated (hyphens: auto), default: true"
                }
              },
              {
                "hyphenation_character": {
                  "type": "OptionChar",
                  "doc": "Custom hyphenation character, necessary to calculate breaking in hyphenated texts, default '-'"
                }
              },
              {
                "is_rtl": {
                  "type": "ScriptType",
                  "doc": "Force RTL or LTR (Mixed = auto-detect)"
                }
              },
              {
                "text_justify": {
                  "type": "OptionStyleTextAlign",
                  "doc": "Text justification mode (none = aligned depending on LTR / RTL)"
                }
              }
            ],
            "constructors": {
              "default": {
                "fn_args": [],
                "fn_body": "AzResolvedTextLayoutOptions::default()"
              }
            }
          },
          "Animation": {
            "doc": "Animation struct to start a new animation",
            "external": "azul_core::callbacks::Animation",
            "struct_fields": [
              {
                "from": {
                  "type": "CssProperty"
                },
                "to": {
                  "type": "CssProperty"
                },
                "duration": {
                  "type": "AzDuration"
                },
                "repeat": {
                  "type": "AnimationRepeat"
                },
                "repeat_times": {
                  "type": "AnimationRepeatCount"
                },
                "easing": {
                  "type": "AnimationInterpolationFunction"
                },
                "relayout_on_finish": {
                  "type": "bool"
                }
              }
            ]
          },
          "AnimationRepeat": {
            "doc": "How should an animation repeat (loop, ping-pong, etc.)",
            "external": "azul_core::callbacks::AnimationRepeat",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "NoRepeat": {},
                "Loop": {},
                "PingPong": {}
              }
            ]
          },
          "AnimationRepeatCount": {
            "doc": "How many times should an animation repeat",
            "external": "azul_core::callbacks::AnimationRepeatCount",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Times": {
                  "type": "usize"
                },
                "Infinite": {}
              }
            ]
          },
          "NodeHierarchyItemId": {
            "doc": "Index of a Node in the internal `NodeDataContainer`",
            "external": "azul_core::styled_dom::NodeHierarchyItemId",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "usize"
                }
              }
            ]
          },
          "IFrameCallback": {
            "doc": "C-ABI wrapper over an `IFrameCallbackType`",
            "external": "azul_core::callbacks::IFrameCallback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "IFrameCallbackType"
                }
              }
            ]
          },
          "IFrameCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut IFrameCallbackInfo) -> IFrameCallbackReturn",
            "external": "azul_core::callbacks::IFrameCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": "An `IFrameCallback` can have some data passed along from the parent DOM - usually this would be struct containing the widget state"
                },
                {
                  "type": "IFrameCallbackInfo",
                  "ref": "refmut",
                  "doc": "Similar to `LayoutCallbackInfo`, but carries an additional `bounds` field which has information about the size / current scroll position of the IFrame."
                }
              ],
              "returns": {
                "type": "IFrameCallbackReturn",
                "doc": "Contains the returned `StyledDom` as well as information about the initial scroll position of the new DOM plus scrollbar / overflow information"
              }
            }
          },
          "IFrameCallbackInfo": {
            "external": "azul_core::callbacks::IFrameCallbackInfo",
            "struct_fields": [
              {
                "system_fonts": {
                  "type": "*const FcFontCache"
                },
                "image_cache": {
                  "type": "*const ImageCache"
                },
                "window_theme": {
                  "type": "WindowTheme"
                },
                "bounds": {
                  "type": "HidpiAdjustedBounds"
                },
                "scroll_size": {
                  "type": "LogicalSize"
                },
                "scroll_offset": {
                  "type": "LogicalPosition"
                },
                "virtual_scroll_size": {
                  "type": "LogicalSize"
                },
                "virtual_scroll_offset": {
                  "type": "LogicalPosition"
                },
                "_abi_ref": {
                  "type": "*const c_void",
                  "doc": "Extension for future ABI stability (referenced data)"
                },
                "_abi_mut": {
                  "type": "*mut c_void",
                  "doc": "Extension for future ABI stability (mutable data)"
                }
              }
            ]
          },
          "IFrameCallbackReturn": {
            "doc": "<img src=\"../images/scrollbounds.png\"/>",
            "external": "azul_core::callbacks::IFrameCallbackReturn",
            "struct_fields": [
              {
                "dom": {
                  "type": "StyledDom"
                },
                "scroll_size": {
                  "type": "LogicalSize"
                },
                "scroll_offset": {
                  "type": "LogicalPosition"
                },
                "virtual_scroll_size": {
                  "type": "LogicalSize"
                },
                "virtual_scroll_offset": {
                  "type": "LogicalPosition"
                }
              }
            ]
          },
          "RenderImageCallback": {
            "doc": "Callback that returns a rendered OpenGL texture **IMPORTANT**: In azul-core, this is stored as `CoreRenderImageCallback` with a `cb: usize` field. When creating callbacks in the data model, function pointers are cast to usize. This type is used in azul-layout where we can safely work with the actual function pointer type.",
            "external": "azul_layout::callbacks::RenderImageCallback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "RenderImageCallbackType"
                }
              }
            ]
          },
          "RenderImageCallbackType": {
            "doc": "Callback type that renders an OpenGL texture **IMPORTANT**: In azul-core, this is stored as `CoreRenderImageCallbackType = usize` to avoid circular dependencies. The actual function pointer is cast to usize for storage in the data model, then unsafely cast back to this type when invoked.",
            "external": "azul_layout::callbacks::RenderImageCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "RenderImageCallbackInfo",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": {
                "type": "ImageRef"
              }
            }
          },
          "RenderImageCallbackInfo": {
            "doc": "Information passed to image rendering callbacks",
            "external": "azul_layout::callbacks::RenderImageCallbackInfo",
            "struct_fields": [
              {
                "callback_node_id": {
                  "type": "DomNodeId",
                  "doc": "The ID of the DOM node that the ImageCallback was attached to"
                },
                "bounds": {
                  "type": "HidpiAdjustedBounds",
                  "doc": "Bounds of the laid-out node"
                },
                "gl_context": {
                  "type": "*const c_void",
                  "doc": "Optional OpenGL context pointer"
                },
                "image_cache": {
                  "type": "*const c_void",
                  "doc": "Image cache for looking up images"
                },
                "system_fonts": {
                  "type": "*const c_void",
                  "doc": "System font cache"
                },
                "_abi_ref": {
                  "type": "*const c_void",
                  "doc": "Extension for future ABI stability (referenced data)"
                },
                "_abi_mut": {
                  "type": "*mut c_void",
                  "doc": "Extension for future ABI stability (mutable data)"
                }
              }
            ],
            "functions": {
              "get_gl_context": {
                "doc": "Returns a copy of the internal `Gl`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionGlContextPtr"
                },
                "fn_body": "renderimagecallbackinfo.get_gl_context().into()"
              },
              "get_bounds": {
                "doc": "Returns a copy of the internal `HidpiAdjustedBounds`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "HidpiAdjustedBounds"
                },
                "fn_body": "renderimagecallbackinfo.get_bounds()"
              },
              "get_callback_node_id": {
                "doc": "Returns the `DomNodeId` that this callback was called on",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "DomNodeId"
                },
                "fn_body": "renderimagecallbackinfo.get_callback_node_id()"
              },
              "get_inline_text": {
                "doc": "If the node is a `Text` node, returns the layouted inline glyphs",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionInlineText"
                },
                "fn_body": "renderimagecallbackinfo.get_inline_text(node_id).into()"
              },
              "get_index_in_parent": {
                "doc": "Returns the index of the node relative to the parent node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "usize"
                },
                "fn_body": "let mut t = 0; let mut n = node_id; while let Some(prev) = renderimagecallbackinfo.get_previous_sibling(n) { n = prev; t += 1; } t"
              },
              "get_parent": {
                "doc": "Returns the parent `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "renderimagecallbackinfo.get_parent(node_id).into()"
              },
              "get_previous_sibling": {
                "doc": "Returns the previous siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "renderimagecallbackinfo.get_previous_sibling(node_id).into()"
              },
              "get_next_sibling": {
                "doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "renderimagecallbackinfo.get_next_sibling(node_id).into()"
              },
              "get_first_child": {
                "doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "renderimagecallbackinfo.get_first_child(node_id).into()"
              },
              "get_last_child": {
                "doc": "Returns the next siblings `DomNodeId` of the given `DomNodeId`. Returns `None` on an invalid NodeId.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_id": "DomNodeId"
                  }
                ],
                "returns": {
                  "type": "OptionDomNodeId"
                },
                "fn_body": "renderimagecallbackinfo.get_last_child(node_id).into()"
              }
            }
          },
          "TimerCallback": {
            "external": "azul_core::callbacks::TimerCallback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "TimerCallbackType"
                }
              }
            ]
          },
          "TimerCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "TimerCallbackInfo",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": {
                "type": "TimerCallbackReturn"
              }
            }
          },
          "TimerCallbackInfo": {
            "external": "azul_core::callbacks::TimerCallbackInfo",
            "struct_fields": [
              {
                "callback_info": {
                  "type": "CallbackInfo"
                },
                "node_id": {
                  "type": "OptionDomNodeId"
                },
                "frame_start": {
                  "type": "Instant"
                },
                "call_count": {
                  "type": "usize"
                },
                "is_about_to_finish": {
                  "type": "bool"
                },
                "_abi_ref": {
                  "type": "*const c_void"
                },
                "_abi_mut": {
                  "type": "*mut c_void"
                }
              }
            ]
          },
          "TimerCallbackReturn": {
            "external": "azul_core::callbacks::TimerCallbackReturn",
            "struct_fields": [
              {
                "should_update": {
                  "type": "Update"
                },
                "should_terminate": {
                  "type": "TerminateTimer"
                }
              }
            ]
          },
          "WriteBackCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "WriteBackCallback": {
            "external": "azul_core::callbacks::WriteBackCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "WriteBackCallbackType"
                }
              }
            ]
          },
          "ThreadCallback": {
            "external": "azul_core::callbacks::ThreadCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ThreadCallbackType"
                }
              }
            ]
          },
          "ThreadCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "ThreadSender",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "ThreadReceiver",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "RefAnyDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "RefCount": {
            "external": "azul_core::callbacks::RefCount",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const RefCountInner"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "functions": {
              "can_be_shared": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "refcount.can_be_shared()"
              },
              "can_be_shared_mut": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "refcount.can_be_shared_mut()"
              },
              "increase_ref": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "refcount.increase_ref()"
              },
              "decrease_ref": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "refcount.decrease_ref()"
              },
              "increase_refmut": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "refcount.increase_refmut()"
              },
              "decrease_refmut": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "refcount.decrease_refmut()"
              }
            }
          },
          "RefAny": {
            "doc": "RefAny is a reference-counted, opaque pointer, which stores a reference to a struct. `RefAny` can be up- and downcasted (this usually done via generics and can't be expressed in the Rust API)",
            "external": "azul_core::callbacks::RefAny",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "_internal_ptr": {
                  "type": "*const c_void",
                  "doc": "void* to a boxed struct or enum of type \"T\". RefCount stores the RTTI for this opaque type (can be downcasted by the user)"
                },
                "sharing_info": {
                  "type": "RefCount",
                  "doc": "All the metadata information is set on the refcount, so that the metadata has to only be created once per object, not once per copy"
                },
                "instance_id": {
                  "type": "u64",
                  "doc": "Instance of this copy (root = 0th copy). Necessary to distinguish between the original copy and all other clones"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new_c": {
                "fn_args": [
                  {
                    "ptr": "*const c_void"
                  },
                  {
                    "len": "usize"
                  },
                  {
                    "align": "usize"
                  },
                  {
                    "type_id": "u64"
                  },
                  {
                    "type_name": "AzString"
                  },
                  {
                    "destructor": "RefAnyDestructorType"
                  }
                ],
                "fn_body": "AzRefAny::new_c(ptr, len, align, type_id, type_name, destructor)"
              }
            },
            "functions": {
              "get_type_id": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u64"
                },
                "fn_body": "refany.get_type_id()"
              },
              "get_type_name": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "refany.get_type_name()"
              }
            }
          },
          "AnimationInterpolationFunction": {
            "doc": "Easing function of the animation (ease-in, ease-out, ease-in-out, custom)",
            "external": "azul_css::AnimationInterpolationFunction",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Ease": {}
              },
              {
                "Linear": {}
              },
              {
                "EaseIn": {}
              },
              {
                "EaseOut": {}
              },
              {
                "EaseInOut": {}
              },
              {
                "CubicBezier": {
                  "type": "SvgCubicCurve"
                }
              }
            ]
          }
        }
      },
      "dom": {
        "doc": "`Dom` construction and configuration",
        "classes": {
          "Dom": {
            "external": "azul_core::dom::Dom",
            "struct_fields": [
              {
                "root": {
                  "type": "NodeData"
                },
                "children": {
                  "type": "DomVec"
                },
                "estimated_total_children": {
                  "type": "usize"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "node_type": "NodeType"
                  }
                ],
                "fn_body": "AzDom::new(node_type)"
              },
              "body": {
                "fn_args": [],
                "fn_body": "AzDom::body()"
              },
              "div": {
                "fn_args": [],
                "fn_body": "AzDom::div()"
              },
              "br": {
                "fn_args": [],
                "fn_body": "AzDom::br()"
              },
              "text": {
                "fn_args": [
                  {
                    "string": "AzString"
                  }
                ],
                "fn_body": "AzDom::text(string)"
              },
              "image": {
                "fn_args": [
                  {
                    "image": "ImageRef"
                  }
                ],
                "fn_body": "AzDom::image(image)"
              },
              "iframe": {
                "fn_args": [
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "IFrameCallbackType"
                  }
                ],
                "fn_body": "AzDom::iframe(data, callback)"
              }
            },
            "functions": {
              "set_node_type": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_type": "NodeType"
                  }
                ],
                "fn_body": "dom.root.set_node_type(node_type)"
              },
              "with_node_type": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_type": "NodeType"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_node_type(node_type); dom"
              },
              "set_dataset": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dataset": "RefAny"
                  }
                ],
                "fn_body": "dom.root.set_dataset(Some(dataset).into())"
              },
              "with_dataset": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dataset": "RefAny"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_dataset(Some(dataset).into()); dom"
              },
              "set_ids_and_classes": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "ids_and_classes": "IdOrClassVec"
                  }
                ],
                "fn_body": "dom.root.set_ids_and_classes(ids_and_classes)"
              },
              "with_ids_and_classes": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "ids_and_classes": "IdOrClassVec"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_ids_and_classes(ids_and_classes); dom"
              },
              "set_callbacks": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "callbacks": "CallbackDataVec"
                  }
                ],
                "fn_body": "dom.root.set_callbacks(callbacks)"
              },
              "with_callbacks": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "callbacks": "CallbackDataVec"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_callbacks(callbacks); dom"
              },
              "set_inline_css_props": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "css_properties": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "dom.root.set_inline_css_props(css_properties)"
              },
              "with_inline_css_props": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "css_properties": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_inline_css_props(css_properties); dom"
              },
              "add_callback": {
                "doc": "Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a default `Dom` in order to prevent accidental copies.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "event": "EventFilter"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "fn_body": "dom.root.add_callback(event, data, callback)"
              },
              "with_callback": {
                "doc": "Same as add_child, but as a builder method.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "event": "EventFilter"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_callback(event, data, callback); dom"
              },
              "add_child": {
                "doc": "Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a default `Dom` in order to prevent accidental copies.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "child": "Dom"
                  }
                ],
                "fn_body": "dom.add_child(child)"
              },
              "with_child": {
                "doc": "Same as add_child, but as a builder method.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "child": "Dom"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "dom.with_child(child)"
              },
              "set_children": {
                "doc": "Adds a child node to this DOM (potentially heap-allocates in Rust code). Swaps `self` with a default `Dom` in order to prevent accidental copies.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "children": "DomVec"
                  }
                ],
                "fn_body": "dom.set_children(children)"
              },
              "with_children": {
                "doc": "Same as set_children, but as a builder method.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "children": "DomVec"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.set_children(children); dom"
              },
              "add_id": {
                "doc": "Adds an CSS ID to the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "id": "AzString"
                  }
                ],
                "fn_body": "dom.root.add_id(id)"
              },
              "with_id": {
                "doc": "Same as add_id, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "id": "AzString"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_id(id); dom"
              },
              "add_class": {
                "doc": "Adds a CSS class to the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "class": "AzString"
                  }
                ],
                "fn_body": "dom.root.add_class(class)"
              },
              "with_class": {
                "doc": "Same as add_class, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "class": "AzString"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_class(class); dom"
              },
              "add_css_property": {
                "doc": "Adds an inline (normal) CSS property to the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "fn_body": "dom.root.add_normal_css_property(prop)"
              },
              "with_css_property": {
                "doc": "Same as add_class, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_normal_css_property(prop); dom"
              },
              "add_hover_css_property": {
                "doc": "Adds an inline (hover) CSS property to the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "fn_body": "dom.root.add_hover_css_property(prop)"
              },
              "with_hover_css_property": {
                "doc": "Same as add_class, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_hover_css_property(prop); dom"
              },
              "add_active_css_property": {
                "doc": "Adds an inline (hover) CSS property to the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "fn_body": "dom.root.add_active_css_property(prop)"
              },
              "with_active_css_property": {
                "doc": "Same as add_class, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_active_css_property(prop); dom"
              },
              "add_focus_css_property": {
                "doc": "Adds an inline (hover) CSS property to the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "fn_body": "dom.root.add_focus_css_property(prop)"
              },
              "with_focus_css_property": {
                "doc": "Same as add_class, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "prop": "CssProperty"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.add_focus_css_property(prop); dom"
              },
              "set_inline_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "AzNodeData_setInlineStyle(&mut dom.root, style);"
              },
              "with_inline_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); AzNodeData_setInlineStyle(&mut dom.root, style); dom"
              },
              "set_inline_hover_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "AzNodeData_setInlineHoverStyle(&mut dom.root, style);"
              },
              "with_inline_hover_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); AzNodeData_setInlineHoverStyle(&mut dom.root, style); dom"
              },
              "set_inline_active_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "AzNodeData_setInlineActiveStyle(&mut dom.root, style);"
              },
              "with_inline_active_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); AzNodeData_setInlineActiveStyle(&mut dom.root, style); dom"
              },
              "set_inline_focus_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "AzNodeData_setInlineFocusStyle(&mut dom.root, style);"
              },
              "with_inline_focus_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); AzNodeData_setInlineFocusStyle(&mut dom.root, style); dom"
              },
              "set_clip_mask": {
                "doc": "Sets the clip mask for the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "clip_mask": "ImageMask"
                  }
                ],
                "fn_body": "dom.root.set_clip_mask(clip_mask)"
              },
              "with_clip_mask": {
                "doc": "Same as set_clip_mask, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "clip_mask": "ImageMask"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_clip_mask(clip_mask); dom"
              },
              "set_tab_index": {
                "doc": "Sets the tab index for the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "tab_index": "TabIndex"
                  }
                ],
                "fn_body": "dom.root.set_tab_index(tab_index)"
              },
              "with_tab_index": {
                "doc": "Same as set_tab_index, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "tab_index": "TabIndex"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_tab_index(tab_index); dom"
              },
              "set_accessibility_info": {
                "doc": "Sets accessibility attributes for the DOM root node.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "accessibility_info": "AccessibilityInfo"
                  }
                ],
                "fn_body": "dom.root.set_accessibility_info(accessibility_info)"
              },
              "with_accessibility_info": {
                "doc": "Same as set_accessibility_info, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "accessibility_info": "AccessibilityInfo"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_accessibility_info(accessibility_info); dom"
              },
              "set_menu_bar": {
                "doc": "Sets the menu bar for the DOM root node. See `NodeData::set_menu_bar` for more information.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu_bar": "Menu"
                  }
                ],
                "fn_body": "dom.root.set_menu_bar(menu_bar)"
              },
              "with_menu_bar": {
                "doc": "Same as set_accessibility_info, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu_bar": "Menu"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_menu_bar(menu_bar); dom"
              },
              "set_context_menu": {
                "doc": "Sets the context menu for the DOM root node. See `NodeData::set_context_menu` for more information.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "context_menu": "Menu"
                  }
                ],
                "fn_body": "dom.root.set_context_menu(context_menu)"
              },
              "with_context_menu": {
                "doc": "Same as set_context_menu, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "context_menu": "Menu"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "let mut dom = dom.swap_with_default(); dom.root.set_context_menu(context_menu); dom"
              },
              "hash": {
                "doc": "Calculates the hash of this node (note: in order to be truly unique, you also have to hash the DOM and Node ID).",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u64"
                },
                "fn_body": "dom.root.calculate_node_data_hash().0"
              },
              "node_count": {
                "doc": "Returns the number of nodes in the DOM, including all child DOM trees. Result is equal to `self.total_children + 1` (count of all child trees + the root node)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "usize"
                },
                "fn_body": "dom.node_count()"
              },
              "get_html_string": {
                "doc": "Returns a HTML string that you can write to a file in order to debug the UI structure and debug potential cascading issues",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "dom.style(AzCss::empty().into()).get_html_string(\"\", \"\", false).into()"
              },
              "get_html_string_test": {
                "doc": "Returns a HTML for unit testing",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "dom.style(AzCss::empty().into()).get_html_string(\"\", \"\", true).into()"
              },
              "style": {
                "doc": "Same as `StyledDom::new(dom, css)`: NOTE - replaces self with an empty DOM, in order to prevent cloning the DOM entirely",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "css": "Css"
                  }
                ],
                "returns": {
                  "type": "StyledDom"
                },
                "fn_body": "dom.style(css.into())"
              }
            }
          },
          "IFrameNode": {
            "external": "azul_core::dom::IFrameNode",
            "struct_fields": [
              {
                "callback": {
                  "type": "IFrameCallback"
                },
                "data": {
                  "type": "RefAny"
                }
              }
            ]
          },
          "CallbackData": {
            "external": "azul_core::dom::CallbackData",
            "struct_fields": [
              {
                "event": {
                  "type": "EventFilter"
                }
              },
              {
                "callback": {
                  "type": "Callback"
                }
              },
              {
                "data": {
                  "type": "RefAny"
                }
              }
            ]
          },
          "NodeData": {
            "doc": "Represents one single DOM node (node type, classes, ids and callbacks are stored here)",
            "external": "azul_core::dom::NodeData",
            "struct_fields": [
              {
                "node_type": {
                  "type": "NodeType",
                  "doc": "`div`"
                },
                "dataset": {
                  "type": "OptionRefAny",
                  "doc": "data-* attributes for this node, useful to store UI-related data on the node itself"
                },
                "ids_and_classes": {
                  "type": "IdOrClassVec",
                  "doc": "Stores all ids and classes as one vec - size optimization since most nodes don't have any classes or IDs"
                },
                "callbacks": {
                  "type": "CoreCallbackDataVec",
                  "doc": "Callbacks attached to this node: `On::MouseUp` -> `Callback(my_button_click_handler)`"
                },
                "inline_css_props": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Stores the inline CSS properties, same as in HTML"
                },
                "tab_index": {
                  "type": "OptionTabIndex",
                  "doc": "Tab index (commonly used property)"
                },
                "extra": {
                  "type": "*const c_void",
                  "doc": "Stores \"extra\", not commonly used data of the node: accessibility, clip-mask, tab-index, etc. SHOULD NOT EXPOSED IN THE API - necessary to retroactively add functionality to the node without breaking the ABI"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates an new, empty `NodeData` struct",
                "fn_args": [
                  {
                    "node_type": "NodeType"
                  }
                ],
                "fn_body": "AzNodeData::new(node_type)"
              },
              "body": {
                "fn_args": [],
                "fn_body": "AzNodeData::body()"
              },
              "div": {
                "fn_args": [],
                "fn_body": "AzNodeData::div()"
              },
              "br": {
                "fn_args": [],
                "fn_body": "AzNodeData::br()"
              },
              "text": {
                "fn_args": [
                  {
                    "string": "AzString"
                  }
                ],
                "fn_body": "AzNodeData::text(string)"
              },
              "image": {
                "fn_args": [
                  {
                    "image": "ImageRef"
                  }
                ],
                "fn_body": "AzNodeData::image(image)"
              },
              "iframe": {
                "fn_args": [
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "IFrameCallbackType"
                  }
                ],
                "fn_body": "AzNodeData::iframe(data, callback)"
              }
            },
            "functions": {
              "set_node_type": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_type": "NodeType"
                  }
                ],
                "fn_body": "nodedata.set_node_type(node_type)"
              },
              "with_node_type": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node_type": "NodeType"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); nodedata.set_node_type(node_type); nodedata"
              },
              "set_dataset": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dataset": "RefAny"
                  }
                ],
                "fn_body": "nodedata.set_dataset(Some(dataset).into())"
              },
              "with_dataset": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dataset": "RefAny"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); nodedata.set_dataset(Some(dataset).into()); nodedata"
              },
              "set_ids_and_classes": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "ids_and_classes": "IdOrClassVec"
                  }
                ],
                "fn_body": "nodedata.set_ids_and_classes(ids_and_classes)"
              },
              "with_ids_and_classes": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "ids_and_classes": "IdOrClassVec"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); nodedata.set_ids_and_classes(ids_and_classes); nodedata"
              },
              "add_callback": {
                "doc": "Adds a callback this DOM (potentially heap-allocates in Rust code)",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "event": "EventFilter"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "fn_body": "nodedata.add_callback(event, data, callback)"
              },
              "with_callback": {
                "doc": "Same as add_child, but as a builder method.",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "event": "EventFilter"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); nodedata.add_callback(event, data, callback); nodedata"
              },
              "set_callbacks": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "callbacks": "CallbackDataVec"
                  }
                ],
                "fn_body": "nodedata.set_callbacks(callbacks)"
              },
              "with_callbacks": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "callbacks": "CallbackDataVec"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); nodedata.set_callbacks(callbacks); nodedata"
              },
              "set_inline_css_props": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "css_properties": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "nodedata.set_inline_css_props(css_properties)"
              },
              "with_inline_css_props": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "css_properties": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); nodedata.set_inline_css_props(css_properties); nodedata"
              },
              "set_inline_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_normal(style.as_str())))"
              },
              "with_inline_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineStyle(&mut nodedata, style); nodedata"
              },
              "set_inline_hover_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_hover(style.as_str())))"
              },
              "with_inline_hover_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineHoverStyle(&mut nodedata, style); nodedata"
              },
              "set_inline_active_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_active(style.as_str())))"
              },
              "with_inline_active_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineActiveStyle(&mut nodedata, style); nodedata"
              },
              "set_inline_focus_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "fn_body": "nodedata.set_inline_css_props(nodedata.get_inline_css_props().with_append(AzNodeDataInlineCssPropertyVec::parse_focus(style.as_str())))"
              },
              "with_inline_focus_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "AzString"
                  }
                ],
                "returns": {
                  "type": "NodeData"
                },
                "fn_body": "let mut nodedata = nodedata.swap_with_default(); AzNodeData_setInlineFocusStyle(&mut nodedata, style); nodedata"
              },
              "set_clip_mask": {
                "doc": "Sets the `extra.clip_mask` field for this node",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "image_mask": "ImageMask"
                  }
                ],
                "fn_body": "nodedata.set_clip_mask(image_mask)"
              },
              "set_tab_index": {
                "doc": "Sets the tab index for this node",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "tab_index": "TabIndex"
                  }
                ],
                "fn_body": "nodedata.set_tab_index(tab_index)"
              },
              "set_accessibility_info": {
                "doc": "Sets accessibility attributes for this node",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "accessibility_info": "AccessibilityInfo"
                  }
                ],
                "fn_body": "nodedata.set_accessibility_info(accessibility_info)"
              },
              "set_menu_bar": {
                "doc": "Adds a (native) menu bar: If this node is the root node the menu bar will be added to the window, else it will be displayed using the width and position of the bounding rectangle",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu_bar": "Menu"
                  }
                ],
                "fn_body": "nodedata.set_menu_bar(menu_bar)"
              },
              "set_context_menu": {
                "doc": "Signalizes that this node has a (native) context-aware menu. If set, the user can left-click the node to open the menu",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "context_menu": "Menu"
                  }
                ],
                "fn_body": "nodedata.set_context_menu(context_menu)"
              },
              "hash": {
                "doc": "Calculates the hash of this node (note: in order to be truly unique, you also have to hash the DOM and Node ID).",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u64"
                },
                "fn_body": "nodedata.calculate_node_data_hash().0"
              }
            }
          },
          "NodeType": {
            "doc": "List of core DOM node types built-into by `azul`",
            "external": "azul_core::dom::NodeType",
            "enum_fields": [
              {
                "Body": {
                  "doc": "Root element of the document"
                },
                "Div": {
                  "doc": "Generic block-level container"
                },
                "P": {
                  "doc": "Paragraph"
                },
                "H1": {
                  "doc": "Headings"
                },
                "H2": {},
                "H3": {},
                "H4": {},
                "H5": {},
                "H6": {},
                "Br": {
                  "doc": "Line break"
                },
                "Hr": {
                  "doc": "Horizontal rule"
                },
                "Pre": {
                  "doc": "Preformatted text"
                },
                "BlockQuote": {
                  "doc": "Block quote"
                },
                "Address": {
                  "doc": "Address"
                },
                "Ul": {
                  "doc": "Unordered list"
                },
                "Ol": {
                  "doc": "Ordered list"
                },
                "Li": {
                  "doc": "List item"
                },
                "Dl": {
                  "doc": "Definition list"
                },
                "Dt": {
                  "doc": "Definition term"
                },
                "Dd": {
                  "doc": "Definition description"
                },
                "Table": {
                  "doc": "Table container"
                },
                "Caption": {
                  "doc": "Table caption"
                },
                "THead": {
                  "doc": "Table header"
                },
                "TBody": {
                  "doc": "Table body"
                },
                "TFoot": {
                  "doc": "Table footer"
                },
                "Tr": {
                  "doc": "Table row"
                },
                "Th": {
                  "doc": "Table header cell"
                },
                "Td": {
                  "doc": "Table data cell"
                },
                "ColGroup": {
                  "doc": "Table column group"
                },
                "Col": {
                  "doc": "Table column"
                },
                "Form": {
                  "doc": "Form container"
                },
                "FieldSet": {
                  "doc": "Form fieldset"
                },
                "Legend": {
                  "doc": "Fieldset legend"
                },
                "Label": {
                  "doc": "Label for form controls"
                },
                "Input": {
                  "doc": "Input control"
                },
                "Button": {
                  "doc": "Button control"
                },
                "Select": {
                  "doc": "Select dropdown"
                },
                "OptGroup": {
                  "doc": "Option group"
                },
                "SelectOption": {
                  "doc": "Select option"
                },
                "TextArea": {
                  "doc": "Multiline text input"
                },
                "Span": {
                  "doc": "Generic inline container"
                },
                "A": {
                  "doc": "Anchor/hyperlink"
                },
                "Em": {
                  "doc": "Emphasized text"
                },
                "Strong": {
                  "doc": "Strongly emphasized text"
                },
                "B": {
                  "doc": "Bold text"
                },
                "I": {
                  "doc": "Italic text"
                },
                "Code": {
                  "doc": "Code"
                },
                "Samp": {
                  "doc": "Sample output"
                },
                "Kbd": {
                  "doc": "Keyboard input"
                },
                "Var": {
                  "doc": "Variable"
                },
                "Cite": {
                  "doc": "Citation"
                },
                "Abbr": {
                  "doc": "Abbreviation"
                },
                "Acronym": {
                  "doc": "Acronym"
                },
                "Q": {
                  "doc": "Quotation"
                },
                "Sub": {
                  "doc": "Subscript"
                },
                "Sup": {
                  "doc": "Superscript"
                },
                "Small": {
                  "doc": "Small text"
                },
                "Big": {
                  "doc": "Big text"
                },
                "Before": {
                  "doc": "::before pseudo-element"
                },
                "After": {
                  "doc": "::after pseudo-element"
                },
                "Marker": {
                  "doc": "::marker pseudo-element"
                },
                "Placeholder": {
                  "doc": "::placeholder pseudo-element"
                },
                "Text": {
                  "type": "AzString",
                  "doc": "Text content"
                },
                "Image": {
                  "type": "ImageRef",
                  "doc": "Image element"
                },
                "IFrame": {
                  "type": "IFrameNode",
                  "doc": "IFrame (embedded content)"
                }
              }
            ]
          },
          "On": {
            "doc": "When to call a callback action - `On::MouseOver`, `On::MouseOut`, etc.",
            "external": "azul_core::dom::On",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "MouseOver": {
                  "doc": "Mouse cursor is hovering over the element"
                },
                "MouseDown": {
                  "doc": "Mouse cursor has is over element and is pressed (not good for \"click\" events - use `MouseUp` instead)"
                },
                "LeftMouseDown": {
                  "doc": "(Specialization of `MouseDown`). Fires only if the left mouse button has been pressed while cursor was over the element"
                },
                "MiddleMouseDown": {
                  "doc": "(Specialization of `MouseDown`). Fires only if the middle mouse button has been pressed while cursor was over the element"
                },
                "RightMouseDown": {
                  "doc": "(Specialization of `MouseDown`). Fires only if the right mouse button has been pressed while cursor was over the element"
                },
                "MouseUp": {
                  "doc": "Mouse button has been released while cursor was over the element"
                },
                "LeftMouseUp": {
                  "doc": "(Specialization of `MouseUp`). Fires only if the left mouse button has been released while cursor was over the element"
                },
                "MiddleMouseUp": {
                  "doc": "(Specialization of `MouseUp`). Fires only if the middle mouse button has been released while cursor was over the element"
                },
                "RightMouseUp": {
                  "doc": "(Specialization of `MouseUp`). Fires only if the right mouse button has been released while cursor was over the element"
                },
                "MouseEnter": {
                  "doc": "Mouse cursor has entered the element"
                },
                "MouseLeave": {
                  "doc": "Mouse cursor has left the element"
                },
                "Scroll": {
                  "doc": "Mousewheel / touchpad scrolling"
                },
                "TextInput": {
                  "doc": "The window received a unicode character (also respects the system locale). Check `keyboard_state.current_char` to get the current pressed character."
                },
                "VirtualKeyDown": {
                  "doc": "A **virtual keycode** was pressed. Note: This is only the virtual keycode, not the actual char. If you want to get the character, use `TextInput` instead. A virtual key does not have to map to a printable character. You can get all currently pressed virtual keycodes in the `keyboard_state.current_virtual_keycodes` and / or just the last keycode in the `keyboard_state.latest_virtual_keycode`."
                },
                "VirtualKeyUp": {
                  "doc": "A **virtual keycode** was release. See `VirtualKeyDown` for more info."
                },
                "HoveredFile": {
                  "doc": "A file has been dropped on the element"
                },
                "DroppedFile": {
                  "doc": "A file is being hovered on the element"
                },
                "HoveredFileCancelled": {
                  "doc": "A file was hovered, but has exited the window"
                },
                "FocusReceived": {
                  "doc": "Equivalent to `onfocus`"
                },
                "FocusLost": {
                  "doc": "Equivalent to `onblur`"
                }
              }
            ],
            "functions": {
              "into_event_filter": {
                "doc": "Converts the `On` shorthand into a `EventFilter`",
                "fn_args": [
                  {
                    "self": "value"
                  }
                ],
                "returns": {
                  "type": "EventFilter"
                },
                "fn_body": "on.into()"
              }
            }
          },
          "EventFilter": {
            "external": "azul_core::dom::EventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Hover": {
                  "type": "HoverEventFilter",
                  "doc": "Calls the attached callback when the mouse is actively over the given element."
                },
                "Not": {
                  "type": "NotEventFilter",
                  "doc": "Inverse of `Hover` - calls the attached callback if the mouse is **not** over the given element. This is particularly useful for popover menus where you want to close the menu when the user clicks anywhere else but the menu itself."
                },
                "Focus": {
                  "type": "FocusEventFilter",
                  "doc": "Calls the attached callback when the element is currently focused."
                },
                "Window": {
                  "type": "WindowEventFilter",
                  "doc": "Calls the callback when anything related to the window is happening. The \"hit item\" will be the root item of the DOM. For example, this can be useful for tracking the mouse position (in relation to the window). In difference to `Desktop`, this only fires when the window is focused. This can also be good for capturing controller input, touch input (i.e. global gestures that aren't attached to any component, but rather the \"window\" itself)."
                },
                "Component": {
                  "type": "ComponentEventFilter",
                  "doc": "API stub: Something happened with the node itself (node resized, created or removed)"
                },
                "Application": {
                  "type": "ApplicationEventFilter",
                  "doc": "Something happened with the application (started, shutdown, device plugged in)"
                }
              }
            ]
          },
          "HoverEventFilter": {
            "external": "azul_core::dom::HoverEventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "MouseOver": {},
                "MouseDown": {},
                "LeftMouseDown": {},
                "RightMouseDown": {},
                "MiddleMouseDown": {},
                "MouseUp": {},
                "LeftMouseUp": {},
                "RightMouseUp": {},
                "MiddleMouseUp": {},
                "MouseEnter": {},
                "MouseLeave": {},
                "Scroll": {},
                "ScrollStart": {},
                "ScrollEnd": {},
                "TextInput": {},
                "VirtualKeyDown": {},
                "VirtualKeyUp": {},
                "HoveredFile": {},
                "DroppedFile": {},
                "HoveredFileCancelled": {},
                "TouchStart": {},
                "TouchMove": {},
                "TouchEnd": {},
                "TouchCancel": {}
              }
            ]
          },
          "FocusEventFilter": {
            "external": "azul_core::dom::FocusEventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "MouseOver": {},
                "MouseDown": {},
                "LeftMouseDown": {},
                "RightMouseDown": {},
                "MiddleMouseDown": {},
                "MouseUp": {},
                "LeftMouseUp": {},
                "RightMouseUp": {},
                "MiddleMouseUp": {},
                "MouseEnter": {},
                "MouseLeave": {},
                "Scroll": {},
                "ScrollStart": {},
                "ScrollEnd": {},
                "TextInput": {},
                "VirtualKeyDown": {},
                "VirtualKeyUp": {},
                "FocusReceived": {},
                "FocusLost": {}
              }
            ]
          },
          "NotEventFilter": {
            "external": "azul_core::dom::NotEventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Hover": {
                  "type": "HoverEventFilter"
                },
                "Focus": {
                  "type": "FocusEventFilter"
                }
              }
            ]
          },
          "WindowEventFilter": {
            "external": "azul_core::dom::WindowEventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "MouseOver": {},
                "MouseDown": {},
                "LeftMouseDown": {},
                "RightMouseDown": {},
                "MiddleMouseDown": {},
                "MouseUp": {},
                "LeftMouseUp": {},
                "RightMouseUp": {},
                "MiddleMouseUp": {},
                "MouseEnter": {},
                "MouseLeave": {},
                "Scroll": {},
                "ScrollStart": {},
                "ScrollEnd": {},
                "TextInput": {},
                "VirtualKeyDown": {},
                "VirtualKeyUp": {},
                "HoveredFile": {},
                "DroppedFile": {},
                "HoveredFileCancelled": {},
                "Resized": {},
                "Moved": {},
                "TouchStart": {},
                "TouchMove": {},
                "TouchEnd": {},
                "TouchCancel": {},
                "FocusReceived": {},
                "FocusLost": {},
                "CloseRequested": {},
                "ThemeChanged": {},
                "WindowFocusReceived": {},
                "WindowFocusLost": {}
              }
            ]
          },
          "ComponentEventFilter": {
            "external": "azul_core::dom::ComponentEventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "AfterMount": {},
                "BeforeUnmount": {},
                "NodeResized": {},
                "DefaultAction": {},
                "Selected": {}
              }
            ]
          },
          "ApplicationEventFilter": {
            "external": "azul_core::dom::ApplicationEventFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DeviceConnected": {},
                "DeviceDisconnected": {}
              }
            ]
          },
          "AccessibilityInfo": {
            "doc": "Accessibility information (MSAA wrapper). See `NodeData.set_accessibility_info()`",
            "external": "azul_core::dom::AccessibilityInfo",
            "struct_fields": [
              {
                "name": {
                  "type": "OptionAzString",
                  "doc": "Get the \"name\" of the `IAccessible`, for example the name of a button, checkbox or menu item. Try to use unique names for each item in a dialog so that voice dictation software doesn't have to deal with extra ambiguity"
                },
                "value": {
                  "type": "OptionAzString",
                  "doc": "Get the \"value\" of the `IAccessible`, for example a number in a slider, a URL for a link, the text a user entered in a field."
                },
                "role": {
                  "type": "AccessibilityRole",
                  "doc": "Get an enumerated value representing what this IAccessible is used for, for example is it a link, static text, editable text, a checkbox, or a table cell, etc."
                },
                "states": {
                  "type": "AccessibilityStateVec",
                  "doc": "Possible on/off states, such as focused, focusable, selected, selectable, visible, protected (for passwords), checked, etc."
                },
                "accelerator": {
                  "type": "OptionVirtualKeyCodeCombo",
                  "doc": "Optional keyboard accelerator"
                },
                "default_action": {
                  "type": "OptionAzString",
                  "doc": "Optional \"default action\" description. Only used when there is at least one `ComponentEventFilter::DefaultAction` callback present on this node"
                }
              }
            ]
          },
          "AccessibilityRole": {
            "doc": "MSAA Accessibility role constants. For information on what each role does, see the <a href=\"https://docs.microsoft.com/en-us/windows/win32/winauto/object-roles\">MSDN Role Constants page</a>",
            "external": "azul_core::dom::AccessibilityRole",
            "enum_fields": [
              {
                "TitleBar": {
                  "doc": "Inserted by operating system"
                },
                "MenuBar": {},
                "ScrollBar": {},
                "Grip": {},
                "Sound": {},
                "Cursor": {},
                "Caret": {},
                "Alert": {},
                "Window": {
                  "doc": "Inserted by operating system"
                },
                "Client": {},
                "MenuPopup": {},
                "MenuItem": {},
                "Tooltip": {},
                "Application": {},
                "Document": {},
                "Pane": {},
                "Chart": {},
                "Dialog": {},
                "Border": {},
                "Grouping": {},
                "Separator": {},
                "Toolbar": {},
                "StatusBar": {},
                "Table": {},
                "ColumnHeader": {},
                "RowHeader": {},
                "Column": {},
                "Row": {},
                "Cell": {},
                "Link": {},
                "HelpBalloon": {},
                "Character": {},
                "List": {},
                "ListItem": {},
                "Outline": {},
                "OutlineItem": {},
                "Pagetab": {},
                "PropertyPage": {},
                "Indicator": {},
                "Graphic": {},
                "StaticText": {},
                "Text": {},
                "PushButton": {},
                "CheckButton": {},
                "RadioButton": {},
                "ComboBox": {},
                "DropList": {},
                "ProgressBar": {},
                "Dial": {},
                "HotkeyField": {},
                "Slider": {},
                "SpinButton": {},
                "Diagram": {},
                "Animation": {},
                "Equation": {},
                "ButtonDropdown": {},
                "ButtonMenu": {},
                "ButtonDropdownGrid": {},
                "Whitespace": {},
                "PageTabList": {},
                "Clock": {},
                "SplitButton": {},
                "IpAddress": {},
                "Nothing": {}
              }
            ]
          },
          "AccessibilityState": {
            "doc": "MSAA accessibility state. For information on what each state does, see the <a href=\"https://docs.microsoft.com/en-us/windows/win32/winauto/object-state-constants\">MSDN State Constants page</a>.",
            "external": "azul_core::dom::AccessibilityState",
            "enum_fields": [
              {
                "Unavailable": {},
                "Selected": {},
                "Focused": {},
                "Checked": {},
                "Readonly": {},
                "Default": {},
                "Expanded": {},
                "Collapsed": {},
                "Busy": {},
                "Offscreen": {},
                "Focusable": {},
                "Selectable": {},
                "Linked": {},
                "Traversed": {},
                "Multiselectable": {},
                "Protected": {}
              }
            ]
          },
          "TabIndex": {
            "external": "azul_core::dom::TabIndex",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {
                  "doc": "Automatic tab index, similar to simply setting `focusable = \"true\"` or `tabindex = 0` (both have the effect of making the element focusable). Sidenote: See https://www.w3.org/TR/html5/editing.html#sequential-focus-navigation-and-the-tabindex-attribute for interesting notes on tabindex and accessibility"
                },
                "OverrideInParent": {
                  "type": "u32",
                  "doc": "Set the tab index in relation to its parent element. I.e. if you have a list of elements, the focusing order is restricted to the current parent. Ex. a div might have: ```no_run,ignore div (Auto) |- element1 (OverrideInParent 0) <- current focus |- element2 (OverrideInParent 5) |- element3 (OverrideInParent 2) |- element4 (Global 5) ``` When pressing tab repeatedly, the focusing order will be \"element3, element2, element4, div\", since OverrideInParent elements take precedence among global order."
                },
                "NoKeyboardFocus": {
                  "doc": "Elements can be focused in callbacks, but are not accessible via keyboard / tab navigation (-1)"
                }
              }
            ]
          },
          "IdOrClass": {
            "external": "azul_core::dom::IdOrClass",
            "enum_fields": [
              {
                "Id": {
                  "type": "AzString"
                },
                "Class": {
                  "type": "AzString"
                }
              }
            ]
          },
          "NodeDataInlineCssProperty": {
            "external": "azul_core::dom::NodeDataInlineCssProperty",
            "enum_fields": [
              {
                "Normal": {
                  "type": "CssProperty"
                },
                "Active": {
                  "type": "CssProperty"
                },
                "Focus": {
                  "type": "CssProperty"
                },
                "Hover": {
                  "type": "CssProperty"
                }
              }
            ]
          }
        }
      },
      "menu": {
        "doc": null,
        "classes": {
          "Menu": {
            "doc": "Represents a menu (context menu, dropdown menu, or application menu). A menu consists of a list of items that can be displayed as a popup or attached to a window's menu bar. Modeled after the Windows API for cross-platform consistency. # Fields * `items` - The menu items to display * `position` - Where the menu should appear (for popups) * `context_mouse_btn` - Which mouse button triggers the context menu",
            "external": "azul_core::menu::Menu",
            "struct_fields": [
              {
                "items": {
                  "type": "MenuItemVec"
                },
                "position": {
                  "type": "MenuPopupPosition"
                },
                "context_mouse_btn": {
                  "type": "ContextMenuMouseButton"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates an new, empty Menu",
                "fn_args": [
                  {
                    "items": "MenuItemVec"
                  }
                ],
                "fn_body": "AzMenu::new(items)"
              }
            },
            "functions": {
              "set_popup_position": {
                "doc": "Sets the popup position of the menu, ignored on menu bars",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "position": "MenuPopupPosition"
                  }
                ],
                "fn_body": "menu.position = position;"
              },
              "with_popup_position": {
                "doc": "Sets the popup position of the menu, ignored on menu bars (builder method)",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "position": "MenuPopupPosition"
                  }
                ],
                "returns": {
                  "type": "Menu"
                },
                "fn_body": "let mut menu = menu.swap_with_default(); menu.position = position; menu"
              }
            }
          },
          "ContextMenuMouseButton": {
            "doc": "Determines whether this context menu should pop up on a left, right or middle click",
            "external": "azul_core::window::ContextMenuMouseButton",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Right": {},
                "Middle": {},
                "Left": {}
              }
            ]
          },
          "MenuPopupPosition": {
            "doc": "Specifies where a popup menu should appear relative to the cursor or clicked element. This positioning information is ignored for application-level menus (menu bars) and only applies to context menus and dropdowns.",
            "external": "azul_core::menu::MenuPopupPosition",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "BottomLeftOfCursor": {
                  "doc": "Position menu below and to the left of the cursor"
                },
                "BottomRightOfCursor": {
                  "doc": "Position menu below and to the right of the cursor"
                },
                "TopLeftOfCursor": {
                  "doc": "Position menu above and to the left of the cursor"
                },
                "TopRightOfCursor": {
                  "doc": "Position menu above and to the right of the cursor"
                },
                "BottomOfHitRect": {
                  "doc": "Position menu below the rectangle that was clicked"
                },
                "LeftOfHitRect": {
                  "doc": "Position menu to the left of the rectangle that was clicked"
                },
                "TopOfHitRect": {
                  "doc": "Position menu above the rectangle that was clicked"
                },
                "RightOfHitRect": {
                  "doc": "Position menu to the right of the rectangle that was clicked"
                },
                "AutoCursor": {
                  "doc": "Automatically calculate position based on available screen space near cursor"
                },
                "AutoHitRect": {
                  "doc": "Automatically calculate position based on available screen space near clicked rect"
                }
              }
            ]
          },
          "MenuItem": {
            "doc": "Represents a single item in a menu. Menu items can be regular text items with labels and callbacks, visual separators, or line breaks for horizontal menu layouts.",
            "external": "azul_core::menu::MenuItem",
            "enum_fields": [
              {
                "String": {
                  "type": "StringMenuItem",
                  "doc": "A regular menu item with a label, optional icon, callback, and sub-items"
                },
                "Separator": {
                  "doc": "A visual separator line (only rendered in vertical layouts)"
                },
                "BreakLine": {
                  "doc": "Forces a line break when the menu is laid out horizontally"
                }
              }
            ]
          },
          "StringMenuItem": {
            "doc": "A menu item with a text label and optional features. `StringMenuItem` represents a clickable menu entry that can have: - A text label - An optional keyboard accelerator (e.g., Ctrl+C) - An optional callback function - An optional icon (checkbox or image) - A state (normal, greyed, or disabled) - Child menu items (for sub-menus) # Examples ```rust,no_run use azul_core::menu::StringMenuItem; use azul_css::AzString; let item = StringMenuItem::new(AzString::from_const_str(\"Copy\")); ```",
            "external": "azul_core::menu::StringMenuItem",
            "struct_fields": [
              {
                "label": {
                  "type": "AzString",
                  "doc": "Label of the menu"
                },
                "accelerator": {
                  "type": "OptionVirtualKeyCodeCombo",
                  "doc": "Optional accelerator combination (ex. \"CTRL + X\" = [VirtualKeyCode::Ctrl, VirtualKeyCode::X]) for keyboard shortcut"
                },
                "callback": {
                  "type": "OptionCoreMenuCallback",
                  "doc": "Optional callback to call"
                },
                "state": {
                  "type": "MenuItemState",
                  "doc": "State (normal, greyed, disabled)"
                },
                "icon": {
                  "type": "OptionMenuItemIcon",
                  "doc": "Optional icon for the menu entry"
                },
                "children": {
                  "type": "MenuItemVec",
                  "doc": "Sub-menus of this item (separators and line-breaks can't have sub-menus)"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new menu item",
                "fn_args": [
                  {
                    "label": "AzString"
                  }
                ],
                "fn_body": "AzStringMenuItem::new(label)"
              }
            },
            "functions": {
              "set_callback": {
                "doc": "Adds a callback to the menu item",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "fn_body": "stringmenuitem.callback = AzOptionMenuCallback::Some(AzMenuCallback { data, callback: AzCallback { cb: callback } });"
              },
              "with_callback": {
                "doc": "Adds a callback to the menu item",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "returns": {
                  "type": "StringMenuItem"
                },
                "fn_body": "let mut stringmenuitem = stringmenuitem.swap_with_default(); stringmenuitem.callback = AzOptionMenuCallback::Some(AzMenuCallback { data, callback: AzCallback { cb: callback } }); stringmenuitem"
              },
              "add_child": {
                "doc": "Adds a single child submenu to the current menu",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "child": "MenuItem"
                  }
                ],
                "fn_body": "let mut m = stringmenuitem.children.clone().into_library_owned_vec(); m.push(child); stringmenuitem.children = m.into();"
              },
              "with_child": {
                "doc": "Adds a single child submenu to the current menu",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "child": "MenuItem"
                  }
                ],
                "returns": {
                  "type": "StringMenuItem"
                },
                "fn_body": "let mut stringmenuitem = stringmenuitem.swap_with_default(); let mut m = stringmenuitem.children.clone().into_library_owned_vec(); m.push(child); stringmenuitem.children = m.into(); stringmenuitem"
              },
              "set_children": {
                "doc": "Sets the children of this menu",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "children": "MenuItemVec"
                  }
                ],
                "fn_body": "stringmenuitem.children = children;"
              },
              "with_children": {
                "doc": "Adds a child submenu to the current menu",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "children": "MenuItemVec"
                  }
                ],
                "returns": {
                  "type": "StringMenuItem"
                },
                "fn_body": "let mut stringmenuitem = stringmenuitem.swap_with_default(); stringmenuitem.children = children; stringmenuitem"
              }
            }
          },
          "VirtualKeyCodeCombo": {
            "doc": "Combination of virtual key codes that have to be pressed together",
            "external": "azul_core::window::VirtualKeyCodeCombo",
            "struct_fields": [
              {
                "keys": {
                  "type": "VirtualKeyCodeVec"
                }
              }
            ]
          },
          "MenuCallback": {
            "doc": "Similar to `dom.CallbackData`, stores some data + a callback to call when the menu is activated",
            "external": "azul_core::window::MenuCallback",
            "struct_fields": [
              {
                "callback": {
                  "type": "Callback"
                },
                "data": {
                  "type": "RefAny"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "fn_body": "AzMenuCallback { callback: AzCallback { cb: callback }, data }"
              }
            }
          },
          "MenuItemIcon": {
            "doc": "Optional icon displayed next to a menu item. Icons can be either: - A checkbox (checked or unchecked) - A custom image (typically 16x16 pixels)",
            "external": "azul_core::menu::MenuItemIcon",
            "enum_fields": [
              {
                "Checkbox": {
                  "type": "bool",
                  "doc": "Displays a checkbox, with `true` = checked, `false` = unchecked"
                },
                "Image": {
                  "type": "ImageRef",
                  "doc": "Displays a custom image (typically 16x16 format)"
                }
              }
            ]
          },
          "MenuItemState": {
            "doc": "Describes the interactive state of a menu item. Menu items can be in different states that affect their appearance and behavior: - Normal items are clickable and render normally - Greyed items are visually disabled (greyed out) and non-clickable - Disabled items are non-clickable but retain normal appearance",
            "external": "azul_core::menu::MenuItemState",
            "enum_fields": [
              {
                "Normal": {
                  "doc": "Normal menu item (default)"
                },
                "Greyed": {
                  "doc": "Menu item is greyed out and clicking it does nothing"
                },
                "Disabled": {
                  "doc": "Menu item is disabled, but NOT greyed out"
                }
              }
            ]
          }
        }
      },
      "css": {
        "doc": "`Css` parsing module",
        "classes": {
          "CssRuleBlock": {
            "doc": "One block of rules that applies a bunch of rules to a \"path\" in the style, i.e. `div#myid.myclass -> { (\"justify-content\", \"center\") }`",
            "external": "azul_css::css::CssRuleBlock",
            "struct_fields": [
              {
                "path": {
                  "type": "CssPath",
                  "doc": "The css path (full selector) of the style ruleset"
                },
                "declarations": {
                  "type": "CssDeclarationVec",
                  "doc": "`\"justify-content: center\"` => `CssDeclaration::Static(CssProperty::JustifyContent(LayoutJustifyContent::Center))`"
                }
              }
            ]
          },
          "CssPath": {
            "doc": "Represents a full CSS path (i.e. the \"div#id.class\" selector belonging to a CSS \"content group\" (the following key-value block)). ```no_run,ignore \"#div > .my_class:focus\" == [ CssPathSelector::Type(NodeTypeTag::Div), CssPathSelector::PseudoSelector(CssPathPseudoSelector::LimitChildren), CssPathSelector::Class(\"my_class\"), CssPathSelector::PseudoSelector(CssPathPseudoSelector::Focus), ]",
            "external": "azul_css::css::CssPath",
            "struct_fields": [
              {
                "selectors": {
                  "type": "CssPathSelectorVec"
                }
              }
            ]
          },
          "CssPathSelector": {
            "external": "azul_css::css::CssPathSelector",
            "enum_fields": [
              {
                "Global": {
                  "doc": "Represents the `*` selector"
                },
                "Type": {
                  "type": "NodeTypeTag",
                  "doc": "`div`, `p`, etc."
                },
                "Class": {
                  "type": "AzString",
                  "doc": "`.something`"
                },
                "Id": {
                  "type": "AzString",
                  "doc": "`#something`"
                },
                "PseudoSelector": {
                  "type": "CssPathPseudoSelector",
                  "doc": "`:something`"
                },
                "DirectChildren": {
                  "doc": "Represents the `>` selector"
                },
                "Children": {
                  "doc": "Represents the ` ` selector"
                }
              }
            ]
          },
          "CssProperty": {
            "doc": "Parsed CSS key-value pair",
            "external": "azul_css::CssProperty",
            "enum_fields": [
              {
                "CaretColor": {
                  "type": "CaretColorValue"
                },
                "CaretAnimationDuration": {
                  "type": "CaretAnimationDurationValue"
                },
                "SelectionBackgroundColor": {
                  "type": "SelectionBackgroundColorValue"
                },
                "SelectionColor": {
                  "type": "SelectionColorValue"
                },
                "TextColor": {
                  "type": "StyleTextColorValue"
                },
                "FontSize": {
                  "type": "StyleFontSizeValue"
                },
                "FontFamily": {
                  "type": "StyleFontFamilyVecValue"
                },
                "TextAlign": {
                  "type": "StyleTextAlignValue"
                },
                "TextJustify": {
                  "type": "LayoutTextJustifyValue"
                },
                "LetterSpacing": {
                  "type": "StyleLetterSpacingValue"
                },
                "LineHeight": {
                  "type": "StyleLineHeightValue"
                },
                "WordSpacing": {
                  "type": "StyleWordSpacingValue"
                },
                "TabWidth": {
                  "type": "StyleTabWidthValue"
                },
                "WhiteSpace": {
                  "type": "StyleWhiteSpaceValue"
                },
                "Hyphens": {
                  "type": "StyleHyphensValue"
                },
                "Direction": {
                  "type": "StyleDirectionValue"
                },
                "Cursor": {
                  "type": "StyleCursorValue"
                },
                "Display": {
                  "type": "LayoutDisplayValue"
                },
                "Float": {
                  "type": "LayoutFloatValue"
                },
                "BoxSizing": {
                  "type": "LayoutBoxSizingValue"
                },
                "Width": {
                  "type": "LayoutWidthValue"
                },
                "Height": {
                  "type": "LayoutHeightValue"
                },
                "MinWidth": {
                  "type": "LayoutMinWidthValue"
                },
                "MinHeight": {
                  "type": "LayoutMinHeightValue"
                },
                "MaxWidth": {
                  "type": "LayoutMaxWidthValue"
                },
                "MaxHeight": {
                  "type": "LayoutMaxHeightValue"
                },
                "Position": {
                  "type": "LayoutPositionValue"
                },
                "Top": {
                  "type": "LayoutTopValue"
                },
                "Right": {
                  "type": "LayoutRightValue"
                },
                "Left": {
                  "type": "LayoutLeftValue"
                },
                "Bottom": {
                  "type": "LayoutBottomValue"
                },
                "ZIndex": {
                  "type": "LayoutZIndexValue"
                },
                "FlexWrap": {
                  "type": "LayoutFlexWrapValue"
                },
                "FlexDirection": {
                  "type": "LayoutFlexDirectionValue"
                },
                "FlexGrow": {
                  "type": "LayoutFlexGrowValue"
                },
                "FlexShrink": {
                  "type": "LayoutFlexShrinkValue"
                },
                "FlexBasis": {
                  "type": "LayoutFlexBasisValue"
                },
                "JustifyContent": {
                  "type": "LayoutJustifyContentValue"
                },
                "AlignItems": {
                  "type": "LayoutAlignItemsValue"
                },
                "AlignContent": {
                  "type": "LayoutAlignContentValue"
                },
                "ColumnGap": {
                  "type": "LayoutColumnGapValue"
                },
                "RowGap": {
                  "type": "LayoutRowGapValue"
                },
                "GridTemplateColumns": {
                  "type": "LayoutGridTemplateColumnsValue"
                },
                "GridTemplateRows": {
                  "type": "LayoutGridTemplateRowsValue"
                },
                "GridAutoColumns": {
                  "type": "LayoutGridAutoColumnsValue"
                },
                "GridAutoRows": {
                  "type": "LayoutGridAutoRowsValue"
                },
                "GridColumn": {
                  "type": "LayoutGridColumnValue"
                },
                "GridRow": {
                  "type": "LayoutGridRowValue"
                },
                "WritingMode": {
                  "type": "LayoutWritingModeValue"
                },
                "Clear": {
                  "type": "LayoutClearValue"
                },
                "BackgroundContent": {
                  "type": "StyleBackgroundContentVecValue"
                },
                "BackgroundPosition": {
                  "type": "StyleBackgroundPositionVecValue"
                },
                "BackgroundSize": {
                  "type": "StyleBackgroundSizeVecValue"
                },
                "BackgroundRepeat": {
                  "type": "StyleBackgroundRepeatVecValue"
                },
                "OverflowX": {
                  "type": "LayoutOverflowValue"
                },
                "OverflowY": {
                  "type": "LayoutOverflowValue"
                },
                "GridAutoFlow": {
                  "type": "LayoutGridAutoFlowValue"
                },
                "JustifySelf": {
                  "type": "LayoutJustifySelfValue"
                },
                "JustifyItems": {
                  "type": "LayoutJustifyItemsValue"
                },
                "Gap": {
                  "type": "LayoutGapValue"
                },
                "GridGap": {
                  "type": "LayoutGapValue"
                },
                "AlignSelf": {
                  "type": "LayoutAlignSelfValue"
                },
                "Font": {
                  "type": "StyleFontValue"
                },
                "PaddingTop": {
                  "type": "LayoutPaddingTopValue"
                },
                "PaddingLeft": {
                  "type": "LayoutPaddingLeftValue"
                },
                "PaddingRight": {
                  "type": "LayoutPaddingRightValue"
                },
                "PaddingBottom": {
                  "type": "LayoutPaddingBottomValue"
                },
                "MarginTop": {
                  "type": "LayoutMarginTopValue"
                },
                "MarginLeft": {
                  "type": "LayoutMarginLeftValue"
                },
                "MarginRight": {
                  "type": "LayoutMarginRightValue"
                },
                "MarginBottom": {
                  "type": "LayoutMarginBottomValue"
                },
                "BorderTopLeftRadius": {
                  "type": "StyleBorderTopLeftRadiusValue"
                },
                "LayoutTextJustify": {
                  "type": "LayoutTextJustifyValue"
                },
                "BorderTopRightRadius": {
                  "type": "StyleBorderTopRightRadiusValue"
                },
                "BorderBottomLeftRadius": {
                  "type": "StyleBorderBottomLeftRadiusValue"
                },
                "BorderBottomRightRadius": {
                  "type": "StyleBorderBottomRightRadiusValue"
                },
                "BorderTopColor": {
                  "type": "StyleBorderTopColorValue"
                },
                "BorderRightColor": {
                  "type": "StyleBorderRightColorValue"
                },
                "BorderLeftColor": {
                  "type": "StyleBorderLeftColorValue"
                },
                "BorderBottomColor": {
                  "type": "StyleBorderBottomColorValue"
                },
                "BorderTopStyle": {
                  "type": "StyleBorderTopStyleValue"
                },
                "BorderRightStyle": {
                  "type": "StyleBorderRightStyleValue"
                },
                "BorderLeftStyle": {
                  "type": "StyleBorderLeftStyleValue"
                },
                "BorderBottomStyle": {
                  "type": "StyleBorderBottomStyleValue"
                },
                "BorderTopWidth": {
                  "type": "LayoutBorderTopWidthValue"
                },
                "BorderRightWidth": {
                  "type": "LayoutBorderRightWidthValue"
                },
                "BorderLeftWidth": {
                  "type": "LayoutBorderLeftWidthValue"
                },
                "BorderBottomWidth": {
                  "type": "LayoutBorderBottomWidthValue"
                },
                "BoxShadowLeft": {
                  "type": "StyleBoxShadowValue"
                },
                "BoxShadowRight": {
                  "type": "StyleBoxShadowValue"
                },
                "BoxShadowTop": {
                  "type": "StyleBoxShadowValue"
                },
                "BoxShadowBottom": {
                  "type": "StyleBoxShadowValue"
                },
                "ScrollbarStyle": {
                  "type": "ScrollbarStyleValue"
                },
                "ScrollbarWidth": {
                  "type": "LayoutScrollbarWidthValue"
                },
                "ScrollbarColor": {
                  "type": "StyleScrollbarColorValue"
                },
                "Opacity": {
                  "type": "StyleOpacityValue"
                },
                "Visibility": {
                  "type": "StyleVisibilityValue"
                },
                "Transform": {
                  "type": "StyleTransformVecValue"
                },
                "TransformOrigin": {
                  "type": "StyleTransformOriginValue"
                },
                "PerspectiveOrigin": {
                  "type": "StylePerspectiveOriginValue"
                },
                "BackfaceVisibility": {
                  "type": "StyleBackfaceVisibilityValue"
                },
                "MixBlendMode": {
                  "type": "StyleMixBlendModeValue"
                },
                "Filter": {
                  "type": "StyleFilterVecValue"
                },
                "BackdropFilter": {
                  "type": "StyleFilterVecValue"
                },
                "TextShadow": {
                  "type": "StyleBoxShadowValue"
                },
                "BreakBefore": {
                  "type": "PageBreakValue"
                },
                "BreakAfter": {
                  "type": "PageBreakValue"
                },
                "BreakInside": {
                  "type": "BreakInsideValue"
                },
                "Orphans": {
                  "type": "OrphansValue"
                },
                "Widows": {
                  "type": "WidowsValue"
                },
                "BoxDecorationBreak": {
                  "type": "BoxDecorationBreakValue"
                },
                "ColumnCount": {
                  "type": "ColumnCountValue"
                },
                "ColumnWidth": {
                  "type": "ColumnWidthValue"
                },
                "ColumnSpan": {
                  "type": "ColumnSpanValue"
                },
                "ColumnFill": {
                  "type": "ColumnFillValue"
                },
                "ColumnRuleWidth": {
                  "type": "ColumnRuleWidthValue"
                },
                "ColumnRuleStyle": {
                  "type": "ColumnRuleStyleValue"
                },
                "ColumnRuleColor": {
                  "type": "ColumnRuleColorValue"
                },
                "FlowInto": {
                  "type": "FlowIntoValue"
                },
                "FlowFrom": {
                  "type": "FlowFromValue"
                },
                "ShapeOutside": {
                  "type": "ShapeOutsideValue"
                },
                "ShapeMargin": {
                  "type": "ShapeMarginValue"
                },
                "ShapeImageThreshold": {
                  "type": "ShapeImageThresholdValue"
                },
                "Content": {
                  "type": "ContentValue"
                },
                "CounterReset": {
                  "type": "CounterResetValue"
                },
                "CounterIncrement": {
                  "type": "CounterIncrementValue"
                },
                "StringSet": {
                  "type": "StringSetValue"
                }
              }
            ],
            "functions": {
              "get_key_string": {
                "doc": "Returns the key of the CSS property as a string, i.e. `background`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "cssproperty.key().into()"
              },
              "get_value_string": {
                "doc": "Returns the value of the CSS property as a string, i.e. `linear-gradient(red, blue)`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "cssproperty.value().into()"
              },
              "get_key_value_string": {
                "doc": "Returns the CSS key-value pair as a string, i.e. `background: linear-gradient(red, blue)`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "cssproperty.format_css().into()"
              },
              "interpolate": {
                "doc": "Interpolates two CSS properties given a value `t` ranging from 0.0 to 1.0. The interpolation function can be set on the `context` (`Ease`, `Linear`, etc.).",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "CssProperty"
                  },
                  {
                    "t": "f32"
                  },
                  {
                    "context": "InterpolateResolver"
                  }
                ],
                "returns": {
                  "type": "CssProperty"
                },
                "fn_body": "cssproperty.interpolate(&other, t, &context)"
              }
            }
          },
          "CssPathPseudoSelector": {
            "external": "azul_css::css::CssPathPseudoSelector",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "First": {
                  "doc": "`:first`"
                },
                "Last": {
                  "doc": "`:last`"
                },
                "NthChild": {
                  "type": "CssNthChildSelector",
                  "doc": "`:nth-child`"
                },
                "Hover": {
                  "doc": "`:hover` - mouse is over element"
                },
                "Active": {
                  "doc": "`:active` - mouse is pressed and over element"
                },
                "Focus": {
                  "doc": "`:focus` - element has received focus"
                }
              }
            ]
          },
          "CssNthChildSelector": {
            "external": "azul_css::css::CssNthChildSelector",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Number": {
                  "type": "u32"
                },
                "Even": {},
                "Odd": {},
                "Pattern": {
                  "type": "CssNthChildPattern"
                }
              }
            ]
          },
          "CssNthChildPattern": {
            "external": "azul_css::css::CssNthChildPattern",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "repeat": {
                  "type": "u32"
                },
                "offset": {
                  "type": "u32"
                }
              }
            ]
          },
          "Stylesheet": {
            "external": "azul_css::css::Stylesheet",
            "struct_fields": [
              {
                "rules": {
                  "type": "CssRuleBlockVec",
                  "doc": "The style rules making up the document - for example, de-duplicated CSS rules"
                }
              }
            ]
          },
          "Css": {
            "doc": "Css stylesheet - contains a parsed CSS stylesheet in \"rule blocks\", i.e. blocks of key-value pairs associated with a selector path.",
            "external": "azul_css::css::Css",
            "struct_fields": [
              {
                "stylesheets": {
                  "type": "StylesheetVec",
                  "doc": "One CSS stylesheet can hold more than one sub-stylesheet: For example, when overriding native styles, the `.sort_by_specificy()` function should not mix the two stylesheets during sorting."
                }
              }
            ],
            "constructors": {
              "empty": {
                "doc": "Returns an empty CSS style",
                "fn_args": [],
                "fn_body": "AzCss::empty()"
              },
              "from_string": {
                "doc": "Returns a CSS style parsed from a `String`",
                "fn_args": [
                  {
                    "s": "AzString"
                  }
                ],
                "fn_body": "AzCss::from_string(s)"
              }
            }
          },
          "CssDeclaration": {
            "doc": "Contains one parsed `key: value` pair, static or dynamic",
            "external": "azul_css::css::CssDeclaration",
            "enum_fields": [
              {
                "Static": {
                  "type": "CssProperty",
                  "doc": "Static key-value pair, such as `width: 500px`"
                },
                "Dynamic": {
                  "type": "DynamicCssProperty",
                  "doc": "Dynamic key-value pair with default value, such as `width: [[ my_id | 500px ]]`"
                }
              }
            ]
          },
          "DynamicCssProperty": {
            "doc": "A `DynamicCssProperty` is a type of css property that can be changed on possibly every frame by the Rust code - for example to implement an `On::Hover` behaviour. The syntax for such a property looks like this: ```no_run,ignore #my_div { padding: var(--my_dynamic_property_id, 400px); } ``` Azul will register a dynamic property with the key \"my_dynamic_property_id\" and the default value of 400px. If the property gets overridden during one frame, the overridden property takes precedence. At runtime the style is immutable (which is a performance optimization - if we can assume that the property never changes at runtime), we can do some optimizations on it. Dynamic style properties can also be used for animations and conditional styles (i.e. `hover`, `focus`, etc.), thereby leading to cleaner code, since all of these special cases now use one single API.",
            "external": "azul_css::css::DynamicCssProperty",
            "struct_fields": [
              {
                "dynamic_id": {
                  "type": "AzString",
                  "doc": "The stringified ID of this property, i.e. the `\"my_id\"` in `width: var(--my_id, 500px)`."
                },
                "default_value": {
                  "type": "CssProperty",
                  "doc": "Default values for this properties - one single value can control multiple properties!"
                }
              }
            ]
          },
          "CssPropertyType": {
            "external": "azul_css::CssPropertyType",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "CaretColor": {},
                "CaretAnimationDuration": {},
                "SelectionBackgroundColor": {},
                "SelectionColor": {},
                "TextColor": {},
                "FontSize": {},
                "FontFamily": {},
                "TextAlign": {},
                "TextJustify": {},
                "LetterSpacing": {},
                "LineHeight": {},
                "WordSpacing": {},
                "TabWidth": {},
                "WhiteSpace": {},
                "Hyphens": {},
                "Direction": {},
                "Cursor": {},
                "Display": {},
                "Float": {},
                "BoxSizing": {},
                "Width": {},
                "Height": {},
                "MinWidth": {},
                "MinHeight": {},
                "MaxWidth": {},
                "MaxHeight": {},
                "Position": {},
                "Top": {},
                "Right": {},
                "Left": {},
                "Bottom": {},
                "ZIndex": {},
                "FlexWrap": {},
                "FlexDirection": {},
                "FlexGrow": {},
                "FlexShrink": {},
                "FlexBasis": {},
                "JustifyContent": {},
                "AlignItems": {},
                "AlignContent": {},
                "ColumnGap": {},
                "RowGap": {},
                "GridTemplateColumns": {},
                "GridTemplateRows": {},
                "GridAutoColumns": {},
                "GridAutoRows": {},
                "GridColumn": {},
                "GridRow": {},
                "GridAutoFlow": {},
                "JustifySelf": {},
                "JustifyItems": {},
                "Gap": {},
                "GridGap": {},
                "AlignSelf": {},
                "Font": {},
                "WritingMode": {},
                "Clear": {},
                "BackgroundContent": {},
                "BackgroundPosition": {},
                "BackgroundSize": {},
                "BackgroundRepeat": {},
                "OverflowX": {},
                "OverflowY": {},
                "PaddingTop": {},
                "PaddingLeft": {},
                "PaddingRight": {},
                "PaddingBottom": {},
                "MarginTop": {},
                "MarginLeft": {},
                "MarginRight": {},
                "MarginBottom": {},
                "BorderTopLeftRadius": {},
                "BorderTopRightRadius": {},
                "BorderBottomLeftRadius": {},
                "BorderBottomRightRadius": {},
                "BorderTopColor": {},
                "BorderRightColor": {},
                "BorderLeftColor": {},
                "BorderBottomColor": {},
                "BorderTopStyle": {},
                "BorderRightStyle": {},
                "BorderLeftStyle": {},
                "BorderBottomStyle": {},
                "BorderTopWidth": {},
                "BorderRightWidth": {},
                "BorderLeftWidth": {},
                "BorderBottomWidth": {},
                "BoxShadowLeft": {},
                "BoxShadowRight": {},
                "BoxShadowTop": {},
                "BoxShadowBottom": {},
                "ScrollbarStyle": {},
                "ScrollbarWidth": {},
                "ScrollbarColor": {},
                "Opacity": {},
                "Visibility": {},
                "Transform": {},
                "TransformOrigin": {},
                "PerspectiveOrigin": {},
                "BackfaceVisibility": {},
                "MixBlendMode": {},
                "Filter": {},
                "BackdropFilter": {},
                "TextShadow": {},
                "BreakBefore": {},
                "BreakAfter": {},
                "BreakInside": {},
                "Orphans": {},
                "Widows": {},
                "BoxDecorationBreak": {},
                "ColumnCount": {},
                "ColumnWidth": {},
                "ColumnSpan": {},
                "ColumnFill": {},
                "ColumnRuleWidth": {},
                "ColumnRuleStyle": {},
                "ColumnRuleColor": {},
                "FlowInto": {},
                "FlowFrom": {},
                "ShapeOutside": {},
                "ShapeMargin": {},
                "ShapeImageThreshold": {},
                "Content": {},
                "CounterReset": {},
                "CounterIncrement": {},
                "StringSet": {}
              }
            ]
          },
          "AnimationInterpolationFunction": {
            "external": "azul_css::AnimationInterpolationFunction",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Ease": {},
                "Linear": {},
                "EaseIn": {},
                "EaseOut": {},
                "EaseInOut": {},
                "CubicBezier": {
                  "type": "SvgCubicCurve"
                }
              }
            ]
          },
          "NodeTypeTag": {
            "doc": "Signifies the type of a DOM node without carrying any associated data",
            "external": "azul_css::css::NodeTypeTag",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Body": {},
                "Div": {},
                "P": {},
                "H1": {},
                "H2": {},
                "H3": {},
                "H4": {},
                "H5": {},
                "H6": {},
                "Br": {},
                "Hr": {},
                "Pre": {},
                "BlockQuote": {},
                "Address": {},
                "Ul": {},
                "Ol": {},
                "Li": {},
                "Dl": {},
                "Dt": {},
                "Dd": {},
                "Table": {},
                "Caption": {},
                "THead": {},
                "TBody": {},
                "TFoot": {},
                "Tr": {},
                "Th": {},
                "Td": {},
                "ColGroup": {},
                "Col": {},
                "Form": {},
                "FieldSet": {},
                "Legend": {},
                "Label": {},
                "Input": {},
                "Button": {},
                "Select": {},
                "OptGroup": {},
                "SelectOption": {},
                "TextArea": {},
                "Span": {},
                "A": {},
                "Em": {},
                "Strong": {},
                "B": {},
                "I": {},
                "Code": {},
                "Samp": {},
                "Kbd": {},
                "Var": {},
                "Cite": {},
                "Abbr": {},
                "Acronym": {},
                "Q": {},
                "Sub": {},
                "Sup": {},
                "Small": {},
                "Big": {},
                "Text": {},
                "Img": {},
                "IFrame": {},
                "Before": {},
                "After": {},
                "Marker": {},
                "Placeholder": {}
              }
            ]
          },
          "ColorU": {
            "external": "azul_css::ColorU",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "r": {
                  "type": "u8"
                },
                "g": {
                  "type": "u8"
                },
                "b": {
                  "type": "u8"
                },
                "a": {
                  "type": "u8"
                }
              }
            ],
            "constructors": {
              "from_str": {
                "fn_args": [
                  {
                    "string": "AzString"
                  }
                ],
                "fn_body": "azul_css::parser::parse_css_color(string.as_str()).ok().unwrap_or(AzColorU::BLACK)"
              },
              "transparent": {
                "fn_args": [],
                "fn_body": "AzColorU::TRANSPARENT"
              },
              "white": {
                "fn_args": [],
                "fn_body": "AzColorU::WHITE"
              },
              "black": {
                "fn_args": [],
                "fn_body": "AzColorU::BLACK"
              }
            },
            "functions": {
              "to_hash": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "coloru.to_hash().into()"
              }
            }
          },
          "SizeMetric": {
            "external": "azul_css::SizeMetric",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Px": {},
                "Pt": {},
                "Em": {},
                "In": {},
                "Cm": {},
                "Mm": {},
                "Percent": {}
              }
            ]
          },
          "PixelValue": {
            "external": "azul_css::PixelValue",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "metric": {
                  "type": "SizeMetric"
                },
                "number": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "PixelValueNoPercent": {
            "external": "azul_css::PixelValueNoPercent",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "BoxShadowClipMode": {
            "external": "azul_css::BoxShadowClipMode",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Outset": {},
                "Inset": {}
              }
            ]
          },
          "StyleBoxShadow": {
            "external": "azul_css::StyleBoxShadow",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "offset": {
                  "type": "[PixelValueNoPercent;2]"
                },
                "color": {
                  "type": "ColorU"
                },
                "blur_radius": {
                  "type": "PixelValueNoPercent"
                },
                "spread_radius": {
                  "type": "PixelValueNoPercent"
                },
                "clip_mode": {
                  "type": "BoxShadowClipMode"
                }
              }
            ]
          },
          "StyleMixBlendMode": {
            "external": "azul_css::StyleMixBlendMode",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Normal": {},
                "Multiply": {},
                "Screen": {},
                "Overlay": {},
                "Darken": {},
                "Lighten": {},
                "ColorDodge": {},
                "ColorBurn": {},
                "HardLight": {},
                "SoftLight": {},
                "Difference": {},
                "Exclusion": {},
                "Hue": {},
                "Saturation": {},
                "Color": {},
                "Luminosity": {}
              }
            ]
          },
          "StyleFilter": {
            "external": "azul_css::StyleFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Blend": {
                  "type": "StyleMixBlendMode"
                },
                "Flood": {
                  "type": "ColorU"
                },
                "Blur": {
                  "type": "StyleBlur"
                },
                "Opacity": {
                  "type": "PercentageValue"
                },
                "ColorMatrix": {
                  "type": "StyleColorMatrix"
                },
                "DropShadow": {
                  "type": "StyleBoxShadow"
                },
                "ComponentTransfer": {},
                "Offset": {
                  "type": "StyleFilterOffset"
                },
                "Composite": {
                  "type": "StyleCompositeFilter"
                }
              }
            ]
          },
          "StyleBlur": {
            "external": "azul_css::StyleBlur",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "width": {
                  "type": "PixelValue"
                },
                "height": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleColorMatrix": {
            "external": "azul_css::StyleColorMatrix",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "matrix": {
                  "type": "[FloatValue;20]"
                }
              }
            ]
          },
          "StyleFilterOffset": {
            "external": "azul_css::StyleFilterOffset",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "PixelValue"
                },
                "y": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleCompositeFilter": {
            "external": "azul_css::StyleCompositeFilter",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Over": {},
                "In": {},
                "Atop": {},
                "Out": {},
                "Xor": {},
                "Lighter": {},
                "Arithmetic": {
                  "type": "[FloatValue;4]"
                }
              }
            ]
          },
          "LayoutAlignContent": {
            "external": "azul_css::LayoutAlignContent",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Stretch": {},
                "Center": {},
                "Start": {},
                "End": {},
                "SpaceBetween": {},
                "SpaceAround": {}
              }
            ]
          },
          "LayoutAlignItems": {
            "external": "azul_css::LayoutAlignItems",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Stretch": {},
                "Center": {},
                "Start": {},
                "End": {},
                "Baseline": {}
              }
            ]
          },
          "LayoutBottom": {
            "external": "azul_css::LayoutBottom",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutBoxSizing": {
            "external": "azul_css::LayoutBoxSizing",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "ContentBox": {},
                "BorderBox": {}
              }
            ]
          },
          "LayoutFlexDirection": {
            "external": "azul_css::LayoutFlexDirection",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Row": {},
                "RowReverse": {},
                "Column": {},
                "ColumnReverse": {}
              }
            ]
          },
          "LayoutDisplay": {
            "external": "azul_css::LayoutDisplay",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {},
                "Block": {},
                "Inline": {},
                "InlineBlock": {},
                "Flex": {},
                "InlineFlex": {},
                "Table": {},
                "InlineTable": {},
                "TableRowGroup": {},
                "TableHeaderGroup": {},
                "TableFooterGroup": {},
                "TableRow": {},
                "TableColumnGroup": {},
                "TableColumn": {},
                "TableCell": {},
                "TableCaption": {},
                "FlowRoot": {},
                "ListItem": {},
                "RunIn": {},
                "Marker": {},
                "Grid": {},
                "InlineGrid": {},
                "Initial": {},
                "Inherit": {}
              }
            ]
          },
          "LayoutFlexGrow": {
            "external": "azul_css::LayoutFlexGrow",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "LayoutFlexShrink": {
            "external": "azul_css::LayoutFlexShrink",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "LayoutFloat": {
            "external": "azul_css::LayoutFloat",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Left": {},
                "Right": {},
                "None": {}
              }
            ]
          },
          "LayoutHeight": {
            "external": "azul_css::LayoutHeight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ],
            "enum_fields": [
              {
                "Px": {
                  "type": "PixelValue"
                },
                "MinContent": {},
                "MaxContent": {}
              }
            ]
          },
          "LayoutJustifyContent": {
            "external": "azul_css::LayoutJustifyContent",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "FlexStart": {},
                "FlexEnd": {},
                "Start": {},
                "End": {},
                "Center": {},
                "SpaceBetween": {},
                "SpaceAround": {},
                "SpaceEvenly": {}
              }
            ]
          },
          "LayoutLeft": {
            "external": "azul_css::LayoutLeft",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMarginBottom": {
            "external": "azul_css::LayoutMarginBottom",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMarginLeft": {
            "external": "azul_css::LayoutMarginLeft",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMarginRight": {
            "external": "azul_css::LayoutMarginRight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMarginTop": {
            "external": "azul_css::LayoutMarginTop",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMaxHeight": {
            "external": "azul_css::LayoutMaxHeight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMaxWidth": {
            "external": "azul_css::LayoutMaxWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMinHeight": {
            "external": "azul_css::LayoutMinHeight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutMinWidth": {
            "external": "azul_css::LayoutMinWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutPaddingBottom": {
            "external": "azul_css::LayoutPaddingBottom",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutPaddingLeft": {
            "external": "azul_css::LayoutPaddingLeft",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutPaddingRight": {
            "external": "azul_css::LayoutPaddingRight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutPaddingTop": {
            "external": "azul_css::LayoutPaddingTop",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutPosition": {
            "external": "azul_css::LayoutPosition",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Static": {},
                "Relative": {},
                "Absolute": {},
                "Fixed": {},
                "Sticky": {}
              }
            ]
          },
          "LayoutRight": {
            "external": "azul_css::LayoutRight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutTop": {
            "external": "azul_css::LayoutTop",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "LayoutWidth": {
            "external": "azul_css::LayoutWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ],
            "enum_fields": [
              {
                "Px": {
                  "type": "PixelValue"
                },
                "MinContent": {},
                "MaxContent": {}
              }
            ]
          },
          "LayoutFlexWrap": {
            "external": "azul_css::LayoutFlexWrap",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Wrap": {},
                "NoWrap": {},
                "WrapReverse": {}
              }
            ]
          },
          "LayoutOverflow": {
            "external": "azul_css::LayoutOverflow",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Scroll": {
                  "doc": "Always shows a scroll bar, overflows on scroll."
                },
                "Auto": {
                  "doc": "Shows a scroll bar only when content overflows. This is the default."
                },
                "Hidden": {
                  "doc": "Clips overflowing content. The rest of the content will be invisible."
                },
                "Visible": {
                  "doc": "Content is not clipped and renders outside the element's box."
                },
                "Clip": {
                  "doc": "Similar to `hidden`, clips the content at the box's edge."
                }
              }
            ]
          },
          "FloatValue": {
            "external": "azul_css::FloatValue",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "number": {
                  "type": "isize"
                }
              }
            ]
          },
          "PercentageValue": {
            "external": "azul_css::PercentageValue",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "number": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "AngleMetric": {
            "external": "azul_css::AngleMetric",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Degree": {},
                "Radians": {},
                "Grad": {},
                "Turn": {},
                "Percent": {}
              }
            ]
          },
          "AngleValue": {
            "external": "azul_css::AngleValue",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "metric": {
                  "type": "AngleMetric"
                },
                "number": {
                  "type": "FloatValue"
                }
              }
            ],
            "functions": {
              "get_degrees": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "anglevalue.to_degrees()"
              }
            }
          },
          "NormalizedLinearColorStop": {
            "external": "azul_css::NormalizedLinearColorStop",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "offset": {
                  "type": "PercentageValue"
                },
                "color": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "NormalizedRadialColorStop": {
            "external": "azul_css::NormalizedRadialColorStop",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "angle": {
                  "type": "AngleValue"
                },
                "color": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "DirectionCorner": {
            "external": "azul_css::DirectionCorner",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Right": {},
                "Left": {},
                "Top": {},
                "Bottom": {},
                "TopRight": {},
                "TopLeft": {},
                "BottomRight": {},
                "BottomLeft": {}
              }
            ]
          },
          "DirectionCorners": {
            "external": "azul_css::DirectionCorners",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "from": {
                  "type": "DirectionCorner"
                },
                "to": {
                  "type": "DirectionCorner"
                }
              }
            ]
          },
          "Direction": {
            "external": "azul_css::Direction",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Angle": {
                  "type": "AngleValue"
                },
                "FromTo": {
                  "type": "DirectionCorners"
                }
              }
            ]
          },
          "ExtendMode": {
            "external": "azul_css::ExtendMode",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Clamp": {},
                "Repeat": {}
              }
            ]
          },
          "LinearGradient": {
            "external": "azul_css::LinearGradient",
            "struct_fields": [
              {
                "direction": {
                  "type": "Direction"
                },
                "extend_mode": {
                  "type": "ExtendMode"
                },
                "stops": {
                  "type": "NormalizedLinearColorStopVec"
                }
              }
            ]
          },
          "Shape": {
            "external": "azul_css::Shape",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Ellipse": {},
                "Circle": {}
              }
            ]
          },
          "RadialGradientSize": {
            "external": "azul_css::RadialGradientSize",
            "enum_fields": [
              {
                "ClosestSide": {},
                "ClosestCorner": {},
                "FarthestSide": {},
                "FarthestCorner": {}
              }
            ]
          },
          "RadialGradient": {
            "external": "azul_css::RadialGradient",
            "struct_fields": [
              {
                "shape": {
                  "type": "Shape"
                },
                "size": {
                  "type": "RadialGradientSize"
                },
                "position": {
                  "type": "StyleBackgroundPosition"
                },
                "extend_mode": {
                  "type": "ExtendMode"
                },
                "stops": {
                  "type": "NormalizedLinearColorStopVec"
                }
              }
            ]
          },
          "ConicGradient": {
            "external": "azul_css::ConicGradient",
            "struct_fields": [
              {
                "extend_mode": {
                  "type": "ExtendMode"
                },
                "center": {
                  "type": "StyleBackgroundPosition"
                },
                "angle": {
                  "type": "AngleValue"
                },
                "stops": {
                  "type": "NormalizedRadialColorStopVec"
                }
              }
            ]
          },
          "StyleBackgroundContent": {
            "external": "azul_css::StyleBackgroundContent",
            "enum_fields": [
              {
                "LinearGradient": {
                  "type": "LinearGradient"
                },
                "RadialGradient": {
                  "type": "RadialGradient"
                },
                "ConicGradient": {
                  "type": "ConicGradient"
                },
                "Image": {
                  "type": "AzString"
                },
                "Color": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "BackgroundPositionHorizontal": {
            "external": "azul_css::BackgroundPositionHorizontal",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Left": {},
                "Center": {},
                "Right": {},
                "Exact": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "BackgroundPositionVertical": {
            "external": "azul_css::BackgroundPositionVertical",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Top": {},
                "Center": {},
                "Bottom": {},
                "Exact": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBackgroundPosition": {
            "external": "azul_css::StyleBackgroundPosition",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "horizontal": {
                  "type": "BackgroundPositionHorizontal"
                },
                "vertical": {
                  "type": "BackgroundPositionVertical"
                }
              }
            ]
          },
          "StyleBackgroundRepeat": {
            "external": "azul_css::StyleBackgroundRepeat",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "NoRepeat": {},
                "Repeat": {},
                "RepeatX": {},
                "RepeatY": {}
              }
            ]
          },
          "StyleBackgroundSize": {
            "external": "azul_css::StyleBackgroundSize",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "ExactSize": {
                  "type": "[PixelValue;2]"
                },
                "Contain": {},
                "Cover": {}
              }
            ]
          },
          "StyleBorderBottomColor": {
            "external": "azul_css::StyleBorderBottomColor",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "StyleBorderBottomLeftRadius": {
            "external": "azul_css::StyleBorderBottomLeftRadius",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBorderBottomRightRadius": {
            "external": "azul_css::StyleBorderBottomRightRadius",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "BorderStyle": {
            "external": "azul_css::BorderStyle",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "None": {},
                "Solid": {},
                "Double": {},
                "Dotted": {},
                "Dashed": {},
                "Hidden": {},
                "Groove": {},
                "Ridge": {},
                "Inset": {},
                "Outset": {}
              }
            ]
          },
          "StyleBorderBottomStyle": {
            "external": "azul_css::StyleBorderBottomStyle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "BorderStyle"
                }
              }
            ]
          },
          "LayoutBorderBottomWidth": {
            "external": "azul_css::LayoutBorderBottomWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBorderLeftColor": {
            "external": "azul_css::StyleBorderLeftColor",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "StyleBorderLeftStyle": {
            "external": "azul_css::StyleBorderLeftStyle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "BorderStyle"
                }
              }
            ]
          },
          "LayoutBorderLeftWidth": {
            "external": "azul_css::LayoutBorderLeftWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBorderRightColor": {
            "external": "azul_css::StyleBorderRightColor",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "StyleBorderRightStyle": {
            "external": "azul_css::StyleBorderRightStyle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "BorderStyle"
                }
              }
            ]
          },
          "LayoutBorderRightWidth": {
            "external": "azul_css::LayoutBorderRightWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBorderTopColor": {
            "external": "azul_css::StyleBorderTopColor",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "StyleBorderTopLeftRadius": {
            "external": "azul_css::StyleBorderTopLeftRadius",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBorderTopRightRadius": {
            "external": "azul_css::StyleBorderTopRightRadius",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBorderTopStyle": {
            "external": "azul_css::StyleBorderTopStyle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "BorderStyle"
                }
              }
            ]
          },
          "LayoutBorderTopWidth": {
            "external": "azul_css::LayoutBorderTopWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "ScrollbarInfo": {
            "external": "azul_css::ScrollbarInfo",
            "struct_fields": [
              {
                "width": {
                  "type": "LayoutWidth",
                  "doc": "Total width (or height for vertical scrollbars) of the scrollbar in pixels"
                },
                "padding_left": {
                  "type": "LayoutPaddingLeft",
                  "doc": "Padding of the scrollbar tracker, in pixels. The inner bar is `width - padding` pixels wide."
                },
                "padding_right": {
                  "type": "LayoutPaddingRight",
                  "doc": "Padding of the scrollbar (right)"
                },
                "track": {
                  "type": "StyleBackgroundContent",
                  "doc": "Style of the scrollbar background (`-webkit-scrollbar` / `-webkit-scrollbar-track` / `-webkit-scrollbar-track-piece` combined)"
                },
                "thumb": {
                  "type": "StyleBackgroundContent",
                  "doc": "Style of the scrollbar thumbs (the \"up\" / \"down\" arrows), (`-webkit-scrollbar-thumb`)"
                },
                "button": {
                  "type": "StyleBackgroundContent",
                  "doc": "Styles the directional buttons on the scrollbar (`-webkit-scrollbar-button`)"
                },
                "corner": {
                  "type": "StyleBackgroundContent",
                  "doc": "If two scrollbars are present, addresses the (usually) bottom corner of the scrollable element, where two scrollbars might meet (`-webkit-scrollbar-corner`)"
                },
                "resizer": {
                  "type": "StyleBackgroundContent",
                  "doc": "Addresses the draggable resizing handle that appears above the `corner` at the bottom corner of some elements (`-webkit-resizer`)"
                }
              }
            ]
          },
          "ScrollbarStyle": {
            "external": "azul_css::ScrollbarStyle",
            "struct_fields": [
              {
                "horizontal": {
                  "type": "ScrollbarInfo",
                  "doc": "Horizontal scrollbar style, if any"
                },
                "vertical": {
                  "type": "ScrollbarInfo",
                  "doc": "Vertical scrollbar style, if any"
                }
              }
            ]
          },
          "StyleCursor": {
            "external": "azul_css::StyleCursor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Alias": {},
                "AllScroll": {},
                "Cell": {},
                "ColResize": {},
                "ContextMenu": {},
                "Copy": {},
                "Crosshair": {},
                "Default": {},
                "EResize": {},
                "EwResize": {},
                "Grab": {},
                "Grabbing": {},
                "Help": {},
                "Move": {},
                "NResize": {},
                "NsResize": {},
                "NeswResize": {},
                "NwseResize": {},
                "Pointer": {},
                "Progress": {},
                "RowResize": {},
                "SResize": {},
                "SeResize": {},
                "Text": {},
                "Unset": {},
                "VerticalText": {},
                "WResize": {},
                "Wait": {},
                "ZoomIn": {},
                "ZoomOut": {}
              }
            ]
          },
          "StyleFontFamily": {
            "external": "azul_css::StyleFontFamily",
            "enum_fields": [
              {
                "System": {
                  "type": "AzString"
                },
                "File": {
                  "type": "AzString"
                },
                "Ref": {
                  "type": "FontRef"
                }
              }
            ]
          },
          "StyleFontSize": {
            "external": "azul_css::StyleFontSize",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleLetterSpacing": {
            "external": "azul_css::StyleLetterSpacing",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleLineHeight": {
            "external": "azul_css::StyleLineHeight",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PercentageValue"
                }
              }
            ]
          },
          "StyleTabWidth": {
            "external": "azul_css::StyleTabWidth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleOpacity": {
            "external": "azul_css::StyleOpacity",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PercentageValue"
                }
              }
            ]
          },
          "StyleTransformOrigin": {
            "external": "azul_css::StyleTransformOrigin",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "PixelValue"
                },
                "y": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "InterpolateResolver": {
            "external": "azul_css::InterpolateResolver",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "interpolate_func": {
                  "type": "AnimationInterpolationFunction"
                },
                "parent_rect_width": {
                  "type": "f32"
                },
                "parent_rect_height": {
                  "type": "f32"
                },
                "current_rect_width": {
                  "type": "f32"
                },
                "current_rect_height": {
                  "type": "f32"
                }
              }
            ]
          },
          "StyleBackfaceVisibility": {
            "external": "azul_css::StyleBackfaceVisibility",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Visible": {},
                "Hidden": {}
              }
            ]
          },
          "StyleTransform": {
            "external": "azul_css::StyleTransform",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Matrix": {
                  "type": "StyleTransformMatrix2D"
                },
                "Matrix3D": {
                  "type": "StyleTransformMatrix3D"
                },
                "Translate": {
                  "type": "StyleTransformTranslate2D"
                },
                "Translate3D": {
                  "type": "StyleTransformTranslate3D"
                },
                "TranslateX": {
                  "type": "PixelValue"
                },
                "TranslateY": {
                  "type": "PixelValue"
                },
                "TranslateZ": {
                  "type": "PixelValue"
                },
                "Rotate": {
                  "type": "AngleValue"
                },
                "Rotate3D": {
                  "type": "StyleTransformRotate3D"
                },
                "RotateX": {
                  "type": "AngleValue"
                },
                "RotateY": {
                  "type": "AngleValue"
                },
                "RotateZ": {
                  "type": "AngleValue"
                },
                "Scale": {
                  "type": "StyleTransformScale2D"
                },
                "Scale3D": {
                  "type": "StyleTransformScale3D"
                },
                "ScaleX": {
                  "type": "PercentageValue"
                },
                "ScaleY": {
                  "type": "PercentageValue"
                },
                "ScaleZ": {
                  "type": "PercentageValue"
                },
                "Skew": {
                  "type": "StyleTransformSkew2D"
                },
                "SkewX": {
                  "type": "AngleValue"
                },
                "SkewY": {
                  "type": "AngleValue"
                },
                "Perspective": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleTransformMatrix2D": {
            "external": "azul_css::StyleTransformMatrix2D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "a": {
                  "type": "FloatValue"
                },
                "b": {
                  "type": "FloatValue"
                },
                "c": {
                  "type": "FloatValue"
                },
                "d": {
                  "type": "FloatValue"
                },
                "tx": {
                  "type": "FloatValue"
                },
                "ty": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "StyleTransformMatrix3D": {
            "external": "azul_css::StyleTransformMatrix3D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "m11": {
                  "type": "FloatValue"
                },
                "m12": {
                  "type": "FloatValue"
                },
                "m13": {
                  "type": "FloatValue"
                },
                "m14": {
                  "type": "FloatValue"
                },
                "m21": {
                  "type": "FloatValue"
                },
                "m22": {
                  "type": "FloatValue"
                },
                "m23": {
                  "type": "FloatValue"
                },
                "m24": {
                  "type": "FloatValue"
                },
                "m31": {
                  "type": "FloatValue"
                },
                "m32": {
                  "type": "FloatValue"
                },
                "m33": {
                  "type": "FloatValue"
                },
                "m34": {
                  "type": "FloatValue"
                },
                "m41": {
                  "type": "FloatValue"
                },
                "m42": {
                  "type": "FloatValue"
                },
                "m43": {
                  "type": "FloatValue"
                },
                "m44": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "StyleTransformTranslate2D": {
            "external": "azul_css::StyleTransformTranslate2D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "PixelValue"
                },
                "y": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleTransformTranslate3D": {
            "external": "azul_css::StyleTransformTranslate3D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "PixelValue"
                },
                "y": {
                  "type": "PixelValue"
                },
                "z": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleTransformRotate3D": {
            "external": "azul_css::StyleTransformRotate3D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "FloatValue"
                },
                "y": {
                  "type": "FloatValue"
                },
                "z": {
                  "type": "FloatValue"
                },
                "angle": {
                  "type": "AngleValue"
                }
              }
            ]
          },
          "StyleTransformScale2D": {
            "external": "azul_css::StyleTransformScale2D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "FloatValue"
                },
                "y": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "StyleTransformScale3D": {
            "external": "azul_css::StyleTransformScale3D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "FloatValue"
                },
                "y": {
                  "type": "FloatValue"
                },
                "z": {
                  "type": "FloatValue"
                }
              }
            ]
          },
          "StyleTransformSkew2D": {
            "external": "azul_css::StyleTransformSkew2D",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "AngleValue"
                },
                "y": {
                  "type": "AngleValue"
                }
              }
            ]
          },
          "StyleTextAlign": {
            "external": "azul_css::StyleTextAlign",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Left": {},
                "Center": {},
                "Right": {},
                "Justify": {},
                "Start": {},
                "End": {}
              }
            ]
          },
          "StyleTextColor": {
            "external": "azul_css::StyleTextColor",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "StyleWordSpacing": {
            "external": "azul_css::StyleWordSpacing",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "PixelValue"
                }
              }
            ]
          },
          "StyleBoxShadowValue": {
            "external": "azul_css::StyleBoxShadowValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBoxShadow"
                }
              }
            ]
          },
          "LayoutAlignContentValue": {
            "external": "azul_css::LayoutAlignContentValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutAlignContent"
                }
              }
            ]
          },
          "LayoutAlignItemsValue": {
            "external": "azul_css::LayoutAlignItemsValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutAlignItems"
                }
              }
            ]
          },
          "LayoutBottomValue": {
            "external": "azul_css::LayoutBottomValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutBottom"
                }
              }
            ]
          },
          "LayoutBoxSizingValue": {
            "external": "azul_css::LayoutBoxSizingValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutBoxSizing"
                }
              }
            ]
          },
          "LayoutFlexDirectionValue": {
            "external": "azul_css::LayoutFlexDirectionValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutFlexDirection"
                }
              }
            ]
          },
          "LayoutDisplayValue": {
            "external": "azul_css::LayoutDisplayValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutDisplay"
                }
              }
            ]
          },
          "LayoutFlexGrowValue": {
            "external": "azul_css::LayoutFlexGrowValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutFlexGrow"
                }
              }
            ]
          },
          "LayoutFlexShrinkValue": {
            "external": "azul_css::LayoutFlexShrinkValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutFlexShrink"
                }
              }
            ]
          },
          "LayoutFloatValue": {
            "external": "azul_css::LayoutFloatValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutFloat"
                }
              }
            ]
          },
          "LayoutHeightValue": {
            "external": "azul_css::LayoutHeightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutHeight"
                }
              }
            ]
          },
          "LayoutJustifyContentValue": {
            "external": "azul_css::LayoutJustifyContentValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutJustifyContent"
                }
              }
            ]
          },
          "LayoutLeftValue": {
            "external": "azul_css::LayoutLeftValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutLeft"
                }
              }
            ]
          },
          "LayoutMarginBottomValue": {
            "external": "azul_css::LayoutMarginBottomValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMarginBottom"
                }
              }
            ]
          },
          "LayoutMarginLeftValue": {
            "external": "azul_css::LayoutMarginLeftValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMarginLeft"
                }
              }
            ]
          },
          "LayoutMarginRightValue": {
            "external": "azul_css::LayoutMarginRightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMarginRight"
                }
              }
            ]
          },
          "LayoutMarginTopValue": {
            "external": "azul_css::LayoutMarginTopValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMarginTop"
                }
              }
            ]
          },
          "LayoutMaxHeightValue": {
            "external": "azul_css::LayoutMaxHeightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMaxHeight"
                }
              }
            ]
          },
          "LayoutMaxWidthValue": {
            "external": "azul_css::LayoutMaxWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMaxWidth"
                }
              }
            ]
          },
          "LayoutMinHeightValue": {
            "external": "azul_css::LayoutMinHeightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMinHeight"
                }
              }
            ]
          },
          "LayoutMinWidthValue": {
            "external": "azul_css::LayoutMinWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutMinWidth"
                }
              }
            ]
          },
          "LayoutPaddingBottomValue": {
            "external": "azul_css::LayoutPaddingBottomValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutPaddingBottom"
                }
              }
            ]
          },
          "LayoutPaddingLeftValue": {
            "external": "azul_css::LayoutPaddingLeftValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutPaddingLeft"
                }
              }
            ]
          },
          "LayoutPaddingRightValue": {
            "external": "azul_css::LayoutPaddingRightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutPaddingRight"
                }
              }
            ]
          },
          "LayoutPaddingTopValue": {
            "external": "azul_css::LayoutPaddingTopValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutPaddingTop"
                }
              }
            ]
          },
          "LayoutPositionValue": {
            "external": "azul_css::LayoutPositionValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutPosition"
                }
              }
            ]
          },
          "LayoutRightValue": {
            "external": "azul_css::LayoutRightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutRight"
                }
              }
            ]
          },
          "LayoutTopValue": {
            "external": "azul_css::LayoutTopValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutTop"
                }
              }
            ]
          },
          "LayoutWidthValue": {
            "external": "azul_css::LayoutWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutWidth"
                }
              }
            ]
          },
          "LayoutFlexWrapValue": {
            "external": "azul_css::LayoutFlexWrapValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutFlexWrap"
                }
              }
            ]
          },
          "LayoutOverflowValue": {
            "external": "azul_css::LayoutOverflowValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutOverflow"
                }
              }
            ]
          },
          "ScrollbarStyleValue": {
            "external": "azul_css::ScrollbarStyleValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "ScrollbarStyle"
                }
              }
            ]
          },
          "StyleBackgroundContentVecValue": {
            "external": "azul_css::StyleBackgroundContentVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBackgroundContentVec"
                }
              }
            ]
          },
          "StyleBackgroundPositionVecValue": {
            "external": "azul_css::StyleBackgroundPositionVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBackgroundPositionVec"
                }
              }
            ]
          },
          "StyleBackgroundRepeatVecValue": {
            "external": "azul_css::StyleBackgroundRepeatVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBackgroundRepeatVec"
                }
              }
            ]
          },
          "StyleBackgroundSizeVecValue": {
            "external": "azul_css::StyleBackgroundSizeVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBackgroundSizeVec"
                }
              }
            ]
          },
          "StyleBorderBottomColorValue": {
            "external": "azul_css::StyleBorderBottomColorValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderBottomColor"
                }
              }
            ]
          },
          "StyleBorderBottomLeftRadiusValue": {
            "external": "azul_css::StyleBorderBottomLeftRadiusValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderBottomLeftRadius"
                }
              }
            ]
          },
          "StyleBorderBottomRightRadiusValue": {
            "external": "azul_css::StyleBorderBottomRightRadiusValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderBottomRightRadius"
                }
              }
            ]
          },
          "StyleBorderBottomStyleValue": {
            "external": "azul_css::StyleBorderBottomStyleValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderBottomStyle"
                }
              }
            ]
          },
          "LayoutBorderBottomWidthValue": {
            "external": "azul_css::LayoutBorderBottomWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutBorderBottomWidth"
                }
              }
            ]
          },
          "StyleBorderLeftColorValue": {
            "external": "azul_css::StyleBorderLeftColorValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderLeftColor"
                }
              }
            ]
          },
          "StyleBorderLeftStyleValue": {
            "external": "azul_css::StyleBorderLeftStyleValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderLeftStyle"
                }
              }
            ]
          },
          "LayoutBorderLeftWidthValue": {
            "external": "azul_css::LayoutBorderLeftWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutBorderLeftWidth"
                }
              }
            ]
          },
          "StyleBorderRightColorValue": {
            "external": "azul_css::StyleBorderRightColorValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderRightColor"
                }
              }
            ]
          },
          "StyleBorderRightStyleValue": {
            "external": "azul_css::StyleBorderRightStyleValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderRightStyle"
                }
              }
            ]
          },
          "LayoutBorderRightWidthValue": {
            "external": "azul_css::LayoutBorderRightWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutBorderRightWidth"
                }
              }
            ]
          },
          "StyleBorderTopColorValue": {
            "external": "azul_css::StyleBorderTopColorValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderTopColor"
                }
              }
            ]
          },
          "StyleBorderTopLeftRadiusValue": {
            "external": "azul_css::StyleBorderTopLeftRadiusValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderTopLeftRadius"
                }
              }
            ]
          },
          "StyleBorderTopRightRadiusValue": {
            "external": "azul_css::StyleBorderTopRightRadiusValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderTopRightRadius"
                }
              }
            ]
          },
          "StyleBorderTopStyleValue": {
            "external": "azul_css::StyleBorderTopStyleValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBorderTopStyle"
                }
              }
            ]
          },
          "LayoutBorderTopWidthValue": {
            "external": "azul_css::LayoutBorderTopWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "LayoutBorderTopWidth"
                }
              }
            ]
          },
          "StyleCursorValue": {
            "external": "azul_css::StyleCursorValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleCursor"
                }
              }
            ]
          },
          "StyleFontFamilyVecValue": {
            "external": "azul_css::StyleFontFamilyVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleFontFamilyVec"
                }
              }
            ]
          },
          "StyleFontSizeValue": {
            "external": "azul_css::StyleFontSizeValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleFontSize"
                }
              }
            ]
          },
          "StyleLetterSpacingValue": {
            "external": "azul_css::StyleLetterSpacingValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleLetterSpacing"
                }
              }
            ]
          },
          "StyleLineHeightValue": {
            "external": "azul_css::StyleLineHeightValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleLineHeight"
                }
              }
            ]
          },
          "StyleTabWidthValue": {
            "external": "azul_css::StyleTabWidthValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleTabWidth"
                }
              }
            ]
          },
          "StyleTextAlignValue": {
            "external": "azul_css::StyleTextAlignValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleTextAlign"
                }
              }
            ]
          },
          "StyleTextColorValue": {
            "external": "azul_css::StyleTextColorValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleTextColor"
                }
              }
            ]
          },
          "StyleWordSpacingValue": {
            "external": "azul_css::StyleWordSpacingValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleWordSpacing"
                }
              }
            ]
          },
          "StyleOpacityValue": {
            "external": "azul_css::StyleOpacityValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleOpacity"
                }
              }
            ]
          },
          "StyleTransformVecValue": {
            "external": "azul_css::StyleTransformVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleTransformVec"
                }
              }
            ]
          },
          "StyleTransformOriginValue": {
            "external": "azul_css::StyleTransformOriginValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleTransformOrigin"
                }
              }
            ]
          },
          "StylePerspectiveOriginValue": {
            "external": "azul_css::StylePerspectiveOriginValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleTransformOrigin"
                }
              }
            ]
          },
          "StyleBackfaceVisibilityValue": {
            "external": "azul_css::StyleBackfaceVisibilityValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleBackfaceVisibility"
                }
              }
            ]
          },
          "StyleMixBlendModeValue": {
            "external": "azul_css::StyleMixBlendModeValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleMixBlendMode"
                }
              }
            ]
          },
          "StyleFilterVecValue": {
            "external": "azul_css::StyleFilterVecValue",
            "enum_fields": [
              {
                "Auto": {}
              },
              {
                "None": {}
              },
              {
                "Inherit": {}
              },
              {
                "Initial": {}
              },
              {
                "Exact": {
                  "type": "StyleFilterVec"
                }
              }
            ]
          }
        }
      },
      "widgets": {
        "doc": "Default, built-in widgets (button, label, textinput, etc.)",
        "classes": {
          "Ribbon": {
            "external": "crate::widgets::ribbon::Ribbon",
            "struct_fields": [
              {
                "tab_active": {
                  "type": "i32"
                }
              }
            ],
            "functions": {
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "callback": "RibbonOnTabClickedCallback"
                  },
                  {
                    "data": "RefAny"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "ribbon.dom(callback, data)"
              }
            }
          },
          "RibbonOnTabClickedCallback": {
            "external": "crate::widgets::ribbon::RibbonOnTabClickedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "RibbonOnTabClickedCallbackType"
                }
              }
            ]
          },
          "RibbonOnTabClickedCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , i32) -> Update",
            "external": "azul_dll::widgets::ribbon::RibbonOnTabClickedCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "i32",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "Button": {
            "external": "crate::widgets::button::Button",
            "struct_fields": [
              {
                "label": {
                  "type": "AzString",
                  "doc": "Content (image or text) of this button, centered by default"
                },
                "image": {
                  "type": "OptionImageRef",
                  "doc": "Optional image that is displayed next to the label"
                },
                "container_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style for this button container"
                },
                "label_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style of the label"
                },
                "image_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style of the image"
                },
                "on_click": {
                  "type": "OptionButtonOnClick",
                  "doc": "Optional: Function to call when the button is clicked"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new labeled button",
                "fn_args": [
                  {
                    "label": "AzString"
                  }
                ],
                "fn_body": "AzButton::new(label)"
              }
            },
            "functions": {
              "set_on_click": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "fn_body": "button.set_on_click(data, callback);"
              },
              "with_on_click": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CallbackType"
                  }
                ],
                "returns": {
                  "type": "Button"
                },
                "fn_body": "let mut button = button.swap_with_default(); button.set_on_click(data, callback); button"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "button.swap_with_default().dom()"
              }
            }
          },
          "ButtonOnClick": {
            "external": "crate::widgets::button::ButtonOnClick",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "Callback"
                }
              }
            ]
          },
          "FileInput": {
            "external": "crate::widgets::file_input::FileInput",
            "struct_fields": [
              {
                "state": {
                  "type": "FileInputStateWrapper",
                  "doc": "State of the file input"
                },
                "default_text": {
                  "type": "AzString",
                  "doc": "Default text to display when no file has been selected (default = \"Select File...\")"
                },
                "image": {
                  "type": "OptionImageRef",
                  "doc": "Optional image that is displayed next to the label"
                },
                "container_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style for this button container"
                },
                "label_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style of the label"
                },
                "image_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style of the image"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new file input button",
                "fn_args": [
                  {
                    "path": "OptionAzString"
                  }
                ],
                "fn_body": "AzFileInput::new(path)"
              }
            },
            "functions": {
              "set_default_text": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "default_text": "AzString"
                  }
                ],
                "fn_body": "fileinput.set_default_text(default_text);"
              },
              "with_default_text": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "default_text": "AzString"
                  }
                ],
                "returns": {
                  "type": "FileInput"
                },
                "fn_body": "let mut fileinput = fileinput.swap_with_default(); fileinput.set_default_text(default_text); fileinput"
              },
              "set_on_path_change": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "FileInputOnPathChangeCallbackType"
                  }
                ],
                "fn_body": "fileinput.set_on_path_change(data, callback);"
              },
              "with_on_path_change": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "FileInputOnPathChangeCallbackType"
                  }
                ],
                "returns": {
                  "type": "FileInput"
                },
                "fn_body": "let mut fileinput = fileinput.swap_with_default(); fileinput.set_on_path_change(data, callback); fileinput"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "fileinput.swap_with_default().dom()"
              }
            }
          },
          "FileInputStateWrapper": {
            "external": "crate::widgets::file_input::FileInputStateWrapper",
            "struct_fields": [
              {
                "inner": {
                  "type": "FileInputState"
                },
                "on_path_change": {
                  "type": "OptionFileInputOnPathChange"
                },
                "file_dialog_title": {
                  "type": "AzString",
                  "doc": "Title displayed in the file selection dialog"
                },
                "default_dir": {
                  "type": "OptionAzString",
                  "doc": "Default directory of file input"
                },
                "file_types": {
                  "type": "OptionFileTypeList",
                  "doc": "Selectable file types (default: None = user is able to select all file types)"
                }
              }
            ]
          },
          "FileInputState": {
            "external": "crate::widgets::file_input::FileInputState",
            "struct_fields": [
              {
                "path": {
                  "type": "OptionAzString"
                }
              }
            ]
          },
          "FileInputOnPathChange": {
            "external": "crate::widgets::file_input::FileInputOnPathChange",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "FileInputOnPathChangeCallback"
                }
              }
            ]
          },
          "FileInputOnPathChangeCallback": {
            "external": "crate::widgets::file_input::FileInputOnPathChangeCallback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "FileInputOnPathChangeCallbackType"
                }
              }
            ]
          },
          "FileInputOnPathChangeCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &FileInputState) -> Update",
            "external": "azul_dll::widgets::file_input::FileInputOnPathChangeCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "FileInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "CheckBox": {
            "external": "crate::widgets::check_box::CheckBox",
            "struct_fields": [
              {
                "state": {
                  "type": "CheckBoxStateWrapper"
                },
                "container_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style for the checkbox container"
                },
                "content_style": {
                  "type": "NodeDataInlineCssPropertyVec",
                  "doc": "Style for the checkbox content"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new checkbox, disabled or enabled",
                "fn_args": [
                  {
                    "checked": "bool"
                  }
                ],
                "fn_body": "AzCheckBox::new(checked)"
              }
            },
            "functions": {
              "set_on_toggle": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CheckBoxOnToggleCallbackType"
                  }
                ],
                "fn_body": "checkbox.set_on_toggle(data, callback);"
              },
              "with_on_toggle": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "CheckBoxOnToggleCallbackType"
                  }
                ],
                "returns": {
                  "type": "CheckBox"
                },
                "fn_body": "let mut checkbox = checkbox.swap_with_default(); checkbox.set_on_toggle(data, callback); checkbox"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "checkbox.swap_with_default().dom()"
              }
            }
          },
          "CheckBoxStateWrapper": {
            "external": "crate::widgets::check_box::CheckBoxStateWrapper",
            "struct_fields": [
              {
                "inner": {
                  "type": "CheckBoxState",
                  "doc": "Content (image or text) of this CheckBox, centered by default"
                },
                "on_toggle": {
                  "type": "OptionCheckBoxOnToggle",
                  "doc": "Optional: Function to call when the CheckBox is toggled"
                }
              }
            ]
          },
          "CheckBoxOnToggle": {
            "external": "crate::widgets::check_box::CheckBoxOnToggle",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "CheckBoxOnToggleCallback"
                }
              }
            ]
          },
          "CheckBoxOnToggleCallback": {
            "external": "crate::widgets::check_box::CheckBoxOnToggleCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "CheckBoxOnToggleCallbackType"
                }
              }
            ]
          },
          "CheckBoxOnToggleCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &CheckBoxState) -> Update",
            "external": "azul_dll::widgets::check_box::CheckBoxOnToggleCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CheckBoxState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "CheckBoxState": {
            "external": "crate::widgets::check_box::CheckBoxState",
            "struct_fields": [
              {
                "checked": {
                  "type": "bool"
                }
              }
            ]
          },
          "Label": {
            "external": "crate::widgets::label::Label",
            "struct_fields": [
              {
                "string": {
                  "type": "AzString"
                },
                "label_style": {
                  "type": "NodeDataInlineCssPropertyVec"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "text": "AzString"
                  }
                ],
                "fn_body": "AzLabel::new(text)"
              }
            },
            "functions": {
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "label.swap_with_default().dom()"
              }
            }
          },
          "ColorInput": {
            "external": "crate::widgets::color_input::ColorInput",
            "struct_fields": [
              {
                "state": {
                  "type": "ColorInputStateWrapper"
                },
                "style": {
                  "type": "NodeDataInlineCssPropertyVec"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "color": "ColorU"
                  }
                ],
                "fn_body": "AzColorInput::new(color)"
              }
            },
            "functions": {
              "set_on_value_change": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "ColorInputOnValueChangeCallbackType"
                  }
                ],
                "fn_body": "colorinput.set_on_value_change(data, callback)"
              },
              "with_on_value_change": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "ColorInputOnValueChangeCallbackType"
                  }
                ],
                "returns": {
                  "type": "ColorInput"
                },
                "fn_body": "let mut colorinput = colorinput.swap_with_default(); colorinput.set_on_value_change(data, callback); colorinput"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "colorinput.swap_with_default().dom()"
              }
            }
          },
          "ColorInputStateWrapper": {
            "external": "crate::widgets::color_input::ColorInputStateWrapper",
            "struct_fields": [
              {
                "inner": {
                  "type": "ColorInputState"
                },
                "title": {
                  "type": "AzString"
                },
                "on_value_change": {
                  "type": "OptionColorInputOnValueChange"
                }
              }
            ]
          },
          "ColorInputState": {
            "external": "crate::widgets::color_input::ColorInputState",
            "struct_fields": [
              {
                "color": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "ColorInputOnValueChange": {
            "external": "crate::widgets::color_input::ColorInputOnValueChange",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "ColorInputOnValueChangeCallback"
                }
              }
            ]
          },
          "ColorInputOnValueChangeCallback": {
            "external": "crate::widgets::color_input::ColorInputOnValueChangeCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ColorInputOnValueChangeCallbackType"
                }
              }
            ]
          },
          "ColorInputOnValueChangeCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &ColorInputState) -> Update",
            "external": "azul_dll::widgets::color_input::ColorInputOnValueChangeCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "ColorInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "TextInput": {
            "external": "crate::widgets::text_input::TextInput",
            "struct_fields": [
              {
                "state": {
                  "type": "TextInputStateWrapper"
                },
                "placeholder_style": {
                  "type": "NodeDataInlineCssPropertyVec"
                },
                "container_style": {
                  "type": "NodeDataInlineCssPropertyVec"
                },
                "label_style": {
                  "type": "NodeDataInlineCssPropertyVec"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [],
                "fn_body": "AzTextInput::new()"
              }
            },
            "functions": {
              "set_text": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "text": "AzString"
                  }
                ],
                "fn_body": "textinput.set_text(text)"
              },
              "with_text": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "text": "AzString"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "textinput.with_text(text)"
              },
              "set_placeholder": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "text": "AzString"
                  }
                ],
                "fn_body": "textinput.set_placeholder(text)"
              },
              "with_placeholder": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "text": "AzString"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "textinput.with_placeholder(text)"
              },
              "set_on_text_input": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnTextInputCallbackType"
                  }
                ],
                "fn_body": "textinput.set_on_text_input(data, callback)"
              },
              "with_on_text_input": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnTextInputCallbackType"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "let mut textinput = textinput.swap_with_default(); textinput.set_on_text_input(data, callback); textinput"
              },
              "set_on_virtual_key_down": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnVirtualKeyDownCallbackType"
                  }
                ],
                "fn_body": "textinput.set_on_virtual_key_down(data, callback)"
              },
              "with_on_virtual_key_down": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnVirtualKeyDownCallbackType"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "let mut textinput = textinput.swap_with_default(); textinput.set_on_virtual_key_down(data, callback); textinput"
              },
              "set_on_focus_lost": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnFocusLostCallbackType"
                  }
                ],
                "fn_body": "textinput.set_on_focus_lost(data, callback)"
              },
              "with_on_focus_lost": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnFocusLostCallbackType"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "let mut textinput = textinput.swap_with_default(); textinput.set_on_focus_lost(data, callback); textinput"
              },
              "set_placeholder_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "placeholder_style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "textinput.set_placeholder_style(placeholder_style)"
              },
              "with_placeholder_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "placeholder_style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "let mut textinput = textinput.swap_with_default(); textinput.set_placeholder_style(placeholder_style); textinput"
              },
              "set_container_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "container_style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": " textinput.set_container_style(container_style)"
              },
              "with_container_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "container_style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "let mut textinput = textinput.swap_with_default(); textinput.set_container_style(container_style); textinput"
              },
              "set_label_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "label_style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "textinput.set_container_style(label_style)"
              },
              "with_label_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "label_style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "TextInput"
                },
                "fn_body": "let mut textinput = textinput.swap_with_default(); textinput.set_label_style(label_style); textinput"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "textinput.swap_with_default().dom()"
              }
            }
          },
          "TextInputStateWrapper": {
            "external": "crate::widgets::text_input::TextInputStateWrapper",
            "struct_fields": [
              {
                "inner": {
                  "type": "TextInputState"
                },
                "on_text_input": {
                  "type": "OptionTextInputOnTextInput"
                },
                "on_virtual_key_down": {
                  "type": "OptionTextInputOnVirtualKeyDown"
                },
                "on_focus_lost": {
                  "type": "OptionTextInputOnFocusLost"
                },
                "update_text_input_before_calling_focus_lost_fn": {
                  "type": "bool"
                },
                "update_text_input_before_calling_vk_down_fn": {
                  "type": "bool"
                },
                "cursor_animation": {
                  "type": "OptionTimerId"
                }
              }
            ]
          },
          "TextInputState": {
            "external": "crate::widgets::text_input::TextInputState",
            "struct_fields": [
              {
                "text": {
                  "type": "U32Vec"
                },
                "placeholder": {
                  "type": "OptionAzString"
                },
                "max_len": {
                  "type": "usize"
                },
                "selection": {
                  "type": "OptionTextInputSelection"
                },
                "cursor_pos": {
                  "type": "usize"
                }
              }
            ],
            "functions": {
              "get_text": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "textinputstate.get_text().into()"
              }
            }
          },
          "TextInputSelection": {
            "external": "crate::widgets::text_input::TextInputSelection",
            "enum_fields": [
              {
                "All": {},
                "FromTo": {
                  "type": "TextInputSelectionRange"
                }
              }
            ]
          },
          "TextInputSelectionRange": {
            "external": "crate::widgets::text_input::TextInputSelectionRange",
            "struct_fields": [
              {
                "from": {
                  "type": "usize"
                },
                "to": {
                  "type": "usize"
                }
              }
            ]
          },
          "TextInputOnTextInput": {
            "external": "crate::widgets::text_input::TextInputOnTextInput",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "TextInputOnTextInputCallback"
                }
              }
            ]
          },
          "TextInputOnTextInputCallback": {
            "external": "crate::widgets::text_input::TextInputOnTextInputCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "TextInputOnTextInputCallbackType"
                }
              }
            ]
          },
          "TextInputOnTextInputCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &TextInputState) -> OnTextInputReturn",
            "external": "azul_dll::widgets::text_input::TextInputOnTextInputCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "TextInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "OnTextInputReturn"
              }
            }
          },
          "TextInputOnVirtualKeyDown": {
            "external": "crate::widgets::text_input::TextInputOnVirtualKeyDown",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "TextInputOnVirtualKeyDownCallback"
                }
              }
            ]
          },
          "TextInputOnVirtualKeyDownCallback": {
            "external": "crate::widgets::text_input::TextInputOnVirtualKeyDownCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "TextInputOnVirtualKeyDownCallbackType"
                }
              }
            ]
          },
          "TextInputOnVirtualKeyDownCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &TextInputState) -> OnTextInputReturn",
            "external": "azul_dll::widgets::text_input::TextInputOnVirtualKeyDownCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "TextInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "OnTextInputReturn"
              }
            }
          },
          "TextInputOnFocusLost": {
            "external": "crate::widgets::text_input::TextInputOnFocusLost",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "TextInputOnFocusLostCallback"
                }
              }
            ]
          },
          "TextInputOnFocusLostCallback": {
            "external": "crate::widgets::text_input::TextInputOnFocusLostCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "TextInputOnFocusLostCallbackType"
                }
              }
            ]
          },
          "TextInputOnFocusLostCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &TextInputState) -> Update",
            "external": "azul_dll::widgets::text_input::TextInputOnFocusLostCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "TextInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnTextInputReturn": {
            "external": "crate::widgets::text_input::OnTextInputReturn",
            "struct_fields": [
              {
                "update": {
                  "type": "Update"
                },
                "valid": {
                  "type": "TextInputValid"
                }
              }
            ]
          },
          "TextInputValid": {
            "external": "crate::widgets::text_input::TextInputValid",
            "enum_fields": [
              {
                "Yes": {},
                "No": {}
              }
            ]
          },
          "NumberInput": {
            "external": "crate::widgets::number_input::NumberInput",
            "struct_fields": [
              {
                "text_input": {
                  "type": "TextInput"
                },
                "state": {
                  "type": "NumberInputStateWrapper"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "number": "f32"
                  }
                ],
                "fn_body": "AzNumberInput::new(number)"
              }
            },
            "functions": {
              "set_on_text_input": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnTextInputCallbackType"
                  }
                ],
                "fn_body": "numberinput.set_on_text_input(data, callback)"
              },
              "with_on_text_input": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnTextInputCallbackType"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_text_input(data, callback); numberinput"
              },
              "set_on_virtual_key_down": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnVirtualKeyDownCallbackType"
                  }
                ],
                "fn_body": "numberinput.set_on_virtual_key_down(data, callback)"
              },
              "with_on_virtual_key_down": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TextInputOnVirtualKeyDownCallbackType"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_virtual_key_down(data, callback); numberinput"
              },
              "set_on_focus_lost": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "NumberInputOnFocusLostCallbackType"
                  }
                ],
                "fn_body": "numberinput.set_on_focus_lost(data, callback)"
              },
              "with_on_focus_lost": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "NumberInputOnFocusLostCallbackType"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_focus_lost(data, callback); numberinput"
              },
              "set_placeholder_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "numberinput.set_placeholder_style(style)"
              },
              "with_placeholder_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_placeholder_style(style); numberinput"
              },
              "set_container_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "numberinput.set_container_style(style)"
              },
              "with_container_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_container_style(style); numberinput"
              },
              "set_label_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "fn_body": "numberinput.set_label_style(style)"
              },
              "with_label_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "style": "NodeDataInlineCssPropertyVec"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_label_style(style); numberinput"
              },
              "set_on_value_change": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "NumberInputOnValueChangeCallbackType"
                  }
                ],
                "fn_body": "numberinput.set_on_value_change(data, callback)"
              },
              "with_on_value_change": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "NumberInputOnValueChangeCallbackType"
                  }
                ],
                "returns": {
                  "type": "NumberInput"
                },
                "fn_body": "let mut numberinput = numberinput.swap_with_default(); numberinput.set_on_value_change(data, callback); numberinput"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "numberinput.swap_with_default().dom()"
              }
            }
          },
          "NumberInputStateWrapper": {
            "external": "crate::widgets::number_input::NumberInputStateWrapper",
            "struct_fields": [
              {
                "inner": {
                  "type": "NumberInputState"
                },
                "on_value_change": {
                  "type": "OptionNumberInputOnValueChange"
                },
                "on_focus_lost": {
                  "type": "OptionNumberInputOnFocusLost"
                }
              }
            ]
          },
          "NumberInputState": {
            "external": "crate::widgets::number_input::NumberInputState",
            "struct_fields": [
              {
                "previous": {
                  "type": "f32"
                },
                "number": {
                  "type": "f32"
                },
                "min": {
                  "type": "f32"
                },
                "max": {
                  "type": "f32"
                }
              }
            ]
          },
          "NumberInputOnValueChange": {
            "external": "crate::widgets::number_input::NumberInputOnValueChange",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "NumberInputOnValueChangeCallback"
                }
              }
            ]
          },
          "NumberInputOnValueChangeCallback": {
            "external": "crate::widgets::number_input::NumberInputOnValueChangeCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NumberInputOnValueChangeCallbackType"
                }
              }
            ]
          },
          "NumberInputOnValueChangeCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &NumberInputState) -> Update",
            "external": "azul_dll::widgets::number_input::NumberInputOnValueChangeCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NumberInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "NumberInputOnFocusLost": {
            "external": "crate::widgets::number_input::NumberInputOnFocusLost",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "NumberInputOnFocusLostCallback"
                }
              }
            ]
          },
          "NumberInputOnFocusLostCallback": {
            "external": "crate::widgets::number_input::NumberInputOnFocusLostCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NumberInputOnFocusLostCallbackType"
                }
              }
            ]
          },
          "NumberInputOnFocusLostCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &NumberInputState) -> Update",
            "external": "azul_dll::widgets::number_input::NumberInputOnFocusLostCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NumberInputState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "ProgressBar": {
            "external": "crate::widgets::progressbar::ProgressBar",
            "struct_fields": [
              {
                "state": {
                  "type": "ProgressBarState"
                },
                "height": {
                  "type": "PixelValue"
                },
                "bar_background": {
                  "type": "StyleBackgroundContentVec"
                },
                "container_background": {
                  "type": "StyleBackgroundContentVec"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "percent_done": "f32"
                  }
                ],
                "fn_body": "AzProgressBar::new(percent_done)"
              }
            },
            "functions": {
              "set_height": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "height": "PixelValue"
                  }
                ],
                "fn_body": "progressbar.set_height(height);"
              },
              "with_height": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "height": "PixelValue"
                  }
                ],
                "returns": {
                  "type": "ProgressBar"
                },
                "fn_body": "let mut progressbar = progressbar.swap_with_default(); progressbar.set_height(height); progressbar"
              },
              "set_container_background": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "background": "StyleBackgroundContentVec"
                  }
                ],
                "fn_body": "progressbar.set_container_background(background);"
              },
              "with_container_style": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "background": "StyleBackgroundContentVec"
                  }
                ],
                "returns": {
                  "type": "ProgressBar"
                },
                "fn_body": "let mut progressbar = progressbar.swap_with_default(); progressbar.set_container_background(background); progressbar"
              },
              "set_bar_background": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "background": "StyleBackgroundContentVec"
                  }
                ],
                "fn_body": "progressbar.set_bar_background(background);"
              },
              "with_bar_background": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "background": "StyleBackgroundContentVec"
                  }
                ],
                "returns": {
                  "type": "ProgressBar"
                },
                "fn_body": "let mut progressbar = progressbar.swap_with_default(); progressbar.set_bar_background(background); progressbar"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "progressbar.swap_with_default().dom()"
              }
            }
          },
          "ProgressBarState": {
            "external": "crate::widgets::progressbar::ProgressBarState",
            "struct_fields": [
              {
                "percent_done": {
                  "type": "f32"
                },
                "display_percentage": {
                  "type": "bool"
                }
              }
            ]
          },
          "TabHeader": {
            "external": "crate::widgets::tabs::TabHeader",
            "struct_fields": [
              {
                "tabs": {
                  "type": "StringVec"
                },
                "active_tab": {
                  "type": "usize"
                },
                "on_click": {
                  "type": "OptionTabOnClick"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "tabs": "StringVec"
                  }
                ],
                "fn_body": "AzTabHeader::new(tabs)"
              }
            },
            "functions": {
              "set_active_tab": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "active_tab": "usize"
                  }
                ],
                "fn_body": "tabheader.set_active_tab(active_tab)"
              },
              "with_active_tab": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "active_tab": "usize"
                  }
                ],
                "returns": {
                  "type": "TabHeader"
                },
                "fn_body": "tabheader.with_active_tab(active_tab)"
              },
              "set_on_click": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TabOnClickCallbackType"
                  }
                ],
                "fn_body": "tabheader.set_on_click(data, callback)"
              },
              "with_on_click": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "TabOnClickCallbackType"
                  }
                ],
                "returns": {
                  "type": "TabHeader"
                },
                "fn_body": "tabheader.with_on_click(data, callback)"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "tabheader.dom()"
              }
            }
          },
          "TabHeaderState": {
            "external": "crate::widgets::tabs::TabHeaderState",
            "struct_fields": [
              {
                "active_tab": {
                  "type": "usize"
                }
              }
            ]
          },
          "TabContent": {
            "external": "crate::widgets::tabs::TabContent",
            "struct_fields": [
              {
                "content": {
                  "type": "Dom"
                },
                "has_padding": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "content": "Dom"
                  }
                ],
                "fn_body": "AzTabContent::new(content)"
              }
            },
            "functions": {
              "set_padding": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "has_padding": "bool"
                  }
                ],
                "fn_body": "tabcontent.set_padding(has_padding)"
              },
              "with_padding": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "has_padding": "bool"
                  }
                ],
                "returns": {
                  "type": "TabContent"
                },
                "fn_body": "tabcontent.with_padding(has_padding)"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "tabcontent.dom()"
              }
            }
          },
          "TabOnClick": {
            "external": "crate::widgets::tabs::TabOnClick",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "TabOnClickCallback"
                }
              }
            ]
          },
          "TabOnClickCallback": {
            "external": "crate::widgets::tabs::TabOnClickCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "TabOnClickCallbackType"
                }
              }
            ]
          },
          "TabOnClickCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &TabHeaderState) -> Update",
            "external": "azul_dll::widgets::tabs::TabOnClickCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "TabHeaderState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "Frame": {
            "external": "crate::widgets::frame::Frame",
            "struct_fields": [
              {
                "title": {
                  "type": "AzString"
                },
                "flex_grow": {
                  "type": "f32"
                },
                "content": {
                  "type": "Dom"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "title": "AzString"
                  },
                  {
                    "dom": "Dom"
                  }
                ],
                "fn_body": "AzFrame::new(title, dom)"
              }
            },
            "functions": {
              "set_flex_grow": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "flex_grow": "f32"
                  }
                ],
                "fn_body": "frame.set_flex_grow(flex_grow)"
              },
              "with_flex_grow": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "flex_grow": "f32"
                  }
                ],
                "returns": {
                  "type": "Frame"
                },
                "fn_body": "let mut frame = frame.swap_with_default(); frame.set_flex_grow(flex_grow); frame"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "frame.swap_with_default().dom()"
              }
            }
          },
          "NodeGraph": {
            "external": "crate::widgets::node_graph::NodeGraph",
            "struct_fields": [
              {
                "node_types": {
                  "type": "NodeTypeIdInfoMapVec"
                },
                "input_output_types": {
                  "type": "InputOutputTypeIdInfoMapVec"
                },
                "nodes": {
                  "type": "NodeIdNodeMapVec"
                },
                "allow_multiple_root_nodes": {
                  "type": "bool"
                },
                "offset": {
                  "type": "LogicalPosition"
                },
                "style": {
                  "type": "NodeGraphStyle"
                },
                "callbacks": {
                  "type": "NodeGraphCallbacks"
                },
                "add_node_str": {
                  "type": "AzString"
                },
                "scale_factor": {
                  "type": "f32"
                }
              }
            ],
            "functions": {
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "nodegraph.swap_with_default().dom()"
              }
            }
          },
          "NodeTypeIdInfoMap": {
            "external": "crate::widgets::node_graph::NodeTypeIdInfoMap",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "node_type_id": {
                  "type": "NodeTypeId"
                },
                "node_type_info": {
                  "type": "NodeTypeInfo"
                }
              }
            ]
          },
          "InputOutputTypeIdInfoMap": {
            "external": "crate::widgets::node_graph::InputOutputTypeIdInfoMap",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "io_type_id": {
                  "type": "InputOutputTypeId"
                },
                "io_info": {
                  "type": "InputOutputInfo"
                }
              }
            ]
          },
          "NodeIdNodeMap": {
            "external": "crate::widgets::node_graph::NodeIdNodeMap",
            "struct_fields": [
              {
                "node_id": {
                  "type": "NodeGraphNodeId"
                },
                "node": {
                  "type": "Node"
                }
              }
            ]
          },
          "NodeGraphStyle": {
            "external": "crate::widgets::node_graph::NodeGraphStyle",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Default": {}
              }
            ]
          },
          "NodeGraphCallbacks": {
            "external": "crate::widgets::node_graph::NodeGraphCallbacks",
            "struct_fields": [
              {
                "on_node_added": {
                  "type": "OptionOnNodeAdded"
                },
                "on_node_removed": {
                  "type": "OptionOnNodeRemoved"
                },
                "on_node_dragged": {
                  "type": "OptionOnNodeDragged"
                },
                "on_node_graph_dragged": {
                  "type": "OptionOnNodeGraphDragged"
                },
                "on_node_connected": {
                  "type": "OptionOnNodeConnected"
                },
                "on_node_input_disconnected": {
                  "type": "OptionOnNodeInputDisconnected"
                },
                "on_node_output_disconnected": {
                  "type": "OptionOnNodeOutputDisconnected"
                },
                "on_node_field_edited": {
                  "type": "OptionOnNodeFieldEdited"
                }
              }
            ]
          },
          "NodeGraphOnNodeAddedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeTypeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "NodePosition",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "DropDownOnChoiceChange": {
            "external": "crate::widgets::drop_down::DropDownOnChoiceChange",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "DropDownOnChoiceChangeCallback"
                }
              }
            ]
          },
          "OnNodeAddedCallback": {
            "external": "crate::widgets::node_graph::OnNodeAddedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeAddedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeRemovedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeAdded": {
            "external": "crate::widgets::node_graph::OnNodeAdded",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeAddedCallback"
                }
              }
            ]
          },
          "OnNodeRemovedCallback": {
            "external": "crate::widgets::node_graph::OnNodeRemovedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeRemovedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeGraphDraggedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "GraphDragAmount",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeRemoved": {
            "external": "crate::widgets::node_graph::OnNodeRemoved",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeRemovedCallback"
                }
              }
            ]
          },
          "OnNodeGraphDraggedCallback": {
            "external": "crate::widgets::node_graph::OnNodeGraphDraggedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeGraphDraggedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeDraggedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "NodeDragAmount",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeGraphDragged": {
            "external": "crate::widgets::node_graph::OnNodeGraphDragged",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeGraphDraggedCallback"
                }
              }
            ]
          },
          "OnNodeDraggedCallback": {
            "external": "crate::widgets::node_graph::OnNodeDraggedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeDraggedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeConnectedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeDragged": {
            "external": "crate::widgets::node_graph::OnNodeDragged",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeDraggedCallback"
                }
              }
            ]
          },
          "OnNodeConnectedCallback": {
            "external": "crate::widgets::node_graph::OnNodeConnectedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeConnectedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeInputDisconnectedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeConnected": {
            "external": "crate::widgets::node_graph::OnNodeConnected",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeConnectedCallback"
                }
              }
            ]
          },
          "OnNodeInputDisconnectedCallback": {
            "external": "crate::widgets::node_graph::OnNodeInputDisconnectedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeInputDisconnectedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeOutputDisconnectedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeInputDisconnected": {
            "external": "crate::widgets::node_graph::OnNodeInputDisconnected",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeInputDisconnectedCallback"
                }
              }
            ]
          },
          "OnNodeOutputDisconnectedCallback": {
            "external": "crate::widgets::node_graph::OnNodeOutputDisconnectedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeOutputDisconnectedCallbackType"
                }
              }
            ]
          },
          "NodeGraphOnNodeFieldEditedCallbackType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "NodeGraphNodeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "NodeTypeId",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "NodeTypeFieldValue",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "OnNodeOutputDisconnected": {
            "external": "crate::widgets::node_graph::OnNodeOutputDisconnected",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeOutputDisconnectedCallback"
                }
              }
            ]
          },
          "OnNodeFieldEditedCallback": {
            "external": "crate::widgets::node_graph::OnNodeFieldEditedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "NodeGraphOnNodeFieldEditedCallbackType"
                }
              }
            ]
          },
          "InputOutputTypeId": {
            "external": "crate::widgets::node_graph::InputOutputTypeId",
            "derive": [
              "Copy",
              "Clone",
              "PartialEq",
              "PartialOrd",
              "Ord",
              "Eq",
              "Hash",
              "Serialize",
              "Deserialize"
            ],
            "serde": "transparent",
            "struct_fields": [
              {
                "inner": {
                  "type": "u64"
                }
              }
            ]
          },
          "NodeTypeId": {
            "external": "crate::widgets::node_graph::NodeTypeId",
            "derive": [
              "Copy",
              "Clone",
              "PartialEq",
              "PartialOrd",
              "Ord",
              "Eq",
              "Hash",
              "Serialize",
              "Deserialize"
            ],
            "serde": "transparent",
            "struct_fields": [
              {
                "inner": {
                  "type": "u64"
                }
              }
            ]
          },
          "NodeGraphNodeId": {
            "external": "crate::widgets::node_graph::NodeGraphNodeId",
            "derive": [
              "Copy",
              "Clone",
              "PartialEq",
              "PartialOrd",
              "Ord",
              "Eq",
              "Hash",
              "Serialize",
              "Deserialize"
            ],
            "serde": "transparent",
            "struct_fields": [
              {
                "inner": {
                  "type": "u64"
                }
              }
            ]
          },
          "Node": {
            "external": "crate::widgets::node_graph::Node",
            "struct_fields": [
              {
                "parent": {
                  "type": "OptionNodeId"
                },
                "previous_sibling": {
                  "type": "OptionNodeId"
                },
                "next_sibling": {
                  "type": "OptionNodeId"
                },
                "last_child": {
                  "type": "OptionNodeId"
                }
              }
            ]
          },
          "NodeTypeField": {
            "external": "crate::widgets::node_graph::NodeTypeField",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "key": {
                  "type": "AzString"
                },
                "value": {
                  "type": "NodeTypeFieldValue"
                }
              }
            ]
          },
          "NodeTypeFieldValue": {
            "external": "crate::widgets::node_graph::NodeTypeFieldValue",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "TextInput": {
                  "type": "AzString"
                },
                "NumberInput": {
                  "type": "f32"
                },
                "CheckBox": {
                  "type": "bool"
                },
                "ColorInput": {
                  "type": "ColorU"
                },
                "FileInput": {
                  "type": "OptionAzString"
                }
              }
            ]
          },
          "InputConnection": {
            "external": "crate::widgets::node_graph::InputConnection",
            "struct_fields": [
              {
                "input_index": {
                  "type": "usize"
                },
                "connects_to": {
                  "type": "OutputNodeAndIndexVec"
                }
              }
            ]
          },
          "OutputNodeAndIndex": {
            "external": "crate::widgets::node_graph::OutputNodeAndIndex",
            "struct_fields": [
              {
                "node_id": {
                  "type": "NodeGraphNodeId"
                },
                "output_index": {
                  "type": "usize"
                }
              }
            ]
          },
          "OutputConnection": {
            "external": "crate::widgets::node_graph::OutputConnection",
            "struct_fields": [
              {
                "output_index": {
                  "type": "usize"
                },
                "connects_to": {
                  "type": "InputNodeAndIndexVec"
                }
              }
            ]
          },
          "InputNodeAndIndex": {
            "external": "crate::widgets::node_graph::InputNodeAndIndex",
            "struct_fields": [
              {
                "node_id": {
                  "type": "NodeGraphNodeId"
                },
                "input_index": {
                  "type": "usize"
                }
              }
            ]
          },
          "NodeTypeInfo": {
            "external": "crate::widgets::node_graph::NodeTypeInfo",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "is_root": {
                  "type": "bool",
                  "doc": "Whether this node type is a \"root\" type"
                },
                "name": {
                  "type": "AzString",
                  "doc": "Name of the node type"
                },
                "inputs": {
                  "type": "InputOutputTypeIdVec",
                  "doc": "List of inputs for this node"
                },
                "outputs": {
                  "type": "InputOutputTypeIdVec",
                  "doc": "List of outputs for this node"
                }
              }
            ]
          },
          "InputOutputInfo": {
            "external": "crate::widgets::node_graph::InputOutputInfo",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "data_type": {
                  "type": "AzString",
                  "doc": "Data type of this input / output"
                },
                "color": {
                  "type": "ColorU",
                  "doc": "Which color to use for the input / output"
                }
              }
            ]
          },
          "NodePosition": {
            "external": "crate::widgets::node_graph::NodePosition",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32",
                  "doc": "X Position of the node"
                },
                "y": {
                  "type": "f32",
                  "doc": "Y Position of the node"
                }
              }
            ]
          },
          "GraphDragAmount": {
            "external": "crate::widgets::node_graph::GraphDragAmount",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                }
              }
            ]
          },
          "NodeDragAmount": {
            "external": "crate::widgets::node_graph::NodeDragAmount",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                }
              }
            ]
          },
          "ListView": {
            "external": "crate::widgets::list_view::ListView",
            "struct_fields": [
              {
                "columns": {
                  "type": "StringVec",
                  "doc": "Column names"
                },
                "rows": {
                  "type": "ListViewRowVec",
                  "doc": "Currently rendered rows. Note that the ListView does not have to render all rows at once, usually you'd only render the top 100 rows"
                },
                "sorted_by": {
                  "type": "OptionUsize",
                  "doc": "Which column is the list view sorted by (default = None)?"
                },
                "scroll_offset": {
                  "type": "PixelValueNoPercent",
                  "doc": "Offset to add to the rows used when layouting row positions during lazy-loaded scrolling. Also affects the scroll position"
                },
                "content_height": {
                  "type": "OptionPixelValueNoPercent",
                  "doc": "Height of the content, if not all rows are loaded"
                },
                "column_context_menu": {
                  "type": "OptionMenu",
                  "doc": "Context menu for the columns (usually opens a context menu to select which columns to show)"
                },
                "on_lazy_load_scroll": {
                  "type": "OptionListViewOnLazyLoadScroll",
                  "doc": "Indicates that this ListView is being lazily loaded, allows control over what happens when the user scrolls the ListView."
                },
                "on_column_click": {
                  "type": "OptionListViewOnColumnClick",
                  "doc": "What to do when the user left-clicks the column (usually used for storing which column to sort by)"
                },
                "on_row_click": {
                  "type": "OptionListViewOnRowClick",
                  "doc": "What to do when the user left-clicks a row (usually used for selecting the row depending on the state)"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "columns": "StringVec"
                  }
                ],
                "fn_body": "AzListView::new(columns)"
              }
            },
            "functions": {
              "with_rows": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "rows": "ListViewRowVec"
                  }
                ],
                "returns": {
                  "type": "ListView"
                },
                "fn_body": "listview.with_rows(rows)"
              },
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "listview.swap_with_default().dom()"
              }
            }
          },
          "ListViewRow": {
            "external": "crate::widgets::list_view::ListViewRow",
            "struct_fields": [
              {
                "cells": {
                  "type": "DomVec",
                  "doc": "Each cell is an opaque Dom object"
                },
                "height": {
                  "type": "OptionPixelValueNoPercent",
                  "doc": "Height of the row, if known beforehand"
                }
              }
            ]
          },
          "ListViewState": {
            "external": "crate::widgets::list_view::ListViewState",
            "struct_fields": [
              {
                "columns": {
                  "type": "StringVec",
                  "doc": "Copy of the current column names"
                },
                "sorted_by": {
                  "type": "OptionUsize",
                  "doc": "Which column the rows are currently sorted by"
                },
                "current_row_count": {
                  "type": "usize",
                  "doc": "Row count of rows currently loaded in the DOM"
                },
                "scroll_offset": {
                  "type": "PixelValueNoPercent",
                  "doc": "Y-offset currently applied to the rows"
                },
                "current_scroll_position": {
                  "type": "LogicalPosition",
                  "doc": "Current position where the user has scrolled the ListView to"
                },
                "current_content_height": {
                  "type": "LogicalSize",
                  "doc": "Current height of the row container"
                }
              }
            ]
          },
          "ListViewOnLazyLoadScrollCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &ListViewState) -> Update",
            "external": "azul_dll::widgets::list_view::ListViewOnLazyLoadScrollCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "ListViewState",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "ListViewOnLazyLoadScrollCallback": {
            "external": "crate::widgets::list_view::ListViewOnLazyLoadScrollCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ListViewOnLazyLoadScrollCallbackType"
                }
              }
            ]
          },
          "ListViewOnLazyLoadScroll": {
            "external": "crate::widgets::list_view::ListViewOnLazyLoadScroll",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "ListViewOnLazyLoadScrollCallback"
                }
              }
            ]
          },
          "ListViewOnColumnClickCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &ListViewState , column_clicked : usize) -> Update",
            "external": "azul_dll::widgets::list_view::ListViewOnColumnClickCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "ListViewState",
                  "ref": "ref",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "ListViewOnColumnClickCallback": {
            "external": "crate::widgets::list_view::ListViewOnColumnClickCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ListViewOnColumnClickCallbackType"
                }
              }
            ]
          },
          "ListViewOnColumnClick": {
            "external": "crate::widgets::list_view::ListViewOnColumnClick",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "ListViewOnColumnClickCallback"
                }
              }
            ]
          },
          "ListViewOnRowClickCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , &ListViewState , row_clicked : usize) -> Update",
            "external": "azul_dll::widgets::list_view::ListViewOnRowClickCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "ListViewState",
                  "ref": "ref",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "ListViewOnRowClickCallback": {
            "external": "crate::widgets::list_view::ListViewOnRowClickCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ListViewOnRowClickCallbackType"
                }
              }
            ]
          },
          "ListViewOnRowClick": {
            "external": "crate::widgets::list_view::ListViewOnRowClick",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "ListViewOnRowClickCallback"
                }
              }
            ]
          },
          "TreeView": {
            "external": "crate::widgets::tree_view::TreeView",
            "struct_fields": [
              {
                "root": {
                  "type": "AzString"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "root": "AzString"
                  }
                ],
                "fn_body": "AzTreeView::new(root)"
              }
            },
            "functions": {
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "treeview.swap_with_default().dom()"
              }
            }
          },
          "DropDown": {
            "external": "crate::widgets::drop_down::DropDown",
            "struct_fields": [
              {
                "choices": {
                  "type": "StringVec"
                },
                "selected": {
                  "type": "usize"
                },
                "on_choice_change": {
                  "type": "OptionDropDownOnChoiceChange"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "choices": "StringVec"
                  }
                ],
                "fn_body": "AzDropDown::new(choices)"
              }
            },
            "functions": {
              "dom": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "Dom"
                },
                "fn_body": "dropdown.swap_with_default().dom()"
              }
            }
          },
          "DropDownOnChoiceChangeCallbackType": {
            "doc": "Type alias for extern \"C\" fn (&mut RefAny , &mut CallbackInfo , usize) -> Update",
            "external": "azul_dll::widgets::drop_down::DropDownOnChoiceChangeCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "CallbackInfo",
                  "ref": "refmut",
                  "doc": null
                },
                {
                  "type": "usize",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Update"
              }
            }
          },
          "DropDownOnChoiceChangeCallback": {
            "external": "crate::widgets::drop_down::DropDownOnChoiceChangeCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "DropDownOnChoiceChangeCallbackType"
                }
              }
            ]
          },
          "OnNodeFieldEdited": {
            "external": "crate::widgets::node_graph::OnNodeFieldEdited",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                }
              },
              {
                "callback": {
                  "type": "OnNodeFieldEditedCallback"
                }
              }
            ]
          }
        }
      },
      "style": {
        "doc": "DOM to CSS cascading and styling module",
        "classes": {
          "NodeHierarchyItem": {
            "external": "azul_core::styled_dom::NodeHierarchyItem",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "parent": {
                  "type": "usize"
                },
                "previous_sibling": {
                  "type": "usize"
                },
                "next_sibling": {
                  "type": "usize"
                },
                "last_child": {
                  "type": "usize"
                }
              }
            ]
          },
          "CascadeInfo": {
            "external": "azul_core::style::CascadeInfo",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "index_in_parent": {
                  "type": "u32"
                },
                "is_last_child": {
                  "type": "bool"
                }
              }
            ]
          },
          "CssPropertySource": {
            "external": "azul_core::styled_dom::CssPropertySource",
            "enum_fields": [
              {
                "Css": {
                  "type": "CssPath"
                },
                "Inline": {}
              }
            ]
          },
          "StyledNodeState": {
            "external": "azul_core::styled_dom::StyledNodeState",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "normal": {
                  "type": "bool"
                },
                "hover": {
                  "type": "bool"
                },
                "active": {
                  "type": "bool"
                },
                "focused": {
                  "type": "bool"
                }
              }
            ]
          },
          "StyledNode": {
            "external": "azul_core::styled_dom::StyledNode",
            "struct_fields": [
              {
                "state": {
                  "type": "StyledNodeState",
                  "doc": "Current state of this styled node (used later for caching the style / layout)"
                },
                "tag_id": {
                  "type": "OptionTagId",
                  "doc": "Optional tag ID NOTE: The tag ID has to be adjusted after the layout is done (due to scroll tags)"
                }
              }
            ]
          },
          "StyledDom": {
            "external": "azul_core::styled_dom::StyledDom",
            "struct_fields": [
              {
                "root": {
                  "type": "NodeHierarchyItemId"
                },
                "node_hierarchy": {
                  "type": "NodeHierarchyItemVec"
                },
                "node_data": {
                  "type": "NodeDataVec"
                },
                "styled_nodes": {
                  "type": "StyledNodeVec"
                },
                "cascade_info": {
                  "type": "CascadeInfoVec"
                },
                "nodes_with_window_callbacks": {
                  "type": "NodeIdVec"
                },
                "nodes_with_not_callbacks": {
                  "type": "NodeIdVec"
                },
                "nodes_with_datasets": {
                  "type": "NodeIdVec"
                },
                "tag_ids_to_node_ids": {
                  "type": "TagIdToNodeIdMappingVec"
                },
                "non_leaf_nodes": {
                  "type": "ParentWithNodeDepthVec"
                },
                "css_property_cache": {
                  "type": "CssPropertyCachePtr"
                },
                "dom_id": {
                  "type": "DomId",
                  "doc": "The ID of this DOM in the layout tree (for multi-DOM support with IFrames)"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Styles a `Dom` with the given `Css`, returning the `StyledDom` - complexity `O(count(dom_nodes) * count(css_blocks))`: make sure that the `Dom` and the `Css` are as small as possible, use inline CSS if the performance isn't good enough",
                "fn_args": [
                  {
                    "dom": "Dom"
                  },
                  {
                    "css": "Css"
                  }
                ],
                "fn_body": "let mut dom = dom; AzStyledDom::new(&mut dom, css.into())"
              },
              "default": {
                "doc": "Returns a default, empty `Dom`, usually returned if you don't want to crash in an error case.",
                "fn_args": [],
                "fn_body": "AzStyledDom::default()"
              },
              "from_xml": {
                "doc": "Returns a DOM loaded from an XML file",
                "fn_args": [
                  {
                    "xml_string": "AzString"
                  }
                ],
                "fn_body": "crate::extra::styled_dom_from_str(xml_string.as_str())"
              },
              "from_file": {
                "doc": "Same as `from_xml`, but loads the file relative to the current directory",
                "fn_args": [
                  {
                    "xml_file_path": "AzString"
                  }
                ],
                "fn_body": "crate::extra::styled_dom_from_file(xml_file_path.as_str())"
              }
            },
            "functions": {
              "append_child": {
                "doc": "Appends an already styled list of DOM nodes to the current `dom.root` - complexity `O(count(dom.dom_nodes))`",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dom": "StyledDom"
                  }
                ],
                "fn_body": "styleddom.append_child(dom);"
              },
              "with_child": {
                "doc": "Same as `append_child()`, but as a builder method",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "dom": "StyledDom"
                  }
                ],
                "returns": {
                  "type": "StyledDom"
                },
                "fn_body": "styleddom.with_child(dom)"
              },
              "restyle": {
                "doc": "Restyles an already styled DOM with a new CSS - overwrites old styles, but does not replace them, useful for implementing user styles that are applied on top of the existing application style",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "css": "Css"
                  }
                ],
                "fn_body": "styleddom.restyle(css.into());"
              },
              "node_count": {
                "doc": "Returns the number of nodes in the styled DOM",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "usize"
                },
                "fn_body": "styleddom.node_count()"
              },
              "get_html_string": {
                "doc": "Returns a HTML string that you can write to a file in order to debug the UI structure and debug potential cascading issues",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "styleddom.get_html_string(\"\", \"\", false).into()"
              },
              "get_html_string_test": {
                "doc": "Returns a HTML for unit testing",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "styleddom.get_html_string(\"\", \"\", true).into()"
              },
              "set_menu_bar": {
                "doc": "Adds a menu to the root node",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu": "Menu"
                  }
                ],
                "fn_body": "styleddom.set_menu_bar(menu)"
              },
              "with_menu_bar": {
                "doc": "Adds a menu to the root node (builder method)",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu": "Menu"
                  }
                ],
                "returns": {
                  "type": "StyledDom"
                },
                "fn_body": "let mut styleddom = styleddom.swap_with_default(); styleddom.set_menu_bar(menu); styleddom"
              },
              "set_context_menu": {
                "doc": "Adds a context menu to the root node",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu": "Menu"
                  }
                ],
                "fn_body": "styleddom.set_context_menu(menu)"
              },
              "with_context_menu": {
                "doc": "Adds a context menu to the root node (builder method)",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "menu": "Menu"
                  }
                ],
                "returns": {
                  "type": "StyledDom"
                },
                "fn_body": "let mut styleddom = styleddom.swap_with_default(); styleddom.set_context_menu(menu); styleddom"
              }
            }
          },
          "TagIdToNodeIdMapping": {
            "external": "azul_core::styled_dom::TagIdToNodeIdMapping",
            "struct_fields": [
              {
                "tag_id": {
                  "type": "AzTagId"
                },
                "node_id": {
                  "type": "NodeHierarchyItemId",
                  "doc": "Node ID of the node that has a tag"
                },
                "tab_index": {
                  "type": "OptionTabIndex",
                  "doc": "Whether this node has a tab-index field"
                },
                "parent_node_ids": {
                  "type": "NodeIdVec",
                  "doc": "Parents of this NodeID, sorted in depth order, necessary for efficient hit-testing"
                }
              }
            ]
          },
          "ParentWithNodeDepth": {
            "external": "azul_core::styled_dom::ParentWithNodeDepth",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "depth": {
                  "type": "usize"
                },
                "node_id": {
                  "type": "NodeHierarchyItemId"
                }
              }
            ]
          },
          "AzTagId": {
            "external": "azul_core::styled_dom::AzTagId",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "inner": {
                  "type": "u64"
                }
              }
            ]
          },
          "CssPropertyCachePtr": {
            "external": "azul_core::styled_dom::CssPropertyCachePtr",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "BoxCssPropertyCache"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ]
          }
        }
      },
      "gl": {
        "doc": "OpenGl helper types (`Texture`, `Gl`, etc.)",
        "classes": {
          "Texture": {
            "external": "azul_core::gl::Texture",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "texture_id": {
                  "type": "GLuint",
                  "doc": "Raw OpenGL texture ID"
                },
                "flags": {
                  "type": "TextureFlags",
                  "doc": "Hints and flags for optimization purposes"
                },
                "size": {
                  "type": "PhysicalSizeU32",
                  "doc": "Size of this texture (in pixels)"
                },
                "background_color": {
                  "type": "ColorU",
                  "doc": "Background color of this texture"
                },
                "gl_context": {
                  "type": "GlContextPtr",
                  "doc": "A reference-counted pointer to the OpenGL context (so that the texture can be deleted in the destructor)"
                },
                "format": {
                  "type": "RawImageFormat",
                  "doc": "Format of the texture (rgba8, brga8, etc.)"
                },
                "refcount": {
                  "type": "*const AtomicUsize",
                  "doc": "Reference count, shared across"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "texture_id": "u32"
                  },
                  {
                    "flags": "TextureFlags"
                  },
                  {
                    "size": "PhysicalSizeU32"
                  },
                  {
                    "background_color": "ColorU"
                  },
                  {
                    "gl_context": "GlContextPtr"
                  },
                  {
                    "format": "RawImageFormat"
                  }
                ],
                "fn_body": "AzTexture::new(texture_id, flags, size, background_color, gl_context, format)"
              },
              "allocate_rgba8": {
                "doc": "Allocates an OpenGL texture of a given size with a single red channel (used for image masks)",
                "fn_args": [
                  {
                    "gl": "GlContextPtr"
                  },
                  {
                    "size": "PhysicalSizeU32"
                  },
                  {
                    "background": "ColorU"
                  }
                ],
                "fn_body": "AzTexture::allocate_rgba8(gl, size, background)"
              },
              "allocate_clip_mask": {
                "doc": "Allocates an OpenGL texture of a given size with a single red channel (used for image masks)",
                "fn_args": [
                  {
                    "gl": "GlContextPtr"
                  },
                  {
                    "size": "PhysicalSizeU32"
                  },
                  {
                    "background": "ColorU"
                  }
                ],
                "fn_body": "azul_layout::xml::svg::allocate_clipmask_texture(gl, size, background)"
              }
            },
            "functions": {
              "clear": {
                "doc": "Clears the texture with the currently set background color",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "texture.clear()"
              },
              "draw_clip_mask": {
                "doc": "Draws a vertex / index buffer (aka. `&TessellatedSvgNode`) to the texture",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node": "TessellatedSvgNode"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "azul_layout::xml::svg::render_tessellated_node_gpu(texture, &node).is_some()"
              },
              "draw_tesselated_svg_gpu_node": {
                "doc": "Draws a `&TessellatedGPUSvgNode` with the given color to the texture",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node": "*const TessellatedGPUSvgNode"
                  },
                  {
                    "size": "PhysicalSizeU32"
                  },
                  {
                    "color": "ColorU"
                  },
                  {
                    "transforms": "StyleTransformVec"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "let node = unsafe { &*node }; node.draw(texture, size, color, transforms)"
              },
              "draw_tesselated_colored_svg_gpu_node": {
                "doc": "Draws a `&TessellatedColoredGPUSvgNode` with the given color to the texture",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node": "*const TessellatedColoredGPUSvgNode"
                  },
                  {
                    "size": "PhysicalSizeU32"
                  },
                  {
                    "transforms": "StyleTransformVec"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "let node = unsafe { &*node }; node.draw(texture, size, transforms)"
              },
              "apply_fxaa": {
                "doc": "Applies an FXAA filter to the texture",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "azul_layout::xml::svg::apply_fxaa(texture).is_some()"
              }
            }
          },
          "GlVoidPtrConst": {
            "external": "azul_core::gl::GlVoidPtrConst",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const GLvoid"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ]
          },
          "GlVoidPtrMut": {
            "external": "azul_core::gl::GlVoidPtrMut",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*mut GLvoid"
                }
              }
            ]
          },
          "TextureFlags": {
            "external": "azul_core::gl::TextureFlags",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "is_opaque": {
                  "type": "bool",
                  "doc": "Whether this texture contains an alpha component"
                },
                "is_video_texture": {
                  "type": "bool",
                  "doc": "Optimization: use the compositor instead of OpenGL for energy optimization"
                }
              }
            ],
            "constructors": {
              "default": {
                "doc": "Default texture flags (not opaque, not a video texture)",
                "fn_args": [],
                "fn_body": "AzTextureFlags::default()"
              }
            }
          },
          "GlShaderPrecisionFormatReturn": {
            "external": "azul_core::gl::GlShaderPrecisionFormatReturn",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "_0": {
                  "type": "GLint"
                },
                "_1": {
                  "type": "GLint"
                },
                "_2": {
                  "type": "GLint"
                }
              }
            ]
          },
          "VertexAttributeType": {
            "external": "azul_core::gl::VertexAttributeType",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Float": {
                  "doc": "Vertex attribute has type `f32`"
                },
                "Double": {
                  "doc": "Vertex attribute has type `f64`"
                },
                "UnsignedByte": {
                  "doc": "Vertex attribute has type `u8`"
                },
                "UnsignedShort": {
                  "doc": "Vertex attribute has type `u16`"
                },
                "UnsignedInt": {
                  "doc": "Vertex attribute has type `u32`"
                }
              }
            ]
          },
          "VertexAttribute": {
            "external": "azul_core::gl::VertexAttribute",
            "struct_fields": [
              {
                "name": {
                  "type": "AzString",
                  "doc": "Attribute name of the vertex attribute in the vertex shader, i.e. `\"vAttrXY\"`"
                },
                "layout_location": {
                  "type": "OptionUsize",
                  "doc": "If the vertex shader has a specific location, (like `layout(location = 2) vAttrXY`), use this instead of the name to look up the uniform location."
                },
                "attribute_type": {
                  "type": "VertexAttributeType",
                  "doc": "Type of items of this attribute (i.e. for a `FloatVec2`, would be `VertexAttributeType::Float`)"
                },
                "item_count": {
                  "type": "usize",
                  "doc": "Number of items of this attribute (i.e. for a `FloatVec2`, would be `2` (= 2 consecutive f32 values))"
                }
              }
            ]
          },
          "VertexLayout": {
            "external": "azul_core::gl::VertexLayout",
            "struct_fields": [
              {
                "fields": {
                  "type": "VertexAttributeVec"
                }
              }
            ]
          },
          "VertexArrayObject": {
            "external": "azul_core::gl::VertexArrayObject",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "vertex_layout": {
                  "type": "VertexLayout"
                },
                "vao_id": {
                  "type": "GLuint"
                },
                "gl_context": {
                  "type": "GlContextPtr"
                },
                "refcount": {
                  "type": "*const AtomicUsize"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "vertex_layout": "VertexLayout"
                  },
                  {
                    "vao_id": "u32"
                  },
                  {
                    "gl_context": "GlContextPtr"
                  }
                ],
                "fn_body": "AzVertexArrayObject::new(vertex_layout, vao_id, gl_context)"
              }
            }
          },
          "IndexBufferFormat": {
            "external": "azul_core::gl::IndexBufferFormat",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Points": {},
                "Lines": {},
                "LineStrip": {},
                "Triangles": {},
                "TriangleStrip": {},
                "TriangleFan": {}
              }
            ]
          },
          "VertexBuffer": {
            "external": "azul_core::gl::VertexBuffer",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "vertex_buffer_id": {
                  "type": "GLuint"
                },
                "vertex_buffer_len": {
                  "type": "usize"
                },
                "vao": {
                  "type": "VertexArrayObject"
                },
                "index_buffer_id": {
                  "type": "GLuint"
                },
                "index_buffer_len": {
                  "type": "usize"
                },
                "index_buffer_format": {
                  "type": "IndexBufferFormat"
                },
                "refcount": {
                  "type": "*const AtomicUsize"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "vertex_buffer_id": "u32"
                  },
                  {
                    "vertex_buffer_len": "usize"
                  },
                  {
                    "vao": "VertexArrayObject"
                  },
                  {
                    "index_buffer_id": "u32"
                  },
                  {
                    "index_buffer_len": "usize"
                  },
                  {
                    "index_buffer_format": "IndexBufferFormat"
                  }
                ],
                "fn_body": "AzVertexBuffer::new_raw(vertex_buffer_id, vertex_buffer_len, vao, index_buffer_id, index_buffer_len, index_buffer_format)"
              }
            }
          },
          "GlContextPtr": {
            "external": "azul_core::gl::GlContextPtr",
            "is_boxed_object": true,
            "constants": [
              {
                "ACCUM": {
                  "type": "u32",
                  "value": "0x0100"
                }
              },
              {
                "ACCUM_ALPHA_BITS": {
                  "type": "u32",
                  "value": "0x0D5B"
                }
              },
              {
                "ACCUM_BLUE_BITS": {
                  "type": "u32",
                  "value": "0x0D5A"
                }
              },
              {
                "ACCUM_BUFFER_BIT": {
                  "type": "u32",
                  "value": "0x00000200"
                }
              },
              {
                "ACCUM_CLEAR_VALUE": {
                  "type": "u32",
                  "value": "0x0B80"
                }
              },
              {
                "ACCUM_GREEN_BITS": {
                  "type": "u32",
                  "value": "0x0D59"
                }
              },
              {
                "ACCUM_RED_BITS": {
                  "type": "u32",
                  "value": "0x0D58"
                }
              },
              {
                "ACTIVE_ATTRIBUTES": {
                  "type": "u32",
                  "value": "0x8B89"
                }
              },
              {
                "ACTIVE_ATTRIBUTE_MAX_LENGTH": {
                  "type": "u32",
                  "value": "0x8B8A"
                }
              },
              {
                "ACTIVE_TEXTURE": {
                  "type": "u32",
                  "value": "0x84E0"
                }
              },
              {
                "ACTIVE_UNIFORMS": {
                  "type": "u32",
                  "value": "0x8B86"
                }
              },
              {
                "ACTIVE_UNIFORM_BLOCKS": {
                  "type": "u32",
                  "value": "0x8A36"
                }
              },
              {
                "ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH": {
                  "type": "u32",
                  "value": "0x8A35"
                }
              },
              {
                "ACTIVE_UNIFORM_MAX_LENGTH": {
                  "type": "u32",
                  "value": "0x8B87"
                }
              },
              {
                "ADD": {
                  "type": "u32",
                  "value": "0x0104"
                }
              },
              {
                "ADD_SIGNED": {
                  "type": "u32",
                  "value": "0x8574"
                }
              },
              {
                "ALIASED_LINE_WIDTH_RANGE": {
                  "type": "u32",
                  "value": "0x846E"
                }
              },
              {
                "ALIASED_POINT_SIZE_RANGE": {
                  "type": "u32",
                  "value": "0x846D"
                }
              },
              {
                "ALL_ATTRIB_BITS": {
                  "type": "u32",
                  "value": "0xFFFFFFFF"
                }
              },
              {
                "ALPHA": {
                  "type": "u32",
                  "value": "0x1906"
                }
              },
              {
                "ALPHA12": {
                  "type": "u32",
                  "value": "0x803D"
                }
              },
              {
                "ALPHA16": {
                  "type": "u32",
                  "value": "0x803E"
                }
              },
              {
                "ALPHA16F_EXT": {
                  "type": "u32",
                  "value": "0x881C"
                }
              },
              {
                "ALPHA32F_EXT": {
                  "type": "u32",
                  "value": "0x8816"
                }
              },
              {
                "ALPHA4": {
                  "type": "u32",
                  "value": "0x803B"
                }
              },
              {
                "ALPHA8": {
                  "type": "u32",
                  "value": "0x803C"
                }
              },
              {
                "ALPHA8_EXT": {
                  "type": "u32",
                  "value": "0x803C"
                }
              },
              {
                "ALPHA_BIAS": {
                  "type": "u32",
                  "value": "0x0D1D"
                }
              },
              {
                "ALPHA_BITS": {
                  "type": "u32",
                  "value": "0x0D55"
                }
              },
              {
                "ALPHA_INTEGER": {
                  "type": "u32",
                  "value": "0x8D97"
                }
              },
              {
                "ALPHA_SCALE": {
                  "type": "u32",
                  "value": "0x0D1C"
                }
              },
              {
                "ALPHA_TEST": {
                  "type": "u32",
                  "value": "0x0BC0"
                }
              },
              {
                "ALPHA_TEST_FUNC": {
                  "type": "u32",
                  "value": "0x0BC1"
                }
              },
              {
                "ALPHA_TEST_REF": {
                  "type": "u32",
                  "value": "0x0BC2"
                }
              },
              {
                "ALREADY_SIGNALED": {
                  "type": "u32",
                  "value": "0x911A"
                }
              },
              {
                "ALWAYS": {
                  "type": "u32",
                  "value": "0x0207"
                }
              },
              {
                "AMBIENT": {
                  "type": "u32",
                  "value": "0x1200"
                }
              },
              {
                "AMBIENT_AND_DIFFUSE": {
                  "type": "u32",
                  "value": "0x1602"
                }
              },
              {
                "AND": {
                  "type": "u32",
                  "value": "0x1501"
                }
              },
              {
                "AND_INVERTED": {
                  "type": "u32",
                  "value": "0x1504"
                }
              },
              {
                "AND_REVERSE": {
                  "type": "u32",
                  "value": "0x1502"
                }
              },
              {
                "ANY_SAMPLES_PASSED": {
                  "type": "u32",
                  "value": "0x8C2F"
                }
              },
              {
                "ANY_SAMPLES_PASSED_CONSERVATIVE": {
                  "type": "u32",
                  "value": "0x8D6A"
                }
              },
              {
                "ARRAY_BUFFER": {
                  "type": "u32",
                  "value": "0x8892"
                }
              },
              {
                "ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8894"
                }
              },
              {
                "ATTACHED_SHADERS": {
                  "type": "u32",
                  "value": "0x8B85"
                }
              },
              {
                "ATTRIB_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0BB0"
                }
              },
              {
                "AUTO_NORMAL": {
                  "type": "u32",
                  "value": "0x0D80"
                }
              },
              {
                "AUX0": {
                  "type": "u32",
                  "value": "0x0409"
                }
              },
              {
                "AUX1": {
                  "type": "u32",
                  "value": "0x040A"
                }
              },
              {
                "AUX2": {
                  "type": "u32",
                  "value": "0x040B"
                }
              },
              {
                "AUX3": {
                  "type": "u32",
                  "value": "0x040C"
                }
              },
              {
                "AUX_BUFFERS": {
                  "type": "u32",
                  "value": "0x0C00"
                }
              },
              {
                "BACK": {
                  "type": "u32",
                  "value": "0x0405"
                }
              },
              {
                "BACK_LEFT": {
                  "type": "u32",
                  "value": "0x0402"
                }
              },
              {
                "BACK_RIGHT": {
                  "type": "u32",
                  "value": "0x0403"
                }
              },
              {
                "BGR": {
                  "type": "u32",
                  "value": "0x80E0"
                }
              },
              {
                "BGRA": {
                  "type": "u32",
                  "value": "0x80E1"
                }
              },
              {
                "BGRA8_EXT": {
                  "type": "u32",
                  "value": "0x93A1"
                }
              },
              {
                "BGRA_EXT": {
                  "type": "u32",
                  "value": "0x80E1"
                }
              },
              {
                "BGRA_INTEGER": {
                  "type": "u32",
                  "value": "0x8D9B"
                }
              },
              {
                "BGR_INTEGER": {
                  "type": "u32",
                  "value": "0x8D9A"
                }
              },
              {
                "BITMAP": {
                  "type": "u32",
                  "value": "0x1A00"
                }
              },
              {
                "BITMAP_TOKEN": {
                  "type": "u32",
                  "value": "0x0704"
                }
              },
              {
                "BLEND": {
                  "type": "u32",
                  "value": "0x0BE2"
                }
              },
              {
                "BLEND_ADVANCED_COHERENT_KHR": {
                  "type": "u32",
                  "value": "0x9285"
                }
              },
              {
                "BLEND_COLOR": {
                  "type": "u32",
                  "value": "0x8005"
                }
              },
              {
                "BLEND_DST": {
                  "type": "u32",
                  "value": "0x0BE0"
                }
              },
              {
                "BLEND_DST_ALPHA": {
                  "type": "u32",
                  "value": "0x80CA"
                }
              },
              {
                "BLEND_DST_RGB": {
                  "type": "u32",
                  "value": "0x80C8"
                }
              },
              {
                "BLEND_EQUATION": {
                  "type": "u32",
                  "value": "0x8009"
                }
              },
              {
                "BLEND_EQUATION_ALPHA": {
                  "type": "u32",
                  "value": "0x883D"
                }
              },
              {
                "BLEND_EQUATION_RGB": {
                  "type": "u32",
                  "value": "0x8009"
                }
              },
              {
                "BLEND_SRC": {
                  "type": "u32",
                  "value": "0x0BE1"
                }
              },
              {
                "BLEND_SRC_ALPHA": {
                  "type": "u32",
                  "value": "0x80CB"
                }
              },
              {
                "BLEND_SRC_RGB": {
                  "type": "u32",
                  "value": "0x80C9"
                }
              },
              {
                "BLUE": {
                  "type": "u32",
                  "value": "0x1905"
                }
              },
              {
                "BLUE_BIAS": {
                  "type": "u32",
                  "value": "0x0D1B"
                }
              },
              {
                "BLUE_BITS": {
                  "type": "u32",
                  "value": "0x0D54"
                }
              },
              {
                "BLUE_INTEGER": {
                  "type": "u32",
                  "value": "0x8D96"
                }
              },
              {
                "BLUE_SCALE": {
                  "type": "u32",
                  "value": "0x0D1A"
                }
              },
              {
                "BOOL": {
                  "type": "u32",
                  "value": "0x8B56"
                }
              },
              {
                "BOOL_VEC2": {
                  "type": "u32",
                  "value": "0x8B57"
                }
              },
              {
                "BOOL_VEC3": {
                  "type": "u32",
                  "value": "0x8B58"
                }
              },
              {
                "BOOL_VEC4": {
                  "type": "u32",
                  "value": "0x8B59"
                }
              },
              {
                "BUFFER": {
                  "type": "u32",
                  "value": "0x82E0"
                }
              },
              {
                "BUFFER_ACCESS": {
                  "type": "u32",
                  "value": "0x88BB"
                }
              },
              {
                "BUFFER_ACCESS_FLAGS": {
                  "type": "u32",
                  "value": "0x911F"
                }
              },
              {
                "BUFFER_KHR": {
                  "type": "u32",
                  "value": "0x82E0"
                }
              },
              {
                "BUFFER_MAPPED": {
                  "type": "u32",
                  "value": "0x88BC"
                }
              },
              {
                "BUFFER_MAP_LENGTH": {
                  "type": "u32",
                  "value": "0x9120"
                }
              },
              {
                "BUFFER_MAP_OFFSET": {
                  "type": "u32",
                  "value": "0x9121"
                }
              },
              {
                "BUFFER_MAP_POINTER": {
                  "type": "u32",
                  "value": "0x88BD"
                }
              },
              {
                "BUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x8764"
                }
              },
              {
                "BUFFER_USAGE": {
                  "type": "u32",
                  "value": "0x8765"
                }
              },
              {
                "BYTE": {
                  "type": "u32",
                  "value": "0x1400"
                }
              },
              {
                "C3F_V3F": {
                  "type": "u32",
                  "value": "0x2A24"
                }
              },
              {
                "C4F_N3F_V3F": {
                  "type": "u32",
                  "value": "0x2A26"
                }
              },
              {
                "C4UB_V2F": {
                  "type": "u32",
                  "value": "0x2A22"
                }
              },
              {
                "C4UB_V3F": {
                  "type": "u32",
                  "value": "0x2A23"
                }
              },
              {
                "CCW": {
                  "type": "u32",
                  "value": "0x0901"
                }
              },
              {
                "CLAMP": {
                  "type": "u32",
                  "value": "0x2900"
                }
              },
              {
                "CLAMP_FRAGMENT_COLOR": {
                  "type": "u32",
                  "value": "0x891B"
                }
              },
              {
                "CLAMP_READ_COLOR": {
                  "type": "u32",
                  "value": "0x891C"
                }
              },
              {
                "CLAMP_TO_BORDER": {
                  "type": "u32",
                  "value": "0x812D"
                }
              },
              {
                "CLAMP_TO_EDGE": {
                  "type": "u32",
                  "value": "0x812F"
                }
              },
              {
                "CLAMP_VERTEX_COLOR": {
                  "type": "u32",
                  "value": "0x891A"
                }
              },
              {
                "CLEAR": {
                  "type": "u32",
                  "value": "0x1500"
                }
              },
              {
                "CLIENT_ACTIVE_TEXTURE": {
                  "type": "u32",
                  "value": "0x84E1"
                }
              },
              {
                "CLIENT_ALL_ATTRIB_BITS": {
                  "type": "u32",
                  "value": "0xFFFFFFFF"
                }
              },
              {
                "CLIENT_ATTRIB_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0BB1"
                }
              },
              {
                "CLIENT_PIXEL_STORE_BIT": {
                  "type": "u32",
                  "value": "0x00000001"
                }
              },
              {
                "CLIENT_VERTEX_ARRAY_BIT": {
                  "type": "u32",
                  "value": "0x00000002"
                }
              },
              {
                "CLIP_DISTANCE0": {
                  "type": "u32",
                  "value": "0x3000"
                }
              },
              {
                "CLIP_DISTANCE1": {
                  "type": "u32",
                  "value": "0x3001"
                }
              },
              {
                "CLIP_DISTANCE2": {
                  "type": "u32",
                  "value": "0x3002"
                }
              },
              {
                "CLIP_DISTANCE3": {
                  "type": "u32",
                  "value": "0x3003"
                }
              },
              {
                "CLIP_DISTANCE4": {
                  "type": "u32",
                  "value": "0x3004"
                }
              },
              {
                "CLIP_DISTANCE5": {
                  "type": "u32",
                  "value": "0x3005"
                }
              },
              {
                "CLIP_DISTANCE6": {
                  "type": "u32",
                  "value": "0x3006"
                }
              },
              {
                "CLIP_DISTANCE7": {
                  "type": "u32",
                  "value": "0x3007"
                }
              },
              {
                "CLIP_PLANE0": {
                  "type": "u32",
                  "value": "0x3000"
                }
              },
              {
                "CLIP_PLANE1": {
                  "type": "u32",
                  "value": "0x3001"
                }
              },
              {
                "CLIP_PLANE2": {
                  "type": "u32",
                  "value": "0x3002"
                }
              },
              {
                "CLIP_PLANE3": {
                  "type": "u32",
                  "value": "0x3003"
                }
              },
              {
                "CLIP_PLANE4": {
                  "type": "u32",
                  "value": "0x3004"
                }
              },
              {
                "CLIP_PLANE5": {
                  "type": "u32",
                  "value": "0x3005"
                }
              },
              {
                "COEFF": {
                  "type": "u32",
                  "value": "0x0A00"
                }
              },
              {
                "COLOR": {
                  "type": "u32",
                  "value": "0x1800"
                }
              },
              {
                "COLORBURN_KHR": {
                  "type": "u32",
                  "value": "0x929A"
                }
              },
              {
                "COLORDODGE_KHR": {
                  "type": "u32",
                  "value": "0x9299"
                }
              },
              {
                "COLOR_ARRAY": {
                  "type": "u32",
                  "value": "0x8076"
                }
              },
              {
                "COLOR_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8898"
                }
              },
              {
                "COLOR_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8090"
                }
              },
              {
                "COLOR_ARRAY_SIZE": {
                  "type": "u32",
                  "value": "0x8081"
                }
              },
              {
                "COLOR_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x8083"
                }
              },
              {
                "COLOR_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x8082"
                }
              },
              {
                "COLOR_ATTACHMENT0": {
                  "type": "u32",
                  "value": "0x8CE0"
                }
              },
              {
                "COLOR_ATTACHMENT1": {
                  "type": "u32",
                  "value": "0x8CE1"
                }
              },
              {
                "COLOR_ATTACHMENT10": {
                  "type": "u32",
                  "value": "0x8CEA"
                }
              },
              {
                "COLOR_ATTACHMENT11": {
                  "type": "u32",
                  "value": "0x8CEB"
                }
              },
              {
                "COLOR_ATTACHMENT12": {
                  "type": "u32",
                  "value": "0x8CEC"
                }
              },
              {
                "COLOR_ATTACHMENT13": {
                  "type": "u32",
                  "value": "0x8CED"
                }
              },
              {
                "COLOR_ATTACHMENT14": {
                  "type": "u32",
                  "value": "0x8CEE"
                }
              },
              {
                "COLOR_ATTACHMENT15": {
                  "type": "u32",
                  "value": "0x8CEF"
                }
              },
              {
                "COLOR_ATTACHMENT16": {
                  "type": "u32",
                  "value": "0x8CF0"
                }
              },
              {
                "COLOR_ATTACHMENT17": {
                  "type": "u32",
                  "value": "0x8CF1"
                }
              },
              {
                "COLOR_ATTACHMENT18": {
                  "type": "u32",
                  "value": "0x8CF2"
                }
              },
              {
                "COLOR_ATTACHMENT19": {
                  "type": "u32",
                  "value": "0x8CF3"
                }
              },
              {
                "COLOR_ATTACHMENT2": {
                  "type": "u32",
                  "value": "0x8CE2"
                }
              },
              {
                "COLOR_ATTACHMENT20": {
                  "type": "u32",
                  "value": "0x8CF4"
                }
              },
              {
                "COLOR_ATTACHMENT21": {
                  "type": "u32",
                  "value": "0x8CF5"
                }
              },
              {
                "COLOR_ATTACHMENT22": {
                  "type": "u32",
                  "value": "0x8CF6"
                }
              },
              {
                "COLOR_ATTACHMENT23": {
                  "type": "u32",
                  "value": "0x8CF7"
                }
              },
              {
                "COLOR_ATTACHMENT24": {
                  "type": "u32",
                  "value": "0x8CF8"
                }
              },
              {
                "COLOR_ATTACHMENT25": {
                  "type": "u32",
                  "value": "0x8CF9"
                }
              },
              {
                "COLOR_ATTACHMENT26": {
                  "type": "u32",
                  "value": "0x8CFA"
                }
              },
              {
                "COLOR_ATTACHMENT27": {
                  "type": "u32",
                  "value": "0x8CFB"
                }
              },
              {
                "COLOR_ATTACHMENT28": {
                  "type": "u32",
                  "value": "0x8CFC"
                }
              },
              {
                "COLOR_ATTACHMENT29": {
                  "type": "u32",
                  "value": "0x8CFD"
                }
              },
              {
                "COLOR_ATTACHMENT3": {
                  "type": "u32",
                  "value": "0x8CE3"
                }
              },
              {
                "COLOR_ATTACHMENT30": {
                  "type": "u32",
                  "value": "0x8CFE"
                }
              },
              {
                "COLOR_ATTACHMENT31": {
                  "type": "u32",
                  "value": "0x8CFF"
                }
              },
              {
                "COLOR_ATTACHMENT4": {
                  "type": "u32",
                  "value": "0x8CE4"
                }
              },
              {
                "COLOR_ATTACHMENT5": {
                  "type": "u32",
                  "value": "0x8CE5"
                }
              },
              {
                "COLOR_ATTACHMENT6": {
                  "type": "u32",
                  "value": "0x8CE6"
                }
              },
              {
                "COLOR_ATTACHMENT7": {
                  "type": "u32",
                  "value": "0x8CE7"
                }
              },
              {
                "COLOR_ATTACHMENT8": {
                  "type": "u32",
                  "value": "0x8CE8"
                }
              },
              {
                "COLOR_ATTACHMENT9": {
                  "type": "u32",
                  "value": "0x8CE9"
                }
              },
              {
                "COLOR_BUFFER_BIT": {
                  "type": "u32",
                  "value": "0x00004000"
                }
              },
              {
                "COLOR_CLEAR_VALUE": {
                  "type": "u32",
                  "value": "0x0C22"
                }
              },
              {
                "COLOR_INDEX": {
                  "type": "u32",
                  "value": "0x1900"
                }
              },
              {
                "COLOR_INDEXES": {
                  "type": "u32",
                  "value": "0x1603"
                }
              },
              {
                "COLOR_LOGIC_OP": {
                  "type": "u32",
                  "value": "0x0BF2"
                }
              },
              {
                "COLOR_MATERIAL": {
                  "type": "u32",
                  "value": "0x0B57"
                }
              },
              {
                "COLOR_MATERIAL_FACE": {
                  "type": "u32",
                  "value": "0x0B55"
                }
              },
              {
                "COLOR_MATERIAL_PARAMETER": {
                  "type": "u32",
                  "value": "0x0B56"
                }
              },
              {
                "COLOR_SUM": {
                  "type": "u32",
                  "value": "0x8458"
                }
              },
              {
                "COLOR_WRITEMASK": {
                  "type": "u32",
                  "value": "0x0C23"
                }
              },
              {
                "COMBINE": {
                  "type": "u32",
                  "value": "0x8570"
                }
              },
              {
                "COMBINE_ALPHA": {
                  "type": "u32",
                  "value": "0x8572"
                }
              },
              {
                "COMBINE_RGB": {
                  "type": "u32",
                  "value": "0x8571"
                }
              },
              {
                "COMPARE_REF_TO_TEXTURE": {
                  "type": "u32",
                  "value": "0x884E"
                }
              },
              {
                "COMPARE_R_TO_TEXTURE": {
                  "type": "u32",
                  "value": "0x884E"
                }
              },
              {
                "COMPILE": {
                  "type": "u32",
                  "value": "0x1300"
                }
              },
              {
                "COMPILE_AND_EXECUTE": {
                  "type": "u32",
                  "value": "0x1301"
                }
              },
              {
                "COMPILE_STATUS": {
                  "type": "u32",
                  "value": "0x8B81"
                }
              },
              {
                "COMPRESSED_ALPHA": {
                  "type": "u32",
                  "value": "0x84E9"
                }
              },
              {
                "COMPRESSED_INTENSITY": {
                  "type": "u32",
                  "value": "0x84EC"
                }
              },
              {
                "COMPRESSED_LUMINANCE": {
                  "type": "u32",
                  "value": "0x84EA"
                }
              },
              {
                "COMPRESSED_LUMINANCE_ALPHA": {
                  "type": "u32",
                  "value": "0x84EB"
                }
              },
              {
                "COMPRESSED_R11_EAC": {
                  "type": "u32",
                  "value": "0x9270"
                }
              },
              {
                "COMPRESSED_RED": {
                  "type": "u32",
                  "value": "0x8225"
                }
              },
              {
                "COMPRESSED_RED_RGTC1": {
                  "type": "u32",
                  "value": "0x8DBB"
                }
              },
              {
                "COMPRESSED_RG": {
                  "type": "u32",
                  "value": "0x8226"
                }
              },
              {
                "COMPRESSED_RG11_EAC": {
                  "type": "u32",
                  "value": "0x9272"
                }
              },
              {
                "COMPRESSED_RGB": {
                  "type": "u32",
                  "value": "0x84ED"
                }
              },
              {
                "COMPRESSED_RGB8_ETC2": {
                  "type": "u32",
                  "value": "0x9274"
                }
              },
              {
                "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2": {
                  "type": "u32",
                  "value": "0x9276"
                }
              },
              {
                "COMPRESSED_RGBA": {
                  "type": "u32",
                  "value": "0x84EE"
                }
              },
              {
                "COMPRESSED_RGBA8_ETC2_EAC": {
                  "type": "u32",
                  "value": "0x9278"
                }
              },
              {
                "COMPRESSED_RG_RGTC2": {
                  "type": "u32",
                  "value": "0x8DBD"
                }
              },
              {
                "COMPRESSED_SIGNED_R11_EAC": {
                  "type": "u32",
                  "value": "0x9271"
                }
              },
              {
                "COMPRESSED_SIGNED_RED_RGTC1": {
                  "type": "u32",
                  "value": "0x8DBC"
                }
              },
              {
                "COMPRESSED_SIGNED_RG11_EAC": {
                  "type": "u32",
                  "value": "0x9273"
                }
              },
              {
                "COMPRESSED_SIGNED_RG_RGTC2": {
                  "type": "u32",
                  "value": "0x8DBE"
                }
              },
              {
                "COMPRESSED_SLUMINANCE": {
                  "type": "u32",
                  "value": "0x8C4A"
                }
              },
              {
                "COMPRESSED_SLUMINANCE_ALPHA": {
                  "type": "u32",
                  "value": "0x8C4B"
                }
              },
              {
                "COMPRESSED_SRGB": {
                  "type": "u32",
                  "value": "0x8C48"
                }
              },
              {
                "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC": {
                  "type": "u32",
                  "value": "0x9279"
                }
              },
              {
                "COMPRESSED_SRGB8_ETC2": {
                  "type": "u32",
                  "value": "0x9275"
                }
              },
              {
                "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2": {
                  "type": "u32",
                  "value": "0x9277"
                }
              },
              {
                "COMPRESSED_SRGB_ALPHA": {
                  "type": "u32",
                  "value": "0x8C49"
                }
              },
              {
                "COMPRESSED_TEXTURE_FORMATS": {
                  "type": "u32",
                  "value": "0x86A3"
                }
              },
              {
                "CONDITION_SATISFIED": {
                  "type": "u32",
                  "value": "0x911C"
                }
              },
              {
                "CONSTANT": {
                  "type": "u32",
                  "value": "0x8576"
                }
              },
              {
                "CONSTANT_ALPHA": {
                  "type": "u32",
                  "value": "0x8003"
                }
              },
              {
                "CONSTANT_ATTENUATION": {
                  "type": "u32",
                  "value": "0x1207"
                }
              },
              {
                "CONSTANT_COLOR": {
                  "type": "u32",
                  "value": "0x8001"
                }
              },
              {
                "CONTEXT_COMPATIBILITY_PROFILE_BIT": {
                  "type": "u32",
                  "value": "0x00000002"
                }
              },
              {
                "CONTEXT_CORE_PROFILE_BIT": {
                  "type": "u32",
                  "value": "0x00000001"
                }
              },
              {
                "CONTEXT_FLAGS": {
                  "type": "u32",
                  "value": "0x821E"
                }
              },
              {
                "CONTEXT_FLAG_DEBUG_BIT": {
                  "type": "u32",
                  "value": "0x00000002"
                }
              },
              {
                "CONTEXT_FLAG_DEBUG_BIT_KHR": {
                  "type": "u32",
                  "value": "0x00000002"
                }
              },
              {
                "CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT": {
                  "type": "u32",
                  "value": "0x00000001"
                }
              },
              {
                "CONTEXT_PROFILE_MASK": {
                  "type": "u32",
                  "value": "0x9126"
                }
              },
              {
                "COORD_REPLACE": {
                  "type": "u32",
                  "value": "0x8862"
                }
              },
              {
                "COPY": {
                  "type": "u32",
                  "value": "0x1503"
                }
              },
              {
                "COPY_INVERTED": {
                  "type": "u32",
                  "value": "0x150C"
                }
              },
              {
                "COPY_PIXEL_TOKEN": {
                  "type": "u32",
                  "value": "0x0706"
                }
              },
              {
                "COPY_READ_BUFFER": {
                  "type": "u32",
                  "value": "0x8F36"
                }
              },
              {
                "COPY_READ_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8F36"
                }
              },
              {
                "COPY_WRITE_BUFFER": {
                  "type": "u32",
                  "value": "0x8F37"
                }
              },
              {
                "COPY_WRITE_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8F37"
                }
              },
              {
                "CULL_FACE": {
                  "type": "u32",
                  "value": "0x0B44"
                }
              },
              {
                "CULL_FACE_MODE": {
                  "type": "u32",
                  "value": "0x0B45"
                }
              },
              {
                "CURRENT_BIT": {
                  "type": "u32",
                  "value": "0x00000001"
                }
              },
              {
                "CURRENT_COLOR": {
                  "type": "u32",
                  "value": "0x0B00"
                }
              },
              {
                "CURRENT_FOG_COORD": {
                  "type": "u32",
                  "value": "0x8453"
                }
              },
              {
                "CURRENT_FOG_COORDINATE": {
                  "type": "u32",
                  "value": "0x8453"
                }
              },
              {
                "CURRENT_INDEX": {
                  "type": "u32",
                  "value": "0x0B01"
                }
              },
              {
                "CURRENT_NORMAL": {
                  "type": "u32",
                  "value": "0x0B02"
                }
              },
              {
                "CURRENT_PROGRAM": {
                  "type": "u32",
                  "value": "0x8B8D"
                }
              },
              {
                "CURRENT_QUERY": {
                  "type": "u32",
                  "value": "0x8865"
                }
              },
              {
                "CURRENT_QUERY_EXT": {
                  "type": "u32",
                  "value": "0x8865"
                }
              },
              {
                "CURRENT_RASTER_COLOR": {
                  "type": "u32",
                  "value": "0x0B04"
                }
              },
              {
                "CURRENT_RASTER_DISTANCE": {
                  "type": "u32",
                  "value": "0x0B09"
                }
              },
              {
                "CURRENT_RASTER_INDEX": {
                  "type": "u32",
                  "value": "0x0B05"
                }
              },
              {
                "CURRENT_RASTER_POSITION": {
                  "type": "u32",
                  "value": "0x0B07"
                }
              },
              {
                "CURRENT_RASTER_POSITION_VALID": {
                  "type": "u32",
                  "value": "0x0B08"
                }
              },
              {
                "CURRENT_RASTER_SECONDARY_COLOR": {
                  "type": "u32",
                  "value": "0x845F"
                }
              },
              {
                "CURRENT_RASTER_TEXTURE_COORDS": {
                  "type": "u32",
                  "value": "0x0B06"
                }
              },
              {
                "CURRENT_SECONDARY_COLOR": {
                  "type": "u32",
                  "value": "0x8459"
                }
              },
              {
                "CURRENT_TEXTURE_COORDS": {
                  "type": "u32",
                  "value": "0x0B03"
                }
              },
              {
                "CURRENT_VERTEX_ATTRIB": {
                  "type": "u32",
                  "value": "0x8626"
                }
              },
              {
                "CW": {
                  "type": "u32",
                  "value": "0x0900"
                }
              },
              {
                "DARKEN_KHR": {
                  "type": "u32",
                  "value": "0x9297"
                }
              },
              {
                "DEBUG_CALLBACK_FUNCTION": {
                  "type": "u32",
                  "value": "0x8244"
                }
              },
              {
                "DEBUG_CALLBACK_FUNCTION_KHR": {
                  "type": "u32",
                  "value": "0x8244"
                }
              },
              {
                "DEBUG_CALLBACK_USER_PARAM": {
                  "type": "u32",
                  "value": "0x8245"
                }
              },
              {
                "DEBUG_CALLBACK_USER_PARAM_KHR": {
                  "type": "u32",
                  "value": "0x8245"
                }
              },
              {
                "DEBUG_GROUP_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x826D"
                }
              },
              {
                "DEBUG_GROUP_STACK_DEPTH_KHR": {
                  "type": "u32",
                  "value": "0x826D"
                }
              },
              {
                "DEBUG_LOGGED_MESSAGES": {
                  "type": "u32",
                  "value": "0x9145"
                }
              },
              {
                "DEBUG_LOGGED_MESSAGES_KHR": {
                  "type": "u32",
                  "value": "0x9145"
                }
              },
              {
                "DEBUG_NEXT_LOGGED_MESSAGE_LENGTH": {
                  "type": "u32",
                  "value": "0x8243"
                }
              },
              {
                "DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR": {
                  "type": "u32",
                  "value": "0x8243"
                }
              },
              {
                "DEBUG_OUTPUT": {
                  "type": "u32",
                  "value": "0x92E0"
                }
              },
              {
                "DEBUG_OUTPUT_KHR": {
                  "type": "u32",
                  "value": "0x92E0"
                }
              },
              {
                "DEBUG_OUTPUT_SYNCHRONOUS": {
                  "type": "u32",
                  "value": "0x8242"
                }
              },
              {
                "DEBUG_OUTPUT_SYNCHRONOUS_KHR": {
                  "type": "u32",
                  "value": "0x8242"
                }
              },
              {
                "DEBUG_SEVERITY_HIGH": {
                  "type": "u32",
                  "value": "0x9146"
                }
              },
              {
                "DEBUG_SEVERITY_HIGH_KHR": {
                  "type": "u32",
                  "value": "0x9146"
                }
              },
              {
                "DEBUG_SEVERITY_LOW": {
                  "type": "u32",
                  "value": "0x9148"
                }
              },
              {
                "DEBUG_SEVERITY_LOW_KHR": {
                  "type": "u32",
                  "value": "0x9148"
                }
              },
              {
                "DEBUG_SEVERITY_MEDIUM": {
                  "type": "u32",
                  "value": "0x9147"
                }
              },
              {
                "DEBUG_SEVERITY_MEDIUM_KHR": {
                  "type": "u32",
                  "value": "0x9147"
                }
              },
              {
                "DEBUG_SEVERITY_NOTIFICATION": {
                  "type": "u32",
                  "value": "0x826B"
                }
              },
              {
                "DEBUG_SEVERITY_NOTIFICATION_KHR": {
                  "type": "u32",
                  "value": "0x826B"
                }
              },
              {
                "DEBUG_SOURCE_API": {
                  "type": "u32",
                  "value": "0x8246"
                }
              },
              {
                "DEBUG_SOURCE_API_KHR": {
                  "type": "u32",
                  "value": "0x8246"
                }
              },
              {
                "DEBUG_SOURCE_APPLICATION": {
                  "type": "u32",
                  "value": "0x824A"
                }
              },
              {
                "DEBUG_SOURCE_APPLICATION_KHR": {
                  "type": "u32",
                  "value": "0x824A"
                }
              },
              {
                "DEBUG_SOURCE_OTHER": {
                  "type": "u32",
                  "value": "0x824B"
                }
              },
              {
                "DEBUG_SOURCE_OTHER_KHR": {
                  "type": "u32",
                  "value": "0x824B"
                }
              },
              {
                "DEBUG_SOURCE_SHADER_COMPILER": {
                  "type": "u32",
                  "value": "0x8248"
                }
              },
              {
                "DEBUG_SOURCE_SHADER_COMPILER_KHR": {
                  "type": "u32",
                  "value": "0x8248"
                }
              },
              {
                "DEBUG_SOURCE_THIRD_PARTY": {
                  "type": "u32",
                  "value": "0x8249"
                }
              },
              {
                "DEBUG_SOURCE_THIRD_PARTY_KHR": {
                  "type": "u32",
                  "value": "0x8249"
                }
              },
              {
                "DEBUG_SOURCE_WINDOW_SYSTEM": {
                  "type": "u32",
                  "value": "0x8247"
                }
              },
              {
                "DEBUG_SOURCE_WINDOW_SYSTEM_KHR": {
                  "type": "u32",
                  "value": "0x8247"
                }
              },
              {
                "DEBUG_TYPE_DEPRECATED_BEHAVIOR": {
                  "type": "u32",
                  "value": "0x824D"
                }
              },
              {
                "DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR": {
                  "type": "u32",
                  "value": "0x824D"
                }
              },
              {
                "DEBUG_TYPE_ERROR": {
                  "type": "u32",
                  "value": "0x824C"
                }
              },
              {
                "DEBUG_TYPE_ERROR_KHR": {
                  "type": "u32",
                  "value": "0x824C"
                }
              },
              {
                "DEBUG_TYPE_MARKER": {
                  "type": "u32",
                  "value": "0x8268"
                }
              },
              {
                "DEBUG_TYPE_MARKER_KHR": {
                  "type": "u32",
                  "value": "0x8268"
                }
              },
              {
                "DEBUG_TYPE_OTHER": {
                  "type": "u32",
                  "value": "0x8251"
                }
              },
              {
                "DEBUG_TYPE_OTHER_KHR": {
                  "type": "u32",
                  "value": "0x8251"
                }
              },
              {
                "DEBUG_TYPE_PERFORMANCE": {
                  "type": "u32",
                  "value": "0x8250"
                }
              },
              {
                "DEBUG_TYPE_PERFORMANCE_KHR": {
                  "type": "u32",
                  "value": "0x8250"
                }
              },
              {
                "DEBUG_TYPE_POP_GROUP": {
                  "type": "u32",
                  "value": "0x826A"
                }
              },
              {
                "DEBUG_TYPE_POP_GROUP_KHR": {
                  "type": "u32",
                  "value": "0x826A"
                }
              },
              {
                "DEBUG_TYPE_PORTABILITY": {
                  "type": "u32",
                  "value": "0x824F"
                }
              },
              {
                "DEBUG_TYPE_PORTABILITY_KHR": {
                  "type": "u32",
                  "value": "0x824F"
                }
              },
              {
                "DEBUG_TYPE_PUSH_GROUP": {
                  "type": "u32",
                  "value": "0x8269"
                }
              },
              {
                "DEBUG_TYPE_PUSH_GROUP_KHR": {
                  "type": "u32",
                  "value": "0x8269"
                }
              },
              {
                "DEBUG_TYPE_UNDEFINED_BEHAVIOR": {
                  "type": "u32",
                  "value": "0x824E"
                }
              },
              {
                "DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR": {
                  "type": "u32",
                  "value": "0x824E"
                }
              },
              {
                "DECAL": {
                  "type": "u32",
                  "value": "0x2101"
                }
              },
              {
                "DECR": {
                  "type": "u32",
                  "value": "0x1E03"
                }
              },
              {
                "DECR_WRAP": {
                  "type": "u32",
                  "value": "0x8508"
                }
              },
              {
                "DELETE_STATUS": {
                  "type": "u32",
                  "value": "0x8B80"
                }
              },
              {
                "DEPTH": {
                  "type": "u32",
                  "value": "0x1801"
                }
              },
              {
                "DEPTH24_STENCIL8": {
                  "type": "u32",
                  "value": "0x88F0"
                }
              },
              {
                "DEPTH32F_STENCIL8": {
                  "type": "u32",
                  "value": "0x8CAD"
                }
              },
              {
                "DEPTH_ATTACHMENT": {
                  "type": "u32",
                  "value": "0x8D00"
                }
              },
              {
                "DEPTH_BIAS": {
                  "type": "u32",
                  "value": "0x0D1F"
                }
              },
              {
                "DEPTH_BITS": {
                  "type": "u32",
                  "value": "0x0D56"
                }
              },
              {
                "DEPTH_BUFFER_BIT": {
                  "type": "u32",
                  "value": "0x00000100"
                }
              },
              {
                "DEPTH_CLAMP": {
                  "type": "u32",
                  "value": "0x864F"
                }
              },
              {
                "DEPTH_CLEAR_VALUE": {
                  "type": "u32",
                  "value": "0x0B73"
                }
              },
              {
                "DEPTH_COMPONENT": {
                  "type": "u32",
                  "value": "0x1902"
                }
              },
              {
                "DEPTH_COMPONENT16": {
                  "type": "u32",
                  "value": "0x81A5"
                }
              },
              {
                "DEPTH_COMPONENT24": {
                  "type": "u32",
                  "value": "0x81A6"
                }
              },
              {
                "DEPTH_COMPONENT32": {
                  "type": "u32",
                  "value": "0x81A7"
                }
              },
              {
                "DEPTH_COMPONENT32F": {
                  "type": "u32",
                  "value": "0x8CAC"
                }
              },
              {
                "DEPTH_FUNC": {
                  "type": "u32",
                  "value": "0x0B74"
                }
              },
              {
                "DEPTH_RANGE": {
                  "type": "u32",
                  "value": "0x0B70"
                }
              },
              {
                "DEPTH_SCALE": {
                  "type": "u32",
                  "value": "0x0D1E"
                }
              },
              {
                "DEPTH_STENCIL": {
                  "type": "u32",
                  "value": "0x84F9"
                }
              },
              {
                "DEPTH_STENCIL_ATTACHMENT": {
                  "type": "u32",
                  "value": "0x821A"
                }
              },
              {
                "DEPTH_TEST": {
                  "type": "u32",
                  "value": "0x0B71"
                }
              },
              {
                "DEPTH_TEXTURE_MODE": {
                  "type": "u32",
                  "value": "0x884B"
                }
              },
              {
                "DEPTH_WRITEMASK": {
                  "type": "u32",
                  "value": "0x0B72"
                }
              },
              {
                "DIFFERENCE_KHR": {
                  "type": "u32",
                  "value": "0x929E"
                }
              },
              {
                "DIFFUSE": {
                  "type": "u32",
                  "value": "0x1201"
                }
              },
              {
                "DISPLAY_LIST": {
                  "type": "u32",
                  "value": "0x82E7"
                }
              },
              {
                "DITHER": {
                  "type": "u32",
                  "value": "0x0BD0"
                }
              },
              {
                "DOMAIN": {
                  "type": "u32",
                  "value": "0x0A02"
                }
              },
              {
                "DONT_CARE": {
                  "type": "u32",
                  "value": "0x1100"
                }
              },
              {
                "DOT3_RGB": {
                  "type": "u32",
                  "value": "0x86AE"
                }
              },
              {
                "DOT3_RGBA": {
                  "type": "u32",
                  "value": "0x86AF"
                }
              },
              {
                "DOUBLE": {
                  "type": "u32",
                  "value": "0x140A"
                }
              },
              {
                "DOUBLEBUFFER": {
                  "type": "u32",
                  "value": "0x0C32"
                }
              },
              {
                "DRAW_BUFFER": {
                  "type": "u32",
                  "value": "0x0C01"
                }
              },
              {
                "DRAW_BUFFER0": {
                  "type": "u32",
                  "value": "0x8825"
                }
              },
              {
                "DRAW_BUFFER1": {
                  "type": "u32",
                  "value": "0x8826"
                }
              },
              {
                "DRAW_BUFFER10": {
                  "type": "u32",
                  "value": "0x882F"
                }
              },
              {
                "DRAW_BUFFER11": {
                  "type": "u32",
                  "value": "0x8830"
                }
              },
              {
                "DRAW_BUFFER12": {
                  "type": "u32",
                  "value": "0x8831"
                }
              },
              {
                "DRAW_BUFFER13": {
                  "type": "u32",
                  "value": "0x8832"
                }
              },
              {
                "DRAW_BUFFER14": {
                  "type": "u32",
                  "value": "0x8833"
                }
              },
              {
                "DRAW_BUFFER15": {
                  "type": "u32",
                  "value": "0x8834"
                }
              },
              {
                "DRAW_BUFFER2": {
                  "type": "u32",
                  "value": "0x8827"
                }
              },
              {
                "DRAW_BUFFER3": {
                  "type": "u32",
                  "value": "0x8828"
                }
              },
              {
                "DRAW_BUFFER4": {
                  "type": "u32",
                  "value": "0x8829"
                }
              },
              {
                "DRAW_BUFFER5": {
                  "type": "u32",
                  "value": "0x882A"
                }
              },
              {
                "DRAW_BUFFER6": {
                  "type": "u32",
                  "value": "0x882B"
                }
              },
              {
                "DRAW_BUFFER7": {
                  "type": "u32",
                  "value": "0x882C"
                }
              },
              {
                "DRAW_BUFFER8": {
                  "type": "u32",
                  "value": "0x882D"
                }
              },
              {
                "DRAW_BUFFER9": {
                  "type": "u32",
                  "value": "0x882E"
                }
              },
              {
                "DRAW_FRAMEBUFFER": {
                  "type": "u32",
                  "value": "0x8CA9"
                }
              },
              {
                "DRAW_FRAMEBUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8CA6"
                }
              },
              {
                "DRAW_PIXELS_APPLE": {
                  "type": "u32",
                  "value": "0x8A0A"
                }
              },
              {
                "DRAW_PIXEL_TOKEN": {
                  "type": "u32",
                  "value": "0x0705"
                }
              },
              {
                "DST_ALPHA": {
                  "type": "u32",
                  "value": "0x0304"
                }
              },
              {
                "DST_COLOR": {
                  "type": "u32",
                  "value": "0x0306"
                }
              },
              {
                "DYNAMIC_COPY": {
                  "type": "u32",
                  "value": "0x88EA"
                }
              },
              {
                "DYNAMIC_DRAW": {
                  "type": "u32",
                  "value": "0x88E8"
                }
              },
              {
                "DYNAMIC_READ": {
                  "type": "u32",
                  "value": "0x88E9"
                }
              },
              {
                "EDGE_FLAG": {
                  "type": "u32",
                  "value": "0x0B43"
                }
              },
              {
                "EDGE_FLAG_ARRAY": {
                  "type": "u32",
                  "value": "0x8079"
                }
              },
              {
                "EDGE_FLAG_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889B"
                }
              },
              {
                "EDGE_FLAG_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8093"
                }
              },
              {
                "EDGE_FLAG_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x808C"
                }
              },
              {
                "ELEMENT_ARRAY_BUFFER": {
                  "type": "u32",
                  "value": "0x8893"
                }
              },
              {
                "ELEMENT_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8895"
                }
              },
              {
                "EMISSION": {
                  "type": "u32",
                  "value": "0x1600"
                }
              },
              {
                "ENABLE_BIT": {
                  "type": "u32",
                  "value": "0x00002000"
                }
              },
              {
                "EQUAL": {
                  "type": "u32",
                  "value": "0x0202"
                }
              },
              {
                "EQUIV": {
                  "type": "u32",
                  "value": "0x1509"
                }
              },
              {
                "EVAL_BIT": {
                  "type": "u32",
                  "value": "0x00010000"
                }
              },
              {
                "EXCLUSION_KHR": {
                  "type": "u32",
                  "value": "0x92A0"
                }
              },
              {
                "EXP": {
                  "type": "u32",
                  "value": "0x0800"
                }
              },
              {
                "EXP2": {
                  "type": "u32",
                  "value": "0x0801"
                }
              },
              {
                "EXTENSIONS": {
                  "type": "u32",
                  "value": "0x1F03"
                }
              },
              {
                "EYE_LINEAR": {
                  "type": "u32",
                  "value": "0x2400"
                }
              },
              {
                "EYE_PLANE": {
                  "type": "u32",
                  "value": "0x2502"
                }
              },
              {
                "FALSE": {
                  "type": "u8",
                  "value": "0"
                }
              },
              {
                "FASTEST": {
                  "type": "u32",
                  "value": "0x1101"
                }
              },
              {
                "FEEDBACK": {
                  "type": "u32",
                  "value": "0x1C01"
                }
              },
              {
                "FEEDBACK_BUFFER_POINTER": {
                  "type": "u32",
                  "value": "0x0DF0"
                }
              },
              {
                "FEEDBACK_BUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x0DF1"
                }
              },
              {
                "FEEDBACK_BUFFER_TYPE": {
                  "type": "u32",
                  "value": "0x0DF2"
                }
              },
              {
                "FENCE_APPLE": {
                  "type": "u32",
                  "value": "0x8A0B"
                }
              },
              {
                "FILL": {
                  "type": "u32",
                  "value": "0x1B02"
                }
              },
              {
                "FIRST_VERTEX_CONVENTION": {
                  "type": "u32",
                  "value": "0x8E4D"
                }
              },
              {
                "FIXED": {
                  "type": "u32",
                  "value": "0x140C"
                }
              },
              {
                "FIXED_ONLY": {
                  "type": "u32",
                  "value": "0x891D"
                }
              },
              {
                "FLAT": {
                  "type": "u32",
                  "value": "0x1D00"
                }
              },
              {
                "FLOAT": {
                  "type": "u32",
                  "value": "0x1406"
                }
              },
              {
                "FLOAT_32_UNSIGNED_INT_24_8_REV": {
                  "type": "u32",
                  "value": "0x8DAD"
                }
              },
              {
                "FLOAT_MAT2": {
                  "type": "u32",
                  "value": "0x8B5A"
                }
              },
              {
                "FLOAT_MAT2x3": {
                  "type": "u32",
                  "value": "0x8B65"
                }
              },
              {
                "FLOAT_MAT2x4": {
                  "type": "u32",
                  "value": "0x8B66"
                }
              },
              {
                "FLOAT_MAT3": {
                  "type": "u32",
                  "value": "0x8B5B"
                }
              },
              {
                "FLOAT_MAT3x2": {
                  "type": "u32",
                  "value": "0x8B67"
                }
              },
              {
                "FLOAT_MAT3x4": {
                  "type": "u32",
                  "value": "0x8B68"
                }
              },
              {
                "FLOAT_MAT4": {
                  "type": "u32",
                  "value": "0x8B5C"
                }
              },
              {
                "FLOAT_MAT4x2": {
                  "type": "u32",
                  "value": "0x8B69"
                }
              },
              {
                "FLOAT_MAT4x3": {
                  "type": "u32",
                  "value": "0x8B6A"
                }
              },
              {
                "FLOAT_VEC2": {
                  "type": "u32",
                  "value": "0x8B50"
                }
              },
              {
                "FLOAT_VEC3": {
                  "type": "u32",
                  "value": "0x8B51"
                }
              },
              {
                "FLOAT_VEC4": {
                  "type": "u32",
                  "value": "0x8B52"
                }
              },
              {
                "FOG": {
                  "type": "u32",
                  "value": "0x0B60"
                }
              },
              {
                "FOG_BIT": {
                  "type": "u32",
                  "value": "0x00000080"
                }
              },
              {
                "FOG_COLOR": {
                  "type": "u32",
                  "value": "0x0B66"
                }
              },
              {
                "FOG_COORD": {
                  "type": "u32",
                  "value": "0x8451"
                }
              },
              {
                "FOG_COORDINATE": {
                  "type": "u32",
                  "value": "0x8451"
                }
              },
              {
                "FOG_COORDINATE_ARRAY": {
                  "type": "u32",
                  "value": "0x8457"
                }
              },
              {
                "FOG_COORDINATE_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889D"
                }
              },
              {
                "FOG_COORDINATE_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8456"
                }
              },
              {
                "FOG_COORDINATE_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x8455"
                }
              },
              {
                "FOG_COORDINATE_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x8454"
                }
              },
              {
                "FOG_COORDINATE_SOURCE": {
                  "type": "u32",
                  "value": "0x8450"
                }
              },
              {
                "FOG_COORD_ARRAY": {
                  "type": "u32",
                  "value": "0x8457"
                }
              },
              {
                "FOG_COORD_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889D"
                }
              },
              {
                "FOG_COORD_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8456"
                }
              },
              {
                "FOG_COORD_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x8455"
                }
              },
              {
                "FOG_COORD_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x8454"
                }
              },
              {
                "FOG_COORD_SRC": {
                  "type": "u32",
                  "value": "0x8450"
                }
              },
              {
                "FOG_DENSITY": {
                  "type": "u32",
                  "value": "0x0B62"
                }
              },
              {
                "FOG_END": {
                  "type": "u32",
                  "value": "0x0B64"
                }
              },
              {
                "FOG_HINT": {
                  "type": "u32",
                  "value": "0x0C54"
                }
              },
              {
                "FOG_INDEX": {
                  "type": "u32",
                  "value": "0x0B61"
                }
              },
              {
                "FOG_MODE": {
                  "type": "u32",
                  "value": "0x0B65"
                }
              },
              {
                "FOG_START": {
                  "type": "u32",
                  "value": "0x0B63"
                }
              },
              {
                "FRAGMENT_DEPTH": {
                  "type": "u32",
                  "value": "0x8452"
                }
              },
              {
                "FRAGMENT_SHADER": {
                  "type": "u32",
                  "value": "0x8B30"
                }
              },
              {
                "FRAGMENT_SHADER_DERIVATIVE_HINT": {
                  "type": "u32",
                  "value": "0x8B8B"
                }
              },
              {
                "FRAMEBUFFER": {
                  "type": "u32",
                  "value": "0x8D40"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE": {
                  "type": "u32",
                  "value": "0x8215"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_ANGLE": {
                  "type": "u32",
                  "value": "0x93A3"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_BLUE_SIZE": {
                  "type": "u32",
                  "value": "0x8214"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING": {
                  "type": "u32",
                  "value": "0x8210"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE": {
                  "type": "u32",
                  "value": "0x8211"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE": {
                  "type": "u32",
                  "value": "0x8216"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_GREEN_SIZE": {
                  "type": "u32",
                  "value": "0x8213"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_LAYERED": {
                  "type": "u32",
                  "value": "0x8DA7"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_OBJECT_NAME": {
                  "type": "u32",
                  "value": "0x8CD1"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE": {
                  "type": "u32",
                  "value": "0x8CD0"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_RED_SIZE": {
                  "type": "u32",
                  "value": "0x8212"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE": {
                  "type": "u32",
                  "value": "0x8217"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE": {
                  "type": "u32",
                  "value": "0x8CD3"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER": {
                  "type": "u32",
                  "value": "0x8CD4"
                }
              },
              {
                "FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL": {
                  "type": "u32",
                  "value": "0x8CD2"
                }
              },
              {
                "FRAMEBUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8CA6"
                }
              },
              {
                "FRAMEBUFFER_COMPLETE": {
                  "type": "u32",
                  "value": "0x8CD5"
                }
              },
              {
                "FRAMEBUFFER_DEFAULT": {
                  "type": "u32",
                  "value": "0x8218"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_ATTACHMENT": {
                  "type": "u32",
                  "value": "0x8CD6"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_DIMENSIONS": {
                  "type": "u32",
                  "value": "0x8CD9"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER": {
                  "type": "u32",
                  "value": "0x8CDB"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS": {
                  "type": "u32",
                  "value": "0x8DA8"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT": {
                  "type": "u32",
                  "value": "0x8CD7"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x8D56"
                }
              },
              {
                "FRAMEBUFFER_INCOMPLETE_READ_BUFFER": {
                  "type": "u32",
                  "value": "0x8CDC"
                }
              },
              {
                "FRAMEBUFFER_SRGB": {
                  "type": "u32",
                  "value": "0x8DB9"
                }
              },
              {
                "FRAMEBUFFER_UNDEFINED": {
                  "type": "u32",
                  "value": "0x8219"
                }
              },
              {
                "FRAMEBUFFER_UNSUPPORTED": {
                  "type": "u32",
                  "value": "0x8CDD"
                }
              },
              {
                "FRONT": {
                  "type": "u32",
                  "value": "0x0404"
                }
              },
              {
                "FRONT_AND_BACK": {
                  "type": "u32",
                  "value": "0x0408"
                }
              },
              {
                "FRONT_FACE": {
                  "type": "u32",
                  "value": "0x0B46"
                }
              },
              {
                "FRONT_LEFT": {
                  "type": "u32",
                  "value": "0x0400"
                }
              },
              {
                "FRONT_RIGHT": {
                  "type": "u32",
                  "value": "0x0401"
                }
              },
              {
                "FUNC_ADD": {
                  "type": "u32",
                  "value": "0x8006"
                }
              },
              {
                "FUNC_REVERSE_SUBTRACT": {
                  "type": "u32",
                  "value": "0x800B"
                }
              },
              {
                "FUNC_SUBTRACT": {
                  "type": "u32",
                  "value": "0x800A"
                }
              },
              {
                "GENERATE_MIPMAP": {
                  "type": "u32",
                  "value": "0x8191"
                }
              },
              {
                "GENERATE_MIPMAP_HINT": {
                  "type": "u32",
                  "value": "0x8192"
                }
              },
              {
                "GEOMETRY_INPUT_TYPE": {
                  "type": "u32",
                  "value": "0x8917"
                }
              },
              {
                "GEOMETRY_OUTPUT_TYPE": {
                  "type": "u32",
                  "value": "0x8918"
                }
              },
              {
                "GEOMETRY_SHADER": {
                  "type": "u32",
                  "value": "0x8DD9"
                }
              },
              {
                "GEOMETRY_VERTICES_OUT": {
                  "type": "u32",
                  "value": "0x8916"
                }
              },
              {
                "GEQUAL": {
                  "type": "u32",
                  "value": "0x0206"
                }
              },
              {
                "GPU_DISJOINT_EXT": {
                  "type": "u32",
                  "value": "0x8FBB"
                }
              },
              {
                "GREATER": {
                  "type": "u32",
                  "value": "0x0204"
                }
              },
              {
                "GREEN": {
                  "type": "u32",
                  "value": "0x1904"
                }
              },
              {
                "GREEN_BIAS": {
                  "type": "u32",
                  "value": "0x0D19"
                }
              },
              {
                "GREEN_BITS": {
                  "type": "u32",
                  "value": "0x0D53"
                }
              },
              {
                "GREEN_INTEGER": {
                  "type": "u32",
                  "value": "0x8D95"
                }
              },
              {
                "GREEN_SCALE": {
                  "type": "u32",
                  "value": "0x0D18"
                }
              },
              {
                "HALF_FLOAT": {
                  "type": "u32",
                  "value": "0x140B"
                }
              },
              {
                "HALF_FLOAT_OES": {
                  "type": "u32",
                  "value": "0x8D61"
                }
              },
              {
                "HARDLIGHT_KHR": {
                  "type": "u32",
                  "value": "0x929B"
                }
              },
              {
                "HIGH_FLOAT": {
                  "type": "u32",
                  "value": "0x8DF2"
                }
              },
              {
                "HIGH_INT": {
                  "type": "u32",
                  "value": "0x8DF5"
                }
              },
              {
                "HINT_BIT": {
                  "type": "u32",
                  "value": "0x00008000"
                }
              },
              {
                "HSL_COLOR_KHR": {
                  "type": "u32",
                  "value": "0x92AF"
                }
              },
              {
                "HSL_HUE_KHR": {
                  "type": "u32",
                  "value": "0x92AD"
                }
              },
              {
                "HSL_LUMINOSITY_KHR": {
                  "type": "u32",
                  "value": "0x92B0"
                }
              },
              {
                "HSL_SATURATION_KHR": {
                  "type": "u32",
                  "value": "0x92AE"
                }
              },
              {
                "IMPLEMENTATION_COLOR_READ_FORMAT": {
                  "type": "u32",
                  "value": "0x8B9B"
                }
              },
              {
                "IMPLEMENTATION_COLOR_READ_TYPE": {
                  "type": "u32",
                  "value": "0x8B9A"
                }
              },
              {
                "INCR": {
                  "type": "u32",
                  "value": "0x1E02"
                }
              },
              {
                "INCR_WRAP": {
                  "type": "u32",
                  "value": "0x8507"
                }
              },
              {
                "INDEX": {
                  "type": "u32",
                  "value": "0x8222"
                }
              },
              {
                "INDEX_ARRAY": {
                  "type": "u32",
                  "value": "0x8077"
                }
              },
              {
                "INDEX_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8899"
                }
              },
              {
                "INDEX_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8091"
                }
              },
              {
                "INDEX_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x8086"
                }
              },
              {
                "INDEX_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x8085"
                }
              },
              {
                "INDEX_BITS": {
                  "type": "u32",
                  "value": "0x0D51"
                }
              },
              {
                "INDEX_CLEAR_VALUE": {
                  "type": "u32",
                  "value": "0x0C20"
                }
              },
              {
                "INDEX_LOGIC_OP": {
                  "type": "u32",
                  "value": "0x0BF1"
                }
              },
              {
                "INDEX_MODE": {
                  "type": "u32",
                  "value": "0x0C30"
                }
              },
              {
                "INDEX_OFFSET": {
                  "type": "u32",
                  "value": "0x0D13"
                }
              },
              {
                "INDEX_SHIFT": {
                  "type": "u32",
                  "value": "0x0D12"
                }
              },
              {
                "INDEX_WRITEMASK": {
                  "type": "u32",
                  "value": "0x0C21"
                }
              },
              {
                "INFO_LOG_LENGTH": {
                  "type": "u32",
                  "value": "0x8B84"
                }
              },
              {
                "INT": {
                  "type": "u32",
                  "value": "0x1404"
                }
              },
              {
                "INTENSITY": {
                  "type": "u32",
                  "value": "0x8049"
                }
              },
              {
                "INTENSITY12": {
                  "type": "u32",
                  "value": "0x804C"
                }
              },
              {
                "INTENSITY16": {
                  "type": "u32",
                  "value": "0x804D"
                }
              },
              {
                "INTENSITY4": {
                  "type": "u32",
                  "value": "0x804A"
                }
              },
              {
                "INTENSITY8": {
                  "type": "u32",
                  "value": "0x804B"
                }
              },
              {
                "INTERLEAVED_ATTRIBS": {
                  "type": "u32",
                  "value": "0x8C8C"
                }
              },
              {
                "INTERPOLATE": {
                  "type": "u32",
                  "value": "0x8575"
                }
              },
              {
                "INT_2_10_10_10_REV": {
                  "type": "u32",
                  "value": "0x8D9F"
                }
              },
              {
                "INT_SAMPLER_1D": {
                  "type": "u32",
                  "value": "0x8DC9"
                }
              },
              {
                "INT_SAMPLER_1D_ARRAY": {
                  "type": "u32",
                  "value": "0x8DCE"
                }
              },
              {
                "INT_SAMPLER_2D": {
                  "type": "u32",
                  "value": "0x8DCA"
                }
              },
              {
                "INT_SAMPLER_2D_ARRAY": {
                  "type": "u32",
                  "value": "0x8DCF"
                }
              },
              {
                "INT_SAMPLER_2D_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x9109"
                }
              },
              {
                "INT_SAMPLER_2D_MULTISAMPLE_ARRAY": {
                  "type": "u32",
                  "value": "0x910C"
                }
              },
              {
                "INT_SAMPLER_2D_RECT": {
                  "type": "u32",
                  "value": "0x8DCD"
                }
              },
              {
                "INT_SAMPLER_3D": {
                  "type": "u32",
                  "value": "0x8DCB"
                }
              },
              {
                "INT_SAMPLER_BUFFER": {
                  "type": "u32",
                  "value": "0x8DD0"
                }
              },
              {
                "INT_SAMPLER_CUBE": {
                  "type": "u32",
                  "value": "0x8DCC"
                }
              },
              {
                "INT_VEC2": {
                  "type": "u32",
                  "value": "0x8B53"
                }
              },
              {
                "INT_VEC3": {
                  "type": "u32",
                  "value": "0x8B54"
                }
              },
              {
                "INT_VEC4": {
                  "type": "u32",
                  "value": "0x8B55"
                }
              },
              {
                "INVALID_ENUM": {
                  "type": "u32",
                  "value": "0x0500"
                }
              },
              {
                "INVALID_FRAMEBUFFER_OPERATION": {
                  "type": "u32",
                  "value": "0x0506"
                }
              },
              {
                "INVALID_INDEX": {
                  "type": "u32",
                  "value": "0xFFFFFFFF"
                }
              },
              {
                "INVALID_OPERATION": {
                  "type": "u32",
                  "value": "0x0502"
                }
              },
              {
                "INVALID_VALUE": {
                  "type": "u32",
                  "value": "0x0501"
                }
              },
              {
                "INVERT": {
                  "type": "u32",
                  "value": "0x150A"
                }
              },
              {
                "KEEP": {
                  "type": "u32",
                  "value": "0x1E00"
                }
              },
              {
                "LAST_VERTEX_CONVENTION": {
                  "type": "u32",
                  "value": "0x8E4E"
                }
              },
              {
                "LEFT": {
                  "type": "u32",
                  "value": "0x0406"
                }
              },
              {
                "LEQUAL": {
                  "type": "u32",
                  "value": "0x0203"
                }
              },
              {
                "LESS": {
                  "type": "u32",
                  "value": "0x0201"
                }
              },
              {
                "LIGHT0": {
                  "type": "u32",
                  "value": "0x4000"
                }
              },
              {
                "LIGHT1": {
                  "type": "u32",
                  "value": "0x4001"
                }
              },
              {
                "LIGHT2": {
                  "type": "u32",
                  "value": "0x4002"
                }
              },
              {
                "LIGHT3": {
                  "type": "u32",
                  "value": "0x4003"
                }
              },
              {
                "LIGHT4": {
                  "type": "u32",
                  "value": "0x4004"
                }
              },
              {
                "LIGHT5": {
                  "type": "u32",
                  "value": "0x4005"
                }
              },
              {
                "LIGHT6": {
                  "type": "u32",
                  "value": "0x4006"
                }
              },
              {
                "LIGHT7": {
                  "type": "u32",
                  "value": "0x4007"
                }
              },
              {
                "LIGHTEN_KHR": {
                  "type": "u32",
                  "value": "0x9298"
                }
              },
              {
                "LIGHTING": {
                  "type": "u32",
                  "value": "0x0B50"
                }
              },
              {
                "LIGHTING_BIT": {
                  "type": "u32",
                  "value": "0x00000040"
                }
              },
              {
                "LIGHT_MODEL_AMBIENT": {
                  "type": "u32",
                  "value": "0x0B53"
                }
              },
              {
                "LIGHT_MODEL_COLOR_CONTROL": {
                  "type": "u32",
                  "value": "0x81F8"
                }
              },
              {
                "LIGHT_MODEL_LOCAL_VIEWER": {
                  "type": "u32",
                  "value": "0x0B51"
                }
              },
              {
                "LIGHT_MODEL_TWO_SIDE": {
                  "type": "u32",
                  "value": "0x0B52"
                }
              },
              {
                "LINE": {
                  "type": "u32",
                  "value": "0x1B01"
                }
              },
              {
                "LINEAR": {
                  "type": "u32",
                  "value": "0x2601"
                }
              },
              {
                "LINEAR_ATTENUATION": {
                  "type": "u32",
                  "value": "0x1208"
                }
              },
              {
                "LINEAR_MIPMAP_LINEAR": {
                  "type": "u32",
                  "value": "0x2703"
                }
              },
              {
                "LINEAR_MIPMAP_NEAREST": {
                  "type": "u32",
                  "value": "0x2701"
                }
              },
              {
                "LINES": {
                  "type": "u32",
                  "value": "0x0001"
                }
              },
              {
                "LINES_ADJACENCY": {
                  "type": "u32",
                  "value": "0x000A"
                }
              },
              {
                "LINE_BIT": {
                  "type": "u32",
                  "value": "0x00000004"
                }
              },
              {
                "LINE_LOOP": {
                  "type": "u32",
                  "value": "0x0002"
                }
              },
              {
                "LINE_RESET_TOKEN": {
                  "type": "u32",
                  "value": "0x0707"
                }
              },
              {
                "LINE_SMOOTH": {
                  "type": "u32",
                  "value": "0x0B20"
                }
              },
              {
                "LINE_SMOOTH_HINT": {
                  "type": "u32",
                  "value": "0x0C52"
                }
              },
              {
                "LINE_STIPPLE": {
                  "type": "u32",
                  "value": "0x0B24"
                }
              },
              {
                "LINE_STIPPLE_PATTERN": {
                  "type": "u32",
                  "value": "0x0B25"
                }
              },
              {
                "LINE_STIPPLE_REPEAT": {
                  "type": "u32",
                  "value": "0x0B26"
                }
              },
              {
                "LINE_STRIP": {
                  "type": "u32",
                  "value": "0x0003"
                }
              },
              {
                "LINE_STRIP_ADJACENCY": {
                  "type": "u32",
                  "value": "0x000B"
                }
              },
              {
                "LINE_TOKEN": {
                  "type": "u32",
                  "value": "0x0702"
                }
              },
              {
                "LINE_WIDTH": {
                  "type": "u32",
                  "value": "0x0B21"
                }
              },
              {
                "LINE_WIDTH_GRANULARITY": {
                  "type": "u32",
                  "value": "0x0B23"
                }
              },
              {
                "LINE_WIDTH_RANGE": {
                  "type": "u32",
                  "value": "0x0B22"
                }
              },
              {
                "LINK_STATUS": {
                  "type": "u32",
                  "value": "0x8B82"
                }
              },
              {
                "LIST_BASE": {
                  "type": "u32",
                  "value": "0x0B32"
                }
              },
              {
                "LIST_BIT": {
                  "type": "u32",
                  "value": "0x00020000"
                }
              },
              {
                "LIST_INDEX": {
                  "type": "u32",
                  "value": "0x0B33"
                }
              },
              {
                "LIST_MODE": {
                  "type": "u32",
                  "value": "0x0B30"
                }
              },
              {
                "LOAD": {
                  "type": "u32",
                  "value": "0x0101"
                }
              },
              {
                "LOGIC_OP": {
                  "type": "u32",
                  "value": "0x0BF1"
                }
              },
              {
                "LOGIC_OP_MODE": {
                  "type": "u32",
                  "value": "0x0BF0"
                }
              },
              {
                "LOWER_LEFT": {
                  "type": "u32",
                  "value": "0x8CA1"
                }
              },
              {
                "LOW_FLOAT": {
                  "type": "u32",
                  "value": "0x8DF0"
                }
              },
              {
                "LOW_INT": {
                  "type": "u32",
                  "value": "0x8DF3"
                }
              },
              {
                "LUMINANCE": {
                  "type": "u32",
                  "value": "0x1909"
                }
              },
              {
                "LUMINANCE12": {
                  "type": "u32",
                  "value": "0x8041"
                }
              },
              {
                "LUMINANCE12_ALPHA12": {
                  "type": "u32",
                  "value": "0x8047"
                }
              },
              {
                "LUMINANCE12_ALPHA4": {
                  "type": "u32",
                  "value": "0x8046"
                }
              },
              {
                "LUMINANCE16": {
                  "type": "u32",
                  "value": "0x8042"
                }
              },
              {
                "LUMINANCE16F_EXT": {
                  "type": "u32",
                  "value": "0x881E"
                }
              },
              {
                "LUMINANCE16_ALPHA16": {
                  "type": "u32",
                  "value": "0x8048"
                }
              },
              {
                "LUMINANCE32F_EXT": {
                  "type": "u32",
                  "value": "0x8818"
                }
              },
              {
                "LUMINANCE4": {
                  "type": "u32",
                  "value": "0x803F"
                }
              },
              {
                "LUMINANCE4_ALPHA4": {
                  "type": "u32",
                  "value": "0x8043"
                }
              },
              {
                "LUMINANCE6_ALPHA2": {
                  "type": "u32",
                  "value": "0x8044"
                }
              },
              {
                "LUMINANCE8": {
                  "type": "u32",
                  "value": "0x8040"
                }
              },
              {
                "LUMINANCE8_ALPHA8": {
                  "type": "u32",
                  "value": "0x8045"
                }
              },
              {
                "LUMINANCE8_ALPHA8_EXT": {
                  "type": "u32",
                  "value": "0x8045"
                }
              },
              {
                "LUMINANCE8_EXT": {
                  "type": "u32",
                  "value": "0x8040"
                }
              },
              {
                "LUMINANCE_ALPHA": {
                  "type": "u32",
                  "value": "0x190A"
                }
              },
              {
                "LUMINANCE_ALPHA16F_EXT": {
                  "type": "u32",
                  "value": "0x881F"
                }
              },
              {
                "LUMINANCE_ALPHA32F_EXT": {
                  "type": "u32",
                  "value": "0x8819"
                }
              },
              {
                "MAJOR_VERSION": {
                  "type": "u32",
                  "value": "0x821B"
                }
              },
              {
                "MAP1_COLOR_4": {
                  "type": "u32",
                  "value": "0x0D90"
                }
              },
              {
                "MAP1_GRID_DOMAIN": {
                  "type": "u32",
                  "value": "0x0DD0"
                }
              },
              {
                "MAP1_GRID_SEGMENTS": {
                  "type": "u32",
                  "value": "0x0DD1"
                }
              },
              {
                "MAP1_INDEX": {
                  "type": "u32",
                  "value": "0x0D91"
                }
              },
              {
                "MAP1_NORMAL": {
                  "type": "u32",
                  "value": "0x0D92"
                }
              },
              {
                "MAP1_TEXTURE_COORD_1": {
                  "type": "u32",
                  "value": "0x0D93"
                }
              },
              {
                "MAP1_TEXTURE_COORD_2": {
                  "type": "u32",
                  "value": "0x0D94"
                }
              },
              {
                "MAP1_TEXTURE_COORD_3": {
                  "type": "u32",
                  "value": "0x0D95"
                }
              },
              {
                "MAP1_TEXTURE_COORD_4": {
                  "type": "u32",
                  "value": "0x0D96"
                }
              },
              {
                "MAP1_VERTEX_3": {
                  "type": "u32",
                  "value": "0x0D97"
                }
              },
              {
                "MAP1_VERTEX_4": {
                  "type": "u32",
                  "value": "0x0D98"
                }
              },
              {
                "MAP2_COLOR_4": {
                  "type": "u32",
                  "value": "0x0DB0"
                }
              },
              {
                "MAP2_GRID_DOMAIN": {
                  "type": "u32",
                  "value": "0x0DD2"
                }
              },
              {
                "MAP2_GRID_SEGMENTS": {
                  "type": "u32",
                  "value": "0x0DD3"
                }
              },
              {
                "MAP2_INDEX": {
                  "type": "u32",
                  "value": "0x0DB1"
                }
              },
              {
                "MAP2_NORMAL": {
                  "type": "u32",
                  "value": "0x0DB2"
                }
              },
              {
                "MAP2_TEXTURE_COORD_1": {
                  "type": "u32",
                  "value": "0x0DB3"
                }
              },
              {
                "MAP2_TEXTURE_COORD_2": {
                  "type": "u32",
                  "value": "0x0DB4"
                }
              },
              {
                "MAP2_TEXTURE_COORD_3": {
                  "type": "u32",
                  "value": "0x0DB5"
                }
              },
              {
                "MAP2_TEXTURE_COORD_4": {
                  "type": "u32",
                  "value": "0x0DB6"
                }
              },
              {
                "MAP2_VERTEX_3": {
                  "type": "u32",
                  "value": "0x0DB7"
                }
              },
              {
                "MAP2_VERTEX_4": {
                  "type": "u32",
                  "value": "0x0DB8"
                }
              },
              {
                "MAP_COLOR": {
                  "type": "u32",
                  "value": "0x0D10"
                }
              },
              {
                "MAP_FLUSH_EXPLICIT_BIT": {
                  "type": "u32",
                  "value": "0x0010"
                }
              },
              {
                "MAP_INVALIDATE_BUFFER_BIT": {
                  "type": "u32",
                  "value": "0x0008"
                }
              },
              {
                "MAP_INVALIDATE_RANGE_BIT": {
                  "type": "u32",
                  "value": "0x0004"
                }
              },
              {
                "MAP_READ_BIT": {
                  "type": "u32",
                  "value": "0x0001"
                }
              },
              {
                "MAP_STENCIL": {
                  "type": "u32",
                  "value": "0x0D11"
                }
              },
              {
                "MAP_UNSYNCHRONIZED_BIT": {
                  "type": "u32",
                  "value": "0x0020"
                }
              },
              {
                "MAP_WRITE_BIT": {
                  "type": "u32",
                  "value": "0x0002"
                }
              },
              {
                "MATRIX_MODE": {
                  "type": "u32",
                  "value": "0x0BA0"
                }
              },
              {
                "MAX": {
                  "type": "u32",
                  "value": "0x8008"
                }
              },
              {
                "MAX_3D_TEXTURE_SIZE": {
                  "type": "u32",
                  "value": "0x8073"
                }
              },
              {
                "MAX_ARRAY_TEXTURE_LAYERS": {
                  "type": "u32",
                  "value": "0x88FF"
                }
              },
              {
                "MAX_ATTRIB_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D35"
                }
              },
              {
                "MAX_CLIENT_ATTRIB_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D3B"
                }
              },
              {
                "MAX_CLIP_DISTANCES": {
                  "type": "u32",
                  "value": "0x0D32"
                }
              },
              {
                "MAX_CLIP_PLANES": {
                  "type": "u32",
                  "value": "0x0D32"
                }
              },
              {
                "MAX_COLOR_ATTACHMENTS": {
                  "type": "u32",
                  "value": "0x8CDF"
                }
              },
              {
                "MAX_COLOR_TEXTURE_SAMPLES": {
                  "type": "u32",
                  "value": "0x910E"
                }
              },
              {
                "MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8A33"
                }
              },
              {
                "MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8A32"
                }
              },
              {
                "MAX_COMBINED_TEXTURE_IMAGE_UNITS": {
                  "type": "u32",
                  "value": "0x8B4D"
                }
              },
              {
                "MAX_COMBINED_UNIFORM_BLOCKS": {
                  "type": "u32",
                  "value": "0x8A2E"
                }
              },
              {
                "MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8A31"
                }
              },
              {
                "MAX_CUBE_MAP_TEXTURE_SIZE": {
                  "type": "u32",
                  "value": "0x851C"
                }
              },
              {
                "MAX_DEBUG_GROUP_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x826C"
                }
              },
              {
                "MAX_DEBUG_GROUP_STACK_DEPTH_KHR": {
                  "type": "u32",
                  "value": "0x826C"
                }
              },
              {
                "MAX_DEBUG_LOGGED_MESSAGES": {
                  "type": "u32",
                  "value": "0x9144"
                }
              },
              {
                "MAX_DEBUG_LOGGED_MESSAGES_KHR": {
                  "type": "u32",
                  "value": "0x9144"
                }
              },
              {
                "MAX_DEBUG_MESSAGE_LENGTH": {
                  "type": "u32",
                  "value": "0x9143"
                }
              },
              {
                "MAX_DEBUG_MESSAGE_LENGTH_KHR": {
                  "type": "u32",
                  "value": "0x9143"
                }
              },
              {
                "MAX_DEPTH_TEXTURE_SAMPLES": {
                  "type": "u32",
                  "value": "0x910F"
                }
              },
              {
                "MAX_DRAW_BUFFERS": {
                  "type": "u32",
                  "value": "0x8824"
                }
              },
              {
                "MAX_DUAL_SOURCE_DRAW_BUFFERS": {
                  "type": "u32",
                  "value": "0x88FC"
                }
              },
              {
                "MAX_ELEMENTS_INDICES": {
                  "type": "u32",
                  "value": "0x80E9"
                }
              },
              {
                "MAX_ELEMENTS_VERTICES": {
                  "type": "u32",
                  "value": "0x80E8"
                }
              },
              {
                "MAX_ELEMENT_INDEX": {
                  "type": "u32",
                  "value": "0x8D6B"
                }
              },
              {
                "MAX_EVAL_ORDER": {
                  "type": "u32",
                  "value": "0x0D30"
                }
              },
              {
                "MAX_FRAGMENT_INPUT_COMPONENTS": {
                  "type": "u32",
                  "value": "0x9125"
                }
              },
              {
                "MAX_FRAGMENT_UNIFORM_BLOCKS": {
                  "type": "u32",
                  "value": "0x8A2D"
                }
              },
              {
                "MAX_FRAGMENT_UNIFORM_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8B49"
                }
              },
              {
                "MAX_FRAGMENT_UNIFORM_VECTORS": {
                  "type": "u32",
                  "value": "0x8DFD"
                }
              },
              {
                "MAX_GEOMETRY_INPUT_COMPONENTS": {
                  "type": "u32",
                  "value": "0x9123"
                }
              },
              {
                "MAX_GEOMETRY_OUTPUT_COMPONENTS": {
                  "type": "u32",
                  "value": "0x9124"
                }
              },
              {
                "MAX_GEOMETRY_OUTPUT_VERTICES": {
                  "type": "u32",
                  "value": "0x8DE0"
                }
              },
              {
                "MAX_GEOMETRY_TEXTURE_IMAGE_UNITS": {
                  "type": "u32",
                  "value": "0x8C29"
                }
              },
              {
                "MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8DE1"
                }
              },
              {
                "MAX_GEOMETRY_UNIFORM_BLOCKS": {
                  "type": "u32",
                  "value": "0x8A2C"
                }
              },
              {
                "MAX_GEOMETRY_UNIFORM_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8DDF"
                }
              },
              {
                "MAX_INTEGER_SAMPLES": {
                  "type": "u32",
                  "value": "0x9110"
                }
              },
              {
                "MAX_LABEL_LENGTH": {
                  "type": "u32",
                  "value": "0x82E8"
                }
              },
              {
                "MAX_LABEL_LENGTH_KHR": {
                  "type": "u32",
                  "value": "0x82E8"
                }
              },
              {
                "MAX_LIGHTS": {
                  "type": "u32",
                  "value": "0x0D31"
                }
              },
              {
                "MAX_LIST_NESTING": {
                  "type": "u32",
                  "value": "0x0B31"
                }
              },
              {
                "MAX_MODELVIEW_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D36"
                }
              },
              {
                "MAX_NAME_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D37"
                }
              },
              {
                "MAX_PIXEL_MAP_TABLE": {
                  "type": "u32",
                  "value": "0x0D34"
                }
              },
              {
                "MAX_PROGRAM_TEXEL_OFFSET": {
                  "type": "u32",
                  "value": "0x8905"
                }
              },
              {
                "MAX_PROJECTION_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D38"
                }
              },
              {
                "MAX_RECTANGLE_TEXTURE_SIZE": {
                  "type": "u32",
                  "value": "0x84F8"
                }
              },
              {
                "MAX_RECTANGLE_TEXTURE_SIZE_ARB": {
                  "type": "u32",
                  "value": "0x84F8"
                }
              },
              {
                "MAX_RENDERBUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x84E8"
                }
              },
              {
                "MAX_SAMPLES": {
                  "type": "u32",
                  "value": "0x8D57"
                }
              },
              {
                "MAX_SAMPLE_MASK_WORDS": {
                  "type": "u32",
                  "value": "0x8E59"
                }
              },
              {
                "MAX_SERVER_WAIT_TIMEOUT": {
                  "type": "u32",
                  "value": "0x9111"
                }
              },
              {
                "MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT": {
                  "type": "u32",
                  "value": "0x8F63"
                }
              },
              {
                "MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT": {
                  "type": "u32",
                  "value": "0x8F67"
                }
              },
              {
                "MAX_TEXTURE_BUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x8C2B"
                }
              },
              {
                "MAX_TEXTURE_COORDS": {
                  "type": "u32",
                  "value": "0x8871"
                }
              },
              {
                "MAX_TEXTURE_IMAGE_UNITS": {
                  "type": "u32",
                  "value": "0x8872"
                }
              },
              {
                "MAX_TEXTURE_LOD_BIAS": {
                  "type": "u32",
                  "value": "0x84FD"
                }
              },
              {
                "MAX_TEXTURE_MAX_ANISOTROPY_EXT": {
                  "type": "u32",
                  "value": "0x84FF"
                }
              },
              {
                "MAX_TEXTURE_SIZE": {
                  "type": "u32",
                  "value": "0x0D33"
                }
              },
              {
                "MAX_TEXTURE_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D39"
                }
              },
              {
                "MAX_TEXTURE_UNITS": {
                  "type": "u32",
                  "value": "0x84E2"
                }
              },
              {
                "MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8C8A"
                }
              },
              {
                "MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS": {
                  "type": "u32",
                  "value": "0x8C8B"
                }
              },
              {
                "MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8C80"
                }
              },
              {
                "MAX_UNIFORM_BLOCK_SIZE": {
                  "type": "u32",
                  "value": "0x8A30"
                }
              },
              {
                "MAX_UNIFORM_BUFFER_BINDINGS": {
                  "type": "u32",
                  "value": "0x8A2F"
                }
              },
              {
                "MAX_VARYING_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8B4B"
                }
              },
              {
                "MAX_VARYING_FLOATS": {
                  "type": "u32",
                  "value": "0x8B4B"
                }
              },
              {
                "MAX_VARYING_VECTORS": {
                  "type": "u32",
                  "value": "0x8DFC"
                }
              },
              {
                "MAX_VERTEX_ATTRIBS": {
                  "type": "u32",
                  "value": "0x8869"
                }
              },
              {
                "MAX_VERTEX_OUTPUT_COMPONENTS": {
                  "type": "u32",
                  "value": "0x9122"
                }
              },
              {
                "MAX_VERTEX_TEXTURE_IMAGE_UNITS": {
                  "type": "u32",
                  "value": "0x8B4C"
                }
              },
              {
                "MAX_VERTEX_UNIFORM_BLOCKS": {
                  "type": "u32",
                  "value": "0x8A2B"
                }
              },
              {
                "MAX_VERTEX_UNIFORM_COMPONENTS": {
                  "type": "u32",
                  "value": "0x8B4A"
                }
              },
              {
                "MAX_VERTEX_UNIFORM_VECTORS": {
                  "type": "u32",
                  "value": "0x8DFB"
                }
              },
              {
                "MAX_VIEWPORT_DIMS": {
                  "type": "u32",
                  "value": "0x0D3A"
                }
              },
              {
                "MEDIUM_FLOAT": {
                  "type": "u32",
                  "value": "0x8DF1"
                }
              },
              {
                "MEDIUM_INT": {
                  "type": "u32",
                  "value": "0x8DF4"
                }
              },
              {
                "MIN": {
                  "type": "u32",
                  "value": "0x8007"
                }
              },
              {
                "MINOR_VERSION": {
                  "type": "u32",
                  "value": "0x821C"
                }
              },
              {
                "MIN_PROGRAM_TEXEL_OFFSET": {
                  "type": "u32",
                  "value": "0x8904"
                }
              },
              {
                "MIRRORED_REPEAT": {
                  "type": "u32",
                  "value": "0x8370"
                }
              },
              {
                "MODELVIEW": {
                  "type": "u32",
                  "value": "0x1700"
                }
              },
              {
                "MODELVIEW_MATRIX": {
                  "type": "u32",
                  "value": "0x0BA6"
                }
              },
              {
                "MODELVIEW_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0BA3"
                }
              },
              {
                "MODULATE": {
                  "type": "u32",
                  "value": "0x2100"
                }
              },
              {
                "MULT": {
                  "type": "u32",
                  "value": "0x0103"
                }
              },
              {
                "MULTIPLY_KHR": {
                  "type": "u32",
                  "value": "0x9294"
                }
              },
              {
                "MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x809D"
                }
              },
              {
                "MULTISAMPLE_BIT": {
                  "type": "u32",
                  "value": "0x20000000"
                }
              },
              {
                "N3F_V3F": {
                  "type": "u32",
                  "value": "0x2A25"
                }
              },
              {
                "NAME_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0D70"
                }
              },
              {
                "NAND": {
                  "type": "u32",
                  "value": "0x150E"
                }
              },
              {
                "NEAREST": {
                  "type": "u32",
                  "value": "0x2600"
                }
              },
              {
                "NEAREST_MIPMAP_LINEAR": {
                  "type": "u32",
                  "value": "0x2702"
                }
              },
              {
                "NEAREST_MIPMAP_NEAREST": {
                  "type": "u32",
                  "value": "0x2700"
                }
              },
              {
                "NEVER": {
                  "type": "u32",
                  "value": "0x0200"
                }
              },
              {
                "NICEST": {
                  "type": "u32",
                  "value": "0x1102"
                }
              },
              {
                "NONE": {
                  "type": "u32",
                  "value": "0"
                }
              },
              {
                "NOOP": {
                  "type": "u32",
                  "value": "0x1505"
                }
              },
              {
                "NOR": {
                  "type": "u32",
                  "value": "0x1508"
                }
              },
              {
                "NORMALIZE": {
                  "type": "u32",
                  "value": "0x0BA1"
                }
              },
              {
                "NORMAL_ARRAY": {
                  "type": "u32",
                  "value": "0x8075"
                }
              },
              {
                "NORMAL_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8897"
                }
              },
              {
                "NORMAL_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x808F"
                }
              },
              {
                "NORMAL_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x807F"
                }
              },
              {
                "NORMAL_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x807E"
                }
              },
              {
                "NORMAL_MAP": {
                  "type": "u32",
                  "value": "0x8511"
                }
              },
              {
                "NOTEQUAL": {
                  "type": "u32",
                  "value": "0x0205"
                }
              },
              {
                "NO_ERROR": {
                  "type": "u32",
                  "value": "0"
                }
              },
              {
                "NUM_COMPRESSED_TEXTURE_FORMATS": {
                  "type": "u32",
                  "value": "0x86A2"
                }
              },
              {
                "NUM_EXTENSIONS": {
                  "type": "u32",
                  "value": "0x821D"
                }
              },
              {
                "NUM_PROGRAM_BINARY_FORMATS": {
                  "type": "u32",
                  "value": "0x87FE"
                }
              },
              {
                "NUM_SAMPLE_COUNTS": {
                  "type": "u32",
                  "value": "0x9380"
                }
              },
              {
                "NUM_SHADER_BINARY_FORMATS": {
                  "type": "u32",
                  "value": "0x8DF9"
                }
              },
              {
                "OBJECT_LINEAR": {
                  "type": "u32",
                  "value": "0x2401"
                }
              },
              {
                "OBJECT_PLANE": {
                  "type": "u32",
                  "value": "0x2501"
                }
              },
              {
                "OBJECT_TYPE": {
                  "type": "u32",
                  "value": "0x9112"
                }
              },
              {
                "ONE": {
                  "type": "u32",
                  "value": "1"
                }
              },
              {
                "ONE_MINUS_CONSTANT_ALPHA": {
                  "type": "u32",
                  "value": "0x8004"
                }
              },
              {
                "ONE_MINUS_CONSTANT_COLOR": {
                  "type": "u32",
                  "value": "0x8002"
                }
              },
              {
                "ONE_MINUS_DST_ALPHA": {
                  "type": "u32",
                  "value": "0x0305"
                }
              },
              {
                "ONE_MINUS_DST_COLOR": {
                  "type": "u32",
                  "value": "0x0307"
                }
              },
              {
                "ONE_MINUS_SRC1_ALPHA": {
                  "type": "u32",
                  "value": "0x88FB"
                }
              },
              {
                "ONE_MINUS_SRC1_COLOR": {
                  "type": "u32",
                  "value": "0x88FA"
                }
              },
              {
                "ONE_MINUS_SRC_ALPHA": {
                  "type": "u32",
                  "value": "0x0303"
                }
              },
              {
                "ONE_MINUS_SRC_COLOR": {
                  "type": "u32",
                  "value": "0x0301"
                }
              },
              {
                "OPERAND0_ALPHA": {
                  "type": "u32",
                  "value": "0x8598"
                }
              },
              {
                "OPERAND0_RGB": {
                  "type": "u32",
                  "value": "0x8590"
                }
              },
              {
                "OPERAND1_ALPHA": {
                  "type": "u32",
                  "value": "0x8599"
                }
              },
              {
                "OPERAND1_RGB": {
                  "type": "u32",
                  "value": "0x8591"
                }
              },
              {
                "OPERAND2_ALPHA": {
                  "type": "u32",
                  "value": "0x859A"
                }
              },
              {
                "OPERAND2_RGB": {
                  "type": "u32",
                  "value": "0x8592"
                }
              },
              {
                "OR": {
                  "type": "u32",
                  "value": "0x1507"
                }
              },
              {
                "ORDER": {
                  "type": "u32",
                  "value": "0x0A01"
                }
              },
              {
                "OR_INVERTED": {
                  "type": "u32",
                  "value": "0x150D"
                }
              },
              {
                "OR_REVERSE": {
                  "type": "u32",
                  "value": "0x150B"
                }
              },
              {
                "OUT_OF_MEMORY": {
                  "type": "u32",
                  "value": "0x0505"
                }
              },
              {
                "OVERLAY_KHR": {
                  "type": "u32",
                  "value": "0x9296"
                }
              },
              {
                "PACK_ALIGNMENT": {
                  "type": "u32",
                  "value": "0x0D05"
                }
              },
              {
                "PACK_IMAGE_HEIGHT": {
                  "type": "u32",
                  "value": "0x806C"
                }
              },
              {
                "PACK_LSB_FIRST": {
                  "type": "u32",
                  "value": "0x0D01"
                }
              },
              {
                "PACK_ROW_LENGTH": {
                  "type": "u32",
                  "value": "0x0D02"
                }
              },
              {
                "PACK_SKIP_IMAGES": {
                  "type": "u32",
                  "value": "0x806B"
                }
              },
              {
                "PACK_SKIP_PIXELS": {
                  "type": "u32",
                  "value": "0x0D04"
                }
              },
              {
                "PACK_SKIP_ROWS": {
                  "type": "u32",
                  "value": "0x0D03"
                }
              },
              {
                "PACK_SWAP_BYTES": {
                  "type": "u32",
                  "value": "0x0D00"
                }
              },
              {
                "PASS_THROUGH_TOKEN": {
                  "type": "u32",
                  "value": "0x0700"
                }
              },
              {
                "PERSPECTIVE_CORRECTION_HINT": {
                  "type": "u32",
                  "value": "0x0C50"
                }
              },
              {
                "PIXEL_MAP_A_TO_A": {
                  "type": "u32",
                  "value": "0x0C79"
                }
              },
              {
                "PIXEL_MAP_A_TO_A_SIZE": {
                  "type": "u32",
                  "value": "0x0CB9"
                }
              },
              {
                "PIXEL_MAP_B_TO_B": {
                  "type": "u32",
                  "value": "0x0C78"
                }
              },
              {
                "PIXEL_MAP_B_TO_B_SIZE": {
                  "type": "u32",
                  "value": "0x0CB8"
                }
              },
              {
                "PIXEL_MAP_G_TO_G": {
                  "type": "u32",
                  "value": "0x0C77"
                }
              },
              {
                "PIXEL_MAP_G_TO_G_SIZE": {
                  "type": "u32",
                  "value": "0x0CB7"
                }
              },
              {
                "PIXEL_MAP_I_TO_A": {
                  "type": "u32",
                  "value": "0x0C75"
                }
              },
              {
                "PIXEL_MAP_I_TO_A_SIZE": {
                  "type": "u32",
                  "value": "0x0CB5"
                }
              },
              {
                "PIXEL_MAP_I_TO_B": {
                  "type": "u32",
                  "value": "0x0C74"
                }
              },
              {
                "PIXEL_MAP_I_TO_B_SIZE": {
                  "type": "u32",
                  "value": "0x0CB4"
                }
              },
              {
                "PIXEL_MAP_I_TO_G": {
                  "type": "u32",
                  "value": "0x0C73"
                }
              },
              {
                "PIXEL_MAP_I_TO_G_SIZE": {
                  "type": "u32",
                  "value": "0x0CB3"
                }
              },
              {
                "PIXEL_MAP_I_TO_I": {
                  "type": "u32",
                  "value": "0x0C70"
                }
              },
              {
                "PIXEL_MAP_I_TO_I_SIZE": {
                  "type": "u32",
                  "value": "0x0CB0"
                }
              },
              {
                "PIXEL_MAP_I_TO_R": {
                  "type": "u32",
                  "value": "0x0C72"
                }
              },
              {
                "PIXEL_MAP_I_TO_R_SIZE": {
                  "type": "u32",
                  "value": "0x0CB2"
                }
              },
              {
                "PIXEL_MAP_R_TO_R": {
                  "type": "u32",
                  "value": "0x0C76"
                }
              },
              {
                "PIXEL_MAP_R_TO_R_SIZE": {
                  "type": "u32",
                  "value": "0x0CB6"
                }
              },
              {
                "PIXEL_MAP_S_TO_S": {
                  "type": "u32",
                  "value": "0x0C71"
                }
              },
              {
                "PIXEL_MAP_S_TO_S_SIZE": {
                  "type": "u32",
                  "value": "0x0CB1"
                }
              },
              {
                "PIXEL_MODE_BIT": {
                  "type": "u32",
                  "value": "0x00000020"
                }
              },
              {
                "PIXEL_PACK_BUFFER": {
                  "type": "u32",
                  "value": "0x88EB"
                }
              },
              {
                "PIXEL_PACK_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x88ED"
                }
              },
              {
                "PIXEL_UNPACK_BUFFER": {
                  "type": "u32",
                  "value": "0x88EC"
                }
              },
              {
                "PIXEL_UNPACK_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x88EF"
                }
              },
              {
                "POINT": {
                  "type": "u32",
                  "value": "0x1B00"
                }
              },
              {
                "POINTS": {
                  "type": "u32",
                  "value": "0x0000"
                }
              },
              {
                "POINT_BIT": {
                  "type": "u32",
                  "value": "0x00000002"
                }
              },
              {
                "POINT_DISTANCE_ATTENUATION": {
                  "type": "u32",
                  "value": "0x8129"
                }
              },
              {
                "POINT_FADE_THRESHOLD_SIZE": {
                  "type": "u32",
                  "value": "0x8128"
                }
              },
              {
                "POINT_SIZE": {
                  "type": "u32",
                  "value": "0x0B11"
                }
              },
              {
                "POINT_SIZE_GRANULARITY": {
                  "type": "u32",
                  "value": "0x0B13"
                }
              },
              {
                "POINT_SIZE_MAX": {
                  "type": "u32",
                  "value": "0x8127"
                }
              },
              {
                "POINT_SIZE_MIN": {
                  "type": "u32",
                  "value": "0x8126"
                }
              },
              {
                "POINT_SIZE_RANGE": {
                  "type": "u32",
                  "value": "0x0B12"
                }
              },
              {
                "POINT_SMOOTH": {
                  "type": "u32",
                  "value": "0x0B10"
                }
              },
              {
                "POINT_SMOOTH_HINT": {
                  "type": "u32",
                  "value": "0x0C51"
                }
              },
              {
                "POINT_SPRITE": {
                  "type": "u32",
                  "value": "0x8861"
                }
              },
              {
                "POINT_SPRITE_COORD_ORIGIN": {
                  "type": "u32",
                  "value": "0x8CA0"
                }
              },
              {
                "POINT_TOKEN": {
                  "type": "u32",
                  "value": "0x0701"
                }
              },
              {
                "POLYGON": {
                  "type": "u32",
                  "value": "0x0009"
                }
              },
              {
                "POLYGON_BIT": {
                  "type": "u32",
                  "value": "0x00000008"
                }
              },
              {
                "POLYGON_MODE": {
                  "type": "u32",
                  "value": "0x0B40"
                }
              },
              {
                "POLYGON_OFFSET_FACTOR": {
                  "type": "u32",
                  "value": "0x8038"
                }
              },
              {
                "POLYGON_OFFSET_FILL": {
                  "type": "u32",
                  "value": "0x8037"
                }
              },
              {
                "POLYGON_OFFSET_LINE": {
                  "type": "u32",
                  "value": "0x2A02"
                }
              },
              {
                "POLYGON_OFFSET_POINT": {
                  "type": "u32",
                  "value": "0x2A01"
                }
              },
              {
                "POLYGON_OFFSET_UNITS": {
                  "type": "u32",
                  "value": "0x2A00"
                }
              },
              {
                "POLYGON_SMOOTH": {
                  "type": "u32",
                  "value": "0x0B41"
                }
              },
              {
                "POLYGON_SMOOTH_HINT": {
                  "type": "u32",
                  "value": "0x0C53"
                }
              },
              {
                "POLYGON_STIPPLE": {
                  "type": "u32",
                  "value": "0x0B42"
                }
              },
              {
                "POLYGON_STIPPLE_BIT": {
                  "type": "u32",
                  "value": "0x00000010"
                }
              },
              {
                "POLYGON_TOKEN": {
                  "type": "u32",
                  "value": "0x0703"
                }
              },
              {
                "POSITION": {
                  "type": "u32",
                  "value": "0x1203"
                }
              },
              {
                "PREVIOUS": {
                  "type": "u32",
                  "value": "0x8578"
                }
              },
              {
                "PRIMARY_COLOR": {
                  "type": "u32",
                  "value": "0x8577"
                }
              },
              {
                "PRIMITIVES_GENERATED": {
                  "type": "u32",
                  "value": "0x8C87"
                }
              },
              {
                "PRIMITIVE_RESTART": {
                  "type": "u32",
                  "value": "0x8F9D"
                }
              },
              {
                "PRIMITIVE_RESTART_FIXED_INDEX": {
                  "type": "u32",
                  "value": "0x8D69"
                }
              },
              {
                "PRIMITIVE_RESTART_INDEX": {
                  "type": "u32",
                  "value": "0x8F9E"
                }
              },
              {
                "PROGRAM": {
                  "type": "u32",
                  "value": "0x82E2"
                }
              },
              {
                "PROGRAM_BINARY_FORMATS": {
                  "type": "u32",
                  "value": "0x87FF"
                }
              },
              {
                "PROGRAM_BINARY_LENGTH": {
                  "type": "u32",
                  "value": "0x8741"
                }
              },
              {
                "PROGRAM_BINARY_RETRIEVABLE_HINT": {
                  "type": "u32",
                  "value": "0x8257"
                }
              },
              {
                "PROGRAM_KHR": {
                  "type": "u32",
                  "value": "0x82E2"
                }
              },
              {
                "PROGRAM_PIPELINE": {
                  "type": "u32",
                  "value": "0x82E4"
                }
              },
              {
                "PROGRAM_PIPELINE_KHR": {
                  "type": "u32",
                  "value": "0x82E4"
                }
              },
              {
                "PROGRAM_POINT_SIZE": {
                  "type": "u32",
                  "value": "0x8642"
                }
              },
              {
                "PROJECTION": {
                  "type": "u32",
                  "value": "0x1701"
                }
              },
              {
                "PROJECTION_MATRIX": {
                  "type": "u32",
                  "value": "0x0BA7"
                }
              },
              {
                "PROJECTION_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0BA4"
                }
              },
              {
                "PROVOKING_VERTEX": {
                  "type": "u32",
                  "value": "0x8E4F"
                }
              },
              {
                "PROXY_TEXTURE_1D": {
                  "type": "u32",
                  "value": "0x8063"
                }
              },
              {
                "PROXY_TEXTURE_1D_ARRAY": {
                  "type": "u32",
                  "value": "0x8C19"
                }
              },
              {
                "PROXY_TEXTURE_2D": {
                  "type": "u32",
                  "value": "0x8064"
                }
              },
              {
                "PROXY_TEXTURE_2D_ARRAY": {
                  "type": "u32",
                  "value": "0x8C1B"
                }
              },
              {
                "PROXY_TEXTURE_2D_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x9101"
                }
              },
              {
                "PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY": {
                  "type": "u32",
                  "value": "0x9103"
                }
              },
              {
                "PROXY_TEXTURE_3D": {
                  "type": "u32",
                  "value": "0x8070"
                }
              },
              {
                "PROXY_TEXTURE_CUBE_MAP": {
                  "type": "u32",
                  "value": "0x851B"
                }
              },
              {
                "PROXY_TEXTURE_RECTANGLE": {
                  "type": "u32",
                  "value": "0x84F7"
                }
              },
              {
                "PROXY_TEXTURE_RECTANGLE_ARB": {
                  "type": "u32",
                  "value": "0x84F7"
                }
              },
              {
                "Q": {
                  "type": "u32",
                  "value": "0x2003"
                }
              },
              {
                "QUADRATIC_ATTENUATION": {
                  "type": "u32",
                  "value": "0x1209"
                }
              },
              {
                "QUADS": {
                  "type": "u32",
                  "value": "0x0007"
                }
              },
              {
                "QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION": {
                  "type": "u32",
                  "value": "0x8E4C"
                }
              },
              {
                "QUAD_STRIP": {
                  "type": "u32",
                  "value": "0x0008"
                }
              },
              {
                "QUERY": {
                  "type": "u32",
                  "value": "0x82E3"
                }
              },
              {
                "QUERY_BY_REGION_NO_WAIT": {
                  "type": "u32",
                  "value": "0x8E16"
                }
              },
              {
                "QUERY_BY_REGION_WAIT": {
                  "type": "u32",
                  "value": "0x8E15"
                }
              },
              {
                "QUERY_COUNTER_BITS": {
                  "type": "u32",
                  "value": "0x8864"
                }
              },
              {
                "QUERY_COUNTER_BITS_EXT": {
                  "type": "u32",
                  "value": "0x8864"
                }
              },
              {
                "QUERY_KHR": {
                  "type": "u32",
                  "value": "0x82E3"
                }
              },
              {
                "QUERY_NO_WAIT": {
                  "type": "u32",
                  "value": "0x8E14"
                }
              },
              {
                "QUERY_RESULT": {
                  "type": "u32",
                  "value": "0x8866"
                }
              },
              {
                "QUERY_RESULT_AVAILABLE": {
                  "type": "u32",
                  "value": "0x8867"
                }
              },
              {
                "QUERY_RESULT_AVAILABLE_EXT": {
                  "type": "u32",
                  "value": "0x8867"
                }
              },
              {
                "QUERY_RESULT_EXT": {
                  "type": "u32",
                  "value": "0x8866"
                }
              },
              {
                "QUERY_WAIT": {
                  "type": "u32",
                  "value": "0x8E13"
                }
              },
              {
                "R": {
                  "type": "u32",
                  "value": "0x2002"
                }
              },
              {
                "R11F_G11F_B10F": {
                  "type": "u32",
                  "value": "0x8C3A"
                }
              },
              {
                "R16": {
                  "type": "u32",
                  "value": "0x822A"
                }
              },
              {
                "R16F": {
                  "type": "u32",
                  "value": "0x822D"
                }
              },
              {
                "R16F_EXT": {
                  "type": "u32",
                  "value": "0x822D"
                }
              },
              {
                "R16I": {
                  "type": "u32",
                  "value": "0x8233"
                }
              },
              {
                "R16UI": {
                  "type": "u32",
                  "value": "0x8234"
                }
              },
              {
                "R16_SNORM": {
                  "type": "u32",
                  "value": "0x8F98"
                }
              },
              {
                "R32F": {
                  "type": "u32",
                  "value": "0x822E"
                }
              },
              {
                "R32F_EXT": {
                  "type": "u32",
                  "value": "0x822E"
                }
              },
              {
                "R32I": {
                  "type": "u32",
                  "value": "0x8235"
                }
              },
              {
                "R32UI": {
                  "type": "u32",
                  "value": "0x8236"
                }
              },
              {
                "R3_G3_B2": {
                  "type": "u32",
                  "value": "0x2A10"
                }
              },
              {
                "R8": {
                  "type": "u32",
                  "value": "0x8229"
                }
              },
              {
                "R8I": {
                  "type": "u32",
                  "value": "0x8231"
                }
              },
              {
                "R8UI": {
                  "type": "u32",
                  "value": "0x8232"
                }
              },
              {
                "R8_EXT": {
                  "type": "u32",
                  "value": "0x8229"
                }
              },
              {
                "R8_SNORM": {
                  "type": "u32",
                  "value": "0x8F94"
                }
              },
              {
                "RASTERIZER_DISCARD": {
                  "type": "u32",
                  "value": "0x8C89"
                }
              },
              {
                "READ_BUFFER": {
                  "type": "u32",
                  "value": "0x0C02"
                }
              },
              {
                "READ_FRAMEBUFFER": {
                  "type": "u32",
                  "value": "0x8CA8"
                }
              },
              {
                "READ_FRAMEBUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8CAA"
                }
              },
              {
                "READ_ONLY": {
                  "type": "u32",
                  "value": "0x88B8"
                }
              },
              {
                "READ_WRITE": {
                  "type": "u32",
                  "value": "0x88BA"
                }
              },
              {
                "RED": {
                  "type": "u32",
                  "value": "0x1903"
                }
              },
              {
                "RED_BIAS": {
                  "type": "u32",
                  "value": "0x0D15"
                }
              },
              {
                "RED_BITS": {
                  "type": "u32",
                  "value": "0x0D52"
                }
              },
              {
                "RED_INTEGER": {
                  "type": "u32",
                  "value": "0x8D94"
                }
              },
              {
                "RED_SCALE": {
                  "type": "u32",
                  "value": "0x0D14"
                }
              },
              {
                "REFLECTION_MAP": {
                  "type": "u32",
                  "value": "0x8512"
                }
              },
              {
                "RENDER": {
                  "type": "u32",
                  "value": "0x1C00"
                }
              },
              {
                "RENDERBUFFER": {
                  "type": "u32",
                  "value": "0x8D41"
                }
              },
              {
                "RENDERBUFFER_ALPHA_SIZE": {
                  "type": "u32",
                  "value": "0x8D53"
                }
              },
              {
                "RENDERBUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8CA7"
                }
              },
              {
                "RENDERBUFFER_BLUE_SIZE": {
                  "type": "u32",
                  "value": "0x8D52"
                }
              },
              {
                "RENDERBUFFER_DEPTH_SIZE": {
                  "type": "u32",
                  "value": "0x8D54"
                }
              },
              {
                "RENDERBUFFER_GREEN_SIZE": {
                  "type": "u32",
                  "value": "0x8D51"
                }
              },
              {
                "RENDERBUFFER_HEIGHT": {
                  "type": "u32",
                  "value": "0x8D43"
                }
              },
              {
                "RENDERBUFFER_INTERNAL_FORMAT": {
                  "type": "u32",
                  "value": "0x8D44"
                }
              },
              {
                "RENDERBUFFER_RED_SIZE": {
                  "type": "u32",
                  "value": "0x8D50"
                }
              },
              {
                "RENDERBUFFER_SAMPLES": {
                  "type": "u32",
                  "value": "0x8CAB"
                }
              },
              {
                "RENDERBUFFER_STENCIL_SIZE": {
                  "type": "u32",
                  "value": "0x8D55"
                }
              },
              {
                "RENDERBUFFER_WIDTH": {
                  "type": "u32",
                  "value": "0x8D42"
                }
              },
              {
                "RENDERER": {
                  "type": "u32",
                  "value": "0x1F01"
                }
              },
              {
                "RENDER_MODE": {
                  "type": "u32",
                  "value": "0x0C40"
                }
              },
              {
                "REPEAT": {
                  "type": "u32",
                  "value": "0x2901"
                }
              },
              {
                "REPLACE": {
                  "type": "u32",
                  "value": "0x1E01"
                }
              },
              {
                "REQUIRED_TEXTURE_IMAGE_UNITS_OES": {
                  "type": "u32",
                  "value": "0x8D68"
                }
              },
              {
                "RESCALE_NORMAL": {
                  "type": "u32",
                  "value": "0x803A"
                }
              },
              {
                "RETURN": {
                  "type": "u32",
                  "value": "0x0102"
                }
              },
              {
                "RG": {
                  "type": "u32",
                  "value": "0x8227"
                }
              },
              {
                "RG16": {
                  "type": "u32",
                  "value": "0x822C"
                }
              },
              {
                "RG16F": {
                  "type": "u32",
                  "value": "0x822F"
                }
              },
              {
                "RG16F_EXT": {
                  "type": "u32",
                  "value": "0x822F"
                }
              },
              {
                "RG16I": {
                  "type": "u32",
                  "value": "0x8239"
                }
              },
              {
                "RG16UI": {
                  "type": "u32",
                  "value": "0x823A"
                }
              },
              {
                "RG16_SNORM": {
                  "type": "u32",
                  "value": "0x8F99"
                }
              },
              {
                "RG32F": {
                  "type": "u32",
                  "value": "0x8230"
                }
              },
              {
                "RG32F_EXT": {
                  "type": "u32",
                  "value": "0x8230"
                }
              },
              {
                "RG32I": {
                  "type": "u32",
                  "value": "0x823B"
                }
              },
              {
                "RG32UI": {
                  "type": "u32",
                  "value": "0x823C"
                }
              },
              {
                "RG8": {
                  "type": "u32",
                  "value": "0x822B"
                }
              },
              {
                "RG8I": {
                  "type": "u32",
                  "value": "0x8237"
                }
              },
              {
                "RG8UI": {
                  "type": "u32",
                  "value": "0x8238"
                }
              },
              {
                "RG8_EXT": {
                  "type": "u32",
                  "value": "0x822B"
                }
              },
              {
                "RG8_SNORM": {
                  "type": "u32",
                  "value": "0x8F95"
                }
              },
              {
                "RGB": {
                  "type": "u32",
                  "value": "0x1907"
                }
              },
              {
                "RGB10": {
                  "type": "u32",
                  "value": "0x8052"
                }
              },
              {
                "RGB10_A2": {
                  "type": "u32",
                  "value": "0x8059"
                }
              },
              {
                "RGB10_A2UI": {
                  "type": "u32",
                  "value": "0x906F"
                }
              },
              {
                "RGB10_A2_EXT": {
                  "type": "u32",
                  "value": "0x8059"
                }
              },
              {
                "RGB10_EXT": {
                  "type": "u32",
                  "value": "0x8052"
                }
              },
              {
                "RGB12": {
                  "type": "u32",
                  "value": "0x8053"
                }
              },
              {
                "RGB16": {
                  "type": "u32",
                  "value": "0x8054"
                }
              },
              {
                "RGB16F": {
                  "type": "u32",
                  "value": "0x881B"
                }
              },
              {
                "RGB16F_EXT": {
                  "type": "u32",
                  "value": "0x881B"
                }
              },
              {
                "RGB16I": {
                  "type": "u32",
                  "value": "0x8D89"
                }
              },
              {
                "RGB16UI": {
                  "type": "u32",
                  "value": "0x8D77"
                }
              },
              {
                "RGB16_SNORM": {
                  "type": "u32",
                  "value": "0x8F9A"
                }
              },
              {
                "RGB32F": {
                  "type": "u32",
                  "value": "0x8815"
                }
              },
              {
                "RGB32F_EXT": {
                  "type": "u32",
                  "value": "0x8815"
                }
              },
              {
                "RGB32I": {
                  "type": "u32",
                  "value": "0x8D83"
                }
              },
              {
                "RGB32UI": {
                  "type": "u32",
                  "value": "0x8D71"
                }
              },
              {
                "RGB4": {
                  "type": "u32",
                  "value": "0x804F"
                }
              },
              {
                "RGB5": {
                  "type": "u32",
                  "value": "0x8050"
                }
              },
              {
                "RGB565": {
                  "type": "u32",
                  "value": "0x8D62"
                }
              },
              {
                "RGB5_A1": {
                  "type": "u32",
                  "value": "0x8057"
                }
              },
              {
                "RGB8": {
                  "type": "u32",
                  "value": "0x8051"
                }
              },
              {
                "RGB8I": {
                  "type": "u32",
                  "value": "0x8D8F"
                }
              },
              {
                "RGB8UI": {
                  "type": "u32",
                  "value": "0x8D7D"
                }
              },
              {
                "RGB8_SNORM": {
                  "type": "u32",
                  "value": "0x8F96"
                }
              },
              {
                "RGB9_E5": {
                  "type": "u32",
                  "value": "0x8C3D"
                }
              },
              {
                "RGBA": {
                  "type": "u32",
                  "value": "0x1908"
                }
              },
              {
                "RGBA12": {
                  "type": "u32",
                  "value": "0x805A"
                }
              },
              {
                "RGBA16": {
                  "type": "u32",
                  "value": "0x805B"
                }
              },
              {
                "RGBA16F": {
                  "type": "u32",
                  "value": "0x881A"
                }
              },
              {
                "RGBA16F_EXT": {
                  "type": "u32",
                  "value": "0x881A"
                }
              },
              {
                "RGBA16I": {
                  "type": "u32",
                  "value": "0x8D88"
                }
              },
              {
                "RGBA16UI": {
                  "type": "u32",
                  "value": "0x8D76"
                }
              },
              {
                "RGBA16_SNORM": {
                  "type": "u32",
                  "value": "0x8F9B"
                }
              },
              {
                "RGBA2": {
                  "type": "u32",
                  "value": "0x8055"
                }
              },
              {
                "RGBA32F": {
                  "type": "u32",
                  "value": "0x8814"
                }
              },
              {
                "RGBA32F_EXT": {
                  "type": "u32",
                  "value": "0x8814"
                }
              },
              {
                "RGBA32I": {
                  "type": "u32",
                  "value": "0x8D82"
                }
              },
              {
                "RGBA32UI": {
                  "type": "u32",
                  "value": "0x8D70"
                }
              },
              {
                "RGBA4": {
                  "type": "u32",
                  "value": "0x8056"
                }
              },
              {
                "RGBA8": {
                  "type": "u32",
                  "value": "0x8058"
                }
              },
              {
                "RGBA8I": {
                  "type": "u32",
                  "value": "0x8D8E"
                }
              },
              {
                "RGBA8UI": {
                  "type": "u32",
                  "value": "0x8D7C"
                }
              },
              {
                "RGBA8_SNORM": {
                  "type": "u32",
                  "value": "0x8F97"
                }
              },
              {
                "RGBA_INTEGER": {
                  "type": "u32",
                  "value": "0x8D99"
                }
              },
              {
                "RGBA_MODE": {
                  "type": "u32",
                  "value": "0x0C31"
                }
              },
              {
                "RGB_INTEGER": {
                  "type": "u32",
                  "value": "0x8D98"
                }
              },
              {
                "RGB_SCALE": {
                  "type": "u32",
                  "value": "0x8573"
                }
              },
              {
                "RG_INTEGER": {
                  "type": "u32",
                  "value": "0x8228"
                }
              },
              {
                "RIGHT": {
                  "type": "u32",
                  "value": "0x0407"
                }
              },
              {
                "S": {
                  "type": "u32",
                  "value": "0x2000"
                }
              },
              {
                "SAMPLER": {
                  "type": "u32",
                  "value": "0x82E6"
                }
              },
              {
                "SAMPLER_1D": {
                  "type": "u32",
                  "value": "0x8B5D"
                }
              },
              {
                "SAMPLER_1D_ARRAY": {
                  "type": "u32",
                  "value": "0x8DC0"
                }
              },
              {
                "SAMPLER_1D_ARRAY_SHADOW": {
                  "type": "u32",
                  "value": "0x8DC3"
                }
              },
              {
                "SAMPLER_1D_SHADOW": {
                  "type": "u32",
                  "value": "0x8B61"
                }
              },
              {
                "SAMPLER_2D": {
                  "type": "u32",
                  "value": "0x8B5E"
                }
              },
              {
                "SAMPLER_2D_ARRAY": {
                  "type": "u32",
                  "value": "0x8DC1"
                }
              },
              {
                "SAMPLER_2D_ARRAY_SHADOW": {
                  "type": "u32",
                  "value": "0x8DC4"
                }
              },
              {
                "SAMPLER_2D_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x9108"
                }
              },
              {
                "SAMPLER_2D_MULTISAMPLE_ARRAY": {
                  "type": "u32",
                  "value": "0x910B"
                }
              },
              {
                "SAMPLER_2D_RECT": {
                  "type": "u32",
                  "value": "0x8B63"
                }
              },
              {
                "SAMPLER_2D_RECT_SHADOW": {
                  "type": "u32",
                  "value": "0x8B64"
                }
              },
              {
                "SAMPLER_2D_SHADOW": {
                  "type": "u32",
                  "value": "0x8B62"
                }
              },
              {
                "SAMPLER_3D": {
                  "type": "u32",
                  "value": "0x8B5F"
                }
              },
              {
                "SAMPLER_BINDING": {
                  "type": "u32",
                  "value": "0x8919"
                }
              },
              {
                "SAMPLER_BUFFER": {
                  "type": "u32",
                  "value": "0x8DC2"
                }
              },
              {
                "SAMPLER_CUBE": {
                  "type": "u32",
                  "value": "0x8B60"
                }
              },
              {
                "SAMPLER_CUBE_SHADOW": {
                  "type": "u32",
                  "value": "0x8DC5"
                }
              },
              {
                "SAMPLER_EXTERNAL_OES": {
                  "type": "u32",
                  "value": "0x8D66"
                }
              },
              {
                "SAMPLER_KHR": {
                  "type": "u32",
                  "value": "0x82E6"
                }
              },
              {
                "SAMPLES": {
                  "type": "u32",
                  "value": "0x80A9"
                }
              },
              {
                "SAMPLES_PASSED": {
                  "type": "u32",
                  "value": "0x8914"
                }
              },
              {
                "SAMPLE_ALPHA_TO_COVERAGE": {
                  "type": "u32",
                  "value": "0x809E"
                }
              },
              {
                "SAMPLE_ALPHA_TO_ONE": {
                  "type": "u32",
                  "value": "0x809F"
                }
              },
              {
                "SAMPLE_BUFFERS": {
                  "type": "u32",
                  "value": "0x80A8"
                }
              },
              {
                "SAMPLE_COVERAGE": {
                  "type": "u32",
                  "value": "0x80A0"
                }
              },
              {
                "SAMPLE_COVERAGE_INVERT": {
                  "type": "u32",
                  "value": "0x80AB"
                }
              },
              {
                "SAMPLE_COVERAGE_VALUE": {
                  "type": "u32",
                  "value": "0x80AA"
                }
              },
              {
                "SAMPLE_MASK": {
                  "type": "u32",
                  "value": "0x8E51"
                }
              },
              {
                "SAMPLE_MASK_VALUE": {
                  "type": "u32",
                  "value": "0x8E52"
                }
              },
              {
                "SAMPLE_POSITION": {
                  "type": "u32",
                  "value": "0x8E50"
                }
              },
              {
                "SCISSOR_BIT": {
                  "type": "u32",
                  "value": "0x00080000"
                }
              },
              {
                "SCISSOR_BOX": {
                  "type": "u32",
                  "value": "0x0C10"
                }
              },
              {
                "SCISSOR_TEST": {
                  "type": "u32",
                  "value": "0x0C11"
                }
              },
              {
                "SCREEN_KHR": {
                  "type": "u32",
                  "value": "0x9295"
                }
              },
              {
                "SECONDARY_COLOR_ARRAY": {
                  "type": "u32",
                  "value": "0x845E"
                }
              },
              {
                "SECONDARY_COLOR_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889C"
                }
              },
              {
                "SECONDARY_COLOR_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x845D"
                }
              },
              {
                "SECONDARY_COLOR_ARRAY_SIZE": {
                  "type": "u32",
                  "value": "0x845A"
                }
              },
              {
                "SECONDARY_COLOR_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x845C"
                }
              },
              {
                "SECONDARY_COLOR_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x845B"
                }
              },
              {
                "SELECT": {
                  "type": "u32",
                  "value": "0x1C02"
                }
              },
              {
                "SELECTION_BUFFER_POINTER": {
                  "type": "u32",
                  "value": "0x0DF3"
                }
              },
              {
                "SELECTION_BUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x0DF4"
                }
              },
              {
                "SEPARATE_ATTRIBS": {
                  "type": "u32",
                  "value": "0x8C8D"
                }
              },
              {
                "SEPARATE_SPECULAR_COLOR": {
                  "type": "u32",
                  "value": "0x81FA"
                }
              },
              {
                "SET": {
                  "type": "u32",
                  "value": "0x150F"
                }
              },
              {
                "SHADER": {
                  "type": "u32",
                  "value": "0x82E1"
                }
              },
              {
                "SHADER_BINARY_FORMATS": {
                  "type": "u32",
                  "value": "0x8DF8"
                }
              },
              {
                "SHADER_COMPILER": {
                  "type": "u32",
                  "value": "0x8DFA"
                }
              },
              {
                "SHADER_KHR": {
                  "type": "u32",
                  "value": "0x82E1"
                }
              },
              {
                "SHADER_PIXEL_LOCAL_STORAGE_EXT": {
                  "type": "u32",
                  "value": "0x8F64"
                }
              },
              {
                "SHADER_SOURCE_LENGTH": {
                  "type": "u32",
                  "value": "0x8B88"
                }
              },
              {
                "SHADER_TYPE": {
                  "type": "u32",
                  "value": "0x8B4F"
                }
              },
              {
                "SHADE_MODEL": {
                  "type": "u32",
                  "value": "0x0B54"
                }
              },
              {
                "SHADING_LANGUAGE_VERSION": {
                  "type": "u32",
                  "value": "0x8B8C"
                }
              },
              {
                "SHININESS": {
                  "type": "u32",
                  "value": "0x1601"
                }
              },
              {
                "SHORT": {
                  "type": "u32",
                  "value": "0x1402"
                }
              },
              {
                "SIGNALED": {
                  "type": "u32",
                  "value": "0x9119"
                }
              },
              {
                "SIGNED_NORMALIZED": {
                  "type": "u32",
                  "value": "0x8F9C"
                }
              },
              {
                "SINGLE_COLOR": {
                  "type": "u32",
                  "value": "0x81F9"
                }
              },
              {
                "SLUMINANCE": {
                  "type": "u32",
                  "value": "0x8C46"
                }
              },
              {
                "SLUMINANCE8": {
                  "type": "u32",
                  "value": "0x8C47"
                }
              },
              {
                "SLUMINANCE8_ALPHA8": {
                  "type": "u32",
                  "value": "0x8C45"
                }
              },
              {
                "SLUMINANCE_ALPHA": {
                  "type": "u32",
                  "value": "0x8C44"
                }
              },
              {
                "SMOOTH": {
                  "type": "u32",
                  "value": "0x1D01"
                }
              },
              {
                "SMOOTH_LINE_WIDTH_GRANULARITY": {
                  "type": "u32",
                  "value": "0x0B23"
                }
              },
              {
                "SMOOTH_LINE_WIDTH_RANGE": {
                  "type": "u32",
                  "value": "0x0B22"
                }
              },
              {
                "SMOOTH_POINT_SIZE_GRANULARITY": {
                  "type": "u32",
                  "value": "0x0B13"
                }
              },
              {
                "SMOOTH_POINT_SIZE_RANGE": {
                  "type": "u32",
                  "value": "0x0B12"
                }
              },
              {
                "SOFTLIGHT_KHR": {
                  "type": "u32",
                  "value": "0x929C"
                }
              },
              {
                "SOURCE0_ALPHA": {
                  "type": "u32",
                  "value": "0x8588"
                }
              },
              {
                "SOURCE0_RGB": {
                  "type": "u32",
                  "value": "0x8580"
                }
              },
              {
                "SOURCE1_ALPHA": {
                  "type": "u32",
                  "value": "0x8589"
                }
              },
              {
                "SOURCE1_RGB": {
                  "type": "u32",
                  "value": "0x8581"
                }
              },
              {
                "SOURCE2_ALPHA": {
                  "type": "u32",
                  "value": "0x858A"
                }
              },
              {
                "SOURCE2_RGB": {
                  "type": "u32",
                  "value": "0x8582"
                }
              },
              {
                "SPECULAR": {
                  "type": "u32",
                  "value": "0x1202"
                }
              },
              {
                "SPHERE_MAP": {
                  "type": "u32",
                  "value": "0x2402"
                }
              },
              {
                "SPOT_CUTOFF": {
                  "type": "u32",
                  "value": "0x1206"
                }
              },
              {
                "SPOT_DIRECTION": {
                  "type": "u32",
                  "value": "0x1204"
                }
              },
              {
                "SPOT_EXPONENT": {
                  "type": "u32",
                  "value": "0x1205"
                }
              },
              {
                "SRC0_ALPHA": {
                  "type": "u32",
                  "value": "0x8588"
                }
              },
              {
                "SRC0_RGB": {
                  "type": "u32",
                  "value": "0x8580"
                }
              },
              {
                "SRC1_ALPHA": {
                  "type": "u32",
                  "value": "0x8589"
                }
              },
              {
                "SRC1_COLOR": {
                  "type": "u32",
                  "value": "0x88F9"
                }
              },
              {
                "SRC1_RGB": {
                  "type": "u32",
                  "value": "0x8581"
                }
              },
              {
                "SRC2_ALPHA": {
                  "type": "u32",
                  "value": "0x858A"
                }
              },
              {
                "SRC2_RGB": {
                  "type": "u32",
                  "value": "0x8582"
                }
              },
              {
                "SRC_ALPHA": {
                  "type": "u32",
                  "value": "0x0302"
                }
              },
              {
                "SRC_ALPHA_SATURATE": {
                  "type": "u32",
                  "value": "0x0308"
                }
              },
              {
                "SRC_COLOR": {
                  "type": "u32",
                  "value": "0x0300"
                }
              },
              {
                "SRGB": {
                  "type": "u32",
                  "value": "0x8C40"
                }
              },
              {
                "SRGB8": {
                  "type": "u32",
                  "value": "0x8C41"
                }
              },
              {
                "SRGB8_ALPHA8": {
                  "type": "u32",
                  "value": "0x8C43"
                }
              },
              {
                "SRGB_ALPHA": {
                  "type": "u32",
                  "value": "0x8C42"
                }
              },
              {
                "STACK_OVERFLOW": {
                  "type": "u32",
                  "value": "0x0503"
                }
              },
              {
                "STACK_OVERFLOW_KHR": {
                  "type": "u32",
                  "value": "0x0503"
                }
              },
              {
                "STACK_UNDERFLOW": {
                  "type": "u32",
                  "value": "0x0504"
                }
              },
              {
                "STACK_UNDERFLOW_KHR": {
                  "type": "u32",
                  "value": "0x0504"
                }
              },
              {
                "STATIC_COPY": {
                  "type": "u32",
                  "value": "0x88E6"
                }
              },
              {
                "STATIC_DRAW": {
                  "type": "u32",
                  "value": "0x88E4"
                }
              },
              {
                "STATIC_READ": {
                  "type": "u32",
                  "value": "0x88E5"
                }
              },
              {
                "STENCIL": {
                  "type": "u32",
                  "value": "0x1802"
                }
              },
              {
                "STENCIL_ATTACHMENT": {
                  "type": "u32",
                  "value": "0x8D20"
                }
              },
              {
                "STENCIL_BACK_FAIL": {
                  "type": "u32",
                  "value": "0x8801"
                }
              },
              {
                "STENCIL_BACK_FUNC": {
                  "type": "u32",
                  "value": "0x8800"
                }
              },
              {
                "STENCIL_BACK_PASS_DEPTH_FAIL": {
                  "type": "u32",
                  "value": "0x8802"
                }
              },
              {
                "STENCIL_BACK_PASS_DEPTH_PASS": {
                  "type": "u32",
                  "value": "0x8803"
                }
              },
              {
                "STENCIL_BACK_REF": {
                  "type": "u32",
                  "value": "0x8CA3"
                }
              },
              {
                "STENCIL_BACK_VALUE_MASK": {
                  "type": "u32",
                  "value": "0x8CA4"
                }
              },
              {
                "STENCIL_BACK_WRITEMASK": {
                  "type": "u32",
                  "value": "0x8CA5"
                }
              },
              {
                "STENCIL_BITS": {
                  "type": "u32",
                  "value": "0x0D57"
                }
              },
              {
                "STENCIL_BUFFER_BIT": {
                  "type": "u32",
                  "value": "0x00000400"
                }
              },
              {
                "STENCIL_CLEAR_VALUE": {
                  "type": "u32",
                  "value": "0x0B91"
                }
              },
              {
                "STENCIL_FAIL": {
                  "type": "u32",
                  "value": "0x0B94"
                }
              },
              {
                "STENCIL_FUNC": {
                  "type": "u32",
                  "value": "0x0B92"
                }
              },
              {
                "STENCIL_INDEX": {
                  "type": "u32",
                  "value": "0x1901"
                }
              },
              {
                "STENCIL_INDEX1": {
                  "type": "u32",
                  "value": "0x8D46"
                }
              },
              {
                "STENCIL_INDEX16": {
                  "type": "u32",
                  "value": "0x8D49"
                }
              },
              {
                "STENCIL_INDEX4": {
                  "type": "u32",
                  "value": "0x8D47"
                }
              },
              {
                "STENCIL_INDEX8": {
                  "type": "u32",
                  "value": "0x8D48"
                }
              },
              {
                "STENCIL_PASS_DEPTH_FAIL": {
                  "type": "u32",
                  "value": "0x0B95"
                }
              },
              {
                "STENCIL_PASS_DEPTH_PASS": {
                  "type": "u32",
                  "value": "0x0B96"
                }
              },
              {
                "STENCIL_REF": {
                  "type": "u32",
                  "value": "0x0B97"
                }
              },
              {
                "STENCIL_TEST": {
                  "type": "u32",
                  "value": "0x0B90"
                }
              },
              {
                "STENCIL_VALUE_MASK": {
                  "type": "u32",
                  "value": "0x0B93"
                }
              },
              {
                "STENCIL_WRITEMASK": {
                  "type": "u32",
                  "value": "0x0B98"
                }
              },
              {
                "STEREO": {
                  "type": "u32",
                  "value": "0x0C33"
                }
              },
              {
                "STORAGE_CACHED_APPLE": {
                  "type": "u32",
                  "value": "0x85BE"
                }
              },
              {
                "STORAGE_PRIVATE_APPLE": {
                  "type": "u32",
                  "value": "0x85BD"
                }
              },
              {
                "STORAGE_SHARED_APPLE": {
                  "type": "u32",
                  "value": "0x85BF"
                }
              },
              {
                "STREAM_COPY": {
                  "type": "u32",
                  "value": "0x88E2"
                }
              },
              {
                "STREAM_DRAW": {
                  "type": "u32",
                  "value": "0x88E0"
                }
              },
              {
                "STREAM_READ": {
                  "type": "u32",
                  "value": "0x88E1"
                }
              },
              {
                "SUBPIXEL_BITS": {
                  "type": "u32",
                  "value": "0x0D50"
                }
              },
              {
                "SUBTRACT": {
                  "type": "u32",
                  "value": "0x84E7"
                }
              },
              {
                "SYNC_CONDITION": {
                  "type": "u32",
                  "value": "0x9113"
                }
              },
              {
                "SYNC_FENCE": {
                  "type": "u32",
                  "value": "0x9116"
                }
              },
              {
                "SYNC_FLAGS": {
                  "type": "u32",
                  "value": "0x9115"
                }
              },
              {
                "SYNC_FLUSH_COMMANDS_BIT": {
                  "type": "u32",
                  "value": "0x00000001"
                }
              },
              {
                "SYNC_GPU_COMMANDS_COMPLETE": {
                  "type": "u32",
                  "value": "0x9117"
                }
              },
              {
                "SYNC_STATUS": {
                  "type": "u32",
                  "value": "0x9114"
                }
              },
              {
                "T": {
                  "type": "u32",
                  "value": "0x2001"
                }
              },
              {
                "T2F_C3F_V3F": {
                  "type": "u32",
                  "value": "0x2A2A"
                }
              },
              {
                "T2F_C4F_N3F_V3F": {
                  "type": "u32",
                  "value": "0x2A2C"
                }
              },
              {
                "T2F_C4UB_V3F": {
                  "type": "u32",
                  "value": "0x2A29"
                }
              },
              {
                "T2F_N3F_V3F": {
                  "type": "u32",
                  "value": "0x2A2B"
                }
              },
              {
                "T2F_V3F": {
                  "type": "u32",
                  "value": "0x2A27"
                }
              },
              {
                "T4F_C4F_N3F_V4F": {
                  "type": "u32",
                  "value": "0x2A2D"
                }
              },
              {
                "T4F_V4F": {
                  "type": "u32",
                  "value": "0x2A28"
                }
              },
              {
                "TEXTURE": {
                  "type": "u32",
                  "value": "0x1702"
                }
              },
              {
                "TEXTURE0": {
                  "type": "u32",
                  "value": "0x84C0"
                }
              },
              {
                "TEXTURE1": {
                  "type": "u32",
                  "value": "0x84C1"
                }
              },
              {
                "TEXTURE10": {
                  "type": "u32",
                  "value": "0x84CA"
                }
              },
              {
                "TEXTURE11": {
                  "type": "u32",
                  "value": "0x84CB"
                }
              },
              {
                "TEXTURE12": {
                  "type": "u32",
                  "value": "0x84CC"
                }
              },
              {
                "TEXTURE13": {
                  "type": "u32",
                  "value": "0x84CD"
                }
              },
              {
                "TEXTURE14": {
                  "type": "u32",
                  "value": "0x84CE"
                }
              },
              {
                "TEXTURE15": {
                  "type": "u32",
                  "value": "0x84CF"
                }
              },
              {
                "TEXTURE16": {
                  "type": "u32",
                  "value": "0x84D0"
                }
              },
              {
                "TEXTURE17": {
                  "type": "u32",
                  "value": "0x84D1"
                }
              },
              {
                "TEXTURE18": {
                  "type": "u32",
                  "value": "0x84D2"
                }
              },
              {
                "TEXTURE19": {
                  "type": "u32",
                  "value": "0x84D3"
                }
              },
              {
                "TEXTURE2": {
                  "type": "u32",
                  "value": "0x84C2"
                }
              },
              {
                "TEXTURE20": {
                  "type": "u32",
                  "value": "0x84D4"
                }
              },
              {
                "TEXTURE21": {
                  "type": "u32",
                  "value": "0x84D5"
                }
              },
              {
                "TEXTURE22": {
                  "type": "u32",
                  "value": "0x84D6"
                }
              },
              {
                "TEXTURE23": {
                  "type": "u32",
                  "value": "0x84D7"
                }
              },
              {
                "TEXTURE24": {
                  "type": "u32",
                  "value": "0x84D8"
                }
              },
              {
                "TEXTURE25": {
                  "type": "u32",
                  "value": "0x84D9"
                }
              },
              {
                "TEXTURE26": {
                  "type": "u32",
                  "value": "0x84DA"
                }
              },
              {
                "TEXTURE27": {
                  "type": "u32",
                  "value": "0x84DB"
                }
              },
              {
                "TEXTURE28": {
                  "type": "u32",
                  "value": "0x84DC"
                }
              },
              {
                "TEXTURE29": {
                  "type": "u32",
                  "value": "0x84DD"
                }
              },
              {
                "TEXTURE3": {
                  "type": "u32",
                  "value": "0x84C3"
                }
              },
              {
                "TEXTURE30": {
                  "type": "u32",
                  "value": "0x84DE"
                }
              },
              {
                "TEXTURE31": {
                  "type": "u32",
                  "value": "0x84DF"
                }
              },
              {
                "TEXTURE4": {
                  "type": "u32",
                  "value": "0x84C4"
                }
              },
              {
                "TEXTURE5": {
                  "type": "u32",
                  "value": "0x84C5"
                }
              },
              {
                "TEXTURE6": {
                  "type": "u32",
                  "value": "0x84C6"
                }
              },
              {
                "TEXTURE7": {
                  "type": "u32",
                  "value": "0x84C7"
                }
              },
              {
                "TEXTURE8": {
                  "type": "u32",
                  "value": "0x84C8"
                }
              },
              {
                "TEXTURE9": {
                  "type": "u32",
                  "value": "0x84C9"
                }
              },
              {
                "TEXTURE_1D": {
                  "type": "u32",
                  "value": "0x0DE0"
                }
              },
              {
                "TEXTURE_1D_ARRAY": {
                  "type": "u32",
                  "value": "0x8C18"
                }
              },
              {
                "TEXTURE_2D": {
                  "type": "u32",
                  "value": "0x0DE1"
                }
              },
              {
                "TEXTURE_2D_ARRAY": {
                  "type": "u32",
                  "value": "0x8C1A"
                }
              },
              {
                "TEXTURE_2D_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x9100"
                }
              },
              {
                "TEXTURE_2D_MULTISAMPLE_ARRAY": {
                  "type": "u32",
                  "value": "0x9102"
                }
              },
              {
                "TEXTURE_3D": {
                  "type": "u32",
                  "value": "0x806F"
                }
              },
              {
                "TEXTURE_ALPHA_SIZE": {
                  "type": "u32",
                  "value": "0x805F"
                }
              },
              {
                "TEXTURE_ALPHA_TYPE": {
                  "type": "u32",
                  "value": "0x8C13"
                }
              },
              {
                "TEXTURE_BASE_LEVEL": {
                  "type": "u32",
                  "value": "0x813C"
                }
              },
              {
                "TEXTURE_BINDING_1D": {
                  "type": "u32",
                  "value": "0x8068"
                }
              },
              {
                "TEXTURE_BINDING_1D_ARRAY": {
                  "type": "u32",
                  "value": "0x8C1C"
                }
              },
              {
                "TEXTURE_BINDING_2D": {
                  "type": "u32",
                  "value": "0x8069"
                }
              },
              {
                "TEXTURE_BINDING_2D_ARRAY": {
                  "type": "u32",
                  "value": "0x8C1D"
                }
              },
              {
                "TEXTURE_BINDING_2D_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x9104"
                }
              },
              {
                "TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY": {
                  "type": "u32",
                  "value": "0x9105"
                }
              },
              {
                "TEXTURE_BINDING_3D": {
                  "type": "u32",
                  "value": "0x806A"
                }
              },
              {
                "TEXTURE_BINDING_BUFFER": {
                  "type": "u32",
                  "value": "0x8C2C"
                }
              },
              {
                "TEXTURE_BINDING_CUBE_MAP": {
                  "type": "u32",
                  "value": "0x8514"
                }
              },
              {
                "TEXTURE_BINDING_EXTERNAL_OES": {
                  "type": "u32",
                  "value": "0x8D67"
                }
              },
              {
                "TEXTURE_BINDING_RECTANGLE": {
                  "type": "u32",
                  "value": "0x84F6"
                }
              },
              {
                "TEXTURE_BINDING_RECTANGLE_ARB": {
                  "type": "u32",
                  "value": "0x84F6"
                }
              },
              {
                "TEXTURE_BIT": {
                  "type": "u32",
                  "value": "0x00040000"
                }
              },
              {
                "TEXTURE_BLUE_SIZE": {
                  "type": "u32",
                  "value": "0x805E"
                }
              },
              {
                "TEXTURE_BLUE_TYPE": {
                  "type": "u32",
                  "value": "0x8C12"
                }
              },
              {
                "TEXTURE_BORDER": {
                  "type": "u32",
                  "value": "0x1005"
                }
              },
              {
                "TEXTURE_BORDER_COLOR": {
                  "type": "u32",
                  "value": "0x1004"
                }
              },
              {
                "TEXTURE_BUFFER": {
                  "type": "u32",
                  "value": "0x8C2A"
                }
              },
              {
                "TEXTURE_BUFFER_DATA_STORE_BINDING": {
                  "type": "u32",
                  "value": "0x8C2D"
                }
              },
              {
                "TEXTURE_COMPARE_FUNC": {
                  "type": "u32",
                  "value": "0x884D"
                }
              },
              {
                "TEXTURE_COMPARE_MODE": {
                  "type": "u32",
                  "value": "0x884C"
                }
              },
              {
                "TEXTURE_COMPONENTS": {
                  "type": "u32",
                  "value": "0x1003"
                }
              },
              {
                "TEXTURE_COMPRESSED": {
                  "type": "u32",
                  "value": "0x86A1"
                }
              },
              {
                "TEXTURE_COMPRESSED_IMAGE_SIZE": {
                  "type": "u32",
                  "value": "0x86A0"
                }
              },
              {
                "TEXTURE_COMPRESSION_HINT": {
                  "type": "u32",
                  "value": "0x84EF"
                }
              },
              {
                "TEXTURE_COORD_ARRAY": {
                  "type": "u32",
                  "value": "0x8078"
                }
              },
              {
                "TEXTURE_COORD_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889A"
                }
              },
              {
                "TEXTURE_COORD_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8092"
                }
              },
              {
                "TEXTURE_COORD_ARRAY_SIZE": {
                  "type": "u32",
                  "value": "0x8088"
                }
              },
              {
                "TEXTURE_COORD_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x808A"
                }
              },
              {
                "TEXTURE_COORD_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x8089"
                }
              },
              {
                "TEXTURE_CUBE_MAP": {
                  "type": "u32",
                  "value": "0x8513"
                }
              },
              {
                "TEXTURE_CUBE_MAP_NEGATIVE_X": {
                  "type": "u32",
                  "value": "0x8516"
                }
              },
              {
                "TEXTURE_CUBE_MAP_NEGATIVE_Y": {
                  "type": "u32",
                  "value": "0x8518"
                }
              },
              {
                "TEXTURE_CUBE_MAP_NEGATIVE_Z": {
                  "type": "u32",
                  "value": "0x851A"
                }
              },
              {
                "TEXTURE_CUBE_MAP_POSITIVE_X": {
                  "type": "u32",
                  "value": "0x8515"
                }
              },
              {
                "TEXTURE_CUBE_MAP_POSITIVE_Y": {
                  "type": "u32",
                  "value": "0x8517"
                }
              },
              {
                "TEXTURE_CUBE_MAP_POSITIVE_Z": {
                  "type": "u32",
                  "value": "0x8519"
                }
              },
              {
                "TEXTURE_CUBE_MAP_SEAMLESS": {
                  "type": "u32",
                  "value": "0x884F"
                }
              },
              {
                "TEXTURE_DEPTH": {
                  "type": "u32",
                  "value": "0x8071"
                }
              },
              {
                "TEXTURE_DEPTH_SIZE": {
                  "type": "u32",
                  "value": "0x884A"
                }
              },
              {
                "TEXTURE_DEPTH_TYPE": {
                  "type": "u32",
                  "value": "0x8C16"
                }
              },
              {
                "TEXTURE_ENV": {
                  "type": "u32",
                  "value": "0x2300"
                }
              },
              {
                "TEXTURE_ENV_COLOR": {
                  "type": "u32",
                  "value": "0x2201"
                }
              },
              {
                "TEXTURE_ENV_MODE": {
                  "type": "u32",
                  "value": "0x2200"
                }
              },
              {
                "TEXTURE_EXTERNAL_OES": {
                  "type": "u32",
                  "value": "0x8D65"
                }
              },
              {
                "TEXTURE_FILTER_CONTROL": {
                  "type": "u32",
                  "value": "0x8500"
                }
              },
              {
                "TEXTURE_FIXED_SAMPLE_LOCATIONS": {
                  "type": "u32",
                  "value": "0x9107"
                }
              },
              {
                "TEXTURE_GEN_MODE": {
                  "type": "u32",
                  "value": "0x2500"
                }
              },
              {
                "TEXTURE_GEN_Q": {
                  "type": "u32",
                  "value": "0x0C63"
                }
              },
              {
                "TEXTURE_GEN_R": {
                  "type": "u32",
                  "value": "0x0C62"
                }
              },
              {
                "TEXTURE_GEN_S": {
                  "type": "u32",
                  "value": "0x0C60"
                }
              },
              {
                "TEXTURE_GEN_T": {
                  "type": "u32",
                  "value": "0x0C61"
                }
              },
              {
                "TEXTURE_GREEN_SIZE": {
                  "type": "u32",
                  "value": "0x805D"
                }
              },
              {
                "TEXTURE_GREEN_TYPE": {
                  "type": "u32",
                  "value": "0x8C11"
                }
              },
              {
                "TEXTURE_HEIGHT": {
                  "type": "u32",
                  "value": "0x1001"
                }
              },
              {
                "TEXTURE_IMMUTABLE_FORMAT": {
                  "type": "u32",
                  "value": "0x912F"
                }
              },
              {
                "TEXTURE_IMMUTABLE_FORMAT_EXT": {
                  "type": "u32",
                  "value": "0x912F"
                }
              },
              {
                "TEXTURE_IMMUTABLE_LEVELS": {
                  "type": "u32",
                  "value": "0x82DF"
                }
              },
              {
                "TEXTURE_INTENSITY_SIZE": {
                  "type": "u32",
                  "value": "0x8061"
                }
              },
              {
                "TEXTURE_INTENSITY_TYPE": {
                  "type": "u32",
                  "value": "0x8C15"
                }
              },
              {
                "TEXTURE_INTERNAL_FORMAT": {
                  "type": "u32",
                  "value": "0x1003"
                }
              },
              {
                "TEXTURE_LOD_BIAS": {
                  "type": "u32",
                  "value": "0x8501"
                }
              },
              {
                "TEXTURE_LUMINANCE_SIZE": {
                  "type": "u32",
                  "value": "0x8060"
                }
              },
              {
                "TEXTURE_LUMINANCE_TYPE": {
                  "type": "u32",
                  "value": "0x8C14"
                }
              },
              {
                "TEXTURE_MAG_FILTER": {
                  "type": "u32",
                  "value": "0x2800"
                }
              },
              {
                "TEXTURE_MATRIX": {
                  "type": "u32",
                  "value": "0x0BA8"
                }
              },
              {
                "TEXTURE_MAX_ANISOTROPY_EXT": {
                  "type": "u32",
                  "value": "0x84FE"
                }
              },
              {
                "TEXTURE_MAX_LEVEL": {
                  "type": "u32",
                  "value": "0x813D"
                }
              },
              {
                "TEXTURE_MAX_LOD": {
                  "type": "u32",
                  "value": "0x813B"
                }
              },
              {
                "TEXTURE_MIN_FILTER": {
                  "type": "u32",
                  "value": "0x2801"
                }
              },
              {
                "TEXTURE_MIN_LOD": {
                  "type": "u32",
                  "value": "0x813A"
                }
              },
              {
                "TEXTURE_PRIORITY": {
                  "type": "u32",
                  "value": "0x8066"
                }
              },
              {
                "TEXTURE_RANGE_LENGTH_APPLE": {
                  "type": "u32",
                  "value": "0x85B7"
                }
              },
              {
                "TEXTURE_RANGE_POINTER_APPLE": {
                  "type": "u32",
                  "value": "0x85B8"
                }
              },
              {
                "TEXTURE_RECTANGLE": {
                  "type": "u32",
                  "value": "0x84F5"
                }
              },
              {
                "TEXTURE_RECTANGLE_ARB": {
                  "type": "u32",
                  "value": "0x84F5"
                }
              },
              {
                "TEXTURE_RED_SIZE": {
                  "type": "u32",
                  "value": "0x805C"
                }
              },
              {
                "TEXTURE_RED_TYPE": {
                  "type": "u32",
                  "value": "0x8C10"
                }
              },
              {
                "TEXTURE_RESIDENT": {
                  "type": "u32",
                  "value": "0x8067"
                }
              },
              {
                "TEXTURE_SAMPLES": {
                  "type": "u32",
                  "value": "0x9106"
                }
              },
              {
                "TEXTURE_SHARED_SIZE": {
                  "type": "u32",
                  "value": "0x8C3F"
                }
              },
              {
                "TEXTURE_STACK_DEPTH": {
                  "type": "u32",
                  "value": "0x0BA5"
                }
              },
              {
                "TEXTURE_STENCIL_SIZE": {
                  "type": "u32",
                  "value": "0x88F1"
                }
              },
              {
                "TEXTURE_STORAGE_HINT_APPLE": {
                  "type": "u32",
                  "value": "0x85BC"
                }
              },
              {
                "TEXTURE_SWIZZLE_A": {
                  "type": "u32",
                  "value": "0x8E45"
                }
              },
              {
                "TEXTURE_SWIZZLE_B": {
                  "type": "u32",
                  "value": "0x8E44"
                }
              },
              {
                "TEXTURE_SWIZZLE_G": {
                  "type": "u32",
                  "value": "0x8E43"
                }
              },
              {
                "TEXTURE_SWIZZLE_R": {
                  "type": "u32",
                  "value": "0x8E42"
                }
              },
              {
                "TEXTURE_SWIZZLE_RGBA": {
                  "type": "u32",
                  "value": "0x8E46"
                }
              },
              {
                "TEXTURE_USAGE_ANGLE": {
                  "type": "u32",
                  "value": "0x93A2"
                }
              },
              {
                "TEXTURE_WIDTH": {
                  "type": "u32",
                  "value": "0x1000"
                }
              },
              {
                "TEXTURE_WRAP_R": {
                  "type": "u32",
                  "value": "0x8072"
                }
              },
              {
                "TEXTURE_WRAP_S": {
                  "type": "u32",
                  "value": "0x2802"
                }
              },
              {
                "TEXTURE_WRAP_T": {
                  "type": "u32",
                  "value": "0x2803"
                }
              },
              {
                "TIMEOUT_EXPIRED": {
                  "type": "u32",
                  "value": "0x911B"
                }
              },
              {
                "TIMEOUT_IGNORED": {
                  "type": "u64",
                  "value": "0xFFFFFFFFFFFFFFFF"
                }
              },
              {
                "TIMESTAMP": {
                  "type": "u32",
                  "value": "0x8E28"
                }
              },
              {
                "TIMESTAMP_EXT": {
                  "type": "u32",
                  "value": "0x8E28"
                }
              },
              {
                "TIME_ELAPSED": {
                  "type": "u32",
                  "value": "0x88BF"
                }
              },
              {
                "TIME_ELAPSED_EXT": {
                  "type": "u32",
                  "value": "0x88BF"
                }
              },
              {
                "TRANSFORM_BIT": {
                  "type": "u32",
                  "value": "0x00001000"
                }
              },
              {
                "TRANSFORM_FEEDBACK": {
                  "type": "u32",
                  "value": "0x8E22"
                }
              },
              {
                "TRANSFORM_FEEDBACK_ACTIVE": {
                  "type": "u32",
                  "value": "0x8E24"
                }
              },
              {
                "TRANSFORM_FEEDBACK_BINDING": {
                  "type": "u32",
                  "value": "0x8E25"
                }
              },
              {
                "TRANSFORM_FEEDBACK_BUFFER": {
                  "type": "u32",
                  "value": "0x8C8E"
                }
              },
              {
                "TRANSFORM_FEEDBACK_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8C8F"
                }
              },
              {
                "TRANSFORM_FEEDBACK_BUFFER_MODE": {
                  "type": "u32",
                  "value": "0x8C7F"
                }
              },
              {
                "TRANSFORM_FEEDBACK_BUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x8C85"
                }
              },
              {
                "TRANSFORM_FEEDBACK_BUFFER_START": {
                  "type": "u32",
                  "value": "0x8C84"
                }
              },
              {
                "TRANSFORM_FEEDBACK_PAUSED": {
                  "type": "u32",
                  "value": "0x8E23"
                }
              },
              {
                "TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN": {
                  "type": "u32",
                  "value": "0x8C88"
                }
              },
              {
                "TRANSFORM_FEEDBACK_VARYINGS": {
                  "type": "u32",
                  "value": "0x8C83"
                }
              },
              {
                "TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH": {
                  "type": "u32",
                  "value": "0x8C76"
                }
              },
              {
                "TRANSPOSE_COLOR_MATRIX": {
                  "type": "u32",
                  "value": "0x84E6"
                }
              },
              {
                "TRANSPOSE_MODELVIEW_MATRIX": {
                  "type": "u32",
                  "value": "0x84E3"
                }
              },
              {
                "TRANSPOSE_PROJECTION_MATRIX": {
                  "type": "u32",
                  "value": "0x84E4"
                }
              },
              {
                "TRANSPOSE_TEXTURE_MATRIX": {
                  "type": "u32",
                  "value": "0x84E5"
                }
              },
              {
                "TRIANGLES": {
                  "type": "u32",
                  "value": "0x0004"
                }
              },
              {
                "TRIANGLES_ADJACENCY": {
                  "type": "u32",
                  "value": "0x000C"
                }
              },
              {
                "TRIANGLE_FAN": {
                  "type": "u32",
                  "value": "0x0006"
                }
              },
              {
                "TRIANGLE_STRIP": {
                  "type": "u32",
                  "value": "0x0005"
                }
              },
              {
                "TRIANGLE_STRIP_ADJACENCY": {
                  "type": "u32",
                  "value": "0x000D"
                }
              },
              {
                "TRUE": {
                  "type": "u8",
                  "value": "1"
                }
              },
              {
                "UNIFORM_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x8A3C"
                }
              },
              {
                "UNIFORM_BLOCK_ACTIVE_UNIFORMS": {
                  "type": "u32",
                  "value": "0x8A42"
                }
              },
              {
                "UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES": {
                  "type": "u32",
                  "value": "0x8A43"
                }
              },
              {
                "UNIFORM_BLOCK_BINDING": {
                  "type": "u32",
                  "value": "0x8A3F"
                }
              },
              {
                "UNIFORM_BLOCK_DATA_SIZE": {
                  "type": "u32",
                  "value": "0x8A40"
                }
              },
              {
                "UNIFORM_BLOCK_INDEX": {
                  "type": "u32",
                  "value": "0x8A3A"
                }
              },
              {
                "UNIFORM_BLOCK_NAME_LENGTH": {
                  "type": "u32",
                  "value": "0x8A41"
                }
              },
              {
                "UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER": {
                  "type": "u32",
                  "value": "0x8A46"
                }
              },
              {
                "UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER": {
                  "type": "u32",
                  "value": "0x8A45"
                }
              },
              {
                "UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER": {
                  "type": "u32",
                  "value": "0x8A44"
                }
              },
              {
                "UNIFORM_BUFFER": {
                  "type": "u32",
                  "value": "0x8A11"
                }
              },
              {
                "UNIFORM_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8A28"
                }
              },
              {
                "UNIFORM_BUFFER_OFFSET_ALIGNMENT": {
                  "type": "u32",
                  "value": "0x8A34"
                }
              },
              {
                "UNIFORM_BUFFER_SIZE": {
                  "type": "u32",
                  "value": "0x8A2A"
                }
              },
              {
                "UNIFORM_BUFFER_START": {
                  "type": "u32",
                  "value": "0x8A29"
                }
              },
              {
                "UNIFORM_IS_ROW_MAJOR": {
                  "type": "u32",
                  "value": "0x8A3E"
                }
              },
              {
                "UNIFORM_MATRIX_STRIDE": {
                  "type": "u32",
                  "value": "0x8A3D"
                }
              },
              {
                "UNIFORM_NAME_LENGTH": {
                  "type": "u32",
                  "value": "0x8A39"
                }
              },
              {
                "UNIFORM_OFFSET": {
                  "type": "u32",
                  "value": "0x8A3B"
                }
              },
              {
                "UNIFORM_SIZE": {
                  "type": "u32",
                  "value": "0x8A38"
                }
              },
              {
                "UNIFORM_TYPE": {
                  "type": "u32",
                  "value": "0x8A37"
                }
              },
              {
                "UNPACK_ALIGNMENT": {
                  "type": "u32",
                  "value": "0x0CF5"
                }
              },
              {
                "UNPACK_CLIENT_STORAGE_APPLE": {
                  "type": "u32",
                  "value": "0x85B2"
                }
              },
              {
                "UNPACK_IMAGE_HEIGHT": {
                  "type": "u32",
                  "value": "0x806E"
                }
              },
              {
                "UNPACK_LSB_FIRST": {
                  "type": "u32",
                  "value": "0x0CF1"
                }
              },
              {
                "UNPACK_ROW_LENGTH": {
                  "type": "u32",
                  "value": "0x0CF2"
                }
              },
              {
                "UNPACK_SKIP_IMAGES": {
                  "type": "u32",
                  "value": "0x806D"
                }
              },
              {
                "UNPACK_SKIP_PIXELS": {
                  "type": "u32",
                  "value": "0x0CF4"
                }
              },
              {
                "UNPACK_SKIP_ROWS": {
                  "type": "u32",
                  "value": "0x0CF3"
                }
              },
              {
                "UNPACK_SWAP_BYTES": {
                  "type": "u32",
                  "value": "0x0CF0"
                }
              },
              {
                "UNSIGNALED": {
                  "type": "u32",
                  "value": "0x9118"
                }
              },
              {
                "UNSIGNED_BYTE": {
                  "type": "u32",
                  "value": "0x1401"
                }
              },
              {
                "UNSIGNED_BYTE_2_3_3_REV": {
                  "type": "u32",
                  "value": "0x8362"
                }
              },
              {
                "UNSIGNED_BYTE_3_3_2": {
                  "type": "u32",
                  "value": "0x8032"
                }
              },
              {
                "UNSIGNED_INT": {
                  "type": "u32",
                  "value": "0x1405"
                }
              },
              {
                "UNSIGNED_INT_10F_11F_11F_REV": {
                  "type": "u32",
                  "value": "0x8C3B"
                }
              },
              {
                "UNSIGNED_INT_10_10_10_2": {
                  "type": "u32",
                  "value": "0x8036"
                }
              },
              {
                "UNSIGNED_INT_24_8": {
                  "type": "u32",
                  "value": "0x84FA"
                }
              },
              {
                "UNSIGNED_INT_2_10_10_10_REV": {
                  "type": "u32",
                  "value": "0x8368"
                }
              },
              {
                "UNSIGNED_INT_5_9_9_9_REV": {
                  "type": "u32",
                  "value": "0x8C3E"
                }
              },
              {
                "UNSIGNED_INT_8_8_8_8": {
                  "type": "u32",
                  "value": "0x8035"
                }
              },
              {
                "UNSIGNED_INT_8_8_8_8_REV": {
                  "type": "u32",
                  "value": "0x8367"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_1D": {
                  "type": "u32",
                  "value": "0x8DD1"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_1D_ARRAY": {
                  "type": "u32",
                  "value": "0x8DD6"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_2D": {
                  "type": "u32",
                  "value": "0x8DD2"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_2D_ARRAY": {
                  "type": "u32",
                  "value": "0x8DD7"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE": {
                  "type": "u32",
                  "value": "0x910A"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY": {
                  "type": "u32",
                  "value": "0x910D"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_2D_RECT": {
                  "type": "u32",
                  "value": "0x8DD5"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_3D": {
                  "type": "u32",
                  "value": "0x8DD3"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_BUFFER": {
                  "type": "u32",
                  "value": "0x8DD8"
                }
              },
              {
                "UNSIGNED_INT_SAMPLER_CUBE": {
                  "type": "u32",
                  "value": "0x8DD4"
                }
              },
              {
                "UNSIGNED_INT_VEC2": {
                  "type": "u32",
                  "value": "0x8DC6"
                }
              },
              {
                "UNSIGNED_INT_VEC3": {
                  "type": "u32",
                  "value": "0x8DC7"
                }
              },
              {
                "UNSIGNED_INT_VEC4": {
                  "type": "u32",
                  "value": "0x8DC8"
                }
              },
              {
                "UNSIGNED_NORMALIZED": {
                  "type": "u32",
                  "value": "0x8C17"
                }
              },
              {
                "UNSIGNED_SHORT": {
                  "type": "u32",
                  "value": "0x1403"
                }
              },
              {
                "UNSIGNED_SHORT_1_5_5_5_REV": {
                  "type": "u32",
                  "value": "0x8366"
                }
              },
              {
                "UNSIGNED_SHORT_4_4_4_4": {
                  "type": "u32",
                  "value": "0x8033"
                }
              },
              {
                "UNSIGNED_SHORT_4_4_4_4_REV": {
                  "type": "u32",
                  "value": "0x8365"
                }
              },
              {
                "UNSIGNED_SHORT_5_5_5_1": {
                  "type": "u32",
                  "value": "0x8034"
                }
              },
              {
                "UNSIGNED_SHORT_5_6_5": {
                  "type": "u32",
                  "value": "0x8363"
                }
              },
              {
                "UNSIGNED_SHORT_5_6_5_REV": {
                  "type": "u32",
                  "value": "0x8364"
                }
              },
              {
                "UPPER_LEFT": {
                  "type": "u32",
                  "value": "0x8CA2"
                }
              },
              {
                "V2F": {
                  "type": "u32",
                  "value": "0x2A20"
                }
              },
              {
                "V3F": {
                  "type": "u32",
                  "value": "0x2A21"
                }
              },
              {
                "VALIDATE_STATUS": {
                  "type": "u32",
                  "value": "0x8B83"
                }
              },
              {
                "VENDOR": {
                  "type": "u32",
                  "value": "0x1F00"
                }
              },
              {
                "VERSION": {
                  "type": "u32",
                  "value": "0x1F02"
                }
              },
              {
                "VERTEX_ARRAY": {
                  "type": "u32",
                  "value": "0x8074"
                }
              },
              {
                "VERTEX_ARRAY_BINDING": {
                  "type": "u32",
                  "value": "0x85B5"
                }
              },
              {
                "VERTEX_ARRAY_BINDING_APPLE": {
                  "type": "u32",
                  "value": "0x85B5"
                }
              },
              {
                "VERTEX_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x8896"
                }
              },
              {
                "VERTEX_ARRAY_KHR": {
                  "type": "u32",
                  "value": "0x8074"
                }
              },
              {
                "VERTEX_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x808E"
                }
              },
              {
                "VERTEX_ARRAY_SIZE": {
                  "type": "u32",
                  "value": "0x807A"
                }
              },
              {
                "VERTEX_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x807C"
                }
              },
              {
                "VERTEX_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x807B"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889F"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_DIVISOR": {
                  "type": "u32",
                  "value": "0x88FE"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_ENABLED": {
                  "type": "u32",
                  "value": "0x8622"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_INTEGER": {
                  "type": "u32",
                  "value": "0x88FD"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_NORMALIZED": {
                  "type": "u32",
                  "value": "0x886A"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_POINTER": {
                  "type": "u32",
                  "value": "0x8645"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_SIZE": {
                  "type": "u32",
                  "value": "0x8623"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_STRIDE": {
                  "type": "u32",
                  "value": "0x8624"
                }
              },
              {
                "VERTEX_ATTRIB_ARRAY_TYPE": {
                  "type": "u32",
                  "value": "0x8625"
                }
              },
              {
                "VERTEX_PROGRAM_POINT_SIZE": {
                  "type": "u32",
                  "value": "0x8642"
                }
              },
              {
                "VERTEX_PROGRAM_TWO_SIDE": {
                  "type": "u32",
                  "value": "0x8643"
                }
              },
              {
                "VERTEX_SHADER": {
                  "type": "u32",
                  "value": "0x8B31"
                }
              },
              {
                "VIEWPORT": {
                  "type": "u32",
                  "value": "0x0BA2"
                }
              },
              {
                "VIEWPORT_BIT": {
                  "type": "u32",
                  "value": "0x00000800"
                }
              },
              {
                "WAIT_FAILED": {
                  "type": "u32",
                  "value": "0x911D"
                }
              },
              {
                "WEIGHT_ARRAY_BUFFER_BINDING": {
                  "type": "u32",
                  "value": "0x889E"
                }
              },
              {
                "WRITE_ONLY": {
                  "type": "u32",
                  "value": "0x88B9"
                }
              },
              {
                "XOR": {
                  "type": "u32",
                  "value": "0x1506"
                }
              },
              {
                "ZERO": {
                  "type": "u32",
                  "value": "0"
                }
              },
              {
                "ZOOM_X": {
                  "type": "u32",
                  "value": "0x0D16"
                }
              },
              {
                "ZOOM_Y": {
                  "type": "u32",
                  "value": "0x0D17"
                }
              }
            ],
            "struct_fields": [
              {
                "ptr": {
                  "type": "BoxRc<GlContextPtrInner>"
                },
                "renderer_type": {
                  "type": "RendererType",
                  "doc": "Whether to force a hardware or software renderer"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "functions": {
              "get_type": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzGlType"
                },
                "fn_body": "gl.get_type()"
              },
              "buffer_data_untyped": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "size": "isize"
                  },
                  {
                    "data": "GlVoidPtrConst"
                  },
                  {
                    "usage": "u32"
                  }
                ],
                "fn_body": "gl.buffer_data_untyped(target, size, data, usage)"
              },
              "buffer_sub_data_untyped": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "offset": "isize"
                  },
                  {
                    "size": "isize"
                  },
                  {
                    "data": "GlVoidPtrConst"
                  }
                ],
                "fn_body": "gl.buffer_sub_data_untyped(target, offset, size, data)"
              },
              "map_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "access": "u32"
                  }
                ],
                "returns": {
                  "type": "GlVoidPtrMut"
                },
                "fn_body": "gl.map_buffer(target, access)"
              },
              "map_buffer_range": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "offset": "isize"
                  },
                  {
                    "length": "isize"
                  },
                  {
                    "access": "u32"
                  }
                ],
                "returns": {
                  "type": "GlVoidPtrMut"
                },
                "fn_body": "gl.map_buffer_range(target, offset, length, access)"
              },
              "unmap_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.unmap_buffer(target)"
              },
              "tex_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "internal_format": "u32"
                  },
                  {
                    "buffer": "u32"
                  }
                ],
                "fn_body": "gl.tex_buffer(target, internal_format, buffer)"
              },
              "shader_source": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader": "u32"
                  },
                  {
                    "strings": "StringVec"
                  }
                ],
                "fn_body": "gl.shader_source(shader, strings)"
              },
              "read_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  }
                ],
                "fn_body": "gl.read_buffer(mode)"
              },
              "read_pixels_into_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "pixel_type": "u32"
                  },
                  {
                    "dst_buffer": "U8VecRefMut"
                  }
                ],
                "fn_body": "gl.read_pixels_into_buffer(x, y, width, height, format, pixel_type, dst_buffer)"
              },
              "read_pixels": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "pixel_type": "u32"
                  }
                ],
                "returns": {
                  "type": "U8Vec"
                },
                "fn_body": "gl.read_pixels(x, y, width, height, format, pixel_type)"
              },
              "read_pixels_into_pbo": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "pixel_type": "u32"
                  }
                ],
                "fn_body": "gl.read_pixels_into_pbo(x, y, width, height, format, pixel_type)"
              },
              "sample_coverage": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "value": "f32"
                  },
                  {
                    "invert": "bool"
                  }
                ],
                "fn_body": "gl.sample_coverage(value, invert)"
              },
              "polygon_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "factor": "f32"
                  },
                  {
                    "units": "f32"
                  }
                ],
                "fn_body": "gl.polygon_offset(factor, units)"
              },
              "pixel_store_i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "param": "i32"
                  }
                ],
                "fn_body": "gl.pixel_store_i(name, param)"
              },
              "gen_buffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_buffers(n)"
              },
              "gen_renderbuffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_renderbuffers(n)"
              },
              "gen_framebuffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_framebuffers(n)"
              },
              "gen_textures": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_textures(n)"
              },
              "gen_vertex_arrays": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_vertex_arrays(n)"
              },
              "gen_queries": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_queries(n)"
              },
              "begin_query": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "id": "u32"
                  }
                ],
                "fn_body": "gl.begin_query(target, id)"
              },
              "end_query": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  }
                ],
                "fn_body": "gl.end_query(target)"
              },
              "query_counter": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "target": "u32"
                  }
                ],
                "fn_body": "gl.query_counter(id, target)"
              },
              "get_query_object_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_query_object_iv(id, pname)"
              },
              "get_query_object_uiv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.get_query_object_uiv(id, pname)"
              },
              "get_query_object_i64v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "i64"
                },
                "fn_body": "gl.get_query_object_i64v(id, pname)"
              },
              "get_query_object_ui64v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "u64"
                },
                "fn_body": "gl.get_query_object_ui64v(id, pname)"
              },
              "delete_queries": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "queries": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_queries(queries)"
              },
              "delete_vertex_arrays": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "vertex_arrays": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_vertex_arrays(vertex_arrays)"
              },
              "delete_buffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "buffers": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_buffers(buffers)"
              },
              "delete_renderbuffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "renderbuffers": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_renderbuffers(renderbuffers)"
              },
              "delete_framebuffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "framebuffers": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_framebuffers(framebuffers)"
              },
              "delete_textures": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "textures": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_textures(textures)"
              },
              "framebuffer_renderbuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "attachment": "u32"
                  },
                  {
                    "renderbuffertarget": "u32"
                  },
                  {
                    "renderbuffer": "u32"
                  }
                ],
                "fn_body": "gl.framebuffer_renderbuffer(target, attachment, renderbuffertarget, renderbuffer)"
              },
              "renderbuffer_storage": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "internalformat": "u32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.renderbuffer_storage(target, internalformat, width, height)"
              },
              "depth_func": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "func": "u32"
                  }
                ],
                "fn_body": "gl.depth_func(func)"
              },
              "active_texture": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "texture": "u32"
                  }
                ],
                "fn_body": "gl.active_texture(texture)"
              },
              "attach_shader": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "shader": "u32"
                  }
                ],
                "fn_body": "gl.attach_shader(program, shader)"
              },
              "bind_attrib_location": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "fn_body": "gl.bind_attrib_location(program, index, name)"
              },
              "get_uniform_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "result": "GLintVecRefMut"
                  }
                ],
                "fn_body": "gl.get_uniform_iv(program, location, result)"
              },
              "get_uniform_fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "result": "GLfloatVecRefMut"
                  }
                ],
                "fn_body": "gl.get_uniform_fv(program, location, result)"
              },
              "get_uniform_block_index": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.get_uniform_block_index(program, name)"
              },
              "get_uniform_indices": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "names": "RefstrVecRef"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.get_uniform_indices(program, names)"
              },
              "bind_buffer_base": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "buffer": "u32"
                  }
                ],
                "fn_body": "gl.bind_buffer_base(target, index, buffer)"
              },
              "bind_buffer_range": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "buffer": "u32"
                  },
                  {
                    "offset": "isize"
                  },
                  {
                    "size": "isize"
                  }
                ],
                "fn_body": "gl.bind_buffer_range(target, index, buffer, offset, size)"
              },
              "uniform_block_binding": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "uniform_block_index": "u32"
                  },
                  {
                    "uniform_block_binding": "u32"
                  }
                ],
                "fn_body": "gl.uniform_block_binding(program, uniform_block_index, uniform_block_binding)"
              },
              "bind_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "buffer": "u32"
                  }
                ],
                "fn_body": "gl.bind_buffer(target, buffer)"
              },
              "bind_vertex_array": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "vao": "u32"
                  }
                ],
                "fn_body": "gl.bind_vertex_array(vao)"
              },
              "bind_renderbuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "renderbuffer": "u32"
                  }
                ],
                "fn_body": "gl.bind_renderbuffer(target, renderbuffer)"
              },
              "bind_framebuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "framebuffer": "u32"
                  }
                ],
                "fn_body": "gl.bind_framebuffer(target, framebuffer)"
              },
              "bind_texture": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "texture": "u32"
                  }
                ],
                "fn_body": "gl.bind_texture(target, texture)"
              },
              "draw_buffers": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "bufs": "GLenumVecRef"
                  }
                ],
                "fn_body": "gl.draw_buffers(bufs)"
              },
              "tex_image_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "internal_format": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "border": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "opt_data": "OptionU8VecRef"
                  }
                ],
                "fn_body": "gl.tex_image_2d(target, level, internal_format, width, height, border, format, ty, opt_data)"
              },
              "compressed_tex_image_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "internal_format": "u32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "border": "i32"
                  },
                  {
                    "data": "U8VecRef"
                  }
                ],
                "fn_body": "gl.compressed_tex_image_2d(target, level, internal_format, width, height, border, data)"
              },
              "compressed_tex_sub_image_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "data": "U8VecRef"
                  }
                ],
                "fn_body": "gl.compressed_tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, data)"
              },
              "tex_image_3d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "internal_format": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "depth": "i32"
                  },
                  {
                    "border": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "opt_data": "OptionU8VecRef"
                  }
                ],
                "fn_body": "gl.tex_image_3d(target, level, internal_format, width, height, depth, border, format, ty, opt_data)"
              },
              "copy_tex_image_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "internal_format": "u32"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "border": "i32"
                  }
                ],
                "fn_body": "gl.copy_tex_image_2d(target, level, internal_format, x, y, width, height, border)"
              },
              "copy_tex_sub_image_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.copy_tex_sub_image_2d(target, level, xoffset, yoffset, x, y, width, height)"
              },
              "copy_tex_sub_image_3d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "zoffset": "i32"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.copy_tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, x, y, width, height)"
              },
              "tex_sub_image_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "data": "U8VecRef"
                  }
                ],
                "fn_body": "gl.tex_sub_image_2d(target, level, xoffset, yoffset, width, height, format, ty, data)"
              },
              "tex_sub_image_2d_pbo": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "offset": "usize"
                  }
                ],
                "fn_body": "gl.tex_sub_image_2d_pbo(target, level, xoffset, yoffset, width, height, format, ty, offset)"
              },
              "tex_sub_image_3d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "zoffset": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "depth": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "data": "U8VecRef"
                  }
                ],
                "fn_body": "gl.tex_sub_image_3d(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, data)"
              },
              "tex_sub_image_3d_pbo": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "zoffset": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "depth": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "offset": "usize"
                  }
                ],
                "fn_body": "gl.tex_sub_image_3d_pbo(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ty, offset)"
              },
              "tex_storage_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "levels": "i32"
                  },
                  {
                    "internal_format": "u32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.tex_storage_2d(target, levels, internal_format, width, height)"
              },
              "tex_storage_3d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "levels": "i32"
                  },
                  {
                    "internal_format": "u32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "depth": "i32"
                  }
                ],
                "fn_body": "gl.tex_storage_3d(target, levels, internal_format, width, height, depth)"
              },
              "get_tex_image_into_buffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "ty": "u32"
                  },
                  {
                    "output": "U8VecRefMut"
                  }
                ],
                "fn_body": "gl.get_tex_image_into_buffer(target, level, format, ty, output)"
              },
              "copy_image_sub_data": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "src_name": "u32"
                  },
                  {
                    "src_target": "u32"
                  },
                  {
                    "src_level": "i32"
                  },
                  {
                    "src_x": "i32"
                  },
                  {
                    "src_y": "i32"
                  },
                  {
                    "src_z": "i32"
                  },
                  {
                    "dst_name": "u32"
                  },
                  {
                    "dst_target": "u32"
                  },
                  {
                    "dst_level": "i32"
                  },
                  {
                    "dst_x": "i32"
                  },
                  {
                    "dst_y": "i32"
                  },
                  {
                    "dst_z": "i32"
                  },
                  {
                    "src_width": "i32"
                  },
                  {
                    "src_height": "i32"
                  },
                  {
                    "src_depth": "i32"
                  }
                ],
                "fn_body": "gl.copy_image_sub_data(src_name, src_target, src_level, src_x, src_y, src_z, dst_name, dst_target, dst_level, dst_x, dst_y, dst_z, src_width, src_height, src_depth)"
              },
              "invalidate_framebuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "attachments": "GLenumVecRef"
                  }
                ],
                "fn_body": "gl.invalidate_framebuffer(target, attachments)"
              },
              "invalidate_sub_framebuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "attachments": "GLenumVecRef"
                  },
                  {
                    "xoffset": "i32"
                  },
                  {
                    "yoffset": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.invalidate_sub_framebuffer(target, attachments, xoffset, yoffset, width, height)"
              },
              "get_integer_v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "result": "GLintVecRefMut"
                  }
                ],
                "fn_body": "gl.get_integer_v(name, result)"
              },
              "get_integer_64v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "result": "GLint64VecRefMut"
                  }
                ],
                "fn_body": "gl.get_integer_64v(name, result)"
              },
              "get_integer_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "result": "GLintVecRefMut"
                  }
                ],
                "fn_body": "gl.get_integer_iv(name, index, result)"
              },
              "get_integer_64iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "result": "GLint64VecRefMut"
                  }
                ],
                "fn_body": "gl.get_integer_64iv(name, index, result)"
              },
              "get_boolean_v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "result": "GLbooleanVecRefMut"
                  }
                ],
                "fn_body": "gl.get_boolean_v(name, result)"
              },
              "get_float_v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "name": "u32"
                  },
                  {
                    "result": "GLfloatVecRefMut"
                  }
                ],
                "fn_body": "gl.get_float_v(name, result)"
              },
              "get_framebuffer_attachment_parameter_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "attachment": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_framebuffer_attachment_parameter_iv(target, attachment, pname)"
              },
              "get_renderbuffer_parameter_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_renderbuffer_parameter_iv(target, pname)"
              },
              "get_tex_parameter_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "name": "u32"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_tex_parameter_iv(target, name)"
              },
              "get_tex_parameter_fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "name": "u32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "gl.get_tex_parameter_fv(target, name)"
              },
              "tex_parameter_i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "param": "i32"
                  }
                ],
                "fn_body": "gl.tex_parameter_i(target, pname, param)"
              },
              "tex_parameter_f": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "param": "f32"
                  }
                ],
                "fn_body": "gl.tex_parameter_f(target, pname, param)"
              },
              "framebuffer_texture_2d": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "attachment": "u32"
                  },
                  {
                    "textarget": "u32"
                  },
                  {
                    "texture": "u32"
                  },
                  {
                    "level": "i32"
                  }
                ],
                "fn_body": "gl.framebuffer_texture_2d(target, attachment, textarget, texture, level)"
              },
              "framebuffer_texture_layer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "attachment": "u32"
                  },
                  {
                    "texture": "u32"
                  },
                  {
                    "level": "i32"
                  },
                  {
                    "layer": "i32"
                  }
                ],
                "fn_body": "gl.framebuffer_texture_layer(target, attachment, texture, level, layer)"
              },
              "blit_framebuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "src_x0": "i32"
                  },
                  {
                    "src_y0": "i32"
                  },
                  {
                    "src_x1": "i32"
                  },
                  {
                    "src_y1": "i32"
                  },
                  {
                    "dst_x0": "i32"
                  },
                  {
                    "dst_y0": "i32"
                  },
                  {
                    "dst_x1": "i32"
                  },
                  {
                    "dst_y1": "i32"
                  },
                  {
                    "mask": "u32"
                  },
                  {
                    "filter": "u32"
                  }
                ],
                "fn_body": "gl.blit_framebuffer(src_x0, src_y0, src_x1, src_y1, dst_x0, dst_y0, dst_x1, dst_y1, mask, filter)"
              },
              "vertex_attrib_4f": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "x": "f32"
                  },
                  {
                    "y": "f32"
                  },
                  {
                    "z": "f32"
                  },
                  {
                    "w": "f32"
                  }
                ],
                "fn_body": "gl.vertex_attrib_4f(index, x, y, z, w)"
              },
              "vertex_attrib_pointer_f32": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "size": "i32"
                  },
                  {
                    "normalized": "bool"
                  },
                  {
                    "stride": "i32"
                  },
                  {
                    "offset": "u32"
                  }
                ],
                "fn_body": "gl.vertex_attrib_pointer_f32(index, size, normalized, stride, offset)"
              },
              "vertex_attrib_pointer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "size": "i32"
                  },
                  {
                    "type_": "u32"
                  },
                  {
                    "normalized": "bool"
                  },
                  {
                    "stride": "i32"
                  },
                  {
                    "offset": "u32"
                  }
                ],
                "fn_body": "gl.vertex_attrib_pointer(index, size, type_, normalized, stride, offset)"
              },
              "vertex_attrib_i_pointer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "size": "i32"
                  },
                  {
                    "type_": "u32"
                  },
                  {
                    "stride": "i32"
                  },
                  {
                    "offset": "u32"
                  }
                ],
                "fn_body": "gl.vertex_attrib_i_pointer(index, size, type_, stride, offset)"
              },
              "vertex_attrib_divisor": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "divisor": "u32"
                  }
                ],
                "fn_body": "gl.vertex_attrib_divisor(index, divisor)"
              },
              "viewport": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.viewport(x, y, width, height)"
              },
              "scissor": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  }
                ],
                "fn_body": "gl.scissor(x, y, width, height)"
              },
              "line_width": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "width": "f32"
                  }
                ],
                "fn_body": "gl.line_width(width)"
              },
              "use_program": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  }
                ],
                "fn_body": "gl.use_program(program)"
              },
              "validate_program": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  }
                ],
                "fn_body": "gl.validate_program(program)"
              },
              "draw_arrays": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  },
                  {
                    "first": "i32"
                  },
                  {
                    "count": "i32"
                  }
                ],
                "fn_body": "gl.draw_arrays(mode, first, count)"
              },
              "draw_arrays_instanced": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  },
                  {
                    "first": "i32"
                  },
                  {
                    "count": "i32"
                  },
                  {
                    "primcount": "i32"
                  }
                ],
                "fn_body": "gl.draw_arrays_instanced(mode, first, count, primcount)"
              },
              "draw_elements": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  },
                  {
                    "count": "i32"
                  },
                  {
                    "element_type": "u32"
                  },
                  {
                    "indices_offset": "u32"
                  }
                ],
                "fn_body": "gl.draw_elements(mode, count, element_type, indices_offset)"
              },
              "draw_elements_instanced": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  },
                  {
                    "count": "i32"
                  },
                  {
                    "element_type": "u32"
                  },
                  {
                    "indices_offset": "u32"
                  },
                  {
                    "primcount": "i32"
                  }
                ],
                "fn_body": "gl.draw_elements_instanced(mode, count, element_type, indices_offset, primcount)"
              },
              "blend_color": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "r": "f32"
                  },
                  {
                    "g": "f32"
                  },
                  {
                    "b": "f32"
                  },
                  {
                    "a": "f32"
                  }
                ],
                "fn_body": "gl.blend_color(r, g, b, a)"
              },
              "blend_func": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "sfactor": "u32"
                  },
                  {
                    "dfactor": "u32"
                  }
                ],
                "fn_body": "gl.blend_func(sfactor, dfactor)"
              },
              "blend_func_separate": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "src_rgb": "u32"
                  },
                  {
                    "dest_rgb": "u32"
                  },
                  {
                    "src_alpha": "u32"
                  },
                  {
                    "dest_alpha": "u32"
                  }
                ],
                "fn_body": "gl.blend_func_separate(src_rgb, dest_rgb, src_alpha, dest_alpha)"
              },
              "blend_equation": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  }
                ],
                "fn_body": "gl.blend_equation(mode)"
              },
              "blend_equation_separate": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode_rgb": "u32"
                  },
                  {
                    "mode_alpha": "u32"
                  }
                ],
                "fn_body": "gl.blend_equation_separate(mode_rgb, mode_alpha)"
              },
              "color_mask": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "r": "bool"
                  },
                  {
                    "g": "bool"
                  },
                  {
                    "b": "bool"
                  },
                  {
                    "a": "bool"
                  }
                ],
                "fn_body": "gl.color_mask(r, g, b, a)"
              },
              "cull_face": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  }
                ],
                "fn_body": "gl.cull_face(mode)"
              },
              "front_face": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  }
                ],
                "fn_body": "gl.front_face(mode)"
              },
              "enable": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "cap": "u32"
                  }
                ],
                "fn_body": "gl.enable(cap)"
              },
              "disable": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "cap": "u32"
                  }
                ],
                "fn_body": "gl.disable(cap)"
              },
              "hint": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "param_name": "u32"
                  },
                  {
                    "param_val": "u32"
                  }
                ],
                "fn_body": "gl.hint(param_name, param_val)"
              },
              "is_enabled": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "cap": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.is_enabled(cap)"
              },
              "is_shader": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.is_shader(shader)"
              },
              "is_texture": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "texture": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.is_texture(texture)"
              },
              "is_framebuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "framebuffer": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.is_framebuffer(framebuffer)"
              },
              "is_renderbuffer": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "renderbuffer": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.is_renderbuffer(renderbuffer)"
              },
              "check_frame_buffer_status": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.check_frame_buffer_status(target)"
              },
              "enable_vertex_attrib_array": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  }
                ],
                "fn_body": "gl.enable_vertex_attrib_array(index)"
              },
              "disable_vertex_attrib_array": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  }
                ],
                "fn_body": "gl.disable_vertex_attrib_array(index)"
              },
              "uniform_1f": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "f32"
                  }
                ],
                "fn_body": "gl.uniform_1f(location, v0)"
              },
              "uniform_1fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_1fv(location, values)"
              },
              "uniform_1i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "i32"
                  }
                ],
                "fn_body": "gl.uniform_1i(location, v0)"
              },
              "uniform_1iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "I32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_1iv(location, values)"
              },
              "uniform_1ui": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "u32"
                  }
                ],
                "fn_body": "gl.uniform_1ui(location, v0)"
              },
              "uniform_2f": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "f32"
                  },
                  {
                    "v1": "f32"
                  }
                ],
                "fn_body": "gl.uniform_2f(location, v0, v1)"
              },
              "uniform_2fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_2fv(location, values)"
              },
              "uniform_2i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "i32"
                  },
                  {
                    "v1": "i32"
                  }
                ],
                "fn_body": "gl.uniform_2i(location, v0, v1)"
              },
              "uniform_2iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "I32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_2iv(location, values)"
              },
              "uniform_2ui": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "u32"
                  },
                  {
                    "v1": "u32"
                  }
                ],
                "fn_body": "gl.uniform_2ui(location, v0, v1)"
              },
              "uniform_3f": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "f32"
                  },
                  {
                    "v1": "f32"
                  },
                  {
                    "v2": "f32"
                  }
                ],
                "fn_body": "gl.uniform_3f(location, v0, v1, v2)"
              },
              "uniform_3fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_3fv(location, values)"
              },
              "uniform_3i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "i32"
                  },
                  {
                    "v1": "i32"
                  },
                  {
                    "v2": "i32"
                  }
                ],
                "fn_body": "gl.uniform_3i(location, v0, v1, v2)"
              },
              "uniform_3iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "I32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_3iv(location, values)"
              },
              "uniform_3ui": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "v0": "u32"
                  },
                  {
                    "v1": "u32"
                  },
                  {
                    "v2": "u32"
                  }
                ],
                "fn_body": "gl.uniform_3ui(location, v0, v1, v2)"
              },
              "uniform_4f": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "x": "f32"
                  },
                  {
                    "y": "f32"
                  },
                  {
                    "z": "f32"
                  },
                  {
                    "w": "f32"
                  }
                ],
                "fn_body": "gl.uniform_4f(location, x, y, z, w)"
              },
              "uniform_4i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "z": "i32"
                  },
                  {
                    "w": "i32"
                  }
                ],
                "fn_body": "gl.uniform_4i(location, x, y, z, w)"
              },
              "uniform_4iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "I32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_4iv(location, values)"
              },
              "uniform_4ui": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "x": "u32"
                  },
                  {
                    "y": "u32"
                  },
                  {
                    "z": "u32"
                  },
                  {
                    "w": "u32"
                  }
                ],
                "fn_body": "gl.uniform_4ui(location, x, y, z, w)"
              },
              "uniform_4fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "values": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_4fv(location, values)"
              },
              "uniform_matrix_2fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "transpose": "bool"
                  },
                  {
                    "value": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_matrix_2fv(location, transpose, value)"
              },
              "uniform_matrix_3fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "transpose": "bool"
                  },
                  {
                    "value": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_matrix_3fv(location, transpose, value)"
              },
              "uniform_matrix_4fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "location": "i32"
                  },
                  {
                    "transpose": "bool"
                  },
                  {
                    "value": "F32VecRef"
                  }
                ],
                "fn_body": "gl.uniform_matrix_4fv(location, transpose, value)"
              },
              "depth_mask": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "flag": "bool"
                  }
                ],
                "fn_body": "gl.depth_mask(flag)"
              },
              "depth_range": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "near": "f64"
                  },
                  {
                    "far": "f64"
                  }
                ],
                "fn_body": "gl.depth_range(near, far)"
              },
              "get_active_attrib": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "index": "u32"
                  }
                ],
                "returns": {
                  "type": "GetActiveAttribReturn"
                },
                "fn_body": "gl.get_active_attrib(program, index)"
              },
              "get_active_uniform": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "index": "u32"
                  }
                ],
                "returns": {
                  "type": "GetActiveUniformReturn"
                },
                "fn_body": "gl.get_active_uniform(program, index)"
              },
              "get_active_uniforms_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "indices": "GLuintVec"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "GLintVec"
                },
                "fn_body": "gl.get_active_uniforms_iv(program, indices, pname)"
              },
              "get_active_uniform_block_i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_active_uniform_block_i(program, index, pname)"
              },
              "get_active_uniform_block_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "GLintVec"
                },
                "fn_body": "gl.get_active_uniform_block_iv(program, index, pname)"
              },
              "get_active_uniform_block_name": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "index": "u32"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "gl.get_active_uniform_block_name(program, index)"
              },
              "get_attrib_location": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_attrib_location(program, name)"
              },
              "get_frag_data_location": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_frag_data_location(program, name)"
              },
              "get_uniform_location": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_uniform_location(program, name)"
              },
              "get_program_info_log": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "gl.get_program_info_log(program)"
              },
              "get_program_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "result": "GLintVecRefMut"
                  }
                ],
                "fn_body": "gl.get_program_iv(program, pname, result)"
              },
              "get_program_binary": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  }
                ],
                "returns": {
                  "type": "GetProgramBinaryReturn"
                },
                "fn_body": "gl.get_program_binary(program)"
              },
              "program_binary": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "format": "u32"
                  },
                  {
                    "binary": "U8VecRef"
                  }
                ],
                "fn_body": "gl.program_binary(program, format, binary)"
              },
              "program_parameter_i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "value": "i32"
                  }
                ],
                "fn_body": "gl.program_parameter_i(program, pname, value)"
              },
              "get_vertex_attrib_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "result": "GLintVecRefMut"
                  }
                ],
                "fn_body": "gl.get_vertex_attrib_iv(index, pname, result)"
              },
              "get_vertex_attrib_fv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "result": "GLfloatVecRefMut"
                  }
                ],
                "fn_body": "gl.get_vertex_attrib_fv(index, pname, result)"
              },
              "get_vertex_attrib_pointer_v": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "isize"
                },
                "fn_body": "gl.get_vertex_attrib_pointer_v(index, pname)"
              },
              "get_buffer_parameter_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "pname": "u32"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_buffer_parameter_iv(target, pname)"
              },
              "get_shader_info_log": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader": "u32"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "gl.get_shader_info_log(shader)"
              },
              "get_string": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "which": "u32"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "gl.get_string(which)"
              },
              "get_string_i": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "which": "u32"
                  },
                  {
                    "index": "u32"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "gl.get_string_i(which, index)"
              },
              "get_shader_iv": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader": "u32"
                  },
                  {
                    "pname": "u32"
                  },
                  {
                    "result": "GLintVecRefMut"
                  }
                ],
                "fn_body": "gl.get_shader_iv(shader, pname, result)"
              },
              "get_shader_precision_format": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader_type": "u32"
                  },
                  {
                    "precision_type": "u32"
                  }
                ],
                "returns": {
                  "type": "GlShaderPrecisionFormatReturn"
                },
                "fn_body": "gl.get_shader_precision_format(shader_type, precision_type)"
              },
              "compile_shader": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader": "u32"
                  }
                ],
                "fn_body": "gl.compile_shader(shader)"
              },
              "create_program": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.create_program()"
              },
              "delete_program": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  }
                ],
                "fn_body": "gl.delete_program(program)"
              },
              "create_shader": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader_type": "u32"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.create_shader(shader_type)"
              },
              "delete_shader": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "shader": "u32"
                  }
                ],
                "fn_body": "gl.delete_shader(shader)"
              },
              "detach_shader": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "shader": "u32"
                  }
                ],
                "fn_body": "gl.detach_shader(program, shader)"
              },
              "link_program": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  }
                ],
                "fn_body": "gl.link_program(program)"
              },
              "clear_color": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "r": "f32"
                  },
                  {
                    "g": "f32"
                  },
                  {
                    "b": "f32"
                  },
                  {
                    "a": "f32"
                  }
                ],
                "fn_body": "gl.clear_color(r, g, b, a)"
              },
              "clear": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "buffer_mask": "u32"
                  }
                ],
                "fn_body": "gl.clear(buffer_mask)"
              },
              "clear_depth": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "depth": "f64"
                  }
                ],
                "fn_body": "gl.clear_depth(depth)"
              },
              "clear_stencil": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "s": "i32"
                  }
                ],
                "fn_body": "gl.clear_stencil(s)"
              },
              "flush": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "fn_body": "gl.flush()"
              },
              "finish": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "fn_body": "gl.finish()"
              },
              "get_error": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.get_error()"
              },
              "stencil_mask": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mask": "u32"
                  }
                ],
                "fn_body": "gl.stencil_mask(mask)"
              },
              "stencil_mask_separate": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "face": "u32"
                  },
                  {
                    "mask": "u32"
                  }
                ],
                "fn_body": "gl.stencil_mask_separate(face, mask)"
              },
              "stencil_func": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "func": "u32"
                  },
                  {
                    "ref_": "i32"
                  },
                  {
                    "mask": "u32"
                  }
                ],
                "fn_body": "gl.stencil_func(func, ref_, mask)"
              },
              "stencil_func_separate": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "face": "u32"
                  },
                  {
                    "func": "u32"
                  },
                  {
                    "ref_": "i32"
                  },
                  {
                    "mask": "u32"
                  }
                ],
                "fn_body": "gl.stencil_func_separate(face, func, ref_, mask)"
              },
              "stencil_op": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "sfail": "u32"
                  },
                  {
                    "dpfail": "u32"
                  },
                  {
                    "dppass": "u32"
                  }
                ],
                "fn_body": "gl.stencil_op(sfail, dpfail, dppass)"
              },
              "stencil_op_separate": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "face": "u32"
                  },
                  {
                    "sfail": "u32"
                  },
                  {
                    "dpfail": "u32"
                  },
                  {
                    "dppass": "u32"
                  }
                ],
                "fn_body": "gl.stencil_op_separate(face, sfail, dpfail, dppass)"
              },
              "egl_image_target_texture2d_oes": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "image": "GlVoidPtrConst"
                  }
                ],
                "fn_body": "gl.egl_image_target_texture2d_oes(target, image)"
              },
              "generate_mipmap": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  }
                ],
                "fn_body": "gl.generate_mipmap(target)"
              },
              "insert_event_marker_ext": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "message": "Refstr"
                  }
                ],
                "fn_body": "gl.insert_event_marker_ext(message)"
              },
              "push_group_marker_ext": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "message": "Refstr"
                  }
                ],
                "fn_body": "gl.push_group_marker_ext(message)"
              },
              "pop_group_marker_ext": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "fn_body": "gl.pop_group_marker_ext()"
              },
              "debug_message_insert_khr": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "source": "u32"
                  },
                  {
                    "type_": "u32"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "severity": "u32"
                  },
                  {
                    "message": "Refstr"
                  }
                ],
                "fn_body": "gl.debug_message_insert_khr(source, type_, id, severity, message)"
              },
              "push_debug_group_khr": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "source": "u32"
                  },
                  {
                    "id": "u32"
                  },
                  {
                    "message": "Refstr"
                  }
                ],
                "fn_body": "gl.push_debug_group_khr(source, id, message)"
              },
              "pop_debug_group_khr": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "fn_body": "gl.pop_debug_group_khr()"
              },
              "fence_sync": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "condition": "u32"
                  },
                  {
                    "flags": "u32"
                  }
                ],
                "returns": {
                  "type": "GLsyncPtr"
                },
                "fn_body": "gl.fence_sync(condition, flags)"
              },
              "client_wait_sync": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "sync": "GLsyncPtr"
                  },
                  {
                    "flags": "u32"
                  },
                  {
                    "timeout": "u64"
                  }
                ],
                "returns": {
                  "type": "u32"
                },
                "fn_body": "gl.client_wait_sync(sync, flags, timeout)"
              },
              "wait_sync": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "sync": "GLsyncPtr"
                  },
                  {
                    "flags": "u32"
                  },
                  {
                    "timeout": "u64"
                  }
                ],
                "fn_body": "gl.wait_sync(sync, flags, timeout)"
              },
              "delete_sync": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "sync": "GLsyncPtr"
                  }
                ],
                "fn_body": "gl.delete_sync(sync)"
              },
              "texture_range_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "data": "U8VecRef"
                  }
                ],
                "fn_body": "gl.texture_range_apple(target, data)"
              },
              "gen_fences_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_fences_apple(n)"
              },
              "delete_fences_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fences": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_fences_apple(fences)"
              },
              "set_fence_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fence": "u32"
                  }
                ],
                "fn_body": "gl.set_fence_apple(fence)"
              },
              "finish_fence_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fence": "u32"
                  }
                ],
                "fn_body": "gl.finish_fence_apple(fence)"
              },
              "test_fence_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fence": "u32"
                  }
                ],
                "fn_body": "gl.test_fence_apple(fence)"
              },
              "test_object_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "object": "u32"
                  },
                  {
                    "name": "u32"
                  }
                ],
                "returns": {
                  "type": "u8"
                },
                "fn_body": "gl.test_object_apple(object, name)"
              },
              "finish_object_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "object": "u32"
                  },
                  {
                    "name": "u32"
                  }
                ],
                "fn_body": "gl.finish_object_apple(object, name)"
              },
              "get_frag_data_index": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "returns": {
                  "type": "i32"
                },
                "fn_body": "gl.get_frag_data_index(program, name)"
              },
              "blend_barrier_khr": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "fn_body": "gl.blend_barrier_khr()"
              },
              "bind_frag_data_location_indexed": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "program": "u32"
                  },
                  {
                    "color_number": "u32"
                  },
                  {
                    "index": "u32"
                  },
                  {
                    "name": "Refstr"
                  }
                ],
                "fn_body": "gl.bind_frag_data_location_indexed(program, color_number, index, name)"
              },
              "get_debug_messages": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzDebugMessageVec"
                },
                "fn_body": "gl.get_debug_messages()"
              },
              "provoking_vertex_angle": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "mode": "u32"
                  }
                ],
                "fn_body": "gl.provoking_vertex_angle(mode)"
              },
              "gen_vertex_arrays_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "n": "i32"
                  }
                ],
                "returns": {
                  "type": "GLuintVec"
                },
                "fn_body": "gl.gen_vertex_arrays_apple(n)"
              },
              "bind_vertex_array_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "vao": "u32"
                  }
                ],
                "fn_body": "gl.bind_vertex_array_apple(vao)"
              },
              "delete_vertex_arrays_apple": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "vertex_arrays": "GLuintVecRef"
                  }
                ],
                "fn_body": "gl.delete_vertex_arrays_apple(vertex_arrays)"
              },
              "copy_texture_chromium": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "source_id": "u32"
                  },
                  {
                    "source_level": "i32"
                  },
                  {
                    "dest_target": "u32"
                  },
                  {
                    "dest_id": "u32"
                  },
                  {
                    "dest_level": "i32"
                  },
                  {
                    "internal_format": "i32"
                  },
                  {
                    "dest_type": "u32"
                  },
                  {
                    "unpack_flip_y": "u8"
                  },
                  {
                    "unpack_premultiply_alpha": "u8"
                  },
                  {
                    "unpack_unmultiply_alpha": "u8"
                  }
                ],
                "fn_body": "gl.copy_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
              },
              "copy_sub_texture_chromium": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "source_id": "u32"
                  },
                  {
                    "source_level": "i32"
                  },
                  {
                    "dest_target": "u32"
                  },
                  {
                    "dest_id": "u32"
                  },
                  {
                    "dest_level": "i32"
                  },
                  {
                    "x_offset": "i32"
                  },
                  {
                    "y_offset": "i32"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "unpack_flip_y": "u8"
                  },
                  {
                    "unpack_premultiply_alpha": "u8"
                  },
                  {
                    "unpack_unmultiply_alpha": "u8"
                  }
                ],
                "fn_body": "gl.copy_sub_texture_chromium(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, x, y, width, height, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
              },
              "egl_image_target_renderbuffer_storage_oes": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "image": "GlVoidPtrConst"
                  }
                ],
                "fn_body": "gl.egl_image_target_renderbuffer_storage_oes(target, image)"
              },
              "copy_texture_3d_angle": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "source_id": "u32"
                  },
                  {
                    "source_level": "i32"
                  },
                  {
                    "dest_target": "u32"
                  },
                  {
                    "dest_id": "u32"
                  },
                  {
                    "dest_level": "i32"
                  },
                  {
                    "internal_format": "i32"
                  },
                  {
                    "dest_type": "u32"
                  },
                  {
                    "unpack_flip_y": "u8"
                  },
                  {
                    "unpack_premultiply_alpha": "u8"
                  },
                  {
                    "unpack_unmultiply_alpha": "u8"
                  }
                ],
                "fn_body": "gl.copy_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, internal_format, dest_type, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
              },
              "copy_sub_texture_3d_angle": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "source_id": "u32"
                  },
                  {
                    "source_level": "i32"
                  },
                  {
                    "dest_target": "u32"
                  },
                  {
                    "dest_id": "u32"
                  },
                  {
                    "dest_level": "i32"
                  },
                  {
                    "x_offset": "i32"
                  },
                  {
                    "y_offset": "i32"
                  },
                  {
                    "z_offset": "i32"
                  },
                  {
                    "x": "i32"
                  },
                  {
                    "y": "i32"
                  },
                  {
                    "z": "i32"
                  },
                  {
                    "width": "i32"
                  },
                  {
                    "height": "i32"
                  },
                  {
                    "depth": "i32"
                  },
                  {
                    "unpack_flip_y": "u8"
                  },
                  {
                    "unpack_premultiply_alpha": "u8"
                  },
                  {
                    "unpack_unmultiply_alpha": "u8"
                  }
                ],
                "fn_body": "gl.copy_sub_texture_3d_angle(source_id, source_level, dest_target, dest_id, dest_level, x_offset, y_offset, z_offset, x, y, z, width, height, depth, unpack_flip_y, unpack_premultiply_alpha, unpack_unmultiply_alpha)"
              },
              "buffer_storage": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "size": "isize"
                  },
                  {
                    "data": "GlVoidPtrConst"
                  },
                  {
                    "flags": "u32"
                  }
                ],
                "fn_body": "gl.buffer_storage(target, size, data, flags)"
              },
              "flush_mapped_buffer_range": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target": "u32"
                  },
                  {
                    "offset": "isize"
                  },
                  {
                    "length": "isize"
                  }
                ],
                "fn_body": "gl.flush_mapped_buffer_range(target, offset, length)"
              }
            }
          },
          "AzGlType": {
            "external": "azul_core::gl::AzGlType",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Gl": {},
                "Gles": {}
              }
            ]
          },
          "U8VecRef": {
            "doc": "C-ABI stable reexport of `&[u8]`",
            "external": "azul_core::gl::U8VecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u8"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "U8VecRefMut": {
            "doc": "C-ABI stable reexport of `&mut [u8]`",
            "external": "azul_core::gl::U8VecRefMut",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*mut u8"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "F32VecRef": {
            "doc": "C-ABI stable reexport of `&[f32]`",
            "external": "azul_core::gl::F32VecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const f32"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "I32VecRef": {
            "doc": "C-ABI stable reexport of `&[i32]`",
            "external": "azul_core::gl::I32VecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const i32"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GLuintVecRef": {
            "doc": "C-ABI stable reexport of `&[GLuint]` aka `&[u32]`",
            "external": "azul_core::gl::GLuintVecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u32"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GLenumVecRef": {
            "doc": "C-ABI stable reexport of `&[GLenum]` aka `&[u32]`",
            "external": "azul_core::gl::GLenumVecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u32"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GLintVecRefMut": {
            "doc": "C-ABI stable reexport of `&mut [GLint]` aka `&mut [i32]`",
            "external": "azul_core::gl::GLintVecRefMut",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*mut i32"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GLint64VecRefMut": {
            "doc": "C-ABI stable reexport of `&mut [GLint64]` aka `&mut [i64]`",
            "external": "azul_core::gl::GLint64VecRefMut",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*mut i64"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GLbooleanVecRefMut": {
            "doc": "C-ABI stable reexport of `&mut [GLboolean]` aka `&mut [u8]`",
            "external": "azul_core::gl::GLbooleanVecRefMut",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*mut u8"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GLfloatVecRefMut": {
            "doc": "C-ABI stable reexport of `&mut [GLfloat]` aka `&mut [f32]`",
            "external": "azul_core::gl::GLfloatVecRefMut",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*mut f32"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "RefstrVecRef": {
            "doc": "C-ABI stable reexport of `&[Refstr]` aka `&mut [&str]`",
            "external": "azul_core::gl::RefstrVecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const Refstr"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "Refstr": {
            "doc": "C-ABI stable reexport of `&str`",
            "external": "azul_core::gl::Refstr",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u8"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "GetProgramBinaryReturn": {
            "doc": "C-ABI stable reexport of `(U8Vec, u32)`",
            "external": "azul_core::gl::GetProgramBinaryReturn",
            "struct_fields": [
              {
                "_0": {
                  "type": "U8Vec"
                },
                "_1": {
                  "type": "u32"
                }
              }
            ]
          },
          "GetActiveAttribReturn": {
            "doc": "C-ABI stable reexport of `(i32, u32, AzString)`",
            "external": "azul_core::gl::GetActiveAttribReturn",
            "struct_fields": [
              {
                "_0": {
                  "type": "i32"
                },
                "_1": {
                  "type": "u32"
                },
                "_2": {
                  "type": "AzString"
                }
              }
            ]
          },
          "GLsyncPtr": {
            "doc": "C-ABI stable reexport of `*const gleam::gl::GLsync`",
            "external": "azul_core::gl::GLsyncPtr",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const c_void"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ]
          },
          "GetActiveUniformReturn": {
            "doc": "C-ABI stable reexport of `(i32, u32, AzString)`",
            "external": "azul_core::gl::GetActiveUniformReturn",
            "struct_fields": [
              {
                "_0": {
                  "type": "i32"
                },
                "_1": {
                  "type": "u32"
                },
                "_2": {
                  "type": "AzString"
                }
              }
            ]
          },
          "AzDebugMessage": {
            "external": "azul_core::gl::AzDebugMessage",
            "struct_fields": [
              {
                "message": {
                  "type": "AzString"
                },
                "source": {
                  "type": "GLenum"
                },
                "ty": {
                  "type": "GLenum"
                },
                "id": {
                  "type": "GLenum"
                },
                "severity": {
                  "type": "GLenum"
                }
              }
            ]
          },
          "GLuint": {
            "external": "azul_core::gl::GLuint"
          },
          "GLenum": {
            "external": "azul_core::gl::GLenum"
          },
          "GLvoid": {
            "external": "azul_core::gl::GLvoid"
          },
          "GLint": {
            "external": "azul_core::gl::GLint"
          },
          "GLsizei": {
            "external": "azul_core::gl::GLsizei"
          },
          "GLboolean": {
            "external": "azul_core::gl::GLboolean"
          }
        }
      },
      "image": {
        "doc": "Struct definitions for image loading",
        "classes": {
          "ImageRef": {
            "external": "azul_core::app_resources::ImageRef",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "data": {
                  "type": "*const DecodedImage",
                  "doc": "Shared pointer to an opaque implementation of the decoded image"
                },
                "copies": {
                  "type": "*const AtomicUsize",
                  "doc": "How many copies does this image have (if 0, the font data will be deleted on drop)"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "null_image": {
                "doc": "Creates an \"invalid\" image with a width and height that reserves an image key, but does not render anything",
                "fn_args": [
                  {
                    "width": "usize"
                  },
                  {
                    "height": "usize"
                  },
                  {
                    "format": "RawImageFormat"
                  },
                  {
                    "tag": "U8Vec"
                  }
                ],
                "fn_body": "AzImageRef::null_image(width, height, format, tag.as_ref().to_vec())"
              },
              "raw_image": {
                "doc": "Creates an image reference from a CPU-backed buffer",
                "fn_args": [
                  {
                    "data": "RawImage"
                  }
                ],
                "returns": {
                  "type": "OptionImageRef"
                },
                "fn_body": "AzImageRef::new_rawimage(data).into()"
              },
              "gl_texture": {
                "doc": "Creates an image reference from an OpenGL texture",
                "fn_args": [
                  {
                    "texture": "Texture"
                  }
                ],
                "fn_body": "AzImageRef::new_gltexture(texture)"
              },
              "callback": {
                "doc": "Creates an image reference from a callback that is going to be rendered with the given nodes computed size",
                "fn_args": [
                  {
                    "data": "RefAny"
                  },
                  {
                    "callback": "RenderImageCallbackType"
                  }
                ],
                "fn_body": "AzImageRef::callback(callback, data)"
              }
            },
            "functions": {
              "clone_bytes": {
                "doc": "Creates a new copy of the image bytes instead of shallow-copying the reference",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ImageRef"
                },
                "fn_body": "imageref.deep_copy()"
              },
              "is_invalid": {
                "doc": "Returns whether the image is a null (invalid) image",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "imageref.is_null_image()"
              },
              "is_gl_texture": {
                "doc": "Returns whether the image is a GL texture",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "imageref.is_gl_texture()"
              },
              "is_raw_image": {
                "doc": "Returns whether the image is a raw (CPU-decoded) image",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "imageref.is_raw_image()"
              },
              "is_callback": {
                "doc": "Returns whether the image is a `RenderImageCallback`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "imageref.is_callback()"
              },
              "get_raw_image": {
                "doc": "If the image is a RawImage, returns a COPY of the internal image bytes (useful for encoding the RawImage / exporting the ImageRef to a file)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionRawImage"
                },
                "fn_body": "imageref.get_rawimage().into()"
              },
              "get_hash": {
                "doc": "Returns the hash of the ImageRef (fast)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u64"
                },
                "fn_body": "imageref.get_hash().0 as u64"
              }
            }
          },
          "RawImage": {
            "external": "azul_core::app_resources::RawImage",
            "struct_fields": [
              {
                "pixels": {
                  "type": "RawImageData"
                },
                "width": {
                  "type": "usize"
                },
                "height": {
                  "type": "usize"
                },
                "premultiplied_alpha": {
                  "type": "bool"
                },
                "data_format": {
                  "type": "RawImageFormat"
                },
                "tag": {
                  "type": "U8Vec"
                }
              }
            ],
            "constructors": {
              "empty": {
                "doc": "Returns a zero-sized image",
                "fn_args": [],
                "fn_body": "AzRawImage::null_image()"
              },
              "allocate_clip_mask": {
                "doc": "Allocates a width * height, single-channel image with zeroed bytes",
                "fn_args": [
                  {
                    "size": "LayoutSize"
                  }
                ],
                "fn_body": "AzRawImage::allocate_mask(size)"
              },
              "decode_image_bytes_any": {
                "doc": "Decodes a RawImage from any supported image format - automatically guesses the format based on magic header",
                "fn_args": [
                  {
                    "bytes": "U8VecRef"
                  }
                ],
                "returns": {
                  "type": "ResultRawImageDecodeImageError"
                },
                "fn_body": "azul_layout::image::decode::decode_raw_image_from_any_bytes(bytes.as_slice())"
              }
            },
            "functions": {
              "draw_clip_mask": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "node": "SvgNode"
                  },
                  {
                    "style": "SvgStyle"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "azul_layout::xml::svg::render_node_clipmask_cpu(rawimage, &node, style).is_some()"
              },
              "encode_bmp": {
                "doc": "Encodes the RawImage in the BMP image format",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_bmp(rawimage)"
              },
              "encode_png": {
                "doc": "Encodes the RawImage in the PNG image format",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_png(rawimage)"
              },
              "encode_jpeg": {
                "doc": "Encodes the RawImage in the JPG image format",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "quality": "u8",
                    "doc": "Output JPEG quality, value from 0 to 100"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_jpeg(rawimage, quality)"
              },
              "encode_tga": {
                "doc": "Encodes the RawImage in the TGA image format",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_tga(rawimage)"
              },
              "encode_pnm": {
                "doc": "Encodes the RawImage in the PNM image format",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_pnm(rawimage)"
              },
              "encode_gif": {
                "doc": "Encodes the RawImage in the GIF image format",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_gif(rawimage)"
              },
              "encode_tiff": {
                "doc": "Encodes the RawImage in the TIFF image format",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "ResultU8VecEncodeImageError"
                },
                "fn_body": "azul_layout::image::encode::encode_tiff(rawimage)"
              }
            }
          },
          "ImageMask": {
            "external": "azul_core::app_resources::ImageMask",
            "struct_fields": [
              {
                "image": {
                  "type": "ImageRef"
                },
                "rect": {
                  "type": "LogicalRect"
                },
                "repeat": {
                  "type": "bool"
                }
              }
            ]
          },
          "RawImageFormat": {
            "external": "azul_core::app_resources::RawImageFormat",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "R8": {},
                "RG8": {},
                "RGB8": {},
                "RGBA8": {},
                "R16": {},
                "RG16": {},
                "RGB16": {},
                "RGBA16": {},
                "BGR8": {},
                "BGRA8": {},
                "RGBF32": {},
                "RGBAF32": {}
              }
            ]
          },
          "EncodeImageError": {
            "external": "azul_layout::image::encode::EncodeImageError",
            "enum_fields": [
              {
                "EncoderNotAvailable": {
                  "doc": "Crate was not compiled with the given encoder flags"
                },
                "InsufficientMemory": {},
                "DimensionError": {},
                "InvalidData": {},
                "Unknown": {}
              }
            ]
          },
          "DecodeImageError": {
            "external": "azul_layout::image::decode::DecodeImageError",
            "enum_fields": [
              {
                "InsufficientMemory": {},
                "DimensionError": {},
                "UnsupportedImageFormat": {},
                "Unknown": {}
              }
            ]
          },
          "RawImageData": {
            "external": "azul_core::app_resources::RawImageData",
            "enum_fields": [
              {
                "U8": {
                  "type": "U8Vec"
                },
                "U16": {
                  "type": "U16Vec"
                },
                "F32": {
                  "type": "F32Vec"
                }
              }
            ]
          }
        }
      },
      "font": {
        "doc": "Font decoding / parsing module",
        "classes": {
          "ParsedFontDestructorFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "FontMetrics": {
            "external": "azul_css::FontMetrics",
            "struct_fields": [
              {
                "units_per_em": {
                  "type": "u16"
                },
                "font_flags": {
                  "type": "u16"
                },
                "x_min": {
                  "type": "i16"
                },
                "y_min": {
                  "type": "i16"
                },
                "x_max": {
                  "type": "i16"
                },
                "y_max": {
                  "type": "i16"
                },
                "ascender": {
                  "type": "i16"
                },
                "descender": {
                  "type": "i16"
                },
                "line_gap": {
                  "type": "i16"
                },
                "advance_width_max": {
                  "type": "u16"
                },
                "min_left_side_bearing": {
                  "type": "i16"
                },
                "min_right_side_bearing": {
                  "type": "i16"
                },
                "x_max_extent": {
                  "type": "i16"
                },
                "caret_slope_rise": {
                  "type": "i16"
                },
                "caret_slope_run": {
                  "type": "i16"
                },
                "caret_offset": {
                  "type": "i16"
                },
                "num_h_metrics": {
                  "type": "u16"
                },
                "x_avg_char_width": {
                  "type": "i16"
                },
                "us_weight_class": {
                  "type": "u16"
                },
                "us_width_class": {
                  "type": "u16"
                },
                "fs_type": {
                  "type": "u16"
                },
                "y_subscript_x_size": {
                  "type": "i16"
                },
                "y_subscript_y_size": {
                  "type": "i16"
                },
                "y_subscript_x_offset": {
                  "type": "i16"
                },
                "y_subscript_y_offset": {
                  "type": "i16"
                },
                "y_superscript_x_size": {
                  "type": "i16"
                },
                "y_superscript_y_size": {
                  "type": "i16"
                },
                "y_superscript_x_offset": {
                  "type": "i16"
                },
                "y_superscript_y_offset": {
                  "type": "i16"
                },
                "y_strikeout_size": {
                  "type": "i16"
                },
                "y_strikeout_position": {
                  "type": "i16"
                },
                "s_family_class": {
                  "type": "i16"
                },
                "panose": {
                  "type": "[u8;10]"
                },
                "ul_unicode_range1": {
                  "type": "u32"
                },
                "ul_unicode_range2": {
                  "type": "u32"
                },
                "ul_unicode_range3": {
                  "type": "u32"
                },
                "ul_unicode_range4": {
                  "type": "u32"
                },
                "ach_vend_id": {
                  "type": "u32"
                },
                "fs_selection": {
                  "type": "u16"
                },
                "us_first_char_index": {
                  "type": "u16"
                },
                "us_last_char_index": {
                  "type": "u16"
                },
                "s_typo_ascender": {
                  "type": "OptionI16"
                },
                "s_typo_descender": {
                  "type": "OptionI16"
                },
                "s_typo_line_gap": {
                  "type": "OptionI16"
                },
                "us_win_ascent": {
                  "type": "OptionU16"
                },
                "us_win_descent": {
                  "type": "OptionU16"
                },
                "ul_code_page_range1": {
                  "type": "OptionU32"
                },
                "ul_code_page_range2": {
                  "type": "OptionU32"
                },
                "sx_height": {
                  "type": "OptionI16"
                },
                "s_cap_height": {
                  "type": "OptionI16"
                },
                "us_default_char": {
                  "type": "OptionU16"
                },
                "us_break_char": {
                  "type": "OptionU16"
                },
                "us_max_context": {
                  "type": "OptionU16"
                },
                "us_lower_optical_point_size": {
                  "type": "OptionU16"
                },
                "us_upper_optical_point_size": {
                  "type": "OptionU16"
                }
              }
            ],
            "constructors": {
              "zero": {
                "doc": "Returns a FontMetrics struct with all fields set to 0",
                "fn_args": [],
                "fn_body": "AzFontMetrics::zero()"
              }
            },
            "functions": {
              "use_typo_metrics": {
                "doc": "If set, use `OS/2.sTypoAscender - OS/2.sTypoDescender + OS/2.sTypoLineGap` to calculate the height.",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "fontmetrics.use_typo_metrics()"
              },
              "get_ascender": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_ascender(target_font_size)"
              },
              "get_descender": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_descender(target_font_size)"
              },
              "get_line_gap": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_line_gap(target_font_size)"
              },
              "get_x_min": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_x_min(target_font_size)"
              },
              "get_y_min": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_min(target_font_size)"
              },
              "get_x_max": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_x_max(target_font_size)"
              },
              "get_y_max": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_max(target_font_size)"
              },
              "get_advance_width_max": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_advance_width_max(target_font_size)"
              },
              "get_min_left_side_bearing": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_min_left_side_bearing(target_font_size)"
              },
              "get_min_right_side_bearing": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_min_right_side_bearing(target_font_size)"
              },
              "get_x_max_extent": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_x_max_extent(target_font_size)"
              },
              "get_x_avg_char_width": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_x_avg_char_width(target_font_size)"
              },
              "get_y_subscript_x_size": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_subscript_x_size(target_font_size)"
              },
              "get_y_subscript_y_size": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_subscript_y_size(target_font_size)"
              },
              "get_y_subscript_x_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_subscript_x_offset(target_font_size)"
              },
              "get_y_subscript_y_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_subscript_y_offset(target_font_size)"
              },
              "get_y_superscript_x_size": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_superscript_x_size(target_font_size)"
              },
              "get_y_superscript_y_size": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_superscript_y_size(target_font_size)"
              },
              "get_y_superscript_x_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_superscript_x_offset(target_font_size)"
              },
              "get_y_superscript_y_offset": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_superscript_y_offset(target_font_size)"
              },
              "get_y_strikeout_size": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_strikeout_size(target_font_size)"
              },
              "get_y_strikeout_position": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "target_font_size": "f32"
                  }
                ],
                "returns": {
                  "type": "f32"
                },
                "fn_body": "fontmetrics.get_y_strikeout_position(target_font_size)"
              }
            }
          },
          "FontRef": {
            "doc": "Atomically reference-counted parsed font data",
            "external": "azul_css::FontRef",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "data": {
                  "type": "*const FontData"
                },
                "copies": {
                  "type": "*const AtomicUsize"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "parse": {
                "doc": "Parses a new font from bytes. Returns `None` if the font could not be parsed correctly.",
                "fn_args": [
                  {
                    "source": "LoadedFontSource"
                  }
                ],
                "returns": {
                  "type": "OptionFontRef"
                },
                "fn_body": "azul_layout::parse_font_fn(source).into()"
              }
            },
            "functions": {
              "get_bytes": {
                "doc": "Returns the font bytes of the underlying font source",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "U8Vec"
                },
                "fn_body": "fontref.get_bytes()"
              },
              "get_font_metrics": {
                "doc": "Returns the font metrics of the parsed font",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "FontMetrics"
                },
                "fn_body": "azul_layout::text2::get_font_metrics_fontref(fontref)"
              },
              "shape_text": {
                "doc": "Returns the text layout of the shaped text",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "text": "Refstr"
                  },
                  {
                    "options": "ResolvedTextLayoutOptions"
                  }
                ],
                "returns": {
                  "type": "InlineText"
                },
                "fn_body": "azul_layout::text2::layout::shape_text(fontref, text.as_str(), &options)"
              },
              "get_hash": {
                "doc": "Returns the hash of the FontRef (fast)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "u64"
                },
                "fn_body": "azul_core::app_resources::font_ref_get_hash(fontref)"
              }
            }
          },
          "LoadedFontSource": {
            "doc": "Source data of a font file (bytes)",
            "external": "azul_core::app_resources::LoadedFontSource",
            "struct_fields": [
              {
                "data": {
                  "type": "U8Vec"
                },
                "index": {
                  "type": "u32"
                },
                "load_outlines": {
                  "type": "bool"
                }
              }
            ]
          }
        }
      },
      "svg": {
        "doc": "SVG parsing and rendering functions",
        "classes": {
          "Svg": {
            "external": "azul_layout::xml::svg::Svg",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "tree": {
                  "type": "Boxusvg::Tree"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "from_string": {
                "fn_args": [
                  {
                    "svg_string": "AzString"
                  },
                  {
                    "parse_options": "SvgParseOptions"
                  }
                ],
                "returns": {
                  "type": "ResultSvgSvgParseError"
                },
                "fn_body": "match azul_layout::xml::svg::svg_parse(svg_string.as_ref().as_bytes(), parse_options) { Ok(o) => azul_core::svg::ResultSvgSvgParseError::Ok(unsafe { core::mem::transmute(o) }), Err(e) => azul_core::svg::ResultSvgSvgParseError::Err(e) }"
              },
              "from_bytes": {
                "fn_args": [
                  {
                    "svg_bytes": "U8VecRef"
                  },
                  {
                    "parse_options": "SvgParseOptions"
                  }
                ],
                "returns": {
                  "type": "ResultSvgSvgParseError"
                },
                "fn_body": "match azul_layout::xml::svg::svg_parse(svg_bytes.as_slice(), parse_options) { Ok(o) => azul_core::svg::ResultSvgSvgParseError::Ok(unsafe { core::mem::transmute(o) }), Err(e) => azul_core::svg::ResultSvgSvgParseError::Err(e) }"
              }
            },
            "functions": {
              "get_root": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgXmlNode"
                },
                "fn_body": "azul_layout::xml::svg::svg_root(svg)"
              },
              "render": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "options": "SvgRenderOptions"
                  }
                ],
                "returns": {
                  "type": "OptionRawImage"
                },
                "fn_body": "azul_layout::xml::svg::svg_render(svg, options).into()"
              },
              "to_string": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "options": "SvgXmlOptions"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "azul_layout::xml::svg::svg_to_string(svg, options).into()"
              }
            }
          },
          "SvgXmlNode": {
            "external": "azul_layout::xml::svg::SvgXmlNode",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "node": {
                  "type": "Boxusvg::Group"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "parse_from": {
                "fn_args": [
                  {
                    "svg_bytes": "U8VecRef"
                  },
                  {
                    "parse_options": "SvgParseOptions"
                  }
                ],
                "returns": {
                  "type": "ResultSvgXmlNodeSvgParseError"
                },
                "fn_body": "match azul_layout::xml::svg::svgxmlnode_parse(svg_bytes.as_slice(), parse_options) { Ok(o) => azul_core::svg::ResultSvgXmlNodeSvgParseError::Ok(unsafe { core::mem::transmute(o) }), Err(e) => azul_core::svg::ResultSvgXmlNodeSvgParseError::Err(e) }"
              }
            }
          },
          "SvgMultiPolygon": {
            "external": "azul_core::svg::SvgMultiPolygon",
            "struct_fields": [
              {
                "rings": {
                  "type": "SvgPathVec",
                  "doc": "NOTE: If a ring represends a hole, simply reverse the order of points"
                }
              }
            ],
            "functions": {
              "get_bounds": {
                "doc": "Returns the bounds of the polygon",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgmultipolygon.get_bounds()"
              },
              "contains_point": {
                "doc": "Returns whether the polygon contains a point",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "point": "SvgPoint"
                  },
                  {
                    "fill_rule": "SvgFillRule"
                  },
                  {
                    "tolerance": "f32"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "azul_layout::xml::svg::polygon_contains_point(svgmultipolygon, point, fill_rule, tolerance)"
              },
              "union": {
                "doc": "Unions two MultiPolygons, returns the unioned MultiPolygon",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "SvgMultiPolygon"
                  }
                ],
                "returns": {
                  "type": "SvgMultiPolygon"
                },
                "fn_body": "azul_layout::xml::svg::svg_multi_polygon_union(svgmultipolygon, &other)"
              },
              "intersection": {
                "doc": "Intersects two MultiPolygons, returns the intersected MultiPolygon",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "SvgMultiPolygon"
                  }
                ],
                "returns": {
                  "type": "SvgMultiPolygon"
                },
                "fn_body": "azul_layout::xml::svg::svg_multi_polygon_intersection(svgmultipolygon, &other)"
              },
              "difference": {
                "doc": "Calculates the difference two MultiPolygons, returns a MultiPolygon",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "SvgMultiPolygon"
                  }
                ],
                "returns": {
                  "type": "SvgMultiPolygon"
                },
                "fn_body": "azul_layout::xml::svg::svg_multi_polygon_difference(svgmultipolygon, &other)"
              },
              "xor": {
                "doc": "Xors two MultiPolygons, returns a MultiPolygon",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "SvgMultiPolygon"
                  }
                ],
                "returns": {
                  "type": "SvgMultiPolygon"
                },
                "fn_body": "azul_layout::xml::svg::svg_multi_polygon_xor(svgmultipolygon, &other)"
              },
              "tessellate_fill": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fill_style": "SvgFillStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_multi_polygon_fill(svgmultipolygon, fill_style)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_multi_polygon_stroke(svgmultipolygon, stroke_style)"
              }
            }
          },
          "SvgNode": {
            "doc": "One `SvgNode` corresponds to one SVG `<path></path>` element",
            "external": "azul_core::svg::SvgNode",
            "enum_fields": [
              {
                "MultiPolygonCollection": {
                  "type": "SvgMultiPolygonVec",
                  "doc": "Multiple multipolygons, merged to one CPU buf for efficient drawing"
                },
                "MultiPolygon": {
                  "type": "SvgMultiPolygon"
                },
                "MultiShape": {
                  "type": "SvgSimpleNodeVec"
                },
                "Path": {
                  "type": "SvgPath"
                },
                "Circle": {
                  "type": "SvgCircle"
                },
                "Rect": {
                  "type": "SvgRect"
                }
              }
            ],
            "functions": {
              "tessellate_fill": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fill_style": "SvgFillStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_node_fill(svgnode, fill_style)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_node_stroke(svgnode, stroke_style)"
              },
              "is_closed": {
                "doc": "Returns whether the shape is closed",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "svgnode.is_closed()"
              },
              "contains_point": {
                "doc": "Returns the bounds of the polygon",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "point": "SvgPoint"
                  },
                  {
                    "fill_rule": "SvgFillRule"
                  },
                  {
                    "tolerance": "f32"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "azul_layout::xml::svg::svg_node_contains_point(svgnode, point, fill_rule, tolerance)"
              },
              "get_bounds": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgnode.get_bounds()"
              }
            }
          },
          "SvgSimpleNode": {
            "doc": "One `SvgSimpleNode` is either a path, a rect or a circle",
            "external": "azul_core::svg::SvgSimpleNode",
            "enum_fields": [
              {
                "Path": {
                  "type": "SvgPath"
                },
                "Circle": {
                  "type": "SvgCircle"
                },
                "Rect": {
                  "type": "SvgRect"
                },
                "CircleHole": {
                  "type": "SvgCircle"
                },
                "RectHole": {
                  "type": "SvgRect"
                }
              }
            ],
            "functions": {
              "get_bounds": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgsimplenode.get_bounds()"
              }
            }
          },
          "SvgStyledNode": {
            "external": "azul_core::svg::SvgStyledNode",
            "struct_fields": [
              {
                "geometry": {
                  "type": "SvgNode"
                },
                "style": {
                  "type": "SvgStyle"
                }
              }
            ],
            "functions": {
              "tessellate": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_styled_node(svgstylednode)"
              }
            }
          },
          "SvgCircle": {
            "external": "azul_core::svg::SvgCircle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "center_x": {
                  "type": "f32"
                },
                "center_y": {
                  "type": "f32"
                },
                "radius": {
                  "type": "f32"
                }
              }
            ],
            "functions": {
              "tessellate_fill": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fill_style": "SvgFillStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_circle_fill(svgcircle, fill_style)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_circle_stroke(svgcircle, stroke_style)"
              }
            }
          },
          "SvgPath": {
            "external": "azul_core::svg::SvgPath",
            "derive": [
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "items": {
                  "type": "SvgPathElementVec"
                }
              }
            ],
            "functions": {
              "is_closed": {
                "doc": "Returns whether the path is closed",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "svgpath.is_closed()"
              },
              "reverse": {
                "doc": "Reverses the order of points in the path so that the path runs in the opposite direction afterwards",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "svgpath.reverse()"
              },
              "get_start": {
                "doc": "Returns the first point of the path (or None if path has no items)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionSvgPoint"
                },
                "fn_body": "svgpath.get_start().into()"
              },
              "get_end": {
                "doc": "Returns the first point of the path (or None if path has no items)",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionSvgPoint"
                },
                "fn_body": "svgpath.get_end().into()"
              },
              "get_bounds": {
                "doc": "Returns the axis-aligned bounding rect of this path",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgpath.get_bounds()"
              },
              "join_with": {
                "doc": "Adds a path to the end of the current path",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "path": "SvgPath"
                  }
                ],
                "fn_body": "svgpath.join_with(path);"
              },
              "offset": {
                "doc": "Offset the path by a certain distance. Will create bezier curves around the edges when the path is closed",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "distance": "f32"
                  },
                  {
                    "join": "SvgLineJoin"
                  },
                  {
                    "cap": "SvgLineCap"
                  }
                ],
                "returns": {
                  "type": "SvgPath"
                },
                "fn_body": "azul_layout::xml::svg::svg_path_offset(svgpath, distance, join, cap)"
              },
              "bevel": {
                "doc": "Round the edges with a cubic curve",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "distance": "f32"
                  }
                ],
                "returns": {
                  "type": "SvgPath"
                },
                "fn_body": "azul_layout::xml::svg::svg_path_bevel(svgpath, distance)"
              },
              "tessellate_fill": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fill_style": "SvgFillStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_path_fill(svgpath, fill_style)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_path_stroke(svgpath, stroke_style)"
              }
            }
          },
          "SvgPathElement": {
            "external": "azul_core::svg::SvgPathElement",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "Line": {
                  "type": "SvgLine"
                },
                "QuadraticCurve": {
                  "type": "SvgQuadraticCurve"
                },
                "CubicCurve": {
                  "type": "SvgCubicCurve"
                }
              }
            ],
            "functions": {
              "reverse": {
                "doc": "Reverses the order of points in the path so that the path runs in the opposite direction afterwards",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "svgpathelement.reverse()"
              },
              "get_start": {
                "doc": "Returns the starting point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgpathelement.get_start()"
              },
              "get_end": {
                "doc": "Returns the ending point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgpathelement.get_end()"
              },
              "get_bounds": {
                "doc": "Returns the bounding box of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgpathelement.get_bounds()"
              },
              "get_length": {
                "doc": "Returns the length of the line or curve",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgpathelement.get_length()"
              },
              "get_t_at_offset": {
                "doc": "Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve start",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "offset": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgpathelement.get_t_at_offset(offset)"
              },
              "get_x_at_t": {
                "doc": "Returns the point on the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgpathelement.get_x_at_t(t)"
              },
              "get_y_at_t": {
                "doc": "Returns the y position of the line or curve at t",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgpathelement.get_y_at_t(t)"
              },
              "get_tangent_vector_at_t": {
                "doc": "Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "SvgVector"
                },
                "fn_body": "svgpathelement.get_tangent_vector_at_t(t)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_svgpathelement_stroke(svgpathelement, stroke_style)"
              }
            }
          },
          "SvgPoint": {
            "external": "azul_layout::xml::svg::SvgPoint",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                }
              }
            ],
            "functions": {
              "distance": {
                "doc": "Returns the euclidean distance to some other point",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "SvgPoint"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgpoint.distance(other)"
              }
            }
          },
          "SvgVector": {
            "external": "azul_layout::xml::svg::SvgVector",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f64"
                },
                "y": {
                  "type": "f64"
                }
              }
            ],
            "functions": {
              "angle_degrees": {
                "doc": "Returns the angle of this vector in degrees",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgvector.angle_degrees()"
              },
              "normalize": {
                "doc": "Normalizes the vector, returning the normalized vector",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgVector"
                },
                "fn_body": "svgvector.normalize()"
              },
              "rotate_90deg_ccw": {
                "doc": "Rotates the vector 90 degrees counter clockwise, returning the rotated vector",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgVector"
                },
                "fn_body": "svgvector.rotate_90deg_ccw()"
              }
            }
          },
          "SvgLine": {
            "doc": "A line segment in 2D space.",
            "external": "azul_core::svg::SvgLine",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "start": {
                  "type": "SvgPoint",
                  "doc": "Start point of the line"
                },
                "end": {
                  "type": "SvgPoint",
                  "doc": "End point of the line"
                }
              }
            ],
            "functions": {
              "reverse": {
                "doc": "Reverses the order of points in the path so that the path runs in the opposite direction afterwards",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "svgline.reverse()"
              },
              "get_start": {
                "doc": "Returns the starting point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgline.get_start()"
              },
              "get_end": {
                "doc": "Returns the ending point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgline.get_end()"
              },
              "get_bounds": {
                "doc": "Returns the bounding box of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgline.get_bounds()"
              },
              "get_length": {
                "doc": "Returns the length of the line or curve",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgline.get_length()"
              },
              "get_t_at_offset": {
                "doc": "Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve start",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "offset": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgline.get_t_at_offset(offset)"
              },
              "get_x_at_t": {
                "doc": "Returns the point on the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgline.get_x_at_t(t)"
              },
              "get_y_at_t": {
                "doc": "Returns the y position of the line or curve at t",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgline.get_y_at_t(t)"
              },
              "get_tangent_vector_at_t": {
                "doc": "Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "SvgVector"
                },
                "fn_body": "svgline.get_tangent_vector_at_t(t)"
              },
              "intersect": {
                "doc": "Intersect two lines EVEN IF THEY ARE DISTINCT. Only returns None on parallel lines (never intersect)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "other": "SvgLine"
                  }
                ],
                "returns": {
                  "type": "OptionSvgPoint"
                },
                "fn_body": "azul_layout::xml::svg::raw_line_intersection(svgline, &other).into()"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_line_stroke(svgline, stroke_style)"
              }
            }
          },
          "SvgQuadraticCurve": {
            "external": "azul_layout::xml::svg::SvgQuadraticCurve",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "start": {
                  "type": "SvgPoint"
                },
                "ctrl": {
                  "type": "SvgPoint"
                },
                "end": {
                  "type": "SvgPoint"
                }
              }
            ],
            "functions": {
              "reverse": {
                "doc": "Reverses the order of points in the curve so that the curve runs in the opposite direction afterwards",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "svgquadraticcurve.reverse()"
              },
              "get_start": {
                "doc": "Returns the starting point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgquadraticcurve.get_start()"
              },
              "get_end": {
                "doc": "Returns the ending point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgquadraticcurve.get_end()"
              },
              "get_bounds": {
                "doc": "Returns the bounding box of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgquadraticcurve.get_bounds()"
              },
              "get_length": {
                "doc": "Returns the length of the line or curve",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgquadraticcurve.get_length()"
              },
              "get_t_at_offset": {
                "doc": "Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve start",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "offset": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgquadraticcurve.get_t_at_offset(offset)"
              },
              "get_x_at_t": {
                "doc": "Returns the point on the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgquadraticcurve.get_x_at_t(t)"
              },
              "get_y_at_t": {
                "doc": "Returns the y position of the line or curve at t",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgquadraticcurve.get_y_at_t(t)"
              },
              "get_tangent_vector_at_t": {
                "doc": "Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "SvgVector"
                },
                "fn_body": "svgquadraticcurve.get_tangent_vector_at_t(t)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_quadraticcurve_stroke(svgquadraticcurve, stroke_style)"
              }
            }
          },
          "SvgCubicCurve": {
            "external": "azul_layout::xml::svg::SvgCubicCurve",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "start": {
                  "type": "SvgPoint"
                },
                "ctrl_1": {
                  "type": "SvgPoint"
                },
                "ctrl_2": {
                  "type": "SvgPoint"
                },
                "end": {
                  "type": "SvgPoint"
                }
              }
            ],
            "functions": {
              "reverse": {
                "doc": "Reverses the order of points in the curve so that the curve runs in the opposite direction afterwards",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "svgcubiccurve.reverse()"
              },
              "get_start": {
                "doc": "Returns the starting point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgcubiccurve.get_start()"
              },
              "get_end": {
                "doc": "Returns the ending point of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgcubiccurve.get_end()"
              },
              "get_bounds": {
                "doc": "Returns the bounding box of this item",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgcubiccurve.get_bounds()"
              },
              "get_length": {
                "doc": "Returns the length of the line or curve",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgcubiccurve.get_length()"
              },
              "get_t_at_offset": {
                "doc": "Returns the interpolation value t (between 0 and 1) at the given offset from the line or curve start",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "offset": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgcubiccurve.get_t_at_offset(offset)"
              },
              "get_x_at_t": {
                "doc": "Returns the point on the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgcubiccurve.get_x_at_t(t)"
              },
              "get_y_at_t": {
                "doc": "Returns the y position of the line or curve at t",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "f64"
                },
                "fn_body": "svgcubiccurve.get_y_at_t(t)"
              },
              "get_tangent_vector_at_t": {
                "doc": "Returns the angle in DEGREES of the line or curve at t (t = interpolation value between 0 and 1)",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "t": "f64"
                  }
                ],
                "returns": {
                  "type": "SvgVector"
                },
                "fn_body": "svgcubiccurve.get_tangent_vector_at_t(t)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_cubiccurve_stroke(svgcubiccurve, stroke_style)"
              }
            }
          },
          "SvgRect": {
            "external": "azul_layout::xml::svg::SvgRect",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "width": {
                  "type": "f32"
                },
                "height": {
                  "type": "f32"
                },
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                },
                "radius_top_left": {
                  "type": "f32"
                },
                "radius_top_right": {
                  "type": "f32"
                },
                "radius_bottom_left": {
                  "type": "f32"
                },
                "radius_bottom_right": {
                  "type": "f32"
                }
              }
            ],
            "functions": {
              "get_center": {
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "SvgPoint"
                },
                "fn_body": "svgrect.get_center()"
              },
              "contains_point": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "point": "SvgPoint"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "svgrect.contains_point(point.x, point.y)"
              },
              "expand": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "padding_top": "f32"
                  },
                  {
                    "padding_bottom": "f32"
                  },
                  {
                    "padding_left": "f32"
                  },
                  {
                    "padding_right": "f32"
                  }
                ],
                "returns": {
                  "type": "SvgRect"
                },
                "fn_body": "svgrect.expand(padding_top, padding_bottom, padding_left, padding_right)"
              },
              "tessellate_fill": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "fill_style": "SvgFillStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_rect_fill(svgrect, fill_style)"
              },
              "tessellate_stroke": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "stroke_style": "SvgStrokeStyle"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNode"
                },
                "fn_body": "azul_layout::xml::svg::tessellate_rect_stroke(svgrect, stroke_style)"
              }
            }
          },
          "SvgColoredVertex": {
            "external": "azul_core::svg::SvgColoredVertex",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                },
                "z": {
                  "type": "f32"
                },
                "r": {
                  "type": "f32"
                },
                "g": {
                  "type": "f32"
                },
                "b": {
                  "type": "f32"
                },
                "a": {
                  "type": "f32"
                }
              }
            ]
          },
          "TessellatedColoredSvgNode": {
            "external": "azul_core::svg::TessellatedColoredSvgNode",
            "struct_fields": [
              {
                "vertices": {
                  "type": "SvgColoredVertexVec"
                },
                "indices": {
                  "type": "U32Vec"
                }
              }
            ],
            "constructors": {
              "empty": {
                "doc": "Returns an empty buffer vertices / indices",
                "fn_args": [],
                "fn_body": "AzTessellatedColoredSvgNode::empty()"
              },
              "from_nodes": {
                "doc": "Creates a new TessellatedColoredSvgNode by joining all the given nodes together into one array and inserting a `GL_RESTART_INDEX` (`u32::MAX`) into the indices (so that the resulting buffer can be drawn in one draw call).",
                "fn_args": [
                  {
                    "nodes": "TessellatedColoredSvgNodeVecRef"
                  }
                ],
                "fn_body": "azul_layout::xml::svg::join_tessellated_colored_nodes(nodes.as_slice())"
              }
            }
          },
          "TessellatedColoredSvgNodeVecRef": {
            "doc": "Rust wrapper over a `&[TessellatedColoredSvgNode]` or `&Vec<TessellatedColoredSvgNode>`",
            "external": "azul_core::svg::TessellatedColoredSvgNodeVecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const TessellatedColoredSvgNode"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "TessellatedColoredGPUSvgNode": {
            "external": "azul_core::svg::TessellatedColoredGPUSvgNode",
            "derive": [
              "Debug"
            ],
            "struct_fields": [
              {
                "vertex_index_buffer": {
                  "type": "VertexBuffer"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "tessellated_node": "*const TessellatedColoredSvgNode"
                  },
                  {
                    "gl": "GlContextPtr"
                  }
                ],
                "fn_body": "AzTessellatedColoredGPUSvgNode::new(unsafe { &*tessellated_node }, gl)"
              }
            }
          },
          "SvgVertex": {
            "external": "azul_core::svg::SvgVertex",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "struct_fields": [
              {
                "x": {
                  "type": "f32"
                },
                "y": {
                  "type": "f32"
                }
              }
            ]
          },
          "TessellatedSvgNode": {
            "external": "azul_core::svg::TessellatedSvgNode",
            "struct_fields": [
              {
                "vertices": {
                  "type": "SvgVertexVec"
                },
                "indices": {
                  "type": "U32Vec"
                }
              }
            ],
            "constructors": {
              "empty": {
                "doc": "Returns an empty buffer vertices / indices",
                "fn_args": [],
                "fn_body": "AzTessellatedSvgNode::empty()"
              },
              "from_nodes": {
                "doc": "Creates a new TessellatedSvgNode by joining all the given nodes together into one array and inserting a `GL_RESTART_INDEX` (`u32::MAX`) into the indices (so that the resulting buffer can be drawn in one draw call).",
                "fn_args": [
                  {
                    "nodes": "TessellatedSvgNodeVecRef"
                  }
                ],
                "fn_body": "azul_layout::xml::svg::join_tessellated_nodes(nodes.as_slice())"
              }
            }
          },
          "TessellatedSvgNodeVecRef": {
            "doc": "Rust wrapper over a `&[TessellatedSvgNode]` or `&Vec<TessellatedSvgNode>`",
            "external": "azul_core::svg::TessellatedSvgNodeVecRef",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const TessellatedSvgNode"
                },
                "len": {
                  "type": "usize"
                }
              }
            ]
          },
          "TessellatedGPUSvgNode": {
            "external": "azul_core::svg::TessellatedGPUSvgNode",
            "derive": [
              "Debug"
            ],
            "struct_fields": [
              {
                "vertex_index_buffer": {
                  "type": "VertexBuffer"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "tessellated_node": "*const TessellatedSvgNode"
                  },
                  {
                    "gl": "GlContextPtr"
                  }
                ],
                "fn_body": "AzTessellatedGPUSvgNode::new(unsafe { &*tessellated_node }, gl)"
              }
            }
          },
          "SvgParseOptions": {
            "external": "azul_core::svg::SvgParseOptions",
            "struct_fields": [
              {
                "relative_image_path": {
                  "type": "OptionAzString",
                  "doc": "SVG image path. Used to resolve relative image paths."
                },
                "dpi": {
                  "type": "f32",
                  "doc": "Target DPI. Impact units conversion. Default: 96.0"
                },
                "default_font_family": {
                  "type": "AzString",
                  "doc": "Default font family. Will be used when no font-family attribute is set in the SVG. Default: Times New Roman"
                },
                "font_size": {
                  "type": "f32",
                  "doc": "A default font size. Will be used when no font-size attribute is set in the SVG. Default: 12"
                },
                "languages": {
                  "type": "StringVec",
                  "doc": "A list of languages. Will be used to resolve a systemLanguage conditional attribute. Format: en, en-US. Default: [en]"
                },
                "shape_rendering": {
                  "type": "ShapeRendering",
                  "doc": "Specifies the default shape rendering method. Will be used when an SVG element's shape-rendering property is set to auto. Default: GeometricPrecision"
                },
                "text_rendering": {
                  "type": "TextRendering",
                  "doc": "Specifies the default text rendering method. Will be used when an SVG element's text-rendering property is set to auto. Default: OptimizeLegibility"
                },
                "image_rendering": {
                  "type": "ImageRendering",
                  "doc": "Specifies the default image rendering method. Will be used when an SVG element's image-rendering property is set to auto. Default: OptimizeQuality"
                },
                "keep_named_groups": {
                  "type": "bool",
                  "doc": "Keep named groups. If set to true, all non-empty groups with id attribute will not be removed. Default: false"
                },
                "fontdb": {
                  "type": "FontDatabase",
                  "doc": "When empty, text elements will be skipped. Default: `System`"
                }
              }
            ],
            "constructors": {
              "default": {
                "fn_args": [],
                "fn_body": "AzSvgParseOptions::default()"
              }
            }
          },
          "ShapeRendering": {
            "external": "azul_core::svg::ShapeRendering",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "OptimizeSpeed": {},
                "CrispEdges": {},
                "GeometricPrecision": {}
              }
            ]
          },
          "TextRendering": {
            "external": "azul_core::svg::TextRendering",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "OptimizeSpeed": {},
                "OptimizeLegibility": {},
                "GeometricPrecision": {}
              }
            ]
          },
          "ImageRendering": {
            "external": "azul_core::svg::ImageRendering",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "OptimizeQuality": {},
                "OptimizeSpeed": {}
              }
            ]
          },
          "FontDatabase": {
            "external": "azul_core::svg::FontDatabase",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Empty": {},
                "System": {}
              }
            ]
          },
          "SvgRenderOptions": {
            "external": "azul_core::svg::SvgRenderOptions",
            "struct_fields": [
              {
                "target_size": {
                  "type": "OptionLayoutSize"
                },
                "background_color": {
                  "type": "OptionColorU"
                },
                "fit": {
                  "type": "SvgFitTo"
                },
                "transform": {
                  "type": "SvgRenderTransform"
                }
              }
            ],
            "constructors": {
              "default": {
                "fn_args": [],
                "fn_body": "AzSvgRenderOptions::default()"
              }
            }
          },
          "SvgRenderTransform": {
            "external": "azul_core::svg::SvgRenderTransform",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "sx": {
                  "type": "f32"
                },
                "kx": {
                  "type": "f32"
                },
                "ky": {
                  "type": "f32"
                },
                "sy": {
                  "type": "f32"
                },
                "tx": {
                  "type": "f32"
                },
                "ty": {
                  "type": "f32"
                }
              }
            ]
          },
          "SvgDashPattern": {
            "external": "azul_core::svg::SvgDashPattern",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "offset": {
                  "type": "f32"
                },
                "length_1": {
                  "type": "f32"
                },
                "gap_1": {
                  "type": "f32"
                },
                "length_2": {
                  "type": "f32"
                },
                "gap_2": {
                  "type": "f32"
                },
                "length_3": {
                  "type": "f32"
                },
                "gap_3": {
                  "type": "f32"
                }
              }
            ]
          },
          "Indent": {
            "external": "azul_core::svg::Indent",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {},
                "Spaces": {
                  "type": "u8"
                },
                "Tabs": {}
              }
            ]
          },
          "SvgFitTo": {
            "external": "azul_core::svg::SvgFitTo",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Original": {},
                "Width": {
                  "type": "u32"
                },
                "Height": {
                  "type": "u32"
                },
                "Zoom": {
                  "type": "f32"
                }
              }
            ]
          },
          "SvgStyle": {
            "external": "azul_core::svg::SvgStyle",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Fill": {
                  "type": "SvgFillStyle"
                },
                "Stroke": {
                  "type": "SvgStrokeStyle"
                }
              }
            ]
          },
          "SvgFillRule": {
            "external": "azul_core::svg::SvgFillRule",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Winding": {},
                "EvenOdd": {}
              }
            ]
          },
          "SvgTransform": {
            "external": "azul_core::svg::SvgTransform",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "sx": {
                  "type": "f32"
                },
                "kx": {
                  "type": "f32"
                },
                "ky": {
                  "type": "f32"
                },
                "sy": {
                  "type": "f32"
                },
                "tx": {
                  "type": "f32"
                },
                "ty": {
                  "type": "f32"
                }
              }
            ]
          },
          "SvgFillStyle": {
            "external": "azul_core::svg::SvgFillStyle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "line_join": {
                  "type": "SvgLineJoin",
                  "doc": "See the SVG specification. Default value: `LineJoin::Miter`."
                },
                "miter_limit": {
                  "type": "f32",
                  "doc": "See the SVG specification. Must be greater than or equal to 1.0. Default value: `StrokeOptions::DEFAULT_MITER_LIMIT`."
                },
                "tolerance": {
                  "type": "f32",
                  "doc": "Maximum allowed distance to the path when building an approximation. See [Flattening and tolerance](index.html#flattening-and-tolerance). Default value: `StrokeOptions::DEFAULT_TOLERANCE`."
                },
                "fill_rule": {
                  "type": "SvgFillRule",
                  "doc": "Whether to use the \"winding\" or \"even / odd\" fill rule when tesselating the path"
                },
                "transform": {
                  "type": "SvgTransform",
                  "doc": "Whether to apply a transform to the points in the path (warning: will be done on the CPU - expensive)"
                },
                "anti_alias": {
                  "type": "bool",
                  "doc": "Whether the fill is intended to be anti-aliased (default: true)"
                },
                "high_quality_aa": {
                  "type": "bool",
                  "doc": "Whether the anti-aliasing has to be of high quality (default: false)"
                }
              }
            ],
            "constructors": {
              "default": {
                "fn_args": [],
                "fn_body": "AzSvgFillStyle::default()"
              }
            }
          },
          "SvgStrokeStyle": {
            "external": "azul_core::svg::SvgStrokeStyle",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "start_cap": {
                  "type": "SvgLineCap",
                  "doc": "What cap to use at the start of each sub-path. Default value: `LineCap::Butt`."
                },
                "end_cap": {
                  "type": "SvgLineCap",
                  "doc": "What cap to use at the end of each sub-path. Default value: `LineCap::Butt`."
                },
                "line_join": {
                  "type": "SvgLineJoin",
                  "doc": "See the SVG specification. Default value: `LineJoin::Miter`."
                },
                "dash_pattern": {
                  "type": "OptionSvgDashPattern",
                  "doc": "Dash pattern"
                },
                "line_width": {
                  "type": "f32",
                  "doc": "Line width Default value: `StrokeOptions::DEFAULT_LINE_WIDTH`."
                },
                "miter_limit": {
                  "type": "f32",
                  "doc": "See the SVG specification. Must be greater than or equal to 1.0. Default value: `StrokeOptions::DEFAULT_MITER_LIMIT`."
                },
                "tolerance": {
                  "type": "f32",
                  "doc": "Maximum allowed distance to the path when building an approximation. See [Flattening and tolerance](index.html#flattening-and-tolerance). Default value: `StrokeOptions::DEFAULT_TOLERANCE`."
                },
                "apply_line_width": {
                  "type": "bool",
                  "doc": "Apply line width When set to false, the generated vertices will all be positioned in the centre of the line. The width can be applied later on (eg in a vertex shader) by adding the vertex normal multiplied by the line with to each vertex position. Default value: `true`. NOTE: currently unused!"
                },
                "transform": {
                  "type": "SvgTransform",
                  "doc": "Whether to apply a transform to the points in the path (warning: will be done on the CPU - expensive)"
                },
                "anti_alias": {
                  "type": "bool",
                  "doc": "Whether the fill is intended to be anti-aliased (default: true)"
                },
                "high_quality_aa": {
                  "type": "bool",
                  "doc": "Whether the anti-aliasing has to be of high quality (default: false)"
                }
              }
            ],
            "constructors": {
              "default": {
                "fn_args": [],
                "fn_body": "AzSvgStrokeStyle::default()"
              }
            }
          },
          "SvgLineJoin": {
            "external": "azul_core::svg::SvgLineJoin",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Miter": {},
                "MiterClip": {},
                "Round": {},
                "Bevel": {}
              }
            ]
          },
          "SvgLineCap": {
            "external": "azul_core::svg::SvgLineCap",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Butt": {},
                "Square": {},
                "Round": {}
              }
            ]
          },
          "SvgXmlOptions": {
            "external": "azul_core::svg::SvgXmlOptions",
            "struct_fields": [
              {
                "use_single_quote": {
                  "type": "bool"
                },
                "indent": {
                  "type": "Indent"
                },
                "attributes_indent": {
                  "type": "Indent"
                }
              }
            ]
          }
        }
      },
      "xml": {
        "doc": "XML parsing / decoding module",
        "classes": {
          "Xml": {
            "external": "azul_core::xml::Xml",
            "struct_fields": [
              {
                "root": {
                  "type": "XmlNodeVec"
                }
              }
            ],
            "constructors": {
              "from_str": {
                "doc": "Parses an XML document with one or more root nodes",
                "fn_args": [
                  {
                    "xml_string": "Refstr"
                  }
                ],
                "returns": {
                  "type": "ResultXmlXmlError"
                },
                "fn_body": "azul_layout::xml::parse_xml(xml_string.as_str()).into()"
              }
            }
          },
          "XmlNode": {
            "external": "azul_core::xml::XmlNode",
            "struct_fields": [
              {
                "node_type": {
                  "type": "XmlTagName",
                  "doc": "Type of the node"
                },
                "attributes": {
                  "type": "XmlAttributeMap",
                  "doc": "Attributes of an XML node (note: not yet filtered and / or broken into function arguments!)"
                },
                "children": {
                  "type": "XmlNodeVec",
                  "doc": "Direct children of this node"
                },
                "text": {
                  "type": "XmlTextContent",
                  "doc": "String content of the node, i.e the \"Hello\" in `<p>Hello</p>`"
                }
              }
            ]
          },
          "XmlTagName": {
            "external": "azul_core::xml::XmlTagName"
          },
          "XmlAttributeMap": {
            "external": "azul_core::xml::XmlAttributeMap"
          },
          "XmlTextContent": {
            "external": "azul_core::xml::XmlTextContent"
          }
        }
      },
      "fs": {
        "doc": "Filesystem / file input and output module",
        "classes": {
          "File": {
            "doc": "**Reference-counted** file handle",
            "external": "crate::azul_impl::file::File",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "BoxArc<Mutex<fs::File>>"
                },
                "path": {
                  "type": "AzString"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "open": {
                "doc": "Opens a file at the given path. If the file exists, replaces it with a new file",
                "fn_args": [
                  {
                    "path": "AzString"
                  }
                ],
                "returns": {
                  "type": "OptionFile"
                },
                "fn_body": "AzFile::open(path.as_str()).into()"
              },
              "create": {
                "doc": "Creates a file at the given path. If the file exists, replaces it with a new file",
                "fn_args": [
                  {
                    "path": "AzString"
                  }
                ],
                "returns": {
                  "type": "OptionFile"
                },
                "fn_body": "AzFile::create(path.as_str()).into()"
              }
            },
            "functions": {
              "read_to_string": {
                "doc": "Reads the file to a UTF8-encoded String, returns None if the file can't be decoded correctly",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "OptionAzString"
                },
                "fn_body": "file.read_to_string().into()"
              },
              "read_to_bytes": {
                "doc": "Reads the file as bytes, returns None if the file can't be decoded correctly",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "OptionU8Vec"
                },
                "fn_body": "file.read_to_bytes().into()"
              },
              "write_string": {
                "doc": "Writes a string to the file, synchronizes the results before returning",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "bytes": "Refstr"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "file.write_string(bytes.as_str()).is_some()"
              },
              "write_bytes": {
                "doc": "Writes some bytes to the file, synchronizes the results before returning",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "bytes": "U8VecRef"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "file.write_bytes(bytes.as_slice()).is_some()"
              },
              "close": {
                "doc": "Destructor, closes the file handle",
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "fn_body": "file.clone().close()"
              }
            }
          }
        }
      },
      "dialog": {
        "doc": "Interface for system file selection dialogs / popup message boxes, etc.",
        "classes": {
          "MsgBox": {
            "external": "crate::azul_impl::dialogs::MsgBox",
            "struct_fields": [
              {
                "_reserved": {
                  "type": "*mut c_void",
                  "doc": "reserved pointer (currently nullptr) for potential C extension"
                }
              }
            ],
            "constructors": {
              "ok": {
                "doc": "Opens an informational message box with only an \"OK\" button",
                "fn_args": [
                  {
                    "icon": "MsgBoxIcon"
                  },
                  {
                    "title": "AzString"
                  },
                  {
                    "message": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_ok(title.as_str(), message.as_str(), icon.into()); true"
              },
              "info": {
                "doc": "Shorthand for `MsgBox::ok(\"Info\", $message, Icon::Info)`",
                "fn_args": [
                  {
                    "message": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_ok(\"Info\", message.as_str(), AzMsgBoxIcon::Info.into()); true"
              },
              "warning": {
                "doc": "Shorthand for `MsgBox::ok(\"Warning\", $message, Icon::Warning)`",
                "fn_args": [
                  {
                    "message": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_ok(\"Warning\", message.as_str(), AzMsgBoxIcon::Warning.into()); true"
              },
              "error": {
                "doc": "Shorthand for `MsgBox::ok(\"Error\", $message, Icon::Error)`",
                "fn_args": [
                  {
                    "message": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_ok(\"Error\", message.as_str(), AzMsgBoxIcon::Error.into()); true"
              },
              "question": {
                "doc": "Shorthand for `MsgBox::ok(\"Question\", $message, Icon::Question)`",
                "fn_args": [
                  {
                    "message": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_ok(\"Question\", message.as_str(), AzMsgBoxIcon::Question.into()); true"
              },
              "ok_cancel": {
                "doc": "Opens a ok / cancel message box. Blocks the current thread.",
                "fn_args": [
                  {
                    "icon": "MsgBoxIcon"
                  },
                  {
                    "title": "AzString"
                  },
                  {
                    "message": "AzString"
                  },
                  {
                    "default_value": "OkCancel"
                  }
                ],
                "returns": {
                  "type": "OkCancel"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_ok_cancel(title.as_str(), message.as_str(), icon.into(), default_value)"
              },
              "yes_no": {
                "doc": "Opens a yes / no message box. Blocks the current thread.",
                "fn_args": [
                  {
                    "icon": "MsgBoxIcon"
                  },
                  {
                    "title": "AzString"
                  },
                  {
                    "message": "AzString"
                  },
                  {
                    "default_value": "YesNo"
                  }
                ],
                "returns": {
                  "type": "YesNo"
                },
                "fn_body": "crate::azul_impl::dialogs::msg_box_yes_no(title.as_str(), message.as_str(), icon.into(), default_value)"
              }
            }
          },
          "MsgBoxIcon": {
            "doc": "Type of message box icon",
            "external": "crate::azul_impl::dialogs::MsgBoxIcon",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Info": {},
                "Warning": {},
                "Error": {},
                "Question": {}
              }
            ]
          },
          "ColorPickerDialog": {
            "external": "crate::azul_impl::dialogs::ColorPickerDialog",
            "struct_fields": [
              {
                "_reserved": {
                  "type": "*mut c_void",
                  "doc": "reserved pointer (currently nullptr) for potential C extension"
                }
              }
            ],
            "constructors": {
              "open": {
                "doc": "Opens a system-native color picker dialog",
                "fn_args": [
                  {
                    "title": "AzString"
                  },
                  {
                    "default_color": "OptionColorU"
                  }
                ],
                "returns": {
                  "type": "OptionColorU"
                },
                "fn_body": "crate::azul_impl::dialogs::color_picker_dialog(title.as_str(), default_color.into_option().map(|s| s.into())).into()"
              }
            }
          },
          "YesNo": {
            "doc": "Value returned from a yes / no message box",
            "external": "crate::azul_impl::dialogs::YesNo",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Yes": {},
                "No": {}
              }
            ]
          },
          "FileDialog": {
            "doc": "File picker dialog",
            "external": "crate::azul_impl::dialogs::FileDialog",
            "struct_fields": [
              {
                "_reserved": {
                  "type": "*mut c_void",
                  "doc": "reserved pointer (currently nullptr) for potential C extension"
                }
              }
            ],
            "constructors": {
              "select_file": {
                "doc": "Select a single file using the system-native file picker. Blocks the current thread.",
                "fn_args": [
                  {
                    "title": "AzString"
                  },
                  {
                    "default_path": "OptionAzString"
                  },
                  {
                    "filter_list": "OptionFileTypeList"
                  }
                ],
                "returns": {
                  "type": "OptionAzString",
                  "doc": "The path that the user wants to open, `None` if the user has cancelled or closed the dialog"
                },
                "fn_body": "crate::azul_impl::dialogs::open_file_dialog(title.as_str(), default_path.as_ref().map(|s| s.as_str()), filter_list.into_option().map(|s| s.into())).into()"
              },
              "select_multiple_files": {
                "doc": "Select multiple files using the system-native file picker. Blocks the current thread.",
                "fn_args": [
                  {
                    "title": "AzString"
                  },
                  {
                    "default_path": "OptionAzString"
                  },
                  {
                    "filter_list": "OptionFileTypeList"
                  }
                ],
                "returns": {
                  "type": "OptionStringVec",
                  "doc": "The path(s) that the user wants to open, `None` if the user has cancelled or closed the dialog"
                },
                "fn_body": "crate::azul_impl::dialogs::open_multiple_files_dialog(title.as_str(), default_path.as_ref().map(|s| s.as_str()), filter_list.into_option().map(|s| s.into())).into()"
              },
              "select_folder": {
                "doc": "Open a dialog prompting the user to select a directory to open. Blocks the current thread.",
                "fn_args": [
                  {
                    "title": "AzString"
                  },
                  {
                    "default_path": "OptionAzString"
                  }
                ],
                "returns": {
                  "type": "OptionAzString",
                  "doc": "The folder that the user wants to open, `None` if the user has cancelled or closed the dialog"
                },
                "fn_body": "crate::azul_impl::dialogs::open_directory_dialog(title.as_str(), default_path.as_ref().map(|s| s.as_str())).into()"
              },
              "save_file": {
                "doc": "Open a dialog prompting the user to save a file. Blocks the current thread.",
                "fn_args": [
                  {
                    "title": "AzString"
                  },
                  {
                    "default_path": "OptionAzString"
                  }
                ],
                "returns": {
                  "type": "OptionAzString",
                  "doc": "The path that the user wants to save the file to, `None` if the user has cancelled or closed the dialog"
                },
                "fn_body": "crate::azul_impl::dialogs::save_file_dialog(title.as_str(), default_path.as_ref().map(|s| s.as_str())).into()"
              }
            }
          },
          "FileTypeList": {
            "external": "crate::azul_impl::dialogs::FileTypeList",
            "struct_fields": [
              {
                "document_types": {
                  "type": "StringVec"
                },
                "document_descriptor": {
                  "type": "AzString"
                }
              }
            ]
          },
          "OkCancel": {
            "doc": "Value returned from an ok / cancel message box",
            "external": "crate::azul_impl::dialogs::OkCancel",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Ok": {},
                "Cancel": {}
              }
            ]
          }
        }
      },
      "clipboard": {
        "doc": "Classes to talk to the system clipboard manager",
        "classes": {
          "Clipboard": {
            "doc": "Connection to the system clipboard, on some systems this connection can be cached",
            "external": "crate::azul_impl::app::Clipboard",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "_native": {
                  "type": "BoxArc<Mutex<SystemClipboard>>"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "constructors": {
              "new": {
                "doc": "Creates a new connection to the system clipboard manager",
                "fn_args": [],
                "returns": {
                  "type": "OptionClipboard"
                },
                "fn_body": "AzSystemClipboard::new().into()"
              }
            },
            "functions": {
              "get_string_contents": {
                "doc": "Returns the system clipboard contents or `None` if the clipboard is empty or there was an error",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "OptionAzString"
                },
                "fn_body": "systemclipboard.get_clipboard_string().into()"
              },
              "set_string_contents": {
                "doc": "Sets the system clipboard contents to the new string, returns true if the system clipboard was updated",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "contents": "AzString"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "systemclipboard.set_clipboard_string(contents).is_some()"
              }
            }
          }
        }
      },
      "time": {
        "doc": "Rust wrappers for `Instant` / `Duration` classes",
        "classes": {
          "Instant": {
            "external": "azul_core::task::Instant",
            "enum_fields": [
              {
                "System": {
                  "type": "AzInstantPtr"
                },
                "Tick": {
                  "type": "SystemTick"
                }
              }
            ],
            "functions": {
              "duration_since": {
                "doc": "Returns the duration since and earlier instant or None if the earlier instant is later than self",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "earlier": "Instant"
                  }
                ],
                "returns": {
                  "type": "OptionDuration"
                },
                "fn_body": "if &earlier < instant { Some(instant.duration_since(&earlier)).into() } else { None.into() }"
              },
              "add_duration": {
                "doc": "Adds a duration to the current time instant, returning the new `Instant`",
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "duration": "Duration"
                  }
                ],
                "returns": {
                  "type": "Instant",
                  "doc": "The new `Instant` with the added duration"
                },
                "fn_body": "instant.add_optional_duration(Some(&duration))"
              },
              "linear_interpolate": {
                "doc": "Linearly interpolates between [start, end] if the `self` Instant lies between start and end. Returns values between 0.0 and 1.0",
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "start": "Instant"
                  },
                  {
                    "end": "Instant"
                  }
                ],
                "returns": {
                  "type": "f32",
                  "doc": "Interpolation value clamped to the 0.0 - 1.0 range"
                },
                "fn_body": "instant.linear_interpolate(start, end)"
              }
            }
          },
          "SystemTickDiff": {
            "external": "azul_core::task::SystemTickDiff",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "tick_diff": {
                  "type": "u64"
                }
              }
            ]
          },
          "InstantPtrCloneFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "AzInstantPtr",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "AzInstantPtr"
              }
            }
          },
          "AzInstantPtr": {
            "external": "azul_core::task::AzInstantPtr",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const c_void"
                },
                "clone_fn": {
                  "type": "InstantPtrCloneCallback"
                },
                "destructor": {
                  "type": "InstantPtrDestructorCallback"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ]
          },
          "InstantPtrDestructorFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "AzInstantPtr",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InstantPtrCloneCallback": {
            "external": "azul_core::task::InstantPtrCloneCallback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "InstantPtrCloneCallbackType"
                }
              }
            ]
          },
          "SystemTick": {
            "external": "azul_core::task::SystemTick",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "tick_counter": {
                  "type": "u64"
                }
              }
            ]
          },
          "Duration": {
            "external": "azul_core::task::Duration",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "System": {
                  "type": "SystemTimeDiff"
                },
                "Tick": {
                  "type": "SystemTickDiff"
                }
              }
            ]
          },
          "SystemTimeDiff": {
            "external": "azul_core::task::SystemTimeDiff",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "secs": {
                  "type": "u64"
                },
                "nanos": {
                  "type": "u32"
                }
              }
            ]
          },
          "InstantPtrDestructorCallback": {
            "external": "azul_core::task::InstantPtrDestructorCallback",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "cb": {
                  "type": "InstantPtrDestructorCallbackType"
                }
              }
            ]
          }
        }
      },
      "task": {
        "doc": "Asyncronous timers / task / thread handlers for easy async loading",
        "classes": {
          "TimerId": {
            "external": "azul_core::task::TimerId",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "id": {
                  "type": "usize"
                }
              }
            ]
          },
          "Timer": {
            "external": "azul_core::task::Timer",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                },
                "node_id": {
                  "type": "OptionDomNodeId"
                },
                "created": {
                  "type": "Instant"
                },
                "last_run": {
                  "type": "OptionInstant"
                },
                "run_count": {
                  "type": "usize"
                },
                "delay": {
                  "type": "OptionDuration"
                },
                "interval": {
                  "type": "OptionDuration"
                },
                "timeout": {
                  "type": "OptionDuration"
                },
                "callback": {
                  "type": "TimerCallback"
                }
              }
            ],
            "constructors": {
              "new": {
                "fn_args": [
                  {
                    "timer_data": "RefAny"
                  },
                  {
                    "callback": "TimerCallbackType"
                  },
                  {
                    "get_system_time_fn": "GetSystemTimeCallback"
                  }
                ],
                "fn_body": "AzTimer::new(timer_data, callback, get_system_time_fn)"
              }
            },
            "functions": {
              "with_delay": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "delay": "Duration"
                  }
                ],
                "returns": {
                  "type": "Timer"
                },
                "fn_body": "timer.clone().with_delay(delay)"
              },
              "with_interval": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "interval": "Duration"
                  }
                ],
                "returns": {
                  "type": "Timer"
                },
                "fn_body": "timer.clone().with_interval(interval)"
              },
              "with_timeout": {
                "fn_args": [
                  {
                    "self": "ref"
                  },
                  {
                    "timeout": "Duration"
                  }
                ],
                "returns": {
                  "type": "Timer"
                },
                "fn_body": "timer.clone().with_timeout(timeout)"
              }
            }
          },
          "TerminateTimer": {
            "doc": "Should a timer terminate or not - used to remove active timers",
            "external": "azul_core::task::TerminateTimer",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "Terminate": {
                  "doc": "Remove the timer from the list of active timers"
                },
                "Continue": {
                  "doc": "Do nothing and let the timers continue to run"
                }
              }
            ]
          },
          "ThreadId": {
            "external": "azul_core::task::ThreadId",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "id": {
                  "type": "usize"
                }
              }
            ]
          },
          "Thread": {
            "external": "azul_core::task::Thread",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "c_void"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ]
          },
          "ThreadSender": {
            "external": "azul_core::task::ThreadSender",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "c_void"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "functions": {
              "send": {
                "fn_args": [
                  {
                    "self": "refmut"
                  },
                  {
                    "msg": "ThreadReceiveMsg"
                  }
                ],
                "returns": {
                  "type": "bool"
                },
                "fn_body": "threadsender.send(msg)"
              }
            }
          },
          "ThreadReceiver": {
            "external": "azul_core::task::ThreadReceiver",
            "is_boxed_object": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const c_void"
                },
                "run_destructor": {
                  "type": "bool"
                }
              }
            ],
            "functions": {
              "receive": {
                "fn_args": [
                  {
                    "self": "refmut"
                  }
                ],
                "returns": {
                  "type": "OptionThreadSendMsg"
                },
                "fn_body": "threadreceiver.recv().into()"
              }
            }
          },
          "ThreadSendMsg": {
            "external": "azul_core::task::ThreadSendMsg",
            "enum_fields": [
              {
                "TerminateThread": {
                  "doc": "The thread should terminate at the nearest"
                },
                "Tick": {
                  "doc": "Next frame tick"
                },
                "Custom": {
                  "type": "RefAny",
                  "doc": "Custom data"
                }
              }
            ]
          },
          "ThreadReceiveMsg": {
            "external": "azul_core::task::ThreadReceiveMsg",
            "enum_fields": [
              {
                "WriteBack": {
                  "type": "ThreadWriteBackMsg"
                },
                "Update": {
                  "type": "Update"
                }
              }
            ]
          },
          "ThreadWriteBackMsg": {
            "external": "azul_core::task::ThreadWriteBackMsg",
            "struct_fields": [
              {
                "data": {
                  "type": "RefAny"
                },
                "callback": {
                  "type": "WriteBackCallback"
                }
              }
            ]
          },
          "CreateThreadFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "RefAny",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "RefAny",
                  "ref": "value",
                  "doc": null
                },
                {
                  "type": "ThreadCallback",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "Thread"
              }
            }
          },
          "ThreadReceiverDestructorCallback": {
            "doc": "Destructor of the `ThreadReceiver`",
            "external": "azul_core::task::ThreadReceiverDestructorCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ThreadReceiverDestructorCallbackType"
                }
              }
            ]
          },
          "GetSystemTimeFnType": {
            "callback_typedef": {
              "fn_args": [],
              "returns": {
                "type": "Instant"
              }
            }
          },
          "CreateThreadCallback": {
            "external": "azul_core::task::CreateThreadCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "CreateThreadCallbackType"
                }
              }
            ]
          },
          "CheckThreadFinishedFnType": {
            "doc": "Callback that checks whether the thread has finished - the input argument is the `dropcheck` field on the Thread.",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "bool"
              }
            }
          },
          "GetSystemTimeCallback": {
            "doc": "Get the current system time, equivalent to `std::time::Instant::now()`, except it also works on systems that work with \"ticks\" instead of timers",
            "external": "azul_core::task::GetSystemTimeCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "GetSystemTimeCallbackType"
                }
              }
            ]
          },
          "LibrarySendThreadMsgFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "ref",
                  "doc": null
                },
                {
                  "type": "ThreadSendMsg",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "bool"
              }
            }
          },
          "CheckThreadFinishedCallback": {
            "doc": "Function called to check if the thread has finished",
            "external": "azul_core::task::CheckThreadFinishedCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "CheckThreadFinishedCallbackType"
                }
              }
            ]
          },
          "LibraryReceiveThreadMsgFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "OptionThreadReceiveMsg"
              }
            }
          },
          "LibrarySendThreadMsgCallback": {
            "doc": "Function to send a message to the thread",
            "external": "azul_core::task::LibrarySendThreadMsgCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "LibrarySendThreadMsgCallbackType"
                }
              }
            ]
          },
          "ThreadRecvFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "ref",
                  "doc": null
                }
              ],
              "returns": {
                "type": "OptionThreadSendMsg"
              }
            }
          },
          "LibraryReceiveThreadMsgCallback": {
            "doc": "Function to receive a message from the thread",
            "external": "azul_core::task::LibraryReceiveThreadMsgCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "LibraryReceiveThreadMsgCallbackType"
                }
              }
            ]
          },
          "ThreadSendFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "c_void",
                  "ref": "ref",
                  "doc": null
                },
                {
                  "type": "ThreadReceiveMsg",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "bool"
              }
            }
          },
          "ThreadRecvCallback": {
            "doc": "Function that the running `Thread` can call to receive messages from the main UI thread",
            "external": "azul_core::task::ThreadRecvCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ThreadRecvCallbackType"
                }
              }
            ]
          },
          "ThreadDestructorFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "Thread",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "ThreadSendCallback": {
            "doc": "Function that the running `Thread` can call to receive messages from the main UI thread",
            "external": "azul_core::task::ThreadSendCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ThreadSendCallbackType"
                }
              }
            ]
          },
          "ThreadReceiverDestructorFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "ThreadReceiver",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "ThreadDestructorCallback": {
            "doc": "Destructor of the `Thread`",
            "external": "azul_core::task::ThreadDestructorCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ThreadDestructorCallbackType"
                }
              }
            ]
          },
          "ThreadSenderDestructorFnType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "ThreadSender",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "ThreadSenderDestructorCallback": {
            "doc": "Destructor of the `ThreadSender`",
            "external": "azul_core::task::ThreadSenderDestructorCallback",
            "struct_fields": [
              {
                "cb": {
                  "type": "ThreadSenderDestructorCallbackType"
                }
              }
            ]
          },
          "CheckThreadFinishedCallbackType": {
            "external": "azul_core::task::CheckThreadFinishedCallbackType",
            "callback_typedef": {
              "fn_args": [],
              "returns": {
                "type": "bool"
              }
            }
          },
          "InstantPtrDestructorCallbackType": {
            "external": "azul_core::task::InstantPtrDestructorCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "*const c_void",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "c_void"
              }
            }
          },
          "ThreadReceiverDestructorCallbackType": {
            "external": "azul_core::task::ThreadReceiverDestructorCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "*const c_void",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "c_void"
              }
            }
          },
          "ThreadRecvCallbackType": {
            "external": "azul_core::task::ThreadRecvCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "*const c_void",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "*const c_void"
              }
            }
          },
          "GetSystemTimeCallbackType": {
            "external": "azul_core::task::GetSystemTimeCallbackType",
            "callback_typedef": {
              "fn_args": [],
              "returns": {
                "type": "SystemTick"
              }
            }
          },
          "InstantPtrCloneCallbackType": {
            "external": "azul_core::task::InstantPtrCloneCallbackType",
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "*const c_void",
                  "ref": "value",
                  "doc": null
                }
              ],
              "returns": {
                "type": "*const c_void"
              }
            }
          }
        }
      },
      "str": {
        "doc": "Definition of azuls internal `String` wrappers",
        "classes": {
          "FmtValue": {
            "external": "crate::str::FmtValue",
            "enum_fields": [
              {
                "Bool": {
                  "type": "bool"
                },
                "Uchar": {
                  "type": "u8"
                },
                "Schar": {
                  "type": "i8"
                },
                "Ushort": {
                  "type": "u16"
                },
                "Sshort": {
                  "type": "i16"
                },
                "Uint": {
                  "type": "u32"
                },
                "Sint": {
                  "type": "i32"
                },
                "Ulong": {
                  "type": "u64"
                },
                "Slong": {
                  "type": "i64"
                },
                "Isize": {
                  "type": "isize"
                },
                "Usize": {
                  "type": "usize"
                },
                "Float": {
                  "type": "f32"
                },
                "Double": {
                  "type": "f64"
                },
                "Str": {
                  "type": "AzString"
                },
                "StrVec": {
                  "type": "StringVec"
                }
              }
            ]
          },
          "FmtArg": {
            "external": "crate::str::FmtArg",
            "struct_fields": [
              {
                "key": {
                  "type": "AzString"
                },
                "value": {
                  "type": "FmtValue"
                }
              }
            ]
          },
          "AzString": {
            "external": "azul_css::AzString",
            "struct_fields": [
              {
                "vec": {
                  "type": "U8Vec"
                }
              }
            ],
            "constructors": {
              "format": {
                "doc": "Creates a dynamically formatted String from a fomat string + named arguments",
                "fn_args": [
                  {
                    "format": "AzString"
                  },
                  {
                    "args": "FmtArgVec"
                  }
                ],
                "fn_body": "crate::str::fmt_string(format, args).into()"
              },
              "copy_from_bytes": {
                "doc": "Creates a new String from an arbitary pointer, a start offset (bytes from the start pointer, usually 0) and a length (in bytes). The bytes are expected to point to a UTF-8 encoded string, no error checking is performed.",
                "fn_args": [
                  {
                    "ptr": "*const u8"
                  },
                  {
                    "start": "usize"
                  },
                  {
                    "len": "usize"
                  }
                ],
                "fn_body": "unsafe { let start_ptr = ptr.offset(start.max(core::isize::MAX as usize) as isize); let s = core::str::from_utf8_unchecked(core::slice::from_raw_parts(start_ptr, len)); s.to_string().into() }"
              }
            },
            "functions": {
              "trim": {
                "doc": "Trims whitespace from the start / end of the string",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "AzString"
                },
                "fn_body": "string.as_str().trim().to_string().into()"
              },
              "as_refstr": {
                "doc": "Returns a reference to the string - NOTE: the returned value is a reference to `self`, you MUST NOT drop the `String` object that the `Refstr` references",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "Refstr"
                },
                "fn_body": "string.as_str().into()"
              }
            }
          }
        }
      },
      "vec": {
        "doc": "Definition of azuls internal `Vec<*>` wrappers",
        "classes": {
          "ListViewRowVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<ListViewRow>`",
            "external": "crate::widgets::list_view::ListViewRowVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const ListViewRow"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "ListViewRowVecDestructor"
                }
              }
            ]
          },
          "StyleFilterVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleFilter>`",
            "external": "azul_css::props::style::filter::StyleFilterVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleFilter"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleFilterVecDestructor"
                }
              }
            ]
          },
          "LogicalRectVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<LogicalRect>`",
            "external": "azul_core::geom::LogicalRectVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const LogicalRect"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "LogicalRectVecDestructor"
                }
              }
            ]
          },
          "NodeTypeIdInfoMapVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<NodeTypeIdInfoMap>`",
            "external": "crate::widgets::node_graph::NodeTypeIdInfoMapVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeTypeIdInfoMap"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeTypeIdInfoMapVecDestructor"
                }
              }
            ]
          },
          "InputOutputTypeIdInfoMapVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InputOutputTypeIdInfoMap>`",
            "external": "crate::widgets::node_graph::InputOutputTypeIdInfoMapVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InputOutputTypeIdInfoMap"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InputOutputTypeIdInfoMapVecDestructor"
                }
              }
            ]
          },
          "NodeIdNodeMapVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<NodeIdNodeMap>`",
            "external": "crate::widgets::node_graph::NodeIdNodeMapVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeIdNodeMap"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeIdNodeMapVecDestructor"
                }
              }
            ]
          },
          "InputOutputTypeIdVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InputOutputTypeId>`",
            "external": "crate::widgets::node_graph::InputOutputTypeIdVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InputOutputTypeId"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InputOutputTypeIdVecDestructor"
                }
              }
            ]
          },
          "NodeTypeFieldVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<NodeTypeField>`",
            "external": "crate::widgets::node_graph::NodeTypeFieldVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeTypeField"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeTypeFieldVecDestructor"
                }
              }
            ]
          },
          "InputConnectionVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InputConnection>`",
            "external": "crate::widgets::node_graph::InputConnectionVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InputConnection"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InputConnectionVecDestructor"
                }
              }
            ]
          },
          "OutputNodeAndIndexVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<OutputNodeAndIndex>`",
            "external": "crate::widgets::node_graph::OutputNodeAndIndexVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const OutputNodeAndIndex"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "OutputNodeAndIndexVecDestructor"
                }
              }
            ]
          },
          "OutputConnectionVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<OutputConnection>`",
            "external": "crate::widgets::node_graph::OutputConnectionVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const OutputConnection"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "OutputConnectionVecDestructor"
                }
              }
            ]
          },
          "InputNodeAndIndexVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InputNodeAndIndex>`",
            "external": "crate::widgets::node_graph::InputNodeAndIndexVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InputNodeAndIndex"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InputNodeAndIndexVecDestructor"
                }
              }
            ]
          },
          "AccessibilityStateVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<AccessibilityState>`",
            "external": "azul_core::dom::AccessibilityStateVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const AccessibilityState"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "AccessibilityStateVecDestructor"
                }
              }
            ]
          },
          "MenuItemVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<MenuItem>`",
            "external": "azul_core::menu::MenuItemVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const MenuItem"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "MenuItemVecDestructor"
                }
              }
            ]
          },
          "TessellatedSvgNodeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<TessellatedSvgNode>`",
            "external": "azul_core::svg::TessellatedSvgNodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const TessellatedSvgNode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "TessellatedSvgNodeVecDestructor"
                }
              }
            ],
            "functions": {
              "as_ref_vec": {
                "doc": "Returns the `TessellatedSvgNodeVec` as a non-owning slice, NOTE: The `U8Vec` that this slice was borrowed from MUST NOT be deleted before the `U8VecRef`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "TessellatedSvgNodeVecRef"
                },
                "fn_body": "tessellatedsvgnodevec.get_ref()"
              }
            }
          },
          "TessellatedColoredSvgNodeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<TessellatedColoredSvgNode>`",
            "external": "azul_core::svg::TessellatedColoredSvgNodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const TessellatedColoredSvgNode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "TessellatedColoredSvgNodeVecDestructor"
                }
              }
            ],
            "functions": {
              "as_ref_vec": {
                "doc": "Returns the `TessellatedColoredSvgNodeVec` as a non-owning slice, NOTE: The `TessellatedColoredSvgNodeVec` that this slice was borrowed from MUST NOT be deleted before the `U8VecRef`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "TessellatedColoredSvgNodeVecRef"
                },
                "fn_body": "tessellatedcoloredsvgnodevec.get_ref()"
              }
            }
          },
          "StyleFontFamilyVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleFontFamily>`",
            "external": "azul_css::props::basic::font::StyleFontFamilyVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleFontFamily"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleFontFamilyVecDestructor"
                }
              }
            ]
          },
          "XmlNodeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<XmlNode>`",
            "external": "azul_core::xml::XmlNodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const XmlNode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "XmlNodeVecDestructor"
                }
              }
            ]
          },
          "FmtArgVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<FmtArg>`",
            "external": "crate::str::FmtArgVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const FmtArg"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "FmtArgVecDestructor"
                }
              }
            ]
          },
          "InlineLineVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InlineLine>`",
            "external": "azul_core::callbacks::InlineLineVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InlineLine"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InlineLineVecDestructor"
                }
              }
            ]
          },
          "InlineWordVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InlineWord>`",
            "external": "azul_core::callbacks::InlineWordVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InlineWord"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InlineWordVecDestructor"
                }
              }
            ]
          },
          "InlineGlyphVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InlineGlyph>`",
            "external": "azul_core::callbacks::InlineGlyphVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InlineGlyph"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InlineGlyphVecDestructor"
                }
              }
            ]
          },
          "InlineTextHitVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<InlineTextHit>`",
            "external": "azul_core::callbacks::InlineTextHitVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const InlineTextHit"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "InlineTextHitVecDestructor"
                }
              }
            ]
          },
          "MonitorVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<Monitor>`",
            "external": "azul_core::window::MonitorVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const Monitor"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "MonitorVecDestructor"
                }
              }
            ]
          },
          "VideoModeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<VideoMode>`",
            "external": "azul_core::window::VideoModeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const VideoMode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "VideoModeVecDestructor"
                }
              }
            ]
          },
          "DomVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<Dom>`",
            "external": "azul_core::dom::DomVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const Dom"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "DomVecDestructor"
                }
              }
            ]
          },
          "IdOrClassVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<IdOrClass>`",
            "external": "azul_core::dom::IdOrClassVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const IdOrClass"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "IdOrClassVecDestructor"
                }
              }
            ]
          },
          "NodeDataInlineCssPropertyVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<NodeDataInlineCssProperty>`",
            "external": "azul_core::dom::NodeDataInlineCssPropertyVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeDataInlineCssProperty"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeDataInlineCssPropertyVecDestructor"
                }
              }
            ]
          },
          "StyleBackgroundContentVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleBackgroundContent>`",
            "external": "azul_css::props::style::background::StyleBackgroundContentVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleBackgroundContent"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleBackgroundContentVecDestructor"
                }
              }
            ]
          },
          "StyleBackgroundPositionVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleBackgroundPosition>`",
            "external": "azul_css::props::style::background::StyleBackgroundPositionVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleBackgroundPosition"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleBackgroundPositionVecDestructor"
                }
              }
            ]
          },
          "StyleBackgroundRepeatVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleBackgroundRepeat>`",
            "external": "azul_css::props::style::background::StyleBackgroundRepeatVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleBackgroundRepeat"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleBackgroundRepeatVecDestructor"
                }
              }
            ]
          },
          "StyleBackgroundSizeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleBackgroundSize>`",
            "external": "azul_css::props::style::background::StyleBackgroundSizeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleBackgroundSize"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleBackgroundSizeVecDestructor"
                }
              }
            ]
          },
          "StyleTransformVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<StyleTransform>`",
            "external": "azul_css::props::style::transform::StyleTransformVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyleTransform"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyleTransformVecDestructor"
                }
              }
            ]
          },
          "CssPropertyVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<CssProperty>`",
            "external": "azul_dll::widgets::number_input::CssPropertyVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const CssProperty"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "CssPropertyVecDestructor"
                }
              }
            ]
          },
          "SvgMultiPolygonVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<SvgMultiPolygon>`",
            "external": "azul_core::svg::SvgMultiPolygonVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const SvgMultiPolygon"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "SvgMultiPolygonVecDestructor"
                }
              }
            ]
          },
          "SvgSimpleNodeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<SvgSimpleNode>`",
            "external": "azul_core::svg::SvgSimpleNodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const SvgSimpleNode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "SvgSimpleNodeVecDestructor"
                }
              }
            ]
          },
          "SvgPathVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<SvgPath>`",
            "external": "azul_core::svg::SvgPathVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const SvgPath"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "SvgPathVecDestructor"
                }
              }
            ]
          },
          "VertexAttributeVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<VertexAttribute>`",
            "external": "azul_core::gl::VertexAttributeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const VertexAttribute"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "VertexAttributeVecDestructor"
                }
              }
            ]
          },
          "SvgPathElementVec": {
            "doc": "Wrapper over a Rust-allocated `VertexAttribute`",
            "external": "azul_core::svg::SvgPathElementVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const SvgPathElement"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "SvgPathElementVecDestructor"
                }
              }
            ]
          },
          "SvgVertexVec": {
            "doc": "Wrapper over a Rust-allocated `SvgVertex`",
            "external": "azul_core::svg::SvgVertexVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const SvgVertex"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "SvgVertexVecDestructor"
                }
              }
            ]
          },
          "SvgColoredVertexVec": {
            "doc": "Wrapper over a Rust-allocated `SvgColoredVertex`",
            "external": "azul_core::svg::SvgColoredVertexVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const SvgColoredVertex"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "SvgColoredVertexVecDestructor"
                }
              }
            ]
          },
          "U32Vec": {
            "doc": "Wrapper over a Rust-allocated `Vec<u32>`",
            "external": "azul_css::corety::U32Vec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u32"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "U32VecDestructor"
                }
              }
            ]
          },
          "XWindowTypeVec": {
            "doc": "Wrapper over a Rust-allocated `XWindowType`",
            "external": "azul_core::window::XWindowTypeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const XWindowType"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "XWindowTypeVecDestructor"
                }
              }
            ]
          },
          "VirtualKeyCodeVec": {
            "doc": "Wrapper over a Rust-allocated `VirtualKeyCode`",
            "external": "azul_core::window::VirtualKeyCodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const VirtualKeyCode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "VirtualKeyCodeVecDestructor"
                }
              }
            ]
          },
          "CascadeInfoVec": {
            "doc": "Wrapper over a Rust-allocated `CascadeInfo`",
            "external": "azul_core::style::CascadeInfoVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const CascadeInfo"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "CascadeInfoVecDestructor"
                }
              }
            ]
          },
          "ScanCodeVec": {
            "doc": "Wrapper over a Rust-allocated `ScanCode`",
            "external": "azul_core::window::ScanCodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u32"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "ScanCodeVecDestructor"
                }
              }
            ]
          },
          "CssDeclarationVec": {
            "doc": "Wrapper over a Rust-allocated `CssDeclaration`",
            "external": "azul_css::css::CssDeclarationVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const CssDeclaration"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "CssDeclarationVecDestructor"
                }
              }
            ]
          },
          "CssPathSelectorVec": {
            "doc": "Wrapper over a Rust-allocated `CssPathSelector`",
            "external": "azul_css::css::CssPathSelectorVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const CssPathSelector"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "CssPathSelectorVecDestructor"
                }
              }
            ]
          },
          "StylesheetVec": {
            "doc": "Wrapper over a Rust-allocated `Stylesheet`",
            "external": "azul_css::css::StylesheetVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const Stylesheet"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StylesheetVecDestructor"
                }
              }
            ]
          },
          "CssRuleBlockVec": {
            "doc": "Wrapper over a Rust-allocated `CssRuleBlock`",
            "external": "azul_css::css::CssRuleBlockVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const CssRuleBlock"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "CssRuleBlockVecDestructor"
                }
              }
            ]
          },
          "U16Vec": {
            "doc": "Wrapper over a Rust-allocated `Vec<u16>`",
            "external": "azul_css::corety::U16Vec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u16"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "U16VecDestructor"
                }
              }
            ]
          },
          "F32Vec": {
            "doc": "Wrapper over a Rust-allocated `Vec<f32>`",
            "external": "azul_css::corety::F32Vec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const f32"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "F32VecDestructor"
                }
              }
            ]
          },
          "U8Vec": {
            "doc": "Wrapper over a Rust-allocated `U8Vec`",
            "external": "azul_css::corety::U8Vec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u8"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "U8VecDestructor"
                }
              }
            ],
            "constructors": {
              "copy_from_bytes": {
                "doc": "Creates a new, heap-allocated U8Vec by copying the memory into Rust (heap allocation)",
                "fn_args": [
                  {
                    "ptr": "*const u8"
                  },
                  {
                    "start": "usize"
                  },
                  {
                    "len": "usize"
                  }
                ],
                "fn_body": " unsafe { let start_ptr = ptr.offset(start.max(core::isize::MAX as usize) as isize); let s = core::slice::from_raw_parts(start_ptr, len); s.to_vec().into() }"
              }
            },
            "functions": {
              "as_ref_vec": {
                "doc": "Returns the `U8Vec` as a non-owning slice, NOTE: The `U8Vec` that this slice was borrowed from MUST NOT be deleted before the `U8VecRef`",
                "fn_args": [
                  {
                    "self": "ref"
                  }
                ],
                "returns": {
                  "type": "U8VecRef"
                },
                "fn_body": "u8vec.as_ref().into()"
              }
            }
          },
          "CallbackDataVec": {
            "doc": "Wrapper over a Rust-allocated `CallbackData`",
            "external": "azul_core::dom::CallbackDataVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const CallbackData"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "CallbackDataVecDestructor"
                }
              }
            ]
          },
          "NodeDataVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeDataVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "GLuintVec": {
            "doc": "Wrapper over a Rust-allocated `U32Vec`",
            "external": "azul_core::gl::GLuintVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const u32"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "GLuintVecDestructor"
                }
              }
            ]
          },
          "GLintVec": {
            "doc": "Wrapper over a Rust-allocated `GLintVec`",
            "external": "azul_core::gl::GLintVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const i32"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "GLintVecDestructor"
                }
              }
            ]
          },
          "StringVec": {
            "doc": "Wrapper over a Rust-allocated `StringVec`",
            "external": "azul_css::corety::StringVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const String"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StringVecDestructor"
                }
              }
            ]
          },
          "StringPairVec": {
            "doc": "Wrapper over a Rust-allocated `StringPairVec`",
            "external": "azul_core::window::StringPairVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StringPair"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StringPairVecDestructor"
                }
              }
            ]
          },
          "NormalizedLinearColorStopVec": {
            "doc": "Wrapper over a Rust-allocated `NormalizedLinearColorStopVec`",
            "external": "azul_css::props::style::background::NormalizedLinearColorStopVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NormalizedLinearColorStop"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NormalizedLinearColorStopVecDestructor"
                }
              }
            ]
          },
          "NormalizedRadialColorStopVec": {
            "doc": "Wrapper over a Rust-allocated `NormalizedRadialColorStopVec`",
            "external": "azul_css::props::style::background::NormalizedRadialColorStopVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NormalizedRadialColorStop"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NormalizedRadialColorStopVecDestructor"
                }
              }
            ]
          },
          "NodeIdVec": {
            "doc": "Wrapper over a Rust-allocated `NodeIdVec`",
            "external": "azul_core::styled_dom::NodeIdVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeId"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeIdVecDestructor"
                }
              }
            ]
          },
          "NodeHierarchyItemVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<NodeHierarchyItem>`",
            "external": "azul_core::styled_dom::NodeHierarchyItemVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeHierarchyItem"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeHierarchyItemVecDestructor"
                }
              }
            ]
          },
          "StyledNodeVec": {
            "doc": "Wrapper over a Rust-allocated `StyledNodeVec`",
            "external": "azul_core::styled_dom::StyledNodeVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const StyledNode"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "StyledNodeVecDestructor"
                }
              }
            ]
          },
          "TagIdToNodeIdMappingVec": {
            "doc": "Wrapper over a Rust-allocated `TagIdToNodeIdMappingVec`",
            "external": "azul_core::styled_dom::TagIdToNodeIdMappingVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const TagIdToNodeIdMapping"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "TagIdToNodeIdMappingVecDestructor"
                }
              }
            ]
          },
          "ParentWithNodeDepthVec": {
            "doc": "Wrapper over a Rust-allocated `ParentWithNodeDepthVec`",
            "external": "azul_core::styled_dom::ParentWithNodeDepthVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const ParentWithNodeDepth"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "ParentWithNodeDepthVecDestructor"
                }
              }
            ]
          },
          "NodeDataVec": {
            "doc": "Wrapper over a Rust-allocated `NodeDataVec`",
            "external": "azul_core::dom::NodeDataVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const NodeData"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "NodeDataVecDestructor"
                }
              }
            ]
          },
          "StyleFontFamilyVecDestructor": {
            "external": "azul_css::props::basic::font::StyleFontFamilyVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleFontFamilyVecDestructorType"
                }
              }
            ]
          },
          "StyleFontFamilyVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleFontFamilyVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "ListViewRowVecDestructor": {
            "external": "crate::widgets::list_view::ListViewRowVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "ListViewRowVecDestructorType"
                }
              }
            ]
          },
          "ListViewRowVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "ListViewRowVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyleFilterVecDestructor": {
            "external": "azul_css::props::style::filter::StyleFilterVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleFilterVecDestructorType"
                }
              }
            ]
          },
          "StyleFilterVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleFilterVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "LogicalRectVecDestructor": {
            "external": "azul_core::geom::LogicalRectVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "LogicalRectVecDestructorType"
                }
              }
            ]
          },
          "LogicalRectVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "LogicalRectVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeTypeIdInfoMapVecDestructor": {
            "external": "crate::widgets::node_graph::NodeTypeIdInfoMapVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeTypeIdInfoMapVecDestructorType"
                }
              }
            ]
          },
          "NodeTypeIdInfoMapVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeTypeIdInfoMapVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InputOutputTypeIdInfoMapVecDestructor": {
            "external": "crate::widgets::node_graph::InputOutputTypeIdInfoMapVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InputOutputTypeIdInfoMapVecDestructorType"
                }
              }
            ]
          },
          "InputOutputTypeIdInfoMapVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InputOutputTypeIdInfoMapVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeIdNodeMapVecDestructor": {
            "external": "crate::widgets::node_graph::NodeIdNodeMapVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeIdNodeMapVecDestructorType"
                }
              }
            ]
          },
          "NodeIdNodeMapVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeIdNodeMapVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InputOutputTypeIdVecDestructor": {
            "external": "crate::widgets::node_graph::InputOutputTypeIdVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InputOutputTypeIdVecDestructorType"
                }
              }
            ]
          },
          "InputOutputTypeIdVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InputOutputTypeIdVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeTypeFieldVecDestructor": {
            "external": "crate::widgets::node_graph::NodeTypeFieldVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeTypeFieldVecDestructorType"
                }
              }
            ]
          },
          "NodeTypeFieldVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeTypeFieldVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InputConnectionVecDestructor": {
            "external": "crate::widgets::node_graph::InputConnectionVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InputConnectionVecDestructorType"
                }
              }
            ]
          },
          "InputConnectionVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InputConnectionVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "OutputNodeAndIndexVecDestructor": {
            "external": "crate::widgets::node_graph::OutputNodeAndIndexVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "OutputNodeAndIndexVecDestructorType"
                }
              }
            ]
          },
          "OutputNodeAndIndexVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "OutputNodeAndIndexVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "OutputConnectionVecDestructor": {
            "external": "crate::widgets::node_graph::OutputConnectionVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "OutputConnectionVecDestructorType"
                }
              }
            ]
          },
          "OutputConnectionVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "OutputConnectionVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InputNodeAndIndexVecDestructor": {
            "external": "crate::widgets::node_graph::InputNodeAndIndexVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InputNodeAndIndexVecDestructorType"
                }
              }
            ]
          },
          "InputNodeAndIndexVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InputNodeAndIndexVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "AccessibilityStateVecDestructor": {
            "external": "azul_core::dom::AccessibilityStateVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "AccessibilityStateVecDestructorType"
                }
              }
            ]
          },
          "AccessibilityStateVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "AccessibilityStateVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "MenuItemVecDestructor": {
            "external": "azul_core::menu::MenuItemVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "MenuItemVecDestructorType"
                }
              }
            ]
          },
          "MenuItemVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "MenuItemVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "TessellatedSvgNodeVecDestructor": {
            "external": "azul_core::svg::TessellatedSvgNodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "TessellatedSvgNodeVecDestructorType"
                }
              }
            ]
          },
          "TessellatedSvgNodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "TessellatedSvgNodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "TessellatedColoredSvgNodeVecDestructor": {
            "external": "azul_core::svg::TessellatedColoredSvgNodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "TessellatedColoredSvgNodeVecDestructorType"
                }
              }
            ]
          },
          "TessellatedColoredSvgNodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "TessellatedColoredSvgNodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "XmlNodeVecDestructor": {
            "external": "azul_core::xml::XmlNodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "XmlNodeVecDestructorType"
                }
              }
            ]
          },
          "XmlNodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "XmlNodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "FmtArgVecDestructor": {
            "external": "crate::str::FmtArgVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "FmtArgVecDestructorType"
                }
              }
            ]
          },
          "FmtArgVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "FmtArgVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InlineLineVecDestructor": {
            "external": "azul_core::callbacks::InlineLineVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InlineLineVecDestructorType"
                }
              }
            ]
          },
          "InlineLineVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InlineLineVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InlineWordVecDestructor": {
            "external": "azul_core::callbacks::InlineWordVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InlineWordVecDestructorType"
                }
              }
            ]
          },
          "InlineWordVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InlineWordVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InlineGlyphVecDestructor": {
            "external": "azul_core::callbacks::InlineGlyphVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InlineGlyphVecDestructorType"
                }
              }
            ]
          },
          "InlineGlyphVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InlineGlyphVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "InlineTextHitVecDestructor": {
            "external": "azul_core::callbacks::InlineTextHitVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "InlineTextHitVecDestructorType"
                }
              }
            ]
          },
          "InlineTextHitVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "InlineTextHitVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "MonitorVecDestructor": {
            "external": "azul_core::window::MonitorVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "MonitorVecDestructorType"
                }
              }
            ]
          },
          "MonitorVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "MonitorVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "VideoModeVecDestructor": {
            "external": "azul_core::window::VideoModeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "VideoModeVecDestructorType"
                }
              }
            ]
          },
          "VideoModeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "VideoModeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "DomVecDestructor": {
            "external": "azul_core::dom::DomVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "DomVecDestructorType"
                }
              }
            ]
          },
          "DomVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "DomVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "IdOrClassVecDestructor": {
            "external": "azul_core::dom::IdOrClassVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "IdOrClassVecDestructorType"
                }
              }
            ]
          },
          "IdOrClassVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "IdOrClassVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeDataInlineCssPropertyVecDestructor": {
            "external": "azul_core::dom::NodeDataInlineCssPropertyVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeDataInlineCssPropertyVecDestructorType"
                }
              }
            ]
          },
          "NodeDataInlineCssPropertyVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeDataInlineCssPropertyVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyleBackgroundContentVecDestructor": {
            "external": "azul_css::props::style::background::StyleBackgroundContentVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleBackgroundContentVecDestructorType"
                }
              }
            ]
          },
          "StyleBackgroundContentVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleBackgroundContentVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyleBackgroundPositionVecDestructor": {
            "external": "azul_css::props::style::background::StyleBackgroundPositionVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleBackgroundPositionVecDestructorType"
                }
              }
            ]
          },
          "StyleBackgroundPositionVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleBackgroundPositionVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyleBackgroundRepeatVecDestructor": {
            "external": "azul_css::props::style::background::StyleBackgroundRepeatVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleBackgroundRepeatVecDestructorType"
                }
              }
            ]
          },
          "StyleBackgroundRepeatVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleBackgroundRepeatVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyleBackgroundSizeVecDestructor": {
            "external": "azul_css::props::style::background::StyleBackgroundSizeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleBackgroundSizeVecDestructorType"
                }
              }
            ]
          },
          "StyleBackgroundSizeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleBackgroundSizeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyleTransformVecDestructor": {
            "external": "azul_css::props::style::transform::StyleTransformVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyleTransformVecDestructorType"
                }
              }
            ]
          },
          "StyleTransformVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyleTransformVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "CssPropertyVecDestructor": {
            "external": "azul_core::dom::CssPropertyVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "CssPropertyVecDestructorType"
                }
              }
            ]
          },
          "CssPropertyVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "CssPropertyVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "SvgMultiPolygonVecDestructor": {
            "external": "azul_core::svg::SvgMultiPolygonVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "SvgMultiPolygonVecDestructorType"
                }
              }
            ]
          },
          "SvgMultiPolygonVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "SvgMultiPolygonVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "SvgSimpleNodeVecDestructor": {
            "external": "azul_core::svg::SvgSimpleNodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "SvgSimpleNodeVecDestructorType"
                }
              }
            ]
          },
          "SvgSimpleNodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "SvgSimpleNodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "SvgPathVecDestructor": {
            "external": "azul_core::svg::SvgPathVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "SvgPathVecDestructorType"
                }
              }
            ]
          },
          "SvgPathVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "SvgPathVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "VertexAttributeVecDestructor": {
            "external": "azul_core::gl::VertexAttributeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "VertexAttributeVecDestructorType"
                }
              }
            ]
          },
          "VertexAttributeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "VertexAttributeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "SvgPathElementVecDestructor": {
            "external": "azul_core::svg::SvgPathElementVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "SvgPathElementVecDestructorType"
                }
              }
            ]
          },
          "SvgPathElementVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "SvgPathElementVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "SvgVertexVecDestructor": {
            "external": "azul_core::svg::SvgVertexVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "SvgVertexVecDestructorType"
                }
              }
            ]
          },
          "SvgVertexVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "SvgVertexVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "SvgColoredVertexVecDestructor": {
            "external": "azul_core::svg::SvgColoredVertexVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "SvgColoredVertexVecDestructorType"
                }
              }
            ]
          },
          "SvgColoredVertexVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "SvgColoredVertexVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "U32VecDestructor": {
            "external": "azul_css::corety::U32VecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "U32VecDestructorType"
                }
              }
            ]
          },
          "U32VecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "U32Vec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "XWindowTypeVecDestructor": {
            "external": "azul_core::window::XWindowTypeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "XWindowTypeVecDestructorType"
                }
              }
            ]
          },
          "XWindowTypeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "XWindowTypeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "VirtualKeyCodeVecDestructor": {
            "external": "azul_core::window::VirtualKeyCodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "VirtualKeyCodeVecDestructorType"
                }
              }
            ]
          },
          "VirtualKeyCodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "VirtualKeyCodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "CascadeInfoVecDestructor": {
            "external": "azul_core::style::CascadeInfoVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "CascadeInfoVecDestructorType"
                }
              }
            ]
          },
          "CascadeInfoVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "CascadeInfoVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "ScanCodeVecDestructor": {
            "external": "azul_core::window::ScanCodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "ScanCodeVecDestructorType"
                }
              }
            ]
          },
          "ScanCodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "ScanCodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "CssDeclarationVecDestructor": {
            "external": "azul_css::css::CssDeclarationVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "CssDeclarationVecDestructorType"
                }
              }
            ]
          },
          "CssDeclarationVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "CssDeclarationVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "CssPathSelectorVecDestructor": {
            "external": "azul_css::css::CssPathSelectorVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "CssPathSelectorVecDestructorType"
                }
              }
            ]
          },
          "CssPathSelectorVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "CssPathSelectorVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StylesheetVecDestructor": {
            "external": "azul_css::css::StylesheetVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StylesheetVecDestructorType"
                }
              }
            ]
          },
          "StylesheetVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StylesheetVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "CssRuleBlockVecDestructor": {
            "external": "azul_css::css::CssRuleBlockVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "CssRuleBlockVecDestructorType"
                }
              }
            ]
          },
          "CssRuleBlockVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "CssRuleBlockVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "F32VecDestructor": {
            "external": "azul_css::corety::F32VecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "F32VecDestructorType"
                }
              }
            ]
          },
          "F32VecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "F32Vec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "U16VecDestructor": {
            "external": "azul_css::corety::U16VecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "U16VecDestructorType"
                }
              }
            ]
          },
          "U16VecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "U16Vec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "U8VecDestructor": {
            "external": "azul_css::corety::U8VecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "U8VecDestructorType"
                }
              }
            ]
          },
          "U8VecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "U8Vec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "CallbackDataVecDestructor": {
            "external": "azul_core::dom::CallbackDataVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "CallbackDataVecDestructorType"
                }
              }
            ]
          },
          "CallbackDataVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "CallbackDataVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "AzDebugMessageVec": {
            "doc": "Wrapper over a Rust-allocated `Vec<DebugMessage>`",
            "external": "azul_core::gl::AzDebugMessageVec",
            "custom_destructor": true,
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const DebugMessage"
                }
              },
              {
                "len": {
                  "type": "usize"
                }
              },
              {
                "cap": {
                  "type": "usize"
                }
              },
              {
                "destructor": {
                  "type": "AzDebugMessageVecDestructor"
                }
              }
            ]
          },
          "DebugMessageVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "AzDebugMessageVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "GLuintVecDestructor": {
            "external": "azul_core::gl::GLuintVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "GLuintVecDestructorType"
                }
              }
            ]
          },
          "GLuintVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "GLuintVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "GLintVecDestructor": {
            "external": "azul_core::gl::GLintVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "GLintVecDestructorType"
                }
              }
            ]
          },
          "GLintVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "GLintVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StringVecDestructor": {
            "external": "azul_css::corety::StringVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StringVecDestructorType"
                }
              }
            ]
          },
          "StringVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StringVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StringPairVecDestructor": {
            "external": "azul_core::window::StringPairVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StringPairVecDestructorType"
                }
              }
            ]
          },
          "StringPairVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StringPairVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NormalizedLinearColorStopVecDestructor": {
            "external": "azul_css::props::style::background::NormalizedLinearColorStopVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NormalizedLinearColorStopVecDestructorType"
                }
              }
            ]
          },
          "NormalizedLinearColorStopVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NormalizedLinearColorStopVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NormalizedRadialColorStopVecDestructor": {
            "external": "azul_css::props::style::background::NormalizedRadialColorStopVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NormalizedRadialColorStopVecDestructorType"
                }
              }
            ]
          },
          "NormalizedRadialColorStopVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NormalizedRadialColorStopVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeIdVecDestructor": {
            "external": "azul_core::styled_dom::NodeIdVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeIdVecDestructorType"
                }
              }
            ]
          },
          "NodeIdVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeIdVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeHierarchyItemVecDestructor": {
            "external": "azul_core::styled_dom::NodeHierarchyItemVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeHierarchyItemVecDestructorType"
                }
              }
            ]
          },
          "NodeHierarchyItemVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "NodeHierarchyItemVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "StyledNodeVecDestructor": {
            "external": "azul_core::styled_dom::StyledNodeVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "StyledNodeVecDestructorType"
                }
              }
            ]
          },
          "StyledNodeVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "StyledNodeVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "TagIdToNodeIdMappingVecDestructor": {
            "external": "azul_core::styled_dom::TagIdToNodeIdMappingVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "TagIdToNodeIdMappingVecDestructorType"
                }
              }
            ]
          },
          "TagIdToNodeIdMappingVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "TagIdToNodeIdMappingVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "ParentWithNodeDepthVecDestructor": {
            "external": "azul_core::styled_dom::ParentWithNodeDepthVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "ParentWithNodeDepthVecDestructorType"
                }
              }
            ]
          },
          "ParentWithNodeDepthVecDestructorType": {
            "callback_typedef": {
              "fn_args": [
                {
                  "type": "ParentWithNodeDepthVec",
                  "ref": "refmut",
                  "doc": null
                }
              ],
              "returns": null
            }
          },
          "NodeDataVecDestructor": {
            "external": "azul_core::dom::NodeDataVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "NodeDataVecDestructorType"
                }
              }
            ]
          },
          "AzDebugMessageVecDestructor": {
            "external": "azul_core::gl::AzDebugMessageVecDestructor",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "DefaultRust": {}
              },
              {
                "NoDestructor": {}
              },
              {
                "External": {
                  "type": "DebugMessageVecDestructorType"
                }
              }
            ]
          }
        }
      },
      "option": {
        "doc": "Definition of azuls internal `Option<*>` wrappers",
        "classes": {
          "OptionSvgPoint": {
            "external": "azul_css::props::basic::animation::OptionSvgPoint",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "SvgPoint"
                }
              }
            ]
          },
          "OptionStyleTextAlign": {
            "external": "azul_css::props::style::text::OptionStyleTextAlign",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "StyleTextAlign"
                }
              }
            ]
          },
          "OptionListViewOnRowClick": {
            "external": "crate::widgets::list_view::OptionListViewOnRowClick",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ListViewOnRowClick"
                }
              }
            ]
          },
          "OptionListViewOnColumnClick": {
            "external": "crate::widgets::list_view::OptionListViewOnColumnClick",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ListViewOnColumnClick"
                }
              }
            ]
          },
          "OptionListViewOnLazyLoadScroll": {
            "external": "crate::widgets::list_view::OptionListViewOnLazyLoadScroll",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ListViewOnLazyLoadScroll"
                }
              }
            ]
          },
          "OptionMenu": {
            "external": "azul_core::menu::OptionMenu",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "Menu"
                }
              }
            ]
          },
          "OptionPixelValueNoPercent": {
            "external": "azul_css::props::basic::pixel::OptionPixelValueNoPercent",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "PixelValueNoPercent"
                }
              }
            ]
          },
          "OptionDropDownOnChoiceChange": {
            "external": "crate::widgets::drop_down::OptionDropDownOnChoiceChange",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "DropDownOnChoiceChange"
                }
              }
            ]
          },
          "OptionResolvedTextLayoutOptions": {
            "external": "azul_core::ui_solver::OptionResolvedTextLayoutOptions",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ResolvedTextLayoutOptions"
                }
              }
            ]
          },
          "OptionU8VecRef": {
            "external": "azul_core::gl::OptionU8VecRef",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "U8VecRef"
                }
              }
            ]
          },
          "OptionOnNodeAdded": {
            "external": "crate::widgets::node_graph::OptionOnNodeAdded",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeAdded"
                }
              }
            ]
          },
          "OptionOnNodeRemoved": {
            "external": "crate::widgets::node_graph::OptionOnNodeRemoved",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeRemoved"
                }
              }
            ]
          },
          "OptionOnNodeGraphDragged": {
            "external": "crate::widgets::node_graph::OptionOnNodeGraphDragged",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeGraphDragged"
                }
              }
            ]
          },
          "OptionOnNodeDragged": {
            "external": "crate::widgets::node_graph::OptionOnNodeDragged",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeDragged"
                }
              }
            ]
          },
          "OptionOnNodeConnected": {
            "external": "crate::widgets::node_graph::OptionOnNodeConnected",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeConnected"
                }
              }
            ]
          },
          "OptionOnNodeInputDisconnected": {
            "external": "crate::widgets::node_graph::OptionOnNodeInputDisconnected",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeInputDisconnected"
                }
              }
            ]
          },
          "OptionOnNodeOutputDisconnected": {
            "external": "crate::widgets::node_graph::OptionOnNodeOutputDisconnected",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeOutputDisconnected"
                }
              }
            ]
          },
          "OptionColorInputOnValueChange": {
            "external": "crate::widgets::color_input::OptionColorInputOnValueChange",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ColorInputOnValueChange"
                }
              }
            ]
          },
          "OptionButtonOnClick": {
            "external": "crate::widgets::button::OptionButtonOnClick",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ButtonOnClick"
                }
              }
            ]
          },
          "OptionTabOnClick": {
            "external": "crate::widgets::tabs::OptionTabOnClick",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TabOnClick"
                }
              }
            ]
          },
          "OptionFileInputOnPathChange": {
            "external": "crate::widgets::file_input::OptionFileInputOnPathChange",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "FileInputOnPathChange"
                }
              }
            ]
          },
          "OptionCheckBoxOnToggle": {
            "external": "crate::widgets::check_box::OptionCheckBoxOnToggle",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "CheckBoxOnToggle"
                }
              }
            ]
          },
          "OptionTextInputOnTextInput": {
            "external": "crate::widgets::text_input::OptionTextInputOnTextInput",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TextInputOnTextInput"
                }
              }
            ]
          },
          "OptionTextInputOnVirtualKeyDown": {
            "external": "crate::widgets::text_input::OptionTextInputOnVirtualKeyDown",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TextInputOnVirtualKeyDown"
                }
              }
            ]
          },
          "OptionTextInputOnFocusLost": {
            "external": "crate::widgets::text_input::OptionTextInputOnFocusLost",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TextInputOnFocusLost"
                }
              }
            ]
          },
          "OptionTextInputSelection": {
            "external": "crate::widgets::text_input::OptionTextInputSelection",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TextInputSelection"
                }
              }
            ]
          },
          "OptionNumberInputOnFocusLost": {
            "external": "crate::widgets::number_input::OptionNumberInputOnFocusLost",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "NumberInputOnFocusLost"
                }
              }
            ]
          },
          "OptionNumberInputOnValueChange": {
            "external": "crate::widgets::number_input::OptionNumberInputOnValueChange",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "NumberInputOnValueChange"
                }
              }
            ]
          },
          "OptionMenuItemIcon": {
            "external": "azul_core::menu::OptionMenuItemIcon",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "MenuItemIcon"
                }
              }
            ]
          },
          "OptionMenuCallback": {
            "doc": "Optional MenuCallback",
            "external": "azul_layout::callbacks::OptionMenuCallback",
            "enum_fields": [
              {
                "None": {},
                "Some": {
                  "type": "MenuCallback"
                }
              }
            ]
          },
          "OptionVirtualKeyCodeCombo": {
            "external": "azul_core::window::OptionVirtualKeyCodeCombo",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "VirtualKeyCodeCombo"
                }
              }
            ]
          },
          "OptionCssProperty": {
            "external": "azul_css::props::property::OptionCssProperty",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "CssProperty"
                }
              }
            ]
          },
          "OptionPositionInfo": {
            "external": "azul_core::ui_solver::OptionPositionInfo",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "PositionInfo"
                }
              }
            ]
          },
          "OptionTimerId": {
            "external": "azul_core::task::OptionTimerId",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TimerId"
                }
              }
            ]
          },
          "OptionThreadId": {
            "external": "azul_core::task::OptionThreadId",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ThreadId"
                }
              }
            ]
          },
          "OptionI16": {
            "external": "azul_css::corety::OptionI16",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "i16"
                }
              }
            ]
          },
          "OptionU16": {
            "external": "azul_css::corety::OptionU16",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "u16"
                }
              }
            ]
          },
          "OptionU32": {
            "external": "azul_css::corety::OptionU32",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "u32"
                }
              }
            ]
          },
          "OptionImageRef": {
            "external": "azul_core::resources::OptionImageRef",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ImageRef"
                }
              }
            ]
          },
          "OptionFontRef": {
            "external": "azul_css::props::basic::font::OptionFontRef",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "FontRef"
                }
              }
            ]
          },
          "OptionOnNodeFieldEdited": {
            "external": "crate::widgets::node_graph::OptionOnNodeFieldEdited",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "OnNodeFieldEdited"
                }
              }
            ]
          },
          "OptionFileTypeList": {
            "external": "azul_dll::desktop::dialogs::OptionFileTypeList",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "FileTypeList"
                }
              }
            ]
          },
          "OptionWindowState": {
            "external": "azul_layout::window_state::OptionWindowState",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "WindowState"
                }
              }
            ]
          },
          "OptionMouseState": {
            "external": "azul_core::window::OptionMouseState",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "MouseState"
                }
              }
            ]
          },
          "OptionKeyboardState": {
            "external": "azul_core::window::OptionKeyboardState",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "KeyboardState"
                }
              }
            ]
          },
          "OptionStringVec": {
            "external": "azul_css::OptionStringVec",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "StringVec"
                }
              }
            ]
          },
          "OptionFile": {
            "external": "azul_dll::desktop::file::OptionFile",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "File"
                }
              }
            ]
          },
          "OptionClipboard": {
            "external": "azul_dll::desktop::app::OptionClipboard",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "Clipboard"
                }
              }
            ]
          },
          "OptionThreadReceiveMsg": {
            "external": "azul_layout::thread::OptionThreadReceiveMsg",
            "enum_fields": [
              {
                "None": {},
                "Some": {
                  "type": "ThreadReceiveMsg"
                }
              }
            ]
          },
          "OptionPercentageValue": {
            "external": "azul_css::props::basic::length::OptionPercentageValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "PercentageValue"
                }
              }
            ]
          },
          "OptionAngleValue": {
            "external": "azul_css::props::basic::angle::OptionAngleValue",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "AngleValue"
                }
              }
            ]
          },
          "OptionRendererOptions": {
            "external": "azul_core::window::OptionRendererOptions",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "RendererOptions"
                }
              }
            ]
          },
          "OptionCallback": {
            "doc": "Optional Callback",
            "external": "azul_layout::callbacks::OptionCallback",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {},
                "Some": {
                  "type": "Callback"
                }
              }
            ]
          },
          "OptionThreadSendMsg": {
            "external": "azul_core::task::OptionThreadSendMsg",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ThreadSendMsg"
                }
              }
            ]
          },
          "OptionLayoutRect": {
            "external": "azul_css::props::basic::geometry::OptionLayoutRect",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "LayoutRect"
                }
              }
            ]
          },
          "OptionRefAny": {
            "external": "azul_core::refany::OptionRefAny",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "RefAny"
                }
              }
            ]
          },
          "OptionInlineText": {
            "external": "azul_core::callbacks::OptionInlineText",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "InlineText"
                }
              }
            ]
          },
          "OptionLayoutPoint": {
            "external": "azul_css::props::basic::geometry::OptionLayoutPoint",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "LayoutPoint"
                }
              }
            ]
          },
          "OptionLayoutSize": {
            "external": "azul_css::props::basic::geometry::OptionLayoutSize",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "LayoutSize"
                }
              }
            ]
          },
          "OptionWindowTheme": {
            "external": "azul_core::window::OptionWindowTheme",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "WindowTheme"
                }
              }
            ]
          },
          "OptionNodeId": {
            "external": "azul_core::styled_dom::OptionNodeId",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "NodeHierarchyItemId"
                }
              }
            ]
          },
          "OptionDomNodeId": {
            "external": "azul_core::dom::OptionDomNodeId",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "DomNodeId"
                }
              }
            ]
          },
          "OptionColorU": {
            "external": "azul_css::props::basic::color::OptionColorU",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ColorU"
                }
              }
            ]
          },
          "OptionRawImage": {
            "external": "azul_core::resources::OptionRawImage",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "RawImage"
                }
              }
            ]
          },
          "OptionSvgDashPattern": {
            "external": "azul_core::svg::OptionSvgDashPattern",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "SvgDashPattern"
                }
              }
            ]
          },
          "OptionWaylandTheme": {
            "external": "azul_core::window::OptionWaylandTheme",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "WaylandTheme"
                }
              }
            ]
          },
          "OptionTaskBarIcon": {
            "external": "azul_core::window::OptionTaskBarIcon",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TaskBarIcon"
                }
              }
            ]
          },
          "OptionHwndHandle": {
            "external": "azul_core::window::OptionHwndHandle",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "*mut c_void"
                }
              }
            ]
          },
          "OptionLogicalPosition": {
            "external": "azul_core::geom::OptionLogicalPosition",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "LogicalPosition"
                }
              }
            ]
          },
          "OptionPhysicalPositionI32": {
            "external": "azul_core::geom::OptionPhysicalPositionI32",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "PhysicalPositionI32"
                }
              }
            ]
          },
          "OptionWindowIcon": {
            "external": "azul_core::window::OptionWindowIcon",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "WindowIcon"
                }
              }
            ]
          },
          "OptionGlContextPtr": {
            "external": "azul_core::gl::OptionGlContextPtr",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "GlContextPtr"
                }
              }
            ]
          },
          "OptionX11Visual": {
            "external": "azul_core::window::OptionX11Visual",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "*const c_void"
                }
              }
            ]
          },
          "OptionI32": {
            "external": "azul_css::corety::OptionI32",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "i32"
                }
              }
            ]
          },
          "OptionF32": {
            "external": "azul_css::corety::OptionF32",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "f32"
                }
              }
            ]
          },
          "OptionMouseCursorType": {
            "external": "azul_core::window::OptionMouseCursorType",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "MouseCursorType"
                }
              }
            ]
          },
          "OptionLogicalSize": {
            "external": "azul_core::geom::OptionLogicalSize",
            "derive": [
              "Copy",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "LogicalSize"
                }
              }
            ]
          },
          "OptionChar": {
            "doc": "Option<char> but the char is a u32, for C FFI stability reasons",
            "external": "azul_core::window::OptionChar",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "u32"
                }
              }
            ]
          },
          "OptionVirtualKeyCode": {
            "external": "azul_core::window::OptionVirtualKeyCode",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "VirtualKeyCode"
                }
              }
            ]
          },
          "OptionDom": {
            "external": "azul_core::dom::OptionDom",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "Dom"
                }
              }
            ]
          },
          "OptionTexture": {
            "external": "azul_core::gl::OptionTexture",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "Texture"
                }
              }
            ]
          },
          "OptionImageMask": {
            "external": "azul_core::resources::OptionImageMask",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "ImageMask"
                }
              }
            ]
          },
          "OptionTabIndex": {
            "external": "azul_core::dom::OptionTabIndex",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "TabIndex"
                }
              }
            ]
          },
          "OptionTagId": {
            "external": "azul_core::styled_dom::OptionTagId",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "AzTagId"
                }
              }
            ]
          },
          "OptionDuration": {
            "external": "azul_core::task::OptionDuration",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "Duration"
                }
              }
            ]
          },
          "OptionInstant": {
            "external": "azul_core::task::OptionInstant",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "Instant"
                }
              }
            ]
          },
          "OptionUsize": {
            "external": "azul_core::gl::OptionUsize",
            "derive": [
              "Copy"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "usize"
                }
              }
            ]
          },
          "OptionU8Vec": {
            "external": "azul_css::OptionU8Vec",
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "U8Vec"
                }
              }
            ]
          },
          "OptionAzString": {
            "external": "azul_css::corety::OptionAzString",
            "derive": [
              "Clone",
              "Serialize",
              "Deserialize"
            ],
            "enum_fields": [
              {
                "None": {}
              },
              {
                "Some": {
                  "type": "AzString"
                }
              }
            ]
          }
        }
      },
      "error": {
        "doc": "Definition of error and `Result<T, E>`  types",
        "classes": {
          "ResultXmlXmlError": {
            "external": "azul_core::xml::ResultXmlXmlError",
            "enum_fields": [
              {
                "Ok": {
                  "type": "Xml"
                }
              },
              {
                "Err": {
                  "type": "XmlError"
                }
              }
            ]
          },
          "ResultRawImageDecodeImageError": {
            "external": "azul_layout::image::decode::ResultRawImageDecodeImageError",
            "enum_fields": [
              {
                "Ok": {
                  "type": "RawImage"
                }
              },
              {
                "Err": {
                  "type": "DecodeImageError"
                }
              }
            ]
          },
          "ResultU8VecEncodeImageError": {
            "external": "azul_layout::image::encode::ResultU8VecEncodeImageError",
            "enum_fields": [
              {
                "Ok": {
                  "type": "U8Vec"
                }
              },
              {
                "Err": {
                  "type": "EncodeImageError"
                }
              }
            ]
          },
          "ResultSvgXmlNodeSvgParseError": {
            "external": "azul_core::svg::ResultSvgXmlNodeSvgParseError",
            "enum_fields": [
              {
                "Ok": {
                  "type": "SvgXmlNode"
                }
              },
              {
                "Err": {
                  "type": "SvgParseError"
                }
              }
            ]
          },
          "ResultSvgSvgParseError": {
            "external": "azul_core::svg::ResultSvgSvgParseError",
            "enum_fields": [
              {
                "Ok": {
                  "type": "Svg"
                }
              },
              {
                "Err": {
                  "type": "SvgParseError"
                }
              }
            ]
          },
          "SvgParseError": {
            "external": "azul_layout::xml::svg::SvgParseError",
            "enum_fields": [
              {
                "NoParserAvailable": {},
                "ElementsLimitReached": {},
                "NotAnUtf8Str": {},
                "MalformedGZip": {},
                "InvalidSize": {},
                "ParsingFailed": {
                  "type": "XmlError"
                }
              }
            ]
          },
          "XmlError": {
            "external": "azul_core::xml::XmlError",
            "enum_fields": [
              {
                "NoParserAvailable": {},
                "InvalidXmlPrefixUri": {
                  "type": "XmlTextPos"
                },
                "UnexpectedXmlUri": {
                  "type": "XmlTextPos"
                },
                "UnexpectedXmlnsUri": {
                  "type": "XmlTextPos"
                },
                "InvalidElementNamePrefix": {
                  "type": "XmlTextPos"
                },
                "DuplicatedNamespace": {
                  "type": "DuplicatedNamespaceError"
                },
                "UnknownNamespace": {
                  "type": "UnknownNamespaceError"
                },
                "UnexpectedCloseTag": {
                  "type": "UnexpectedCloseTagError"
                },
                "UnexpectedEntityCloseTag": {
                  "type": "XmlTextPos"
                },
                "UnknownEntityReference": {
                  "type": "UnknownEntityReferenceError"
                },
                "MalformedEntityReference": {
                  "type": "XmlTextPos"
                },
                "EntityReferenceLoop": {
                  "type": "XmlTextPos"
                },
                "InvalidAttributeValue": {
                  "type": "XmlTextPos"
                },
                "DuplicatedAttribute": {
                  "type": "DuplicatedAttributeError"
                },
                "NoRootNode": {},
                "SizeLimit": {},
                "DtdDetected": {},
                "MalformedHierarchy": {
                  "type": "AzString, AzString",
                  "doc": "Invalid hierarchy close tags, i.e `<app></p></app>`"
                },
                "ParserError": {
                  "type": "XmlParseError"
                },
                "UnclosedRootNode": {},
                "UnexpectedDeclaration": {
                  "type": "XmlTextPos"
                },
                "NodesLimitReached": {},
                "AttributesLimitReached": {},
                "NamespacesLimitReached": {},
                "InvalidName": {
                  "type": "XmlTextPos"
                },
                "NonXmlChar": {
                  "type": "XmlTextPos"
                },
                "InvalidChar": {
                  "type": "XmlTextPos"
                },
                "InvalidChar2": {
                  "type": "XmlTextPos"
                },
                "InvalidString": {
                  "type": "XmlTextPos"
                },
                "InvalidExternalID": {
                  "type": "XmlTextPos"
                },
                "InvalidComment": {
                  "type": "XmlTextPos"
                },
                "InvalidCharacterData": {
                  "type": "XmlTextPos"
                },
                "UnknownToken": {
                  "type": "XmlTextPos"
                },
                "UnexpectedEndOfStream": {}
              }
            ]
          },
          "DuplicatedNamespaceError": {
            "external": "azul_core::xml::DuplicatedNamespaceError",
            "struct_fields": [
              {
                "ns": {
                  "type": "AzString"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "UnknownNamespaceError": {
            "external": "azul_core::xml::UnknownNamespaceError",
            "struct_fields": [
              {
                "ns": {
                  "type": "AzString"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "UnexpectedCloseTagError": {
            "external": "azul_core::xml::UnexpectedCloseTagError",
            "struct_fields": [
              {
                "expected": {
                  "type": "AzString"
                },
                "actual": {
                  "type": "AzString"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "UnknownEntityReferenceError": {
            "external": "azul_core::xml::UnknownEntityReferenceError",
            "struct_fields": [
              {
                "entity": {
                  "type": "AzString"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "DuplicatedAttributeError": {
            "external": "azul_core::xml::DuplicatedAttributeError",
            "struct_fields": [
              {
                "attribute": {
                  "type": "AzString"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "XmlParseError": {
            "external": "azul_core::xml::XmlParseError",
            "enum_fields": [
              {
                "InvalidDeclaration": {
                  "type": "XmlTextError"
                },
                "InvalidComment": {
                  "type": "XmlTextError"
                },
                "InvalidPI": {
                  "type": "XmlTextError"
                },
                "InvalidDoctype": {
                  "type": "XmlTextError"
                },
                "InvalidEntity": {
                  "type": "XmlTextError"
                },
                "InvalidElement": {
                  "type": "XmlTextError"
                },
                "InvalidAttribute": {
                  "type": "XmlTextError"
                },
                "InvalidCdata": {
                  "type": "XmlTextError"
                },
                "InvalidCharData": {
                  "type": "XmlTextError"
                },
                "UnknownToken": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "XmlTextError": {
            "external": "azul_core::xml::XmlTextError",
            "struct_fields": [
              {
                "stream_error": {
                  "type": "XmlStreamError"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "XmlStreamError": {
            "external": "azul_core::xml::XmlStreamError",
            "enum_fields": [
              {
                "UnexpectedEndOfStream": {},
                "InvalidName": {},
                "NonXmlChar": {
                  "type": "NonXmlCharError"
                },
                "InvalidChar": {
                  "type": "InvalidCharError"
                },
                "InvalidCharMultiple": {
                  "type": "InvalidCharMultipleError"
                },
                "InvalidQuote": {
                  "type": "InvalidQuoteError"
                },
                "InvalidSpace": {
                  "type": "InvalidSpaceError"
                },
                "InvalidString": {
                  "type": "InvalidStringError"
                },
                "InvalidReference": {},
                "InvalidExternalID": {},
                "InvalidCommentData": {},
                "InvalidCommentEnd": {},
                "InvalidCharacterData": {}
              }
            ]
          },
          "NonXmlCharError": {
            "external": "azul_core::xml::NonXmlCharError",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "ch": {
                  "type": "u32"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "InvalidCharError": {
            "external": "azul_core::xml::InvalidCharError",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "expected": {
                  "type": "u8"
                },
                "got": {
                  "type": "u8"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "InvalidCharMultipleError": {
            "external": "azul_core::xml::InvalidCharMultipleError",
            "struct_fields": [
              {
                "expected": {
                  "type": "u8"
                },
                "got": {
                  "type": "U8Vec"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "InvalidQuoteError": {
            "external": "azul_core::xml::InvalidQuoteError",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "got": {
                  "type": "u8"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "InvalidSpaceError": {
            "external": "azul_core::xml::InvalidSpaceError",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "got": {
                  "type": "u8"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "InvalidStringError": {
            "external": "azul_core::xml::InvalidStringError",
            "struct_fields": [
              {
                "got": {
                  "type": "AzString"
                },
                "pos": {
                  "type": "XmlTextPos"
                }
              }
            ]
          },
          "XmlTextPos": {
            "external": "azul_core::xml::XmlTextPos",
            "derive": [
              "Copy"
            ],
            "struct_fields": [
              {
                "row": {
                  "type": "u32"
                },
                "col": {
                  "type": "u32"
                }
              }
            ]
          }
        }
      },
      "resources": {
        "doc": "Resource management",
        "classes": {
          "ImageCache": {
            "doc": "Stores the resources for the application, souch as fonts, images and cached texts, also clipboard strings Images and fonts can be references across window contexts (not yet tested, but should work).",
            "external": "azul_core::resources::ImageCache",
            "struct_fields": [
              {
                "image_id_map": {
                  "type": "FastHashMap < AzString , ImageRef >",
                  "doc": "The AzString is the string used in the CSS, i.e. url(\"my_image\") = \"my_image\" -> ImageId(4) NOTE: This is the only map that is modifiable by the user and that has to be manually managed all other maps are library-internal only and automatically delete their resources once they aren't needed anymore"
                }
              }
            ]
          },
          "FontCache": {
            "external": "azul_core::app_resources::FontCache",
            "struct_fields": [
              {
                "ptr": {
                  "type": "*const c_void"
                }
              }
            ]
          }
        }
      }
    }
  }
}