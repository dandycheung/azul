//! solver3/layout_tree.rs
//!
//! Layout tree generation and anonymous box handling

use std::{collections::BTreeMap, sync::Arc};

use azul_core::{
    dom::{NodeId, NodeType},
    styled_dom::StyledDom,
    ui_solver::{FormattingContext, IntrinsicSizes, ResolvedOffsets},
    window::{LogicalPosition, LogicalRect, LogicalSize},
};
use azul_css::{CssProperty, LayoutDebugMessage, LayoutDisplay}; // Added CssProperty

use crate::{
    parsedfont::ParsedFont,
    solver3::{
        geometry::{BoxProps, PositionedRectangle},
        LayoutContext, Result,
    },
    text3::cache::{FontLoaderTrait, ParsedFontTrait, UnifiedLayout},
};

/// Represents the invalidation state of a layout node.
///
/// The states are ordered by severity, allowing for easy "upgrading" of the dirty state.
/// A node marked for `Layout` does not also need to be marked for `Paint`.
///
/// Because this enum derives `PartialOrd` and `Ord`, you can directly compare variants:
///
/// - `DirtyFlag::Layout > DirtyFlag::Paint` is `true`
/// - `DirtyFlag::Paint >= DirtyFlag::None` is `true`
/// - `DirtyFlag::Paint < DirtyFlag::Layout` is `true`
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Default)]
pub enum DirtyFlag {
    /// The node's layout is valid and no repaint is needed. This is the "clean" state.
    #[default]
    None,
    /// The node's geometry is valid, but its appearance (e.g., color) has changed.
    /// Requires a display list update only.
    Paint,
    /// The node's geometry (size or position) is invalid.
    /// Requires a full layout pass and a display list update.
    Layout,
}

/// A hash that represents the content and style of a node PLUS all of its descendants.
/// If two SubtreeHashes are equal, their entire subtrees are considered identical for layout
/// purposes.
#[derive(Debug, Clone, Copy, PartialEq, Eq, Default, Hash)]
pub struct SubtreeHash(pub u64);

/// A layout tree node representing the CSS box model
#[derive(Debug, Clone)]
pub struct LayoutNode {
    /// Reference back to the original DOM node (None for anonymous boxes)
    pub dom_node_id: Option<NodeId>,
    /// Whether this is an anonymous box generated by the layout engine
    pub is_anonymous: bool,
    /// Type of anonymous box (if applicable)
    pub anonymous_type: Option<AnonymousBoxType>,
    /// Children indices in the layout tree
    pub children: Vec<usize>,

    /// Parent index (None for root)
    pub parent: Option<usize>,
    /// Dirty flags to track what needs recalculation.
    pub dirty_flag: DirtyFlag,
    /// The resolved box model properties (margin, border, padding)
    /// in logical pixels.
    pub box_props: BoxProps,
    /// A hash of this node's data and all of its descendants. Used for
    /// fast reconciliation.
    pub subtree_hash: SubtreeHash,

    // --- Layout Results (Cached Values) ---
    pub formatting_context: FormattingContext,
    pub intrinsic_sizes: Option<IntrinsicSizes>,
    pub used_size: Option<LogicalSize>,

    /// The position of this node *relative to its parent's content box*.
    pub relative_position: Option<LogicalPosition>,

    // An absolute position is a final paint-time value and shouldn't be
    // cached on the node itself, as it can change even if the node's
    // layout is clean (e.g., if a sibling changes size). We will calculate
    // it in a separate map.

    // Text integration
    pub inline_layout_result: Option<Arc<UnifiedLayout<ParsedFont>>>,
}

/// Types of anonymous boxes that can be generated
#[derive(Debug, Clone, Copy, PartialEq)]
pub enum AnonymousBoxType {
    /// Anonymous block box wrapping inline content
    InlineWrapper,
    /// Anonymous table wrapper
    TableWrapper,
    /// Anonymous table row group (tbody)
    TableRowGroup,
    /// Anonymous table row
    TableRow,
    /// Anonymous table cell
    TableCell,
}

/// The complete layout tree structure
#[derive(Debug, Clone)]
pub struct LayoutTree {
    /// Arena-style storage for layout nodes
    pub nodes: Vec<LayoutNode>,
    /// Root node index
    pub root: usize,
    /// Mapping from DOM node IDs to layout node indices
    pub dom_to_layout: BTreeMap<NodeId, Vec<usize>>,
}

impl LayoutTree {
    pub fn get(&self, index: usize) -> Option<&LayoutNode> {
        self.nodes.get(index)
    }
    pub fn get_mut(&mut self, index: usize) -> Option<&mut LayoutNode> {
        self.nodes.get_mut(index)
    }
    pub fn root_node(&self) -> &LayoutNode {
        &self.nodes[self.root]
    }

    /// Marks a node and its ancestors as dirty with the given flag.
    ///
    /// The dirty state is "upgraded" if the new flag is more severe than the
    /// existing one (e.g., upgrading from `Paint` to `Layout`). Propagation stops
    /// if an ancestor is already marked with an equal or more severe flag.
    pub fn mark_dirty(&mut self, start_index: usize, flag: DirtyFlag) {
        // A "None" flag is a no-op for marking dirty.
        if flag == DirtyFlag::None {
            return;
        }

        let mut current_index = Some(start_index);
        while let Some(index) = current_index {
            if let Some(node) = self.get_mut(index) {
                // If the node's current flag is already as dirty or dirtier,
                // then all ancestors are also sufficiently marked, so we can stop.
                if node.dirty_flag >= flag {
                    break;
                }

                // Upgrade the flag to the new, more severe state.
                node.dirty_flag = flag;
                current_index = node.parent;
            } else {
                break;
            }
        }
    }

    /// Marks a node and its entire subtree of descendants with the given dirty flag.
    ///
    /// This is used for inherited CSS properties. Each node in the subtree
    /// will be upgraded to at least the new flag's severity.
    pub fn mark_subtree_dirty(&mut self, start_index: usize, flag: DirtyFlag) {
        // A "None" flag is a no-op.
        if flag == DirtyFlag::None {
            return;
        }

        // Using a stack for an iterative traversal to avoid deep recursion on large subtrees.
        let mut stack = vec![start_index];
        while let Some(index) = stack.pop() {
            if let Some(node) = self.get_mut(index) {
                // Only update if the new flag is an upgrade.
                if node.dirty_flag < flag {
                    node.dirty_flag = flag;
                }
                // Add all children to be processed.
                stack.extend_from_slice(&node.children);
            }
        }
    }

    /// Resets the dirty flags of all nodes in the tree to `None` after layout is complete.
    pub fn clear_all_dirty_flags(&mut self) {
        for node in &mut self.nodes {
            node.dirty_flag = DirtyFlag::None;
        }
    }

    /// Get rectangles for each DOM node (for compatibility with solver2)
    pub fn get_rectangles(&self) -> BTreeMap<NodeId, PositionedRectangle> {
        self.nodes
            .iter()
            .filter_map(|node| {
                let dom_id = node.dom_node_id?;
                let size = node.used_size?;
                let pos = node.position?;

                Some((
                    dom_id,
                    PositionedRectangle {
                        bounds: LogicalRect::new(pos, size),
                        // TODO: Calculate proper margin, border, padding
                        margin: ResolvedOffsets::default(),
                        border: ResolvedOffsets::default(),
                        padding: ResolvedOffsets::default(),
                    },
                ))
            })
            .collect()
    }

    /// Extract word positions for text selection/editing
    pub fn get_word_positions(&self) -> BTreeMap<NodeId, Vec<LogicalRect>> {
        self.nodes
            .iter()
            .filter_map(|node| {
                let dom_id = node.dom_node_id?;
                let layout = node.inline_layout_result.as_ref()?;

                // Convert text3 positions to word positions
                let word_rects = extract_word_positions(layout);
                Some((dom_id, word_rects))
            })
            .collect()
    }
}

/// Generate layout tree from styled DOM with proper anonymous box generation
pub fn generate_layout_tree<T: ParsedFontTrait, Q: FontLoaderTrait<T>>(
    ctx: &mut LayoutContext<T, Q>,
) -> Result<LayoutTree> {
    let mut builder = LayoutTreeBuilder::new();
    let root_id = ctx
        .styled_dom
        .root
        .into_crate_internal()
        .unwrap_or(NodeId::ZERO);
    let root_index = builder.process_node(ctx.styled_dom, root_id, None)?;
    builder.set_root(root_index);
    let layout_tree = builder.build();

    ctx.debug_log(&format!(
        "Generated layout tree with {} nodes ({} anonymous)",
        layout_tree.nodes.len(),
        layout_tree.nodes.iter().filter(|n| n.is_anonymous).count()
    ));

    Ok(layout_tree)
}

pub struct LayoutTreeBuilder {
    pub nodes: Vec<LayoutNode>,
    pub root: Option<usize>,
}

// Represents the CSS `display` property for layout purposes
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
enum DisplayType {
    Inline,
    Block,
    Table,
    TableRowGroup,
    TableRow,
    TableCell,
    // Add other types like Flex, Grid, etc. as needed
}

impl LayoutTreeBuilder {
    fn new() -> Self {
        Self {
            nodes: Vec::new(),
            root: None,
        }
    }

    fn get(&self, index: usize) -> Option<&LayoutNode> {
        self.nodes.get(index)
    }
    fn get_mut(&mut self, index: usize) -> Option<&mut LayoutNode> {
        self.nodes.get_mut(index)
    }

    /// Creates a new layout node from scratch using data from the StyledDom.
    fn create_node_from_dom(
        &mut self,
        styled_dom: &StyledDom,
        dom_id: NodeId,
        parent: Option<usize>,
    ) -> Result<usize> {
        let index = self.nodes.len();
        // NOTE: In a full implementation, anonymous box generation would happen here,
        // making this function more complex. This is a simplified 1:1 mapping.
        self.nodes.push(LayoutNode {
            dom_node_id: Some(dom_id),
            parent,
            formatting_context: determine_formatting_context(styled_dom, dom_id),
            box_props: resolve_box_props(styled_dom, dom_id), // Resolve CSS to pixels
            // All other fields are default/None, as they need to be calculated.
            is_anonymous: false,
            anonymous_type: None,
            children: Vec::new(),
            dirty_flag: DirtyFlag::Layout, // New nodes are always dirty
            subtree_hash: SubtreeHash(0),  // Will be calculated and set later
            intrinsic_sizes: None,
            used_size: None,
            relative_position: None,
            inline_layout_result: None,
        });
        if let Some(p) = parent {
            self.nodes[p].children.push(index);
        }
        Ok(index)
    }

    /// Clones a node from the old cache, preserving its calculated layout data.
    fn clone_node_from_old(&mut self, old_node: &LayoutNode, parent: Option<usize>) -> usize {
        let index = self.nodes.len();
        let mut new_node = old_node.clone();
        new_node.parent = parent;
        new_node.children = Vec::new(); // Children will be added as they are reconciled.
        new_node.dirty_flag = DirtyFlag::None; // Cloned nodes are clean by default.
        self.nodes.push(new_node);
        if let Some(p) = parent {
            self.nodes[p].children.push(index);
        }
        index
    }

    fn build(mut self, root_idx: usize) -> LayoutTree {
        self.root = Some(root_idx);
        LayoutTree {
            nodes: self.nodes,
            root: self.root.unwrap(), /* ... */
        }
    }
}

// Determines the display type of a node based on its tag and CSS properties.
fn get_display_type(styled_dom: &StyledDom, node_id: NodeId) -> DisplayType {
    let node_data = &styled_dom.node_data.as_container()[node_id];

    // Check for explicit CSS display property first
    if let Some(display_prop) = node_data.get_style().get(&CssProperty::Display) {
        if let CssProperty::Display(d) = display_prop {
            return match d {
                LayoutDisplay::Table => DisplayType::Table,
                LayoutDisplay::TableRow => DisplayType::TableRow,
                LayoutDisplay::TableCell => DisplayType::TableCell,
                LayoutDisplay::TableRowGroup => DisplayType::TableRowGroup,
                // Add other mappings here...
                _ => DisplayType::Block, // Default for now
            };
        }
    }

    // Fallback to node type if no display property is set
    match node_data.get_node_type() {
        NodeType::Text(_) => DisplayType::Inline,
        NodeType::Table => DisplayType::Table,
        NodeType::Tr => DisplayType::TableRow,
        NodeType::Td | NodeType::Th => DisplayType::TableCell,
        NodeType::TBody | NodeType::THead | NodeType::TFoot => DisplayType::TableRowGroup,
        NodeType::Div
        | NodeType::P
        | NodeType::H1
        | NodeType::H2
        | NodeType::H3
        | NodeType::H4
        | NodeType::H5
        | NodeType::H6 => DisplayType::Block,
        _ => DisplayType::Inline,
    }
}

fn determine_formatting_context(styled_dom: &StyledDom, node_id: NodeId) -> FormattingContext {
    // This should be more sophisticated, establishing table/flex/grid contexts.
    // The current FormattingContext enum is limited to Block and Inline.
    match get_display_type(styled_dom, node_id) {
        DisplayType::Inline => FormattingContext::Inline,
        DisplayType::Block | DisplayType::TableCell => FormattingContext::Block {
            establishes_new_context: true,
        },
        _ => FormattingContext::Block {
            establishes_new_context: false,
        },
    }
}

fn needs_anonymous_block_wrapper(styled_dom: &StyledDom, children: &[NodeId]) -> bool {
    if children.len() <= 1 {
        return false;
    }

    let has_block = children
        .iter()
        .any(|&id| get_display_type(styled_dom, id) == DisplayType::Block);
    let has_inline = children
        .iter()
        .any(|&id| get_display_type(styled_dom, id) == DisplayType::Inline);

    // Need anonymous boxes when mixing block and inline children
    has_block && has_inline
}

fn is_block_level_element(styled_dom: &StyledDom, node_id: NodeId) -> bool {
    get_display_type(styled_dom, node_id) == DisplayType::Block
}

fn extract_word_positions(layout: &UnifiedLayout<ParsedFont>) -> Vec<LogicalRect> {
    // Convert text3 positioned items to word rectangles
    // This is a stub - real implementation would process the text3 results
    Vec::new()
}

fn debug_log(debug_messages: &mut Option<Vec<LayoutDebugMessage>>, message: &str) {
    if let Some(messages) = debug_messages {
        messages.push(LayoutDebugMessage {
            message: message.into(),
            location: "layout_tree".into(),
        });
    }
}
